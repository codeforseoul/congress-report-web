<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>EntityFramework</name>
  </assembly>
  <members>
    <member name="T:System.Data.Entity.CreateDatabaseIfNotExists`1">
      <summary>데이터베이스가 없는 경우에만 데이터베이스를 다시 만들고 선택적으로 데이터베이스를 다시 시드할 IDatabaseInitializer의 구현입니다.데이터베이스를 시드하려면 파생 클래스를 만들고 Seed 메서드를 재정의합니다.</summary>
      <typeparam name="TContext"> 컨텍스트의 형식입니다. </typeparam>
    </member>
    <member name="M:System.Data.Entity.CreateDatabaseIfNotExists`1.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.CreateDatabaseIfNotExists`1" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.CreateDatabaseIfNotExists`1.InitializeDatabase(`0)">
      <summary>     전략을 실행하여 지정된 컨텍스트에 대한 데이터베이스를 초기화합니다. </summary>
      <param name="context"> 컨텍스트입니다. </param>
    </member>
    <member name="M:System.Data.Entity.CreateDatabaseIfNotExists`1.Seed(`0)">
      <summary>시드를 위해 실제로 컨텍스트에 데이터를 추가하도록 재정의되어야 하는 메서드입니다.기본 구현은 아무 작업도 수행하지 않습니다.</summary>
      <param name="context"> 시드할 컨텍스트입니다. </param>
    </member>
    <member name="T:System.Data.Entity.Database">
      <summary>이 클래스의 인스턴스는 <see cref="T:System.Data.Entity.DbContext" /> 개체에서 가져오며 DbContext 또는 연결을 지원하는 실제 데이터베이스를 관리하는 데 사용할 수 있습니다.여기에는 데이터베이스를 만들고 삭제하는 작업과 데이터베이스가 있는지 확인하는 작업이 포함됩니다.데이터베이스를 삭제하고 데이터베이스가 있는지 확인하는 작업은이 클래스의 정적 메서드를 사용하여 전체 컨텍스트 없이 연결만 사용하여 수행할 수 있습니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Database.BeginTransaction">
      <summary>기본 저장소 연결에서 트랜잭션을 시작합니다.</summary>
      <returns>기본 저장소의 트랜잭션 개체에 대한 액세스를 래핑하는 <see cref="T:System.Data.Entity.DbContextTransaction" /> 개체입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Database.BeginTransaction(System.Data.IsolationLevel)">
      <summary>지정된 격리 수준을 사용하여 기본 저장소 연결에서 트랜잭션을 시작합니다.</summary>
      <returns>기본 저장소의 트랜잭션 개체에 대한 액세스를 래핑하는 <see cref="T:System.Data.Entity.DbContextTransaction" /> 개체입니다.</returns>
      <param name="isolationLevel">트랜잭션에서 잠금을 제어하는 데 사용되는 격리 수준입니다.</param>
    </member>
    <member name="P:System.Data.Entity.Database.CommandTimeout">
      <summary>모든 컨텍스트 작업에 대한 제한 시간(초) 값을 가져오거나 설정합니다.기본값은 null입니다. null은 기본 공급자의 기본값이 사용됨을 나타냅니다.</summary>
      <returns>제한 시간(초)이거나, 공급자 기본값을 사용하려면 null입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Database.CompatibleWithModel(System.Boolean)">
      <summary>데이터베이스가 현재 Code First 모델과 호환되는지 여부를 확인합니다.</summary>
      <returns>컨텍스트와 데이터베이스의 모델 해시가 일치하면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="throwIfNoMetadata">true로 설정된 경우 모델 메타데이터가 데이터베이스에 없으면 예외가 throw됩니다.false로 설정된 경우 메타데이터가 없으면 이 메서드는 true를 반환합니다.</param>
    </member>
    <member name="P:System.Data.Entity.Database.Connection">
      <summary>이 컨텍스트에서 사용하는 연결을 반환합니다.이로 인해 연결이 없는 경우 만들어질 수 있습니다.</summary>
      <returns>이 컨텍스트에서 사용하는 연결입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Database.Create">
      <summary>지원하는 컨텍스트에 정의된 모델에 대한 새 데이터베이스를 데이터베이스 서버에 만듭니다.데이터베이스 초기화 전략이 실행되기 전에 이 메서드를 호출하면 해당 전략을 실행할 수 없습니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Database.CreateIfNotExists">
      <summary>동일한 이름의 데이터베이스가 서버에 없는 경우에만 지원하는 컨텍스트에 정의된 모델에 대한 새 데이터베이스를 데이터베이스 서버에 만듭니다. </summary>
      <returns>데이터베이스가 없고 만들어졌으면 true이고, 그렇지 않으면 false입니다. </returns>
    </member>
    <member name="P:System.Data.Entity.Database.DefaultConnectionFactory">
      <summary>데이터베이스 이름이나 연결 문자열에서만 <see cref="T:System.Data.Common.DbConnection" />을 만들 때 사용할 연결 팩터리를 가져옵니다.</summary>
      <returns>연결 팩터리입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Database.Delete">
      <summary>데이터베이스 서버에 데이터베이스가 있으면 데이터베이스를 삭제하고, 그렇지 않으면 아무 작업도 수행하지 않습니다.이니셜라이저 외부에서 이 메서드를 호출하면 데이터베이스가 초기화되지 않은 것으로 표시됩니다.즉, 데이터베이스가 삭제된 후 데이터베이스를 다시 사용하려고 하면 이니셜라이저 집합이 다시 실행되고 일반적으로 데이터베이스를 자동으로 다시 만들려고 합니다.</summary>
      <returns>데이터베이스가 있고 삭제되었으면 true이고, 그렇지 않으면 false입니다. </returns>
    </member>
    <member name="M:System.Data.Entity.Database.Delete(System.Data.Common.DbConnection)">
      <summary>데이터베이스 서버에 데이터베이스가 있으면 데이터베이스를 삭제하고, 그렇지 않으면 아무 작업도 수행하지 않습니다. </summary>
      <returns>데이터베이스가 있고 삭제되었으면 true이고, 그렇지 않으면 false입니다. </returns>
      <param name="existingConnection"> 데이터베이스에 대한 기존 연결입니다. </param>
    </member>
    <member name="M:System.Data.Entity.Database.Delete(System.String)">
      <summary>데이터베이스 서버에 데이터베이스가 있으면 데이터베이스를 삭제하고, 그렇지 않으면 아무 작업도 수행하지 않습니다.데이터베이스에 대한 연결이 <see cref="T:System.Data.Entity.DbContext" /> 클래스에 대한 설명서에 설명된 것과 동일한 방식으로 지정된 데이터베이스 이름이나 연결 문자열을 사용하여 만들어집니다.</summary>
      <returns>데이터베이스가 있고 삭제되었으면 true이고, 그렇지 않으면 false입니다. </returns>
      <param name="nameOrConnectionString">데이터베이스 이름이나 데이터베이스에 대한 연결 문자열입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Database.Equals(System.Object)">
      <summary>지정된 데이터베이스가 현재 데이터베이스와 같은지 여부를 확인합니다.</summary>
      <returns>지정된 데이터베이스가 현재 데이터베이스와 같으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="obj">현재 개체와 비교할 데이터베이스입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior,System.String,System.Object[])">
      <summary>데이터베이스에 대해 지정된 DDL/DML 명령을 실행합니다. </summary>
      <returns>명령을 실행한 후 데이터베이스에서 반환된 결과입니다. </returns>
      <param name="transactionalBehavior">이 명령에 대한 트랜잭션의 생성을 제어합니다.</param>
      <param name="sql">명령 문자열입니다. </param>
      <param name="parameters">명령 문자열에 적용할 매개 변수입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Database.ExecuteSqlCommand(System.String,System.Object[])">
      <summary>데이터베이스에 대해 지정된 DDL/DML 명령을 실행합니다. </summary>
      <returns>명령을 실행한 후 데이터베이스에서 반환된 결과입니다. </returns>
      <param name="sql"> 명령 문자열입니다. </param>
      <param name="parameters"> 명령 문자열에 적용할 매개 변수입니다. </param>
    </member>
    <member name="M:System.Data.Entity.Database.ExecuteSqlCommandAsync(System.Data.Entity.TransactionalBehavior,System.String,System.Object[])">
      <summary>데이터베이스에 대해 지정된 DDL/DML 명령을 비동기적으로 실행합니다. </summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.작업 결과에는 명령을 실행한 후 데이터베이스에서 반환된 결과가 포함됩니다.</returns>
      <param name="transactionalBehavior"> 이 명령에 대한 트랜잭션의 생성을 제어합니다. </param>
      <param name="sql"> 명령 문자열입니다. </param>
      <param name="parameters"> 명령 문자열에 적용할 매개 변수입니다. </param>
    </member>
    <member name="M:System.Data.Entity.Database.ExecuteSqlCommandAsync(System.Data.Entity.TransactionalBehavior,System.String,System.Threading.CancellationToken,System.Object[])">
      <summary>데이터베이스에 대해 지정된 DDL/DML 명령을 비동기적으로 실행합니다. </summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.작업 결과에는 명령을 실행한 후 데이터베이스에서 반환된 결과가 포함됩니다.</returns>
      <param name="transactionalBehavior"> 이 명령에 대한 트랜잭션의 생성을 제어합니다. </param>
      <param name="sql"> 명령 문자열입니다. </param>
      <param name="cancellationToken">작업이 완료되기를 기다리는 동안 관찰할 <see cref="T:System.Threading.CancellationToken" />입니다. </param>
      <param name="parameters"> 명령 문자열에 적용할 매개 변수입니다. </param>
    </member>
    <member name="M:System.Data.Entity.Database.ExecuteSqlCommandAsync(System.String,System.Object[])">
      <summary>데이터베이스에 대해 지정된 DDL/DML 명령을 비동기적으로 실행합니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.작업 결과에는 명령을 실행한 후 데이터베이스에서 반환된 결과가 포함됩니다.</returns>
      <param name="sql"> 명령 문자열입니다. </param>
      <param name="parameters"> 명령 문자열에 적용할 매개 변수입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Database.ExecuteSqlCommandAsync(System.String,System.Threading.CancellationToken,System.Object[])">
      <summary>데이터베이스에 대해 지정된 DDL/DML 명령을 비동기적으로 실행합니다. </summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.작업 결과에는 명령을 실행한 후 데이터베이스에서 반환된 결과가 포함됩니다.</returns>
      <param name="sql"> 명령 문자열입니다. </param>
      <param name="cancellationToken">작업이 완료되기를 기다리는 동안 관찰할 <see cref="T:System.Threading.CancellationToken" />입니다. </param>
      <param name="parameters">명령 문자열에 적용할 매개 변수입니다. </param>
    </member>
    <member name="M:System.Data.Entity.Database.Exists">
      <summary>데이터베이스가 서버에 있는지 여부를 확인합니다. </summary>
      <returns>데이터베이스가 있으면 true이고, 그렇지 않으면 false입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Database.Exists(System.Data.Common.DbConnection)">
      <summary>데이터베이스가 서버에 있는지 여부를 확인합니다.</summary>
      <returns>데이터베이스가 있으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="existingConnection"> 데이터베이스에 대한 기존 연결입니다. </param>
    </member>
    <member name="M:System.Data.Entity.Database.Exists(System.String)">
      <summary>데이터베이스가 서버에 있는지 여부를 확인합니다.데이터베이스에 대한 연결이 <see cref="T:System.Data.Entity.DbContext" /> 클래스에 대한 설명서에 설명된 것과 동일한 방식으로 지정된 데이터베이스 이름이나 연결 문자열을 사용하여 만들어집니다.</summary>
      <returns>데이터베이스가 있으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="nameOrConnectionString"> 데이터베이스 이름이나 데이터베이스에 대한 연결 문자열입니다. </param>
    </member>
    <member name="M:System.Data.Entity.Database.GetHashCode">
      <summary>이 데이터베이스의 해시 함수를 반환합니다.</summary>
      <returns>이 데이터베이스의 해시 함수입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Database.GetType">
      <summary>현재 데이터베이스 형식을 반환합니다.</summary>
      <returns>현재 데이터베이스의 형식입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Database.Initialize(System.Boolean)">
      <summary>이 컨텍스트에서 등록된 <see cref="T:System.Data.Entity.IDatabaseInitializer`1" />를 실행합니다.<paramref name="force" />를 true로 설정한 경우 이니셜라이저가 이전의 실행 여부와 관계없이 실행됩니다.이는 데이터베이스가 응용 프로그램이 실행되는 동안 삭제되고 다시 초기화되어야 하는 경우에 유용할 수 있습니다.<paramref name="force" />가 false로 설정된 경우에는 이니셜라이저가 이 응용 프로그램 도메인의 연결, 모델 및 이 컨텍스트에 대해 이미 실행되지 않은 경우에만 실행됩니다.일반적으로 이 메서드는 작업이 트랜잭션의 일부인 경우와 같이 작업을 시작하기 전에 데이터베이스가 만들어지고 시드되도록 해야 하는 경우(지연되면 문제가 발생함)에 사용됩니다.</summary>
      <param name="force">true로 설정되면 이니셜라이저가 이미 실행된 경우에도 실행됩니다. </param>
    </member>
    <member name="P:System.Data.Entity.Database.Log"></member>
    <member name="M:System.Data.Entity.Database.SetInitializer``1(System.Data.Entity.IDatabaseInitializer{``0})">
      <summary>지정된 컨텍스트 형식에 사용할 데이터베이스 이니셜라이저를 설정합니다.데이터베이스 이니셜라이저는 지정된 <see cref="T:System.Data.Entity.DbContext" /> 형식이 처음으로 데이터베이스에 액세스하는 데 사용될 때 호출됩니다.Code First 컨텍스트에 대한 기본 전략은 <see cref="T:System.Data.Entity.CreateDatabaseIfNotExists`1" />의 인스턴스입니다.</summary>
      <param name="strategy"> 사용할 이니셜라이저이거나, 지정된 컨텍스트 형식에 초기화를 사용하지 않도록 설정하려면 null입니다. </param>
      <typeparam name="TContext"> 컨텍스트의 형식입니다. </typeparam>
    </member>
    <member name="M:System.Data.Entity.Database.SqlQuery``1(System.String,System.Object[])">
      <summary>지정된 제네릭 형식의 요소를 반환할 원시 SQL 쿼리를 만듭니다.이 형식은 쿼리에서 반환된 열의 이름과 일치하는 속성이 있는 형식이거나 단순한 기본 형식일 수 있습니다.이 형식은 엔터티 형식일 필요가 없습니다.이 쿼리의 결과는 반환된 개체의 형식이 엔터티 형식인 경우에도 컨텍스트에서 추적되지 않습니다.<see cref="M:System.Data.Entity.DbSet`1.SqlQuery(System.String,System.Object[])" /> 메서드를 사용하여 컨텍스트에서 추적된 엔터티를 반환할 수 있습니다.</summary>
      <returns>열거될 때 쿼리를 실행할 <see cref="T:System.Data.Entity.Infrastructure.DbRawSqlQuery`1" /> 개체입니다. </returns>
      <param name="sql"> SQL 쿼리 문자열입니다. </param>
      <param name="parameters"> SQL 쿼리 문자열에 적용할 매개 변수입니다. </param>
      <typeparam name="TElement"> 쿼리에서 반환된 개체의 형식입니다. </typeparam>
    </member>
    <member name="M:System.Data.Entity.Database.SqlQuery(System.Type,System.String,System.Object[])">
      <summary>지정된 형식의 요소를 반환할 원시 SQL 쿼리를 만듭니다.이 형식은 쿼리에서 반환된 열의 이름과 일치하는 속성이 있는 형식이거나 단순한 기본 형식일 수 있습니다.이 형식은 엔터티 형식일 필요가 없습니다.이 쿼리의 결과는 반환된 개체의 형식이 엔터티 형식인 경우에도 컨텍스트에서 추적되지 않습니다.<see cref="M:System.Data.Entity.DbSet.SqlQuery(System.String,System.Object[])" /> 메서드를 사용하여 컨텍스트에서 추적된 엔터티를 반환할 수 있습니다.</summary>
      <returns>열거될 때 쿼리를 실행할 <see cref="T:System.Data.Entity.Infrastructure.DbRawSqlQuery" /> 개체입니다. </returns>
      <param name="elementType">쿼리에서 반환된 개체의 형식입니다. </param>
      <param name="sql"> SQL 쿼리 문자열입니다. </param>
      <param name="parameters"> SQL 쿼리 문자열에 적용할 매개 변수입니다. </param>
    </member>
    <member name="M:System.Data.Entity.Database.ToString">
      <summary>데이터베이스의 문자열 표현을 반환합니다.</summary>
      <returns>데이터베이스의 문자열 표현입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Database.UseTransaction(System.Data.Common.DbTransaction)">
      <summary>Entity Framework가 외부 트랜잭션 내에서 명령을 실행하도록 하려는 경우 사용자가 <see cref="T:System.Data.Entity.Database" /> 개체의 외부에서 만들어진 데이터베이스 트랜잭션을 전달할 수 있도록 합니다.또는 해당 트랜잭션에 대한 Entity Framework의 정보를 지우려면 null을 전달합니다.</summary>
      <param name="transaction">외부 트랜잭션입니다.</param>
      <exception cref="T:System.InvalidOperationException">트랜잭션이 이미 완료된 경우 throw됩니다.</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Data.Entity.Database" /> 개체에 연결된 연결이 <see cref="T:System.Transactions.TransactionScope" /> 트랜잭션에 이미 등록된 경우 throw됩니다.</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Data.Entity.Database" /> 개체에 연결된 연결이 트랜잭션에 이미 참여하고 있는 경우 throw됩니다.</exception>
      <exception cref="T:System.InvalidOperationException">트랜잭션에 연결된 연결이 Entity Framework의 연결과 일치하지 않는 경우 throw됩니다.</exception>
    </member>
    <member name="T:System.Data.Entity.DbConfiguration">
      <summary>이 클래스에서 파생된 클래스는 <see cref="T:System.Data.Entity.DbContext" />에서 파생된 클래스와 동일한 어셈블리에 배치하여 응용 프로그램에 대한 Entity Framework 구성을 정의할 수 있습니다.파생 형식의 생성자에서 이 클래스의 protected 메서드를 호출하고 protected 속성을 설정하여 구성을 설정합니다.사용할 형식을 응용 프로그램의 구성 파일에 등록할 수도 있습니다.Entity Framework 구성에 대한 자세한 내용은 http://go.microsoft.com/fwlink/?LinkId=260883을 참조하십시오.</summary>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.DbConfiguration" />에서 파생된 모든 클래스는 이 생성자를 호출하는 매개 변수 없는 공용 생성자가 있어야 합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.AddDefaultResolver(System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver)">
      <summary>
        <see cref="T:System.Data.Entity.DbConfiguration" />에서 파생된 클래스의 생성자에서 이 메서드를 호출하여 Entity Framework에 필요한 종속성 확인에 사용되는 확인자의 책임 연쇄에 <see cref="T:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver" /> 인스턴스를 추가합니다.AddDependencyResolver 메서드와 달리, 이 메서드는 다른 모든 확인자가 확인하지 못한 종속성을 확인할 경우에만 사용되도록 확인자를 책임 연쇄의 맨 마지막에 배치합니다.</summary>
      <param name="resolver">추가할 확인자입니다.</param>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.AddDependencyResolver(System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver)">
      <summary>
        <see cref="T:System.Data.Entity.DbConfiguration" />에서 파생된 클래스의 생성자에서 이 메서드를 호출하여 Entity Framework에 필요한 종속성 확인에 사용되는 확인자의 책임 연쇄에 <see cref="T:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver" /> 인스턴스를 추가합니다.</summary>
      <param name="resolver">추가할 확인자입니다.</param>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.AddInterceptor(System.Data.Entity.Infrastructure.Interception.IDbInterceptor)">
      <summary>
        <see cref="T:System.Data.Entity.DbConfiguration" />에서 파생된 클래스의 생성자에서 이 메서드를 호출하여 응용 프로그램 시작 시 <see cref="T:System.Data.Entity.Infrastructure.Interception.IDbInterceptor" />를 등록합니다.인터셉터는 <see cref="T:System.Data.Entity.Infrastructure.Interception.DbInterception" />을 사용하여 언제든지 추가하고 제거할 수도 있습니다.</summary>
      <param name="interceptor">등록할 인터셉터입니다.</param>
    </member>
    <member name="P:System.Data.Entity.DbConfiguration.DependencyResolver">
      <summary>Entity Framework에서 서비스 종속성 확인에 사용될 <see cref="T:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver" />를 가져옵니다.</summary>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.Equals(System.Object)"></member>
    <member name="M:System.Data.Entity.DbConfiguration.GetHashCode"></member>
    <member name="M:System.Data.Entity.DbConfiguration.GetType">
      <summary>현재 인스턴스의 <see cref="T:System.Type" />을 가져옵니다.</summary>
      <returns>현재 인스턴스의 정확한 런타임 형식입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.LoadConfiguration(System.Reflection.Assembly)">
      <summary>지정된 어셈블리에서 <see cref="T:System.Data.Entity.DbConfiguration" />을 찾아 로드하려고 시도합니다.올바른 구성이 응용 프로그램 도메인에 로드되도록 하기 위해 도구에서 이 메서드를 사용할 수 있습니다.도구에서는 <see cref="P:System.Data.Entity.DbConfiguration.DependencyResolver" /> 속성에 액세스하기 전에 이 메서드를 사용해야 합니다.도구에서 <see cref="T:System.Data.Entity.DbContext" /> 형식이 사용되는 것을 인식하는 경우 올바른 구성을 찾을 가능성을 높이는 <see cref="M:System.Data.Entity.DbConfiguration.LoadConfiguration(System.Type)" /> 메서드를 사용해야 합니다.</summary>
      <param name="assemblyHint">구성 검색에 사용할 <see cref="T:System.Reflection.Assembly" />입니다.</param>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.LoadConfiguration(System.Type)">
      <summary>지정된 <see cref="T:System.Data.Entity.DbContext" /> 형식과 연결된 <see cref="T:System.Data.Entity.DbConfiguration" />을 찾아 로드하려고 시도합니다.올바른 구성이 응용 프로그램 도메인에 로드되도록 하기 위해 도구에서 이 메서드를 사용할 수 있습니다.도구에서는 <see cref="P:System.Data.Entity.DbConfiguration.DependencyResolver" /> 속성에 액세스하기 전에 이 메서드를 사용해야 합니다.</summary>
      <param name="contextType">구성 검색에 사용할 <see cref="T:System.Data.Entity.DbContext" /> 형식입니다.</param>
    </member>
    <member name="E:System.Data.Entity.DbConfiguration.Loaded">
      <summary>DbConfiguration이 생성되어 사용 준비를 위해 잠기기 직전 EF 초기화 과정에서 발생합니다.이 이벤트를 사용하여 구성이 잠기기 전에 등록된 서비스를 검사하고 재정의합니다.도구에서 런타임에 사용되는 동일한 구성을 찾지 못하게 할 수도 있으므로 이 이벤트는 주의하여 사용해야 합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.MemberwiseClone">
      <summary>현재 <see cref="T:System.Object" />의 단순 복사본을 만듭니다.</summary>
      <returns>현재 <see cref="T:System.Object" />의 단순 복사본입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.SetConfiguration(System.Data.Entity.DbConfiguration)">
      <summary>이 응용 프로그램 도메인에 대한 <see cref="T:System.Data.Entity.DbConfiguration" />의 Singleton 인스턴스입니다.Entity Framework 기능이 사용되기 전 응용 프로그램이 시작할 때 설정될 수 있으며, Entity Framework 기능이 사용된 후에는 읽기 전용으로 처리되어야 합니다.</summary>
      <param name="configuration">
        <see cref="T:System.Data.Entity.DbConfiguration" />의 인스턴스입니다.</param>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.SetDatabaseInitializer``1(System.Data.Entity.IDatabaseInitializer{``0})">
      <summary>
        <see cref="T:System.Data.Entity.DbConfiguration" />에서 파생된 클래스의 생성자에서 이 메서드를 호출하여 지정된 컨텍스트 형식에 대해 사용하도록 데이터베이스 이니셜라이저를 설정합니다.데이터베이스 이니셜라이저는 지정된 <see cref="T:System.Data.Entity.DbContext" /> 형식이 처음으로 데이터베이스에 액세스하는 데 사용될 때 호출됩니다.Code First 컨텍스트에 대한 기본 전략은 <see cref="T:System.Data.Entity.CreateDatabaseIfNotExists`1" />의 인스턴스입니다.</summary>
      <param name="initializer">사용할 이니셜라이저이거나, 지정된 컨텍스트 형식에 초기화를 사용하지 않도록 설정하려면 null입니다.</param>
      <typeparam name="TContext">컨텍스트의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.SetDatabaseLogFormatter(System.Func{System.Data.Entity.DbContext,System.Action{System.String},System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter})">
      <summary>
        <see cref="T:System.Data.Entity.DbConfiguration" />에서 파생된 클래스의 생성자에서 이 메서드를 호출하여 <see cref="P:System.Data.Entity.Database.Log" />와 함께 사용할 <see cref="T:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter" />의 형식에 대한 팩터리를 설정합니다.</summary>
      <param name="logFormatterFactory">포맷터 인스턴스를 만들 대리자입니다.</param>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.SetDefaultConnectionFactory(System.Data.Entity.Infrastructure.IDbConnectionFactory)">
      <summary>지정되거나 <see cref="T:System.Data.Entity.DbContext" />에 의해 검색될 수 있는 다른 연결 문자열 또는 연결이 없을 경우 규칙에 따라 연결을 만드는 데 사용되는 <see cref="T:System.Data.Entity.Infrastructure.IDbConnectionFactory" />를 설정합니다.EntityFramework NuGet 패키지가 설치될 때마다 app.config 또는 web.config 파일에 기본 연결 팩터리가 설정됩니다.모든 구성 파일 설정에 대해 구성 파일에 설정된 기본 연결 팩터리가 이 메서드로 만든 모든 설정보다 우선합니다.따라서 이 메서드를 호출하기 전에 구성 파일에서 설정을 제거해야 효력이 발생됩니다.<see cref="T:System.Data.Entity.DbConfiguration" />에서 파생된 클래스의 생성자에서 이 메서드를 호출하여 사용 중인 기본 연결 팩터리를 변경합니다.</summary>
      <param name="connectionFactory">연결 팩터리입니다.</param>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.SetDefaultHistoryContext(System.Func{System.Data.Common.DbConnection,System.String,System.Data.Entity.Migrations.History.HistoryContext})">
      <summary>
        <see cref="T:System.Data.Entity.DbConfiguration" />에서 파생된 클래스의 생성자에서 이 메서드를 호출하여 <see cref="T:System.Data.Entity.Migrations.DbMigrationsConfiguration" />에 대한 기본 <see cref="T:System.Data.Entity.Migrations.History.HistoryContext" />를 만드는 데 사용되는 <see cref="T:System.Func`3" /> 대리자를 설정합니다.이 기본 팩터리는 <see cref="T:System.Data.Entity.Migrations.DbMigrationsConfiguration" />에서 팩터리가 명시적으로 설정되어 있지 않고 <see cref="M:System.Data.Entity.DbConfiguration.SetHistoryContext(System.String,System.Func{System.Data.Common.DbConnection,System.String,System.Data.Entity.Migrations.History.HistoryContext})" /> 메서드를 사용할 때 공급자에 대해 등록된 팩터리가 없는 경우에만 사용됩니다.</summary>
      <param name="factory">기본 스키마를 나타내는 지정된 <see cref="T:System.Data.Common.DbConnection" /> 및 <see cref="T:System.String" />에 대한 <see cref="T:System.Data.Entity.Migrations.History.HistoryContext" /> 인스턴스를 만드는 데 사용할 팩터리입니다.</param>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.SetDefaultSpatialServices(System.Data.Entity.Spatial.DbSpatialServices)">
      <summary>
        <see cref="T:System.Data.Entity.DbConfiguration" />에서 파생된 클래스의 생성자에서 이 메서드를 호출하여 공간 공급자가 필요하고 공급자별 공간 공급자를 찾을 수 없을 때마다 사용될 <see cref="T:System.Data.Entity.Spatial.DbSpatialServices" />의 전역 인스턴스를 설정합니다.일반적으로 공급자별 공간 공급자는 <see cref="T:System.Data.Entity.Core.Common.DbProviderServices" /> 구현에서 가져옵니다. 이 구현은 공급자 고정 이름을 키로 전달하여 <see cref="T:System.Data.Entity.Spatial.DbSpatialServices" />에 대한 서비스를 확인함으로써 반환됩니다.그러나 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 및 <see cref="T:System.Data.Entity.Spatial.DbGeography" />의 독립 실행형 인스턴스는 사용할 공간 공급자를 알 수 없으므로 이 방법을 사용할 수 없습니다.따라서 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 및 <see cref="T:System.Data.Entity.Spatial.DbGeography" />의 독립 실행형 인스턴스를 만들 때는 전역 공간 공급자가 항상 사용됩니다.</summary>
      <param name="spatialProvider">공간 공급자입니다.</param>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.SetExecutionStrategy(System.String,System.Func{System.Data.Entity.Infrastructure.IDbExecutionStrategy})">
      <summary>
        <see cref="T:System.Data.Entity.DbConfiguration" />에서 파생된 클래스의 생성자에서 이 메서드를 호출하여 지정된 고정 이름이 나타내는 공급자와 함께 사용하도록 <see cref="T:System.Data.Entity.Infrastructure.IDbExecutionStrategy" />를 등록합니다.</summary>
      <param name="providerInvariantName">이 실행 전략이 사용될 ADO.NET 연결의 형식을 나타내는 ADO.NET 공급자 고정 이름입니다.</param>
      <param name="getExecutionStrategy">실행 전략의 새 인스턴스를 반환하는 함수입니다.</param>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.SetExecutionStrategy(System.String,System.Func{System.Data.Entity.Infrastructure.IDbExecutionStrategy},System.String)">
      <summary>
        <see cref="T:System.Data.Entity.DbConfiguration" />에서 파생된 클래스의 생성자에서 이 메서드를 호출하여 지정된 서버 이름에 대해 지정된 고정 이름이 나타내는 공급자와 함께 사용하도록 <see cref="T:System.Data.Entity.Infrastructure.IDbExecutionStrategy" />를 등록합니다.</summary>
      <param name="providerInvariantName">이 실행 전략이 사용될 ADO.NET 연결의 형식을 나타내는 ADO.NET 공급자 고정 이름입니다.</param>
      <param name="getExecutionStrategy">실행 전략의 새 인스턴스를 반환하는 함수입니다.</param>
      <param name="serverName">연결 문자열의 서버 이름과 일치하는 문자열입니다.</param>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.SetHistoryContext(System.String,System.Func{System.Data.Common.DbConnection,System.String,System.Data.Entity.Migrations.History.HistoryContext})">
      <summary>
        <see cref="T:System.Data.Entity.DbConfiguration" />에서 파생된 클래스의 생성자에서 이 메서드를 호출하여 명시적 팩터리가 설정되지 않은 <see cref="T:System.Data.Entity.Migrations.DbMigrationsConfiguration" />의 경우 지정된 공급자에 대해 사용자 지정된 <see cref="T:System.Data.Entity.Migrations.History.HistoryContext" />의 생성을 허용하는 <see cref="T:System.Func`3" /> 대리자를 설정합니다.</summary>
      <param name="providerInvariantName">이 생성기를 사용해야 할 ADO.NET 공급자의 고정 이름입니다.</param>
      <param name="factory">기본 스키마를 나타내는 지정된 <see cref="T:System.Data.Common.DbConnection" /> 및 <see cref="T:System.String" />에 대한 <see cref="T:System.Data.Entity.Migrations.History.HistoryContext" /> 인스턴스를 만드는 데 사용할 팩터리입니다.</param>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.SetManifestTokenResolver(System.Data.Entity.Infrastructure.IManifestTokenResolver)">
      <summary>
        <see cref="T:System.Data.Entity.DbConfiguration" />에서 파생된 클래스의 생성자에서 이 메서드를 호출하여 연결을 열 필요 없이 연결에서 공급자 매니페스트 토큰을 가져오도록 허용하는 <see cref="T:System.Data.Entity.Infrastructure.IManifestTokenResolver" />의 구현을 설정합니다.</summary>
      <param name="resolver">매니페스트 토큰 확인자입니다.</param>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.SetMigrationSqlGenerator(System.String,System.Func{System.Data.Entity.Migrations.Sql.MigrationSqlGenerator})">
      <summary>
        <see cref="T:System.Data.Entity.DbConfiguration" />에서 파생된 클래스의 생성자에서 이 메서드를 호출하여 지정된 고정 이름이 나타내는 공급자와 함께 사용하도록 <see cref="T:System.Data.Entity.Migrations.Sql.MigrationSqlGenerator" />를 등록합니다.</summary>
      <param name="providerInvariantName">이 생성기를 사용해야 할 ADO.NET 공급자의 고정 이름입니다.</param>
      <param name="sqlGenerator">호출할 때마다 SQL 생성기의 새 인스턴스를 반환하는 대리자입니다.</param>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.SetModelCacheKey(System.Func{System.Data.Entity.DbContext,System.Data.Entity.Infrastructure.IDbModelCacheKey})">
      <summary>
        <see cref="T:System.Data.Entity.DbConfiguration" />에서 파생된 클래스의 생성자에서 이 메서드를 호출하여 <see cref="T:System.Data.Entity.DbContext" />에 숨어 있는 모델을 캐시하는 데 사용되는 키를 변경하도록 허용하는 모델 캐시 키 팩터리로 <see cref="T:System.Func`2" />를 설정합니다.</summary>
      <param name="keyFactory">키 팩터리입니다.</param>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.SetPluralizationService(System.Data.Entity.Infrastructure.Pluralization.IPluralizationService)">
      <summary>
        <see cref="T:System.Data.Entity.DbConfiguration" />에서 파생된 클래스의 생성자에서 이 메서드를 호출하여 복수 적용 서비스를 설정합니다.</summary>
      <param name="pluralizationService">사용할 복수 적용 서비스입니다.</param>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.SetProviderFactory(System.String,System.Data.Common.DbProviderFactory)">
      <summary>
        <see cref="T:System.Data.Entity.DbConfiguration" />에서 파생된 클래스의 생성자에서 이 메서드를 호출하여 ADO.NET 공급자를 등록합니다.</summary>
      <param name="providerInvariantName">이 공급자가 사용될 ADO.NET 연결의 형식을 나타내는 ADO.NET 공급자 고정 이름입니다.</param>
      <param name="providerFactory">공급자 인스턴스입니다.</param>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.SetProviderFactoryResolver(System.Data.Entity.Infrastructure.IDbProviderFactoryResolver)">
      <summary>
        <see cref="T:System.Data.Entity.DbConfiguration" />에서 파생된 클래스의 생성자에서 이 메서드를 호출하여 기본 구현으로 충분하지 않을 경우 <see cref="T:System.Data.Common.DbConnection" />에서 <see cref="T:System.Data.Common.DbProviderFactory" />를 가져올 수 있도록 허용하는 <see cref="T:System.Data.Entity.Infrastructure.IDbProviderFactoryResolver" />의 구현을 설정합니다.</summary>
      <param name="providerFactoryResolver">공급자 팩터리 서비스입니다.</param>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.SetProviderServices(System.String,System.Data.Entity.Core.Common.DbProviderServices)">
      <summary>
        <see cref="T:System.Data.Entity.DbConfiguration" />에서 파생된 클래스의 생성자에서 이 메서드를 호출하여 Entity Framework 공급자를 등록합니다.</summary>
      <param name="providerInvariantName">이 공급자가 사용될 ADO.NET 연결의 형식을 나타내는 ADO.NET 공급자 고정 이름입니다.</param>
      <param name="provider">공급자 인스턴스입니다.</param>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.SetSpatialServices(System.Data.Entity.Infrastructure.DbProviderInfo,System.Data.Entity.Spatial.DbSpatialServices)">
      <summary>
        <see cref="T:System.Data.Entity.DbConfiguration" />에서 파생된 클래스의 생성자에서 이 메서드를 호출하여 특정 공급자와 공급자 매니페스트 토큰에 사용할 <see cref="T:System.Data.Entity.Spatial.DbSpatialServices" />의 구현을 설정합니다.</summary>
      <param name="key">이 공간 공급자가 사용될 ADO.NET 연결의 형식을 나타내는 <see cref="T:System.Data.Entity.Infrastructure.DbProviderInfo" />입니다.</param>
      <param name="spatialProvider">공간 공급자입니다.</param>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.SetSpatialServices(System.String,System.Data.Entity.Spatial.DbSpatialServices)">
      <summary>
        <see cref="T:System.Data.Entity.DbConfiguration" />에서 파생된 클래스의 생성자에서 이 메서드를 호출하여 매니페스트 토큰이 포함된 특정 공급자에 사용할 <see cref="T:System.Data.Entity.Spatial.DbSpatialServices" />의 구현을 설정합니다.</summary>
      <param name="providerInvariantName">이 공간 공급자가 사용될 ADO.NET 연결의 형식을 나타내는 ADO.NET 공급자 고정 이름입니다.</param>
      <param name="spatialProvider">공간 공급자입니다.</param>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.ToString"></member>
    <member name="T:System.Data.Entity.DbConfigurationTypeAttribute">
      <summary>이 특성은 응용 프로그램에 대한 코드 기반 구성을 나타내는 <see cref="T:System.Data.Entity.DbConfiguration" />의 서브클래스가 컨텍스트 형식과 다른 어셈블리에 있음을 나타내기 위해 <see cref="T:System.Data.Entity.DbContext" />의 서브클래스에 배치할 수 있습니다.</summary>
    </member>
    <member name="M:System.Data.Entity.DbConfigurationTypeAttribute.#ctor(System.String)">
      <summary>지정된 정규화된 어셈블리 이름이 나타내는 <see cref="T:System.Data.Entity.DbConfiguration" />의 서브클래스가 이 응용 프로그램의 코드 기반 구성에 대해 사용되어야 함을 나타냅니다.</summary>
      <param name="configurationTypeName">사용할 <see cref="T:System.Data.Entity.DbConfiguration" /> 형식입니다.</param>
    </member>
    <member name="M:System.Data.Entity.DbConfigurationTypeAttribute.#ctor(System.Type)">
      <summary>지정된 <see cref="T:System.Data.Entity.DbConfiguration" />의 서브클래스가 이 응용 프로그램의 코드 기반 구성에 대해 사용되어야 함을 나타냅니다.</summary>
      <param name="configurationType">사용할 <see cref="T:System.Data.Entity.DbConfiguration" /> 형식입니다.</param>
    </member>
    <member name="P:System.Data.Entity.DbConfigurationTypeAttribute.ConfigurationType">
      <summary>이 응용 프로그램의 코드 기반 구성에 대해 사용되어야 하는 <see cref="T:System.Data.Entity.DbConfiguration" />의 서브클래스를 가져옵니다.</summary>
    </member>
    <member name="T:System.Data.Entity.DbContext">
      <summary>DbContext 인스턴스는 데이터베이스에서 쿼리하고 한 단위로 저장소에 기록되도록 변경 내용을 함께 그룹화하는 데 사용할 수 있는 작업 단위 및 리포지토리 패턴의 조합을 나타냅니다.DbContext는 ObjectContext와 개념적으로 유사합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.DbContext.#ctor">
      <summary>연결이 만들어질 데이터베이스의 이름을 만들기 위해 규칙을 사용하여 새 컨텍스트 인스턴스를 생성합니다.규칙에 따라 이 이름은 파생 컨텍스트 클래스의 전체 이름(네임스페이스 + 클래스 이름)입니다.이 생성자가 연결을 만드는 데 사용되는 방식을 알아보려면 클래스 설명을 참조하십시오.</summary>
    </member>
    <member name="M:System.Data.Entity.DbContext.#ctor(System.Data.Common.DbConnection,System.Boolean)">
      <summary>데이터베이스에 연결하기 위해 기존 연결을 사용하여 새 컨텍스트 인스턴스를 생성합니다.contextOwnsConnection이 false인 경우 컨텍스트가 삭제될 때 연결은 삭제되지 않습니다.</summary>
      <param name="existingConnection"> 새 컨텍스트에 사용할 기존 연결입니다. </param>
      <param name="contextOwnsConnection">true로 설정되면 컨텍스트가 삭제될 때 연결이 삭제되고, 그렇지 않으면 호출자가 연결을 삭제해야 합니다. </param>
    </member>
    <member name="M:System.Data.Entity.DbContext.#ctor(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.DbCompiledModel,System.Boolean)">
      <summary>데이터베이스에 연결하기 위해 기존 연결을 사용하여 새 컨텍스트 인스턴스를 생성하고 지정된 모델에서 초기화합니다.contextOwnsConnection이false인 경우 컨텍스트가 삭제될 때 연결은 삭제되지 않습니다.</summary>
      <param name="existingConnection">새 컨텍스트에 사용할 기존 연결입니다.</param>
      <param name="model">이 컨텍스트를 지원할 모델입니다.</param>
      <param name="contextOwnsConnection">true로 설정되면 컨텍스트가 삭제될 때 연결이 삭제되고, 그렇지 않으면 호출자가 연결을 삭제해야 합니다.</param>
    </member>
    <member name="M:System.Data.Entity.DbContext.#ctor(System.Data.Entity.Core.Objects.ObjectContext,System.Boolean)">
      <summary>기존 ObjectContext 주위에 새 컨텍스트 인스턴스를 생성합니다.    </summary>
      <param name="objectContext">새 컨텍스트로 래핑할 기존 ObjectContext입니다.</param>
      <param name="dbContextOwnsObjectContext">true로 설정되면 DbContext가 삭제될 때 ObjectContext가 삭제되고, 그렇지 않으면 호출자가 연결을 삭제해야 합니다.</param>
    </member>
    <member name="M:System.Data.Entity.DbContext.#ctor(System.Data.Entity.Infrastructure.DbCompiledModel)">
      <summary>연결이 만들어질 데이터베이스의 이름을 만들기 위해 규칙을 사용하여 새 컨텍스트 인스턴스를 생성하고 지정된 모델에서 초기화합니다.규칙에 따라 이 이름은 파생 컨텍스트 클래스의 전체 이름(네임스페이스 + 클래스 이름)입니다.이 생성자가 연결을 만드는 데 사용되는 방식을 알아보려면 클래스 설명을 참조하십시오.</summary>
      <param name="model"> 이 컨텍스트를 지원할 모델입니다. </param>
    </member>
    <member name="M:System.Data.Entity.DbContext.#ctor(System.String)">
      <summary>지정된 문자열을 연결이 만들어질 데이터베이스의 이름 또는 연결 문자열로 사용하여 새 컨텍스트 인스턴스를 생성합니다.이 생성자가 연결을 만드는 데 사용되는 방식을 알아보려면 클래스 설명을 참조하십시오.</summary>
      <param name="nameOrConnectionString"> 데이터베이스 이름 또는 연결 문자열입니다. </param>
    </member>
    <member name="M:System.Data.Entity.DbContext.#ctor(System.String,System.Data.Entity.Infrastructure.DbCompiledModel)">
      <summary>지정된 문자열을 연결이 만들어질 데이터베이스의 이름 또는 연결 문자열로 사용하여 새 컨텍스트 인스턴스를 생성하고 지정된 모델에서 초기화합니다.이 생성자가 연결을 만드는 데 사용되는 방식을 알아보려면 클래스 설명을 참조하십시오.</summary>
      <param name="nameOrConnectionString"> 데이터베이스 이름 또는 연결 문자열입니다. </param>
      <param name="model"> 이 컨텍스트를 지원할 모델입니다. </param>
    </member>
    <member name="P:System.Data.Entity.DbContext.ChangeTracker">
      <summary>엔터티의 변경 내용 추적을 처리하는 컨텍스트의 기능에 액세스할 수 있도록 합니다.</summary>
      <returns>변경 내용 추적을 처리하는 기능에 액세스하는 데 사용되는 개체입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.DbContext.Configuration">
      <summary>컨텍스트의 구성 옵션에 액세스할 수 있도록 합니다. </summary>
      <returns>구성 옵션에 액세스하는 데 사용되는 개체입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.DbContext.Database">
      <summary>기본 데이터베이스의 생성/삭제/존재 확인을 허용하는 이 컨텍스트의 Database 인스턴스를 만듭니다. </summary>
      <returns>기본 데이터베이스의 생성/삭제/존재 확인을 허용하는 이 컨텍스트의 Database 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.DbContext.Dispose">
      <summary>protected Dispose 메서드를 호출합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.DbContext.Dispose(System.Boolean)">
      <summary>컨텍스트를 삭제합니다.이 컨텍스트에서 만들어졌거나 이 컨텍스트가 만들어질 때 소유권이 이 컨텍스트에 전달된 기본 <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" />도 삭제됩니다.이 컨텍스트에서 만들어졌거나 이 컨텍스트가 만들어질 때 소유권이 이 컨텍스트에 전달된 데이터베이스에 대한 연결(<see cref="T:System.Data.Common.DbConnection" /> 개체)도 삭제됩니다.</summary>
      <param name="disposing">관리되는 리소스와 관리되지 않는 리소스를 모두 해제하려면 true이고, 관리되지 않는 리소스만 해제하려면 false입니다. </param>
    </member>
    <member name="M:System.Data.Entity.DbContext.Entry(System.Object)">
      <summary>엔터티에 대한 정보에 액세스할 수 있도록 하고 엔터티에 대한 작업을 수행하는 기능을 제공하는 지정된 엔터티에 대한 <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" /> 개체를 가져옵니다. </summary>
      <returns> 엔터티의 항목입니다. </returns>
      <param name="entity"> 엔터티입니다. </param>
    </member>
    <member name="M:System.Data.Entity.DbContext.Entry``1(``0)">
      <summary>엔터티에 대한 정보에 액세스할 수 있도록 하고 엔터티에 대한 작업을 수행하는 기능을 제공하는 지정된 엔터티에 대한 <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" /> 개체를 가져옵니다. </summary>
      <returns> 엔터티의 항목입니다. </returns>
      <param name="entity"> 엔터티입니다. </param>
      <typeparam name="TEntity"> 엔터티의 형식입니다. </typeparam>
    </member>
    <member name="M:System.Data.Entity.DbContext.Equals(System.Object)">
      <summary>지정한 DbContext가 현재 DbContext와 같은지 여부를 확인합니다.</summary>
      <returns>지정된 DbContext가 현재 DbContext와 같으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="obj">현재 DbContext와 비교할 DbContext입니다.</param>
    </member>
    <member name="M:System.Data.Entity.DbContext.GetHashCode">
      <summary>이 DBContext의 해시 함수를 반환합니다.</summary>
      <returns>이 DbContext의 해시 함수입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.DbContext.GetType">
      <summary>현재 DbContext의 형식을 반환합니다.</summary>
      <returns>현재 DbContext의 형식입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.DbContext.GetValidationErrors">
      <summary>추적된 엔터티의 유효성을 검사하고 유효성 검사 결과를 포함하는 <see cref="T:System.Data.Entity.Validation.DbEntityValidationResult" />의 컬렉션을 반환합니다. </summary>
      <returns>잘못된 엔터티에 대한 유효성 검사 결과의 컬렉션입니다.컬렉션은 null일 수 없으며 null 값이나 유효한 엔터티에 대한 결과를 포함해서는 안 됩니다.</returns>
    </member>
    <member name="M:System.Data.Entity.DbContext.OnModelCreating(System.Data.Entity.DbModelBuilder)">
      <summary>이 메서드는 파생 컨텍스트의 모델이 초기화되었을 때 모델이 잠기고 컨텍스트를 초기화하는 데 사용되기 전에 호출됩니다.이 메서드의 기본 구현은 아무 작업도 수행하지 않지만 모델이 잠기기 전에 모델을 더 세부적으로 제어할 수 있도록 이 메서드의 기본 구현을 파생 클래스에서 재정의할 수 있습니다.</summary>
      <param name="modelBuilder">만들어지는 컨텍스트의 모델을 정의하는 작성기입니다.</param>
    </member>
    <member name="M:System.Data.Entity.DbContext.SaveChanges">
      <summary>이 컨텍스트에서 기본 데이터베이스에 수행된 모든 변경 내용을 저장합니다.</summary>
      <returns>기본 데이터베이스에 기록된 개체의 수입니다.</returns>
      <exception cref="T:System.InvalidOperationException">컨텍스트가 삭제된 경우에 발생합니다.</exception>
    </member>
    <member name="M:System.Data.Entity.DbContext.SaveChangesAsync">
      <summary>이 컨텍스트에서 기본 데이터베이스에 수행된 모든 변경 내용을 비동기적으로 저장합니다. </summary>
      <returns>비동기 저장 작업을 나타내는 작업입니다.작업 결과에는 기본 데이터베이스에 기록된 개체의 수가 포함됩니다.</returns>
      <exception cref="T:System.InvalidOperationException">컨텍스트가 삭제된 경우에 발생합니다.</exception>
    </member>
    <member name="M:System.Data.Entity.DbContext.SaveChangesAsync(System.Threading.CancellationToken)">
      <summary> 이 컨텍스트에서 기본 데이터베이스에 수행된 모든 변경 내용을 비동기적으로 저장합니다.</summary>
      <returns>비동기 저장 작업을 나타내는 작업입니다.작업 결과에는 기본 데이터베이스에 기록된 개체의 수가 포함됩니다.</returns>
      <param name="cancellationToken">작업이 완료되기를 기다리는 동안 관찰할 <see cref="T:System.Threading.CancellationToken" />입니다.</param>
      <exception cref="T:System.InvalidOperationException">컨텍스트가 삭제된 경우에 발생합니다.</exception>
    </member>
    <member name="M:System.Data.Entity.DbContext.Set``1">
      <summary>컨텍스트에 있는 지정된 형식의 엔터티, ObjectStateManager 및 기본 저장소에 액세스할 수 있도록 DbSet 인스턴스를 반환합니다.</summary>
      <returns>지정된 엔터티 형식에 대한 집합입니다.</returns>
      <typeparam name="TEntity">집합이 반환되어야 하는 엔터티의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.DbContext.Set(System.Type)">
      <summary>컨텍스트에 있는 지정된 형식의 엔터티, ObjectStateManager 및 기본 저장소에 액세스할 수 있도록 제네릭이 아닌 DbSet 인스턴스를 반환합니다. </summary>
      <returns>지정된 엔터티 형식에 대한 집합입니다.</returns>
      <param name="entityType">집합이 반환되어야 하는 엔터티의 형식입니다.</param>
    </member>
    <member name="M:System.Data.Entity.DbContext.ShouldValidateEntity(System.Data.Entity.Infrastructure.DbEntityEntry)">
      <summary>사용자가 추가되고 수정된 엔터티의 유효성만 검사하는 기본 동작을 재정의할 수 있도록 하는 확장 지점입니다.</summary>
      <returns>유효성 검사를 진행하려면 true이고, 그렇지 않으면 false입니다. </returns>
      <param name="entityEntry">유효성을 검사할 DbEntityEntry 인스턴스입니다.</param>
    </member>
    <member name="P:System.Data.Entity.DbContext.System#Data#Entity#Infrastructure#IObjectContextAdapter#ObjectContext">
      <summary>이 컨텍스트의 기반이 되는 Entity Framework ObjectContext를 반환합니다. </summary>
      <returns>이 컨텍스트의 기반이 되는 Entity Framework ObjectContext입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.DbContext.ToString">
      <summary>DbContext의 문자열 표현을 반환합니다.</summary>
      <returns>DbContext의 문자열 표현입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.DbContext.ValidateEntity(System.Data.Entity.Infrastructure.DbEntityEntry,System.Collections.Generic.IDictionary{System.Object,System.Object})">
      <summary>사용자가 엔터티의 유효성 검사를 사용자 지정하거나 유효성 검사 결과를 필터링하여 제외시킬 수 있도록 하는 확장 지점입니다.<see cref="M:System.Data.Entity.DbContext.GetValidationErrors" />에 의해 호출됩니다.</summary>
      <returns>엔터티 유효성 검사 결과입니다.재정의된 경우 null일 수 있습니다.</returns>
      <param name="entityEntry">유효성을 검사할 DbEntityEntry 인스턴스입니다.</param>
      <param name="items">사용자 지정 유효성 검사에 대한 추가 정보를 포함하는 사용자 정의 사전입니다.이 사전은 <see cref="T:System.ComponentModel.DataAnnotations.ValidationContext" />에 전달되고 <see cref="P:System.ComponentModel.DataAnnotations.ValidationContext.Items" />로 노출됩니다.이 매개 변수는 선택적 요소이며 null일 수 있습니다.</param>
    </member>
    <member name="T:System.Data.Entity.DbContextTransaction">
      <summary>기본 저장소 연결에서 트랜잭션 개체에 대한 액세스를 래핑하고 Entity Framework가 해당 트랜잭션의 컨텍스트 내에서 데이터베이스에 대한 명령을 실행하도록 합니다.이 클래스의 인스턴스는 <see cref="T:System.Data.Entity.DbContext" /> 및 <see cref="T:System.Data.Entity.Database" /> 개체에 대해 BeginTransaction()을 호출하여 검색됩니다.</summary>
    </member>
    <member name="M:System.Data.Entity.DbContextTransaction.Commit">
      <summary>기본 저장소 트랜잭션을 커밋합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.DbContextTransaction.Dispose">
      <summary>이 트랜잭션 개체를 정리하고 Entity Framework가 해당 트랜잭션을 더 이상 사용하지 않도록 합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.DbContextTransaction.Dispose(System.Boolean)">
      <summary>이 트랜잭션 개체를 정리합니다.</summary>
      <param name="disposing">관리되는 리소스와 관리되지 않는 리소스를 모두 해제하려면 true이고, 관리되지 않는 리소스만 해제하려면 false입니다.</param>
    </member>
    <member name="M:System.Data.Entity.DbContextTransaction.Equals(System.Object)"></member>
    <member name="M:System.Data.Entity.DbContextTransaction.GetHashCode"></member>
    <member name="M:System.Data.Entity.DbContextTransaction.GetType"></member>
    <member name="M:System.Data.Entity.DbContextTransaction.Rollback">
      <summary>기본 저장소 트랜잭션을 롤백합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.DbContextTransaction.ToString"></member>
    <member name="P:System.Data.Entity.DbContextTransaction.UnderlyingTransaction"></member>
    <member name="T:System.Data.Entity.DbFunctionAttribute">
      <summary>     지정된 메서드가 EDM 함수의 프록시임을 나타냅니다. </summary>
    </member>
    <member name="M:System.Data.Entity.DbFunctionAttribute.#ctor(System.String,System.String)">
      <summary>     새 DbFunctionAttribute 인스턴스를 만듭니다. </summary>
      <param name="namespaceName"> 특성을 사용하는 메서드가 나타내는 EDM 함수의 네임스페이스 이름입니다. </param>
      <param name="functionName"> 특성을 사용하는 메서드가 나타내는 EDM 함수의 함수 이름입니다. </param>
    </member>
    <member name="P:System.Data.Entity.DbFunctionAttribute.FunctionName">
      <summary>     특성을 사용하는 메서드가 나타내는 EDM 함수의 함수 이름입니다. </summary>
    </member>
    <member name="P:System.Data.Entity.DbFunctionAttribute.NamespaceName">
      <summary>     특성을 사용하는 메서드가 나타내는 EDM 함수의 네임스페이스 이름입니다. </summary>
    </member>
    <member name="T:System.Data.Entity.DbFunctions">
      <summary>
        <see cref="T:System.Data.Entity.DbContext" /> 또는 <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> LINQ to Entities 쿼리에서 사용하기 위한 EDM 정식 함수를 노출하는 CLR(공용 언어 런타임) 메서드를 제공합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.AddDays(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
      <summary>정식 AddDays EDM 함수를 호출하여 지정된 일수를 날짜/시간에 추가합니다.</summary>
      <returns> 결과 날짜/시간입니다.</returns>
      <param name="dateValue">입력 날짜/시간입니다.</param>
      <param name="addValue">더할 일수입니다.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.AddDays(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
      <summary>정식 AddDays EDM 함수를 호출하여 지정된 일수를 날짜/시간에 추가합니다.</summary>
      <returns>결과 날짜/시간입니다.</returns>
      <param name="dateValue">입력 날짜/시간입니다.</param>
      <param name="addValue">더할 일수입니다.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.AddHours(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
      <summary>이 메서드는 LINQ to Entities 쿼리의 일부로 사용되는 경우 AddHours EDM 정식 함수를 호출하여 지정된 시간을 날짜/시간에 더합니다.</summary>
      <returns>결과 날짜/시간입니다.</returns>
      <param name="timeValue">입력 날짜/시간입니다.</param>
      <param name="addValue">더할 시간입니다.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.AddHours(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
      <summary>이 메서드는 LINQ to Entities 쿼리의 일부로 사용되는 경우 AddHours EDM 정식 함수를 호출하여 지정된 시간을 날짜/시간에 더합니다.</summary>
      <returns>결과 날짜/시간입니다.</returns>
      <param name="timeValue">입력 날짜/시간입니다.</param>
      <param name="addValue">더할 시간입니다.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.AddHours(System.Nullable{System.TimeSpan},System.Nullable{System.Int32})">
      <summary>이 메서드는 LINQ to Entities 쿼리의 일부로 사용되는 경우 AddHours EDM 정식 함수를 호출하여 지정된 시간을 시간 범위에 더합니다.</summary>
      <returns>결과 시간 범위입니다.</returns>
      <param name="timeValue">입력 날짜/시간입니다.</param>
      <param name="addValue">더할 시간입니다.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.AddMicroseconds(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
      <summary>이 메서드는 LINQ to Entities 쿼리의 일부로 사용되는 경우 AddMicroseconds EDM 정식 함수를 호출하여 지정된 마이크로초를 날짜/시간에 더합니다.</summary>
      <returns>결과 날짜/시간입니다.</returns>
      <param name="timeValue">입력 날짜/시간입니다.</param>
      <param name="addValue">더할 마이크로초입니다.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.AddMicroseconds(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
      <summary>이 메서드는 LINQ to Entities 쿼리의 일부로 사용되는 경우 AddMicroseconds EDM 정식 함수를 호출하여 지정된 마이크로초를 날짜/시간에 더합니다.</summary>
      <returns>결과 날짜/시간입니다.</returns>
      <param name="timeValue">입력 날짜/시간입니다.</param>
      <param name="addValue">더할 마이크로초입니다.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.AddMicroseconds(System.Nullable{System.TimeSpan},System.Nullable{System.Int32})">
      <summary>이 메서드는 LINQ to Entities 쿼리의 일부로 사용되는 경우 AddMicroseconds EDM 정식 함수를 호출하여 지정된 마이크로초를 시간 범위에 더합니다.</summary>
      <returns>결과 시간 범위입니다.</returns>
      <param name="timeValue">입력 날짜/시간입니다.</param>
      <param name="addValue">더할 마이크로초입니다.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.AddMilliseconds(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
      <summary>이 메서드는 LINQ to Entities 쿼리의 일부로 사용되는 경우 AddMilliseconds EDM 정식 함수를 호출하여 지정된 밀리초를 날짜/시간에 더합니다.</summary>
      <returns>결과 날짜/시간입니다.</returns>
      <param name="timeValue">입력 날짜/시간입니다.</param>
      <param name="addValue">더할 밀리초입니다.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.AddMilliseconds(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
      <summary>이 메서드는 LINQ to Entities 쿼리의 일부로 사용되는 경우 AddMilliseconds EDM 정식 함수를 호출하여 지정된 밀리초를 날짜/시간에 더합니다.</summary>
      <returns>결과 날짜/시간입니다.</returns>
      <param name="timeValue">입력 날짜/시간입니다.</param>
      <param name="addValue">더할 밀리초입니다.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.AddMilliseconds(System.Nullable{System.TimeSpan},System.Nullable{System.Int32})">
      <summary>이 메서드는 LINQ to Entities 쿼리의 일부로 사용되는 경우 AddMilliseconds EDM 정식 함수를 호출하여 지정된 밀리초를 시간 범위에 더합니다.</summary>
      <returns>결과 시간 범위입니다.</returns>
      <param name="timeValue">입력 날짜/시간입니다.</param>
      <param name="addValue">더할 밀리초입니다.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.AddMinutes(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
      <summary>이 메서드는 LINQ to Entities 쿼리의 일부로 사용되는 경우 AddMinutes EDM 정식 함수를 호출하여 지정된 분을 날짜/시간에 더합니다.</summary>
      <returns>결과 날짜/시간입니다.</returns>
      <param name="timeValue">입력 날짜/시간입니다.</param>
      <param name="addValue">더할 분입니다.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.AddMinutes(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
      <summary>이 메서드는 LINQ to Entities 쿼리의 일부로 사용되는 경우 AddMinutes EDM 정식 함수를 호출하여 지정된 분을 날짜/시간에 더합니다.</summary>
      <returns>결과 날짜/시간입니다.</returns>
      <param name="timeValue">입력 날짜/시간입니다.</param>
      <param name="addValue">더할 분입니다.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.AddMinutes(System.Nullable{System.TimeSpan},System.Nullable{System.Int32})">
      <summary>이 메서드는 LINQ to Entities 쿼리의 일부로 사용되는 경우 AddMinutes EDM 정식 함수를 호출하여 지정된 분을 시간 범위에 더합니다.</summary>
      <returns>결과 시간 범위입니다.</returns>
      <param name="timeValue">입력 날짜/시간입니다.</param>
      <param name="addValue">더할 분입니다.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.AddMonths(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
      <summary>이 메서드는 LINQ to Entities 쿼리의 일부로 사용되는 경우 AddMonths EDM 정식 함수를 호출하여 지정된 개월 수를 날짜/시간에 더합니다.</summary>
      <returns>결과 날짜/시간입니다.</returns>
      <param name="dateValue">입력 날짜/시간입니다.</param>
      <param name="addValue">더할 개월 수입니다.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.AddMonths(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
      <summary>이 메서드는 LINQ to Entities 쿼리의 일부로 사용되는 경우 AddMonths EDM 정식 함수를 호출하여 지정된 개월 수를 날짜/시간에 더합니다.</summary>
      <returns>결과 날짜/시간입니다.</returns>
      <param name="dateValue">입력 날짜/시간입니다.</param>
      <param name="addValue">더할 개월 수입니다.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.AddNanoseconds(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
      <summary>이 메서드는 LINQ to Entities 쿼리의 일부로 사용되는 경우 AddNanoseconds EDM 정식 함수를 호출하여 지정된 나노초를 날짜/시간에 더합니다.</summary>
      <returns>결과 날짜/시간입니다.</returns>
      <param name="timeValue">입력 날짜/시간입니다.</param>
      <param name="addValue">더할 나노초입니다.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.AddNanoseconds(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
      <summary>이 메서드는 LINQ to Entities 쿼리의 일부로 사용되는 경우 AddNanoseconds EDM 정식 함수를 호출하여 지정된 나노초를 날짜/시간에 더합니다.</summary>
      <returns>결과 날짜/시간입니다.</returns>
      <param name="timeValue">입력 날짜/시간입니다.</param>
      <param name="addValue">더할 나노초입니다.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.AddNanoseconds(System.Nullable{System.TimeSpan},System.Nullable{System.Int32})">
      <summary>이 메서드는 LINQ to Entities 쿼리의 일부로 사용되는 경우 AddNanoseconds EDM 정식 함수를 호출하여 지정된 나노초를 시간 범위에 더합니다.</summary>
      <returns>결과 시간 범위입니다.</returns>
      <param name="timeValue">입력 날짜/시간입니다.</param>
      <param name="addValue">더할 나노초입니다.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.AddSeconds(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
      <summary>이 메서드는 LINQ to Entities 쿼리의 일부로 사용되는 경우 AddSeconds EDM 정식 함수를 호출하여 지정된 초를 날짜/시간에 더합니다.</summary>
      <returns>결과 날짜/시간입니다.</returns>
      <param name="timeValue">입력 날짜/시간입니다.</param>
      <param name="addValue">더할 초입니다.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.AddSeconds(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
      <summary>이 메서드는 LINQ to Entities 쿼리의 일부로 사용되는 경우 AddSeconds EDM 정식 함수를 호출하여 지정된 초를 날짜/시간에 더합니다.</summary>
      <returns>결과 날짜/시간입니다.</returns>
      <param name="timeValue">입력 날짜/시간입니다.</param>
      <param name="addValue">더할 초입니다.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.AddSeconds(System.Nullable{System.TimeSpan},System.Nullable{System.Int32})">
      <summary>이 메서드는 LINQ to Entities 쿼리의 일부로 사용되는 경우 AddSeconds EDM 정식 함수를 호출하여 지정된 초를 시간 범위에 더합니다.</summary>
      <returns>결과 시간 범위입니다.</returns>
      <param name="timeValue">입력 날짜/시간입니다.</param>
      <param name="addValue">더할 초입니다.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.AddYears(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
      <summary>이 메서드는 LINQ to Entities 쿼리의 일부로 사용되는 경우 AddYears EDM 정식 함수를 호출하여 지정된 연수를 날짜/시간에 더합니다.</summary>
      <returns>결과 날짜/시간입니다.</returns>
      <param name="dateValue">입력 날짜/시간입니다.</param>
      <param name="addValue">더할 연수입니다.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.AddYears(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
      <summary>이 메서드는 LINQ to Entities 쿼리의 일부로 사용되는 경우 AddYears EDM 정식 함수를 호출하여 지정된 연수를 날짜/시간에 더합니다.</summary>
      <returns>결과 날짜/시간입니다.</returns>
      <param name="dateValue">입력 날짜/시간입니다.</param>
      <param name="addValue">더할 연수입니다.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.AsNonUnicode(System.String)">
      <summary>이 메서드는 LINQ to Entities 쿼리의 일부로 사용되는 경우 입력이 유니코드가 아닌 문자열로 처리되도록 보장하는 연산자 역할을 합니다.</summary>
      <returns>유니코드가 아닌 문자열로 처리되는 입력 문자열입니다.</returns>
      <param name="value">입력 문자열입니다.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.AsUnicode(System.String)">
      <summary>이 메서드는 LINQ to Entities 쿼리의 일부로 사용되는 경우 입력이 유니코드 문자열로 처리되도록 보장하는 연산자 역할을 합니다.</summary>
      <returns>유니코드 문자열로 처리되는 입력 문자열입니다.</returns>
      <param name="value">입력 문자열입니다.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.CreateDateTime(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Double})">
      <summary>이 메서드는 LINQ to Entities 쿼리의 일부로 사용되는 경우 CreateDateTime EDM 정식 함수를 호출하여 새 <see cref="T:System.DateTime" /> 개체를 만듭니다.</summary>
      <returns>새 날짜/시간입니다.</returns>
      <param name="year">연도입니다.</param>
      <param name="month">월입니다(1부터 시작).</param>
      <param name="day">일입니다(1부터 시작).</param>
      <param name="hour">시간입니다.</param>
      <param name="minute">분입니다.</param>
      <param name="second">초입니다. 필요한 경우 초의 소수 부분이 포함됩니다.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.CreateDateTimeOffset(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Double},System.Nullable{System.Int32})">
      <summary>이 메서드는 LINQ to Entities 쿼리의 일부로 사용되는 경우 CreateDateTimeOffset EDM 정식 함수를 호출하여 새 <see cref="T:System.DateTimeOffset" /> 개체를 만듭니다.</summary>
      <returns>새 날짜/시간입니다.</returns>
      <param name="year">연도입니다.</param>
      <param name="month">월입니다(1부터 시작).</param>
      <param name="day">일입니다(1부터 시작).</param>
      <param name="hour">시간입니다.</param>
      <param name="minute">분입니다.</param>
      <param name="second">초입니다. 필요한 경우 초의 소수 부분이 포함됩니다.</param>
      <param name="timeZoneOffset">새 날짜의 표준 시간대 오프셋 부분입니다.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.CreateTime(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Double})">
      <summary>이 메서드는 LINQ to Entities 쿼리의 일부로 사용되는 경우 CreateTime EDM 정식 함수를 호출하여 새 <see cref="T:System.TimeSpan" /> 개체를 만듭니다.</summary>
      <returns>새 시간 범위입니다.</returns>
      <param name="hour">시간입니다.</param>
      <param name="minute">분입니다.</param>
      <param name="second">초입니다. 필요한 경우 초의 소수 부분이 포함됩니다.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.DiffDays(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>이 메서드는 LINQ to Entities 쿼리의 일부로 사용되는 경우 DiffDays EDM 정식 함수를 호출하여 두 날짜/시간 간의 일수를 계산합니다.</summary>
      <returns>첫 번째 날짜/시간과 두 번째 날짜/시간 간의 일수입니다.</returns>
      <param name="dateValue1">첫 번째 날짜/시간입니다.</param>
      <param name="dateValue2">두 번째 날짜/시간입니다.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.DiffDays(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>이 메서드는 LINQ to Entities 쿼리의 일부로 사용되는 경우 DiffDays EDM 정식 함수를 호출하여 두 날짜/시간 간의 일수를 계산합니다.</summary>
      <returns>첫 번째 날짜/시간과 두 번째 날짜/시간 간의 일수입니다.</returns>
      <param name="dateValue1">첫 번째 날짜/시간입니다.</param>
      <param name="dateValue2">두 번째 날짜/시간입니다.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.DiffHours(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>이 메서드는 LINQ to Entities 쿼리의 일부로 사용되는 경우 DiffHours EDM 정식 함수를 호출하여 두 날짜/시간 간의 시간을 계산합니다.</summary>
      <returns>첫 번째 날짜/시간과 두 번째 날짜/시간 간의 시간입니다.</returns>
      <param name="timeValue1">첫 번째 날짜/시간입니다.</param>
      <param name="timeValue2">두 번째 날짜/시간입니다.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.DiffHours(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>이 메서드는 LINQ to Entities 쿼리의 일부로 사용되는 경우 DiffHours EDM 정식 함수를 호출하여 두 날짜/시간 간의 시간을 계산합니다.</summary>
      <returns> 첫 번째 날짜/시간과 두 번째 날짜/시간 간의 시간입니다. </returns>
      <param name="timeValue1">첫 번째 날짜/시간입니다.</param>
      <param name="timeValue2">두 번째 날짜/시간입니다.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.DiffHours(System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
      <summary>이 메서드는 LINQ to Entities 쿼리의 일부로 사용되는 경우 DiffHours EDM 정식 함수를 호출하여 두 시간 범위 간의 시간을 계산합니다.</summary>
      <returns>첫 번째 시간 범위와 두 번째 시간 범위 간의 시간입니다.</returns>
      <param name="timeValue1">첫 번째 날짜/시간입니다.</param>
      <param name="timeValue2">두 번째 날짜/시간입니다.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.DiffMicroseconds(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>이 메서드는 LINQ to Entities 쿼리의 일부로 사용되는 경우 DiffMicroseconds EDM 정식 함수를 호출하여 두 날짜/시간 간의 마이크로초를 계산합니다.</summary>
      <returns>첫 번째 날짜/시간과 두 번째 날짜/시간 간의 마이크로초입니다.</returns>
      <param name="timeValue1">첫 번째 날짜/시간입니다.</param>
      <param name="timeValue2">두 번째 날짜/시간입니다.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.DiffMicroseconds(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>이 메서드는 LINQ to Entities 쿼리의 일부로 사용되는 경우 DiffMicroseconds EDM 정식 함수를 호출하여 두 날짜/시간 간의 마이크로초를 계산합니다.</summary>
      <returns>첫 번째 날짜/시간과 두 번째 날짜/시간 간의 마이크로초입니다.</returns>
      <param name="timeValue1">첫 번째 날짜/시간입니다.</param>
      <param name="timeValue2">두 번째 날짜/시간입니다.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.DiffMicroseconds(System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
      <summary>이 메서드는 LINQ to Entities 쿼리의 일부로 사용되는 경우 DiffMicroseconds EDM 정식 함수를 호출하여 두 시간 범위 간의 마이크로초를 계산합니다.</summary>
      <returns>첫 번째 시간 범위와 두 번째 시간 범위 간의 마이크로초입니다.</returns>
      <param name="timeValue1">첫 번째 날짜/시간입니다.</param>
      <param name="timeValue2">두 번째 날짜/시간입니다.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.DiffMilliseconds(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>이 메서드는 LINQ to Entities 쿼리의 일부로 사용되는 경우 DiffMilliseconds EDM 정식 함수를 호출하여 두 날짜/시간 간의 밀리초를 계산합니다.</summary>
      <returns>첫 번째 날짜/시간과 두 번째 날짜/시간 간의 밀리초입니다.</returns>
      <param name="timeValue1">첫 번째 날짜/시간입니다.</param>
      <param name="timeValue2">두 번째 날짜/시간입니다.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.DiffMilliseconds(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>이 메서드는 LINQ to Entities 쿼리의 일부로 사용되는 경우 DiffMilliseconds EDM 정식 함수를 호출하여 두 날짜/시간 간의 밀리초를 계산합니다.</summary>
      <returns>첫 번째 날짜/시간과 두 번째 날짜/시간 간의 밀리초입니다.</returns>
      <param name="timeValue1">첫 번째 날짜/시간입니다.</param>
      <param name="timeValue2">두 번째 날짜/시간입니다.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.DiffMilliseconds(System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
      <summary>이 메서드는 LINQ to Entities 쿼리의 일부로 사용되는 경우 DiffMilliseconds EDM 정식 함수를 호출하여 두 시간 범위 간의 밀리초를 계산합니다.</summary>
      <returns>첫 번째 시간 범위와 두 번째 시간 범위 간의 밀리초입니다.</returns>
      <param name="timeValue1">첫 번째 날짜/시간입니다.</param>
      <param name="timeValue2">두 번째 날짜/시간입니다.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.DiffMinutes(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>이 메서드는 LINQ to Entities 쿼리의 일부로 사용되는 경우 DiffMinutes EDM 정식 함수를 호출하여 두 날짜/시간 간의 분을 계산합니다.</summary>
      <returns>첫 번째 날짜/시간과 두 번째 날짜/시간 간의 분입니다.</returns>
      <param name="timeValue1">첫 번째 날짜/시간입니다.</param>
      <param name="timeValue2">두 번째 날짜/시간입니다.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.DiffMinutes(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>이 메서드는 LINQ to Entities 쿼리의 일부로 사용되는 경우 DiffMinutes EDM 정식 함수를 호출하여 두 날짜/시간 간의 분을 계산합니다.</summary>
      <returns>첫 번째 날짜/시간과 두 번째 날짜/시간 간의 분입니다.</returns>
      <param name="timeValue1">첫 번째 날짜/시간입니다.</param>
      <param name="timeValue2">두 번째 날짜/시간입니다.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.DiffMinutes(System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
      <summary>이 메서드는 LINQ to Entities 쿼리의 일부로 사용되는 경우 DiffMinutes EDM 정식 함수를 호출하여 두 시간 범위 간의 분을 계산합니다.</summary>
      <returns>첫 번째 시간 범위와 두 번째 시간 범위 간의 분입니다.</returns>
      <param name="timeValue1">첫 번째 날짜/시간입니다.</param>
      <param name="timeValue2">두 번째 날짜/시간입니다.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.DiffMonths(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>이 메서드는 LINQ to Entities 쿼리의 일부로 사용되는 경우 DiffMonths EDM 정식 함수를 호출하여 두 날짜/시간 간의 개월 수를 계산합니다.</summary>
      <returns>첫 번째 날짜/시간과 두 번째 날짜/시간 간의 개월 수입니다.</returns>
      <param name="dateValue1">첫 번째 날짜/시간입니다.</param>
      <param name="dateValue2"> 두 번째 날짜/시간입니다. </param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.DiffMonths(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>이 메서드는 LINQ to Entities 쿼리의 일부로 사용되는 경우 DiffMonths EDM 정식 함수를 호출하여 두 날짜/시간 간의 개월 수를 계산합니다.</summary>
      <returns> 첫 번째 날짜/시간과 두 번째 날짜/시간 간의 개월 수입니다.</returns>
      <param name="dateValue1">첫 번째 날짜/시간입니다.</param>
      <param name="dateValue2">두 번째 날짜/시간입니다.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.DiffNanoseconds(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>이 메서드는 LINQ to Entities 쿼리의 일부로 사용되는 경우 DiffNanoseconds EDM 정식 함수를 호출하여 두 날짜/시간 간의 나노초를 계산합니다.</summary>
      <returns>첫 번째 날짜/시간과 두 번째 날짜/시간 간의 나노초입니다.</returns>
      <param name="timeValue1">첫 번째 날짜/시간입니다.</param>
      <param name="timeValue2">두 번째 날짜/시간입니다.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.DiffNanoseconds(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>이 메서드는 LINQ to Entities 쿼리의 일부로 사용되는 경우 DiffNanoseconds EDM 정식 함수를 호출하여 두 날짜/시간 간의 나노초를 계산합니다.</summary>
      <returns>첫 번째 날짜/시간과 두 번째 날짜/시간 간의 나노초입니다.</returns>
      <param name="timeValue1">첫 번째 날짜/시간입니다.</param>
      <param name="timeValue2">두 번째 날짜/시간입니다.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.DiffNanoseconds(System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
      <summary>이 메서드는 LINQ to Entities 쿼리의 일부로 사용되는 경우 DiffNanoseconds EDM 정식 함수를 호출하여 두 시간 범위 간의 나노초를 계산합니다.</summary>
      <returns>첫 번째 시간 범위와 두 번째 시간 범위 간의 나노초입니다.</returns>
      <param name="timeValue1">첫 번째 날짜/시간입니다.</param>
      <param name="timeValue2">두 번째 날짜/시간입니다.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.DiffSeconds(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>이 메서드는 LINQ to Entities 쿼리의 일부로 사용되는 경우 DiffSeconds EDM 정식 함수를 호출하여 두 날짜/시간 간의 초를 계산합니다.</summary>
      <returns>첫 번째 날짜/시간과 두 번째 날짜/시간 간의 초입니다.</returns>
      <param name="timeValue1">첫 번째 날짜/시간입니다.</param>
      <param name="timeValue2">두 번째 날짜/시간입니다.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.DiffSeconds(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>이 메서드는 LINQ to Entities 쿼리의 일부로 사용되는 경우 DiffSeconds EDM 정식 함수를 호출하여 두 날짜/시간 간의 초를 계산합니다.</summary>
      <returns>첫 번째 날짜/시간과 두 번째 날짜/시간 간의 초입니다.</returns>
      <param name="timeValue1">첫 번째 날짜/시간입니다.</param>
      <param name="timeValue2">두 번째 날짜/시간입니다.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.DiffSeconds(System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
      <summary>이 메서드는 LINQ to Entities 쿼리의 일부로 사용되는 경우 DiffSeconds EDM 정식 함수를 호출하여 두 시간 범위 간의 초를 계산합니다.</summary>
      <returns>첫 번째 시간 범위와 두 번째 시간 범위 간의 초입니다.</returns>
      <param name="timeValue1">첫 번째 날짜/시간입니다.</param>
      <param name="timeValue2">두 번째 날짜/시간입니다.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.DiffYears(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>이 메서드는 LINQ to Entities 쿼리의 일부로 사용되는 경우 DiffYears EDM 정식 함수를 호출하여 두 날짜/시간 간의 연수를 계산합니다.</summary>
      <returns>첫 번째 날짜/시간과 두 번째 날짜/시간 간의 연수입니다.</returns>
      <param name="dateValue1">첫 번째 날짜/시간입니다.</param>
      <param name="dateValue2">두 번째 날짜/시간입니다.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.DiffYears(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>이 메서드는 LINQ to Entities 쿼리의 일부로 사용되는 경우 DiffYears EDM 정식 함수를 호출하여 두 날짜/시간 간의 연수를 계산합니다.</summary>
      <returns>첫 번째 날짜/시간과 두 번째 날짜/시간 간의 연수입니다.</returns>
      <param name="dateValue1">첫 번째 날짜/시간입니다.</param>
      <param name="dateValue2">두 번째 날짜/시간입니다.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.GetTotalOffsetMinutes(System.Nullable{System.DateTimeOffset})">
      <summary>이 메서드는 LINQ to Entities 쿼리의 일부로 사용되는 경우 GetTotalOffsetMinutes EDM 정식 함수를 호출하여 UTC에서의 지정된 날짜/시간의 오프셋 값인 분을 반환합니다.일반적으로 +780에서 -780(+13시간에서 -13시간) 사이입니다.</summary>
      <returns>UTC에서의 입력의 오프셋입니다.</returns>
      <param name="dateTimeOffsetArgument">사용할 날짜/시간 값입니다.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.Left(System.String,System.Nullable{System.Int64})">
      <summary>이 메서드는 LINQ to Entities 쿼리의 일부로 사용되는 경우 Left EDM 정식 함수를 호출하여 문자열의 왼쪽에서 지정된 수의 문자를 반환합니다.</summary>
      <returns>입력 문자열의 왼쪽에서 요청된 수의 문자를 포함하는 문자열입니다.</returns>
      <param name="stringArgument">입력 문자열입니다.</param>
      <param name="length">반환할 문자 수입니다.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.Reverse(System.String)">
      <summary>이 메서드는 LINQ to Entities 쿼리의 일부로 사용되는 경우 Reverse EDM 정식 함수를 호출하여 문자 순서를 반대로 바꾼 지정된 문자열을 반환합니다.</summary>
      <returns>문자 순서를 반대로 바꾼 입력 문자열입니다.</returns>
      <param name="stringArgument">입력 문자열입니다.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.Right(System.String,System.Nullable{System.Int64})">
      <summary>이 메서드는 LINQ to Entities 쿼리의 일부로 사용되는 경우 Right EDM 정식 함수를 호출하여 문자열의 오른쪽에서 지정된 수의 문자를 반환합니다.</summary>
      <returns>입력 문자열의 오른쪽에서 요청된 수의 문자를 포함하는 문자열입니다.</returns>
      <param name="stringArgument">입력 문자열입니다.</param>
      <param name="length">반환할 문자 수입니다.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Decimal})">
      <summary>이 메서드는 LINQ to Entities 쿼리의 일부로 사용되는 경우 StDev EDM 정식 함수를 호출하여 컬렉션의 표준 편차를 계산합니다.</summary>
      <returns>표준 편차입니다.</returns>
      <param name="collection">계산을 수행할 컬렉션입니다.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Double})">
      <summary>이 메서드는 LINQ to Entities 쿼리의 일부로 사용되는 경우 StDev EDM 정식 함수를 호출하여 컬렉션의 표준 편차를 계산합니다.</summary>
      <returns>표준 편차입니다.</returns>
      <param name="collection">계산을 수행할 컬렉션입니다.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>이 메서드는 LINQ to Entities 쿼리의 일부로 사용되는 경우 StDev EDM 정식 함수를 호출하여 컬렉션의 표준 편차를 계산합니다.</summary>
      <returns>표준 편차입니다.</returns>
      <param name="collection">계산을 수행할 컬렉션입니다.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Int64})">
      <summary>이 메서드는 LINQ to Entities 쿼리의 일부로 사용되는 경우 StDev EDM 정식 함수를 호출하여 컬렉션의 표준 편차를 계산합니다.</summary>
      <returns>표준 편차입니다.</returns>
      <param name="collection">계산을 수행할 컬렉션입니다.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
      <summary>이 메서드는 LINQ to Entities 쿼리의 일부로 사용되는 경우 StDev EDM 정식 함수를 호출하여 컬렉션의 표준 편차를 계산합니다.</summary>
      <returns>표준 편차입니다.</returns>
      <param name="collection">계산을 수행할 컬렉션입니다.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
      <summary>이 메서드는 LINQ to Entities 쿼리의 일부로 사용되는 경우 StDev EDM 정식 함수를 호출하여 컬렉션의 표준 편차를 계산합니다.</summary>
      <returns>표준 편차입니다.</returns>
      <param name="collection">계산을 수행할 컬렉션입니다.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
      <summary>이 메서드는 LINQ to Entities 쿼리의 일부로 사용되는 경우 StDev EDM 정식 함수를 호출하여 컬렉션의 표준 편차를 계산합니다.</summary>
      <returns>표준 편차입니다.</returns>
      <param name="collection">계산을 수행할 컬렉션입니다.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
      <summary>이 메서드는 LINQ to Entities 쿼리의 일부로 사용되는 경우 StDev EDM 정식 함수를 호출하여 컬렉션의 표준 편차를 계산합니다.</summary>
      <returns>표준 편차입니다.</returns>
      <param name="collection">계산을 수행할 컬렉션입니다.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.StandardDeviationP(System.Collections.Generic.IEnumerable{System.Decimal})">
      <summary>이 메서드는 LINQ to Entities 쿼리의 일부로 사용되는 경우 StDevP EDM 정식 함수를 호출하여 모집단의 표준 편차를 계산합니다.</summary>
      <returns>모집단의 표준 편차입니다.</returns>
      <param name="collection">계산을 수행할 컬렉션입니다.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.StandardDeviationP(System.Collections.Generic.IEnumerable{System.Double})">
      <summary>이 메서드는 LINQ to Entities 쿼리의 일부로 사용되는 경우 StDevP EDM 정식 함수를 호출하여 모집단의 표준 편차를 계산합니다.</summary>
      <returns>모집단의 표준 편차입니다.</returns>
      <param name="collection">계산을 수행할 컬렉션입니다.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.StandardDeviationP(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>이 메서드는 LINQ to Entities 쿼리의 일부로 사용되는 경우 StDevP EDM 정식 함수를 호출하여 모집단의 표준 편차를 계산합니다.</summary>
      <returns>모집단의 표준 편차입니다.</returns>
      <param name="collection">계산을 수행할 컬렉션입니다.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.StandardDeviationP(System.Collections.Generic.IEnumerable{System.Int64})">
      <summary>이 메서드는 LINQ to Entities 쿼리의 일부로 사용되는 경우 StDevP EDM 정식 함수를 호출하여 모집단의 표준 편차를 계산합니다.</summary>
      <returns>모집단의 표준 편차입니다.</returns>
      <param name="collection">계산을 수행할 컬렉션입니다.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.StandardDeviationP(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
      <summary>이 메서드는 LINQ to Entities 쿼리의 일부로 사용되는 경우 StDevP EDM 정식 함수를 호출하여 모집단의 표준 편차를 계산합니다.</summary>
      <returns>모집단의 표준 편차입니다.</returns>
      <param name="collection">계산을 수행할 컬렉션입니다.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.StandardDeviationP(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
      <summary>이 메서드는 LINQ to Entities 쿼리의 일부로 사용되는 경우 StDevP EDM 정식 함수를 호출하여 모집단의 표준 편차를 계산합니다.</summary>
      <returns>모집단의 표준 편차입니다.</returns>
      <param name="collection">계산을 수행할 컬렉션입니다.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.StandardDeviationP(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
      <summary>이 메서드는 LINQ to Entities 쿼리의 일부로 사용되는 경우 StDevP EDM 정식 함수를 호출하여 모집단의 표준 편차를 계산합니다.</summary>
      <returns>모집단의 표준 편차입니다.</returns>
      <param name="collection">계산을 수행할 컬렉션입니다.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.StandardDeviationP(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
      <summary>이 메서드는 LINQ to Entities 쿼리의 일부로 사용되는 경우 StDevP EDM 정식 함수를 호출하여 모집단의 표준 편차를 계산합니다.</summary>
      <returns>모집단의 표준 편차입니다.</returns>
      <param name="collection">계산을 수행할 컬렉션입니다.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.Truncate(System.Nullable{System.Decimal},System.Nullable{System.Int32})">
      <summary>이 메서드는 LINQ to Entities 쿼리의 일부로 사용되는 경우 Truncate EDM 정식 함수를 호출하여 주어진 값을 지정된 자릿수가 될 때까지 자릅니다.</summary>
      <returns>잘린 값입니다.</returns>
      <param name="value">자를 값입니다.</param>
      <param name="digits">유지할 자릿수입니다.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.Truncate(System.Nullable{System.Double},System.Nullable{System.Int32})">
      <summary>이 메서드는 LINQ to Entities 쿼리의 일부로 사용되는 경우 Truncate EDM 정식 함수를 호출하여 주어진 값을 지정된 자릿수가 될 때까지 자릅니다.</summary>
      <returns>잘린 값입니다.</returns>
      <param name="value">자를 값입니다.</param>
      <param name="digits">유지할 자릿수입니다.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.TruncateTime(System.Nullable{System.DateTime})">
      <summary>이 메서드는 LINQ to Entities 쿼리의 일부로 사용되는 경우 TruncateTime EDM 정식 함수를 호출하여 시간 부분을 지운 지정된 날짜를 반환합니다. </summary>
      <returns>시간 부분을 지운 입력 날짜입니다.</returns>
      <param name="dateValue">사용할 날짜/시간 값입니다.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.TruncateTime(System.Nullable{System.DateTimeOffset})">
      <summary>이 메서드는 LINQ to Entities 쿼리의 일부로 사용되는 경우 TruncateTime EDM 정식 함수를 호출하여 시간 부분을 지운 지정된 날짜를 반환합니다.</summary>
      <returns>시간 부분을 지운 입력 날짜입니다.</returns>
      <param name="dateValue">사용할 날짜/시간 값입니다.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.Var(System.Collections.Generic.IEnumerable{System.Decimal})">
      <summary>이 메서드는 LINQ to Entities 쿼리의 일부로 사용되는 경우 Var EDM 정식 함수를 호출하여 컬렉션의 분산을 계산합니다.</summary>
      <returns>분산입니다.</returns>
      <param name="collection">계산을 수행할 컬렉션입니다.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.Var(System.Collections.Generic.IEnumerable{System.Double})">
      <summary>이 메서드는 LINQ to Entities 쿼리의 일부로 사용되는 경우 Var EDM 정식 함수를 호출하여 컬렉션의 분산을 계산합니다.</summary>
      <returns>분산입니다.</returns>
      <param name="collection">계산을 수행할 컬렉션입니다.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.Var(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>이 메서드는 LINQ to Entities 쿼리의 일부로 사용되는 경우 Var EDM 정식 함수를 호출하여 컬렉션의 분산을 계산합니다.</summary>
      <returns>분산입니다.</returns>
      <param name="collection">계산을 수행할 컬렉션입니다.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.Var(System.Collections.Generic.IEnumerable{System.Int64})">
      <summary>이 메서드는 LINQ to Entities 쿼리의 일부로 사용되는 경우 Var EDM 정식 함수를 호출하여 컬렉션의 분산을 계산합니다.</summary>
      <returns>분산입니다.</returns>
      <param name="collection">계산을 수행할 컬렉션입니다.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.Var(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
      <summary>이 메서드는 LINQ to Entities 쿼리의 일부로 사용되는 경우 Var EDM 정식 함수를 호출하여 컬렉션의 분산을 계산합니다.</summary>
      <returns>분산입니다.</returns>
      <param name="collection">계산을 수행할 컬렉션입니다.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.Var(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
      <summary>이 메서드는 LINQ to Entities 쿼리의 일부로 사용되는 경우 Var EDM 정식 함수를 호출하여 컬렉션의 분산을 계산합니다.</summary>
      <returns>분산입니다.</returns>
      <param name="collection">계산을 수행할 컬렉션입니다.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.Var(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
      <summary>이 메서드는 LINQ to Entities 쿼리의 일부로 사용되는 경우 Var EDM 정식 함수를 호출하여 컬렉션의 분산을 계산합니다.</summary>
      <returns>분산입니다.</returns>
      <param name="collection">계산을 수행할 컬렉션입니다.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.Var(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
      <summary>이 메서드는 LINQ to Entities 쿼리의 일부로 사용되는 경우 Var EDM 정식 함수를 호출하여 컬렉션의 분산을 계산합니다.</summary>
      <returns>분산입니다.</returns>
      <param name="collection">계산을 수행할 컬렉션입니다.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.VarP(System.Collections.Generic.IEnumerable{System.Decimal})">
      <summary>이 메서드는 LINQ to Entities 쿼리의 일부로 사용되는 경우 VarP EDM 정식 함수를 호출하여 모집단의 분산을 계산합니다.</summary>
      <returns>모집단의 분산입니다.</returns>
      <param name="collection">계산을 수행할 컬렉션입니다.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.VarP(System.Collections.Generic.IEnumerable{System.Double})">
      <summary>이 메서드는 LINQ to Entities 쿼리의 일부로 사용되는 경우 VarP EDM 정식 함수를 호출하여 모집단의 분산을 계산합니다.</summary>
      <returns>모집단의 분산입니다.</returns>
      <param name="collection">계산을 수행할 컬렉션입니다.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.VarP(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>이 메서드는 LINQ to Entities 쿼리의 일부로 사용되는 경우 VarP EDM 정식 함수를 호출하여 모집단의 분산을 계산합니다.</summary>
      <returns>모집단의 분산입니다.</returns>
      <param name="collection">계산을 수행할 컬렉션입니다.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.VarP(System.Collections.Generic.IEnumerable{System.Int64})">
      <summary>이 메서드는 LINQ to Entities 쿼리의 일부로 사용되는 경우 VarP EDM 정식 함수를 호출하여 모집단의 분산을 계산합니다.</summary>
      <returns>모집단의 분산입니다.</returns>
      <param name="collection">계산을 수행할 컬렉션입니다.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.VarP(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
      <summary>이 메서드는 LINQ to Entities 쿼리의 일부로 사용되는 경우 VarP EDM 정식 함수를 호출하여 모집단의 분산을 계산합니다.</summary>
      <returns>모집단의 분산입니다.</returns>
      <param name="collection">계산을 수행할 컬렉션입니다.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.VarP(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
      <summary>이 메서드는 LINQ to Entities 쿼리의 일부로 사용되는 경우 VarP EDM 정식 함수를 호출하여 모집단의 분산을 계산합니다.</summary>
      <returns>모집단의 분산입니다.</returns>
      <param name="collection">계산을 수행할 컬렉션입니다.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.VarP(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
      <summary>이 메서드는 LINQ to Entities 쿼리의 일부로 사용되는 경우 VarP EDM 정식 함수를 호출하여 모집단의 분산을 계산합니다.</summary>
      <returns>모집단의 분산입니다.</returns>
      <param name="collection">계산을 수행할 컬렉션입니다.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.VarP(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
      <summary>이 메서드는 LINQ to Entities 쿼리의 일부로 사용되는 경우 VarP EDM 정식 함수를 호출하여 모집단의 분산을 계산합니다.</summary>
      <returns>모집단의 분산입니다.</returns>
      <param name="collection">계산을 수행할 컬렉션입니다.</param>
    </member>
    <member name="T:System.Data.Entity.DbModelBuilder">
      <summary>CLR 클래스를 데이터베이스 스키마에 매핑합니다.EDM(엔터티 데이터 모델) 모델을 빌드하는 이 코드 중심 방법을 'Code First'라고 합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.DbModelBuilder" /> 클래스의 새 인스턴스를 초기화합니다.초기 모델을 검색하는 프로세스에서는 컴퓨터에 설치된 최신 버전의 Entity Framework에 포함된 규칙의 집합을 사용합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.#ctor(System.Data.Entity.DbModelBuilderVersion)">
      <summary>특정 규칙 집합을 사용하여 초기 모델을 검색할 <see cref="T:System.Data.Entity.DbModelBuilder" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="modelBuilderVersion"> 사용할 규칙의 버전입니다.</param>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.Build(System.Data.Common.DbConnection)">
      <summary>이 작성기를 사용하여 수행된 구성을 기반으로 <see cref="T:System.Data.Entity.Infrastructure.DbModel" />을 만듭니다.생성된 모델의 데이터베이스 계층에 영향을 미치므로 사용되는 데이터베이스 공급자를 확인하는 데 연결이 사용됩니다.</summary>
      <returns>빌드된 모델입니다.</returns>
      <param name="providerConnection">공급자 정보를 확인하는 데 사용할 연결입니다.</param>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.Build(System.Data.Entity.Infrastructure.DbProviderInfo)">
      <summary>이 작성기를 사용하여 수행된 구성을 기반으로 <see cref="T:System.Data.Entity.Infrastructure.DbModel" />을 만듭니다.생성된 모델의 데이터베이스 계층에 영향을 미치기 때문에 공급자 정보를 지정해야 합니다.SqlClient의 경우 고정 이름은 'System.Data.SqlClient'이고 매니페스트 토큰은 버전 연도(예:'2005', '2008' 등)입니다.</summary>
      <returns>빌드된 모델입니다.</returns>
      <param name="providerInfo">모델과 함께 사용할 데이터베이스 공급자입니다.</param>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.ComplexType``1">
      <summary>모델에서 복합 형식으로 형식을 등록하고 복합 형식을 구성하는 데 사용할 수 있는 개체를 반환합니다.이 메서드를 동일한 형식에 대해 여러 번 호출하여 여러 줄의 구성을 수행할 수 있습니다.</summary>
      <returns>지정된 복합 형식에 대한 구성 개체입니다.</returns>
      <typeparam name="TComplexType">등록하거나 구성할 형식입니다.</typeparam>
    </member>
    <member name="P:System.Data.Entity.DbModelBuilder.Configurations">
      <summary>이 DbModelBuilder에 대한 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConfigurationRegistrar" />를 가져옵니다.등록자는 파생 엔터티 및 복합 형식 구성이 이 작성기를 사용하여 등록될 수 있도록 합니다.</summary>
      <returns>이 DbModelBuilder에 대한 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConfigurationRegistrar" />입니다.등록자는 파생 엔터티 및 복합 형식 구성이 이 작성기를 사용하여 등록될 수 있도록 합니다.</returns>
    </member>
    <member name="P:System.Data.Entity.DbModelBuilder.Conventions">
      <summary>규칙을 처리하는 이 DbModelBuilder의 설정에 액세스할 수 있도록 합니다.</summary>
      <returns>규칙을 처리하는 이 DbModelBuilder의 설정에 대한 액세스입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.Entity``1">
      <summary>모델의 일부로 엔터티 형식을 등록하고 엔터티를 구성하는 데 사용할 수 있는 개체를 반환합니다.이 메서드를 동일한 엔터티에 대해 여러 번 호출하여 여러 줄의 구성을 수행할 수 있습니다.</summary>
      <returns>지정된 엔터티 형식에 대한 구성 개체입니다.</returns>
      <typeparam name="TEntityType">등록하거나 구성할 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.Equals(System.Object)">
      <summary>
        <see cref="T:System.Data.Entity.DbModelBuilder" />가 지정된 개체와 같은지 여부를 지정합니다.</summary>
      <returns>
        <see cref="T:System.Data.Entity.DbModelBuilder" />가 지정된 개체와 같으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="obj">비교할 개체입니다.</param>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.GetHashCode">
      <summary>현재 인스턴스의 해시 코드를 반환합니다.</summary>
      <returns>현재 인스턴스에 대한 해시 코드입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.GetType">
      <summary>모듈에서 정의된 명명된 형식을 가져옵니다.</summary>
      <returns>모듈에서 정의된 명명된 형식입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.HasDefaultSchema(System.String)">
      <summary>기본 데이터베이스 스키마 이름을 구성합니다.이 기본 데이터베이스 스키마 이름은 명시적으로 구성된 스키마 이름이 없는 데이터베이스 개체에 사용됩니다.</summary>
      <returns>기본 데이터베이스 스키마 이름입니다.</returns>
      <param name="schema">기본 데이터베이스 스키마의 이름입니다.</param>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.Ignore``1">
      <summary>모델에서 하나의 형식을 제외합니다.초기 모델 검색 중에 규칙에 따라 추가된 형식을 모델에서 제거하는 데 사용됩니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하는 동일한 DbModelBuilder 인스턴스입니다.</returns>
      <typeparam name="T">제외할 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.Ignore(System.Collections.Generic.IEnumerable{System.Type})">
      <summary>모델에서 지정된 형식을 제외합니다.초기 모델 검색 중에 규칙에 따라 추가된 형식을 모델에서 제거하는 데 사용됩니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하는 동일한 DbModelBuilder 인스턴스입니다.</returns>
      <param name="types">모델에서 제외할 형식입니다.</param>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.Properties">
      <summary>모델의 모든 속성에 적용되는 간단한 규칙의 구성을 시작합니다.</summary>
      <returns>규칙에 대한 구성 개체입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.Properties``1">
      <summary>모델에 있는 지정된 형식의 모든 기본 속성에 적용되는 간단한 규칙의 구성을 시작합니다.</summary>
      <returns>규칙에 대한 구성 개체입니다.</returns>
      <typeparam name="T">규칙이 적용될 속성의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.ToString">
      <summary>
        <see cref="T:System.Data.Entity.DbModelBuilder" />의 문자열 표현을 반환합니다.</summary>
      <returns>
        <see cref="T:System.Data.Entity.DbModelBuilder" />의 문자열 표현입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.Types"></member>
    <member name="M:System.Data.Entity.DbModelBuilder.Types``1">
      <typeparam name="T"></typeparam>
    </member>
    <member name="T:System.Data.Entity.DbModelBuilderVersion">
      <summary>이 열거형의 값은 <see cref="T:System.Data.Entity.DbModelBuilder" /> 클래스에 직접 제공되거나 <see cref="T:System.Data.Entity.DbContext" />에서 파생된 클래스에 적용된 <see cref="T:System.Data.Entity.DbModelBuilderVersionAttribute" />에서 사용될 수 있습니다.사용된 값은 코드에서 모델을 빌드할 때("Code First"라고도 함) 사용해야 하는 DbContext 및 DbModelBuilder 규칙의 버전을 정의합니다.</summary>
    </member>
    <member name="F:System.Data.Entity.DbModelBuilderVersion.Latest">
      <summary>
        <see cref="T:System.Data.Entity.DbModelBuilder" /> 및 <see cref="T:System.Data.Entity.DbContext" /> 규칙의 최신 버전을 사용해야 하도록 나타냅니다. </summary>
    </member>
    <member name="F:System.Data.Entity.DbModelBuilderVersion.V4_1">
      <summary>     Entity Framework v4.1과 함께 제공된 <see cref="T:System.Data.Entity.DbModelBuilder" /> 및 <see cref="T:System.Data.Entity.DbContext" /> 규칙의 버전을 사용해야 하도록 나타냅니다. </summary>
    </member>
    <member name="F:System.Data.Entity.DbModelBuilderVersion.V5_0">
      <summary>     Entity Framework v5.0과 함께 제공된 <see cref="T:System.Data.Entity.DbModelBuilder" /> 및 <see cref="T:System.Data.Entity.DbContext" /> 규칙의 버전을 사용해야 하도록 나타냅니다. </summary>
    </member>
    <member name="F:System.Data.Entity.DbModelBuilderVersion.V5_0_Net4">
      <summary />
    </member>
    <member name="F:System.Data.Entity.DbModelBuilderVersion.V6_0">
      <summary>     Entity Framework v6.0과 함께 제공된 <see cref="T:System.Data.Entity.DbModelBuilder" /> 및 <see cref="T:System.Data.Entity.DbContext" /> 규칙의 버전을 사용해야 하도록 나타냅니다. </summary>
    </member>
    <member name="T:System.Data.Entity.DbModelBuilderVersionAttribute">
      <summary>이 특성을 <see cref="T:System.Data.Entity.DbContext" />에서 파생된 클래스에 적용하여 코드에서 모델을 빌드할 때("Code First"라고도 함) 사용해야 하는 DbContext 및 <see cref="T:System.Data.Entity.DbModelBuilder" /> 규칙의 버전을 설정할 수 있습니다.DbModelBuilder 버전에 대한 자세한 내용은 <see cref="T:System.Data.Entity.DbModelBuilderVersion" /> 열거형을 참조하십시오.</summary>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilderVersionAttribute.#ctor(System.Data.Entity.DbModelBuilderVersion)">
      <summary>
        <see cref="T:System.Data.Entity.DbModelBuilderVersionAttribute" /> 클래스의 새 인스턴스를 초기화합니다. </summary>
      <param name="version">     사용할 <see cref="T:System.Data.Entity.DbModelBuilder" /> 규칙 버전입니다. </param>
    </member>
    <member name="P:System.Data.Entity.DbModelBuilderVersionAttribute.Version">
      <summary>
        <see cref="T:System.Data.Entity.DbModelBuilder" /> 규칙 버전을 가져옵니다. </summary>
      <returns>
        <see cref="T:System.Data.Entity.DbModelBuilder" />
      </returns>
    </member>
    <member name="T:System.Data.Entity.DbSet">
      <summary>엔터티의 형식이 빌드 시 알려지지 않은 경우 사용할 수 있는 <see cref="T:System.Data.Entity.DbSet`1" />의 비제네릭 버전입니다.</summary>
    </member>
    <member name="M:System.Data.Entity.DbSet.#ctor"></member>
    <member name="M:System.Data.Entity.DbSet.Add(System.Object)">
      <summary>SaveChanges가 호출될 때 데이터베이스에 삽입되도록 집합의 기반이 되는 컨텍스트에 지정된 엔터티를 Added 상태로 추가합니다.</summary>
      <returns>엔터티입니다.</returns>
      <param name="entity">추가할 엔터티입니다.</param>
    </member>
    <member name="M:System.Data.Entity.DbSet.AddRange(System.Collections.IEnumerable)">
      <summary>지정된 엔터티의 요소를 집합의 끝에 추가합니다.</summary>
      <returns>추가된 지정된 엔터티의 요소입니다.</returns>
      <param name="entities">추가할 엔터티입니다.</param>
    </member>
    <member name="M:System.Data.Entity.DbSet.Attach(System.Object)">
      <summary>집합의 기반이 되는 컨텍스트에 지정된 엔터티를 연결합니다.즉, 엔터티가 마치 데이터베이스에서 읽은 것처럼 변경되지 않은 상태로 컨텍스트에 배치됩니다.</summary>
      <returns>엔터티입니다.</returns>
      <param name="entity">연결할 엔터티입니다.</param>
    </member>
    <member name="M:System.Data.Entity.DbSet.Cast``1">
      <summary>동일한 제네릭 <see cref="T:System.Data.Entity.DbSet`1" /> 개체를 반환합니다.</summary>
      <returns>제네릭 집합 개체입니다.</returns>
      <typeparam name="TEntity">집합이 만들어진 엔터티의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.DbSet.Create">
      <summary>이 집합의 형식에 대해 엔터티의 새 인스턴스를 만듭니다.이 인스턴스는 집합에 추가되거나 연결되지 않습니다.기본 컨텍스트가 프록시를 만들도록 구성되고 엔터티 형식이 프록시를 만들기 위한 요구 사항을 충족하는 경우 반환된 인스턴스는 프록시가 됩니다.</summary>
      <returns>프록시일 수 있는 엔터티 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.DbSet.Create(System.Type)">
      <summary>이 집합의 형식 또는 이 집합의 형식에서 파생된 형식에 대한 엔터티의 새 인스턴스를 만듭니다.이 인스턴스는 집합에 추가되거나 연결되지 않습니다.기본 컨텍스트가 프록시를 만들도록 구성되고 엔터티 형식이 프록시를 만들기 위한 요구 사항을 충족하는 경우 반환된 인스턴스는 프록시가 됩니다.</summary>
      <returns>프록시일 수 있는 엔터티 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.DbSet.Equals(System.Object)">
      <summary>지정된 집합이 현재 집합과 같은지 여부를 반환합니다.</summary>
      <returns>지정된 개체가 현재 집합과 같으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="obj">현재 개체와 비교할 집합입니다.</param>
    </member>
    <member name="M:System.Data.Entity.DbSet.Find(System.Object[])">
      <summary>지정된 기본 키 값이 있는 엔터티를 찾습니다.지정된 기본 키 값이 있는 엔터티가 컨텍스트에 있으면 저장소에 요청하지 않고 해당 엔터티가 즉시 반환됩니다.그렇지 않으면 지정된 기본 키 값이 있는 엔터티가 저장소에 요청되고 이 엔터티가 있으면 컨텍스트에 연결되고 반환됩니다.엔터티가 컨텍스트 또는 저장소에 없으면 null이 반환됩니다.</summary>
      <returns>찾은 엔터티 또는 null입니다.</returns>
      <param name="keyValues">찾을 엔터티의 기본 키 값입니다.</param>
      <exception cref="T:System.InvalidOperationException">지정된 기본 키 값이 있는 엔터티가 컨텍스트에 여러 개 있는 경우 throw됩니다.</exception>
      <exception cref="T:System.InvalidOperationException">엔터티 형식이 이 컨텍스트에 대한 데이터 모델의 일부가 아닌 경우 throw됩니다.</exception>
      <exception cref="T:System.InvalidOperationException">키 값의 형식이 찾을 엔터티 형식에 대한 키 값의 형식과 일치하지 않는 경우 throw됩니다.</exception>
      <exception cref="T:System.InvalidOperationException">컨텍스트가 삭제된 경우에 발생합니다.</exception>
    </member>
    <member name="M:System.Data.Entity.DbSet.FindAsync(System.Object[])">
      <summary>지정된 기본 키 값이 있는 엔터티를 비동기적으로 찾습니다.지정된 기본 키 값이 있는 엔터티가 컨텍스트에 있으면 저장소에 요청하지 않고 해당 엔터티가 즉시 반환됩니다.그렇지 않으면 지정된 기본 키 값이 있는 엔터티가 저장소에 요청되고 이 엔터티가 있으면 컨텍스트에 연결되고 반환됩니다.엔터티가 컨텍스트 또는 저장소에 없으면 null이 반환됩니다.</summary>
      <returns>비동기 찾기 작업을 나타내는 작업입니다.작업 결과에는 찾은 엔터티나 null이 포함됩니다.</returns>
      <param name="keyValues">찾을 엔터티의 기본 키 값입니다.</param>
      <exception cref="T:System.InvalidOperationException">지정된 기본 키 값이 있는 엔터티가 컨텍스트에 여러 개 있는 경우 throw됩니다.</exception>
      <exception cref="T:System.InvalidOperationException">엔터티 형식이 이 컨텍스트에 대한 데이터 모델의 일부가 아닌 경우 throw됩니다.</exception>
      <exception cref="T:System.InvalidOperationException">키 값의 형식이 찾을 엔터티 형식에 대한 키 값의 형식과 일치하지 않는 경우 throw됩니다.</exception>
      <exception cref="T:System.InvalidOperationException">컨텍스트가 삭제된 경우에 발생합니다.</exception>
    </member>
    <member name="M:System.Data.Entity.DbSet.FindAsync(System.Threading.CancellationToken,System.Object[])">
      <summary>지정된 기본 키 값이 있는 엔터티를 비동기적으로 찾습니다.지정된 기본 키 값이 있는 엔터티가 컨텍스트에 있으면 저장소에 요청하지 않고 해당 엔터티가 즉시 반환됩니다.그렇지 않으면 지정된 기본 키 값이 있는 엔터티가 저장소에 요청되고 이 엔터티가 있으면 컨텍스트에 연결되고 반환됩니다.엔터티가 컨텍스트 또는 저장소에 없으면 null이 반환됩니다.</summary>
      <returns>비동기 찾기 작업을 나타내는 작업입니다.작업 결과에는 찾은 엔터티나 null이 포함됩니다.</returns>
      <param name="cancellationToken">작업이 완료되기를 기다리는 동안 관찰할 <see cref="T:System.Threading.CancellationToken" />입니다.</param>
      <param name="keyValues">찾을 엔터티의 기본 키 값입니다.</param>
      <exception cref="T:System.InvalidOperationException">지정된 기본 키 값이 있는 엔터티가 컨텍스트에 여러 개 있는 경우 throw됩니다.</exception>
      <exception cref="T:System.InvalidOperationException">엔터티 형식이 이 컨텍스트에 대한 데이터 모델의 일부가 아닌 경우 throw됩니다.</exception>
      <exception cref="T:System.InvalidOperationException">키 값의 형식이 찾을 엔터티 형식에 대한 키 값의 형식과 일치하지 않는 경우 throw됩니다.</exception>
      <exception cref="T:System.InvalidOperationException">컨텍스트가 삭제된 경우에 발생합니다.</exception>
    </member>
    <member name="M:System.Data.Entity.DbSet.GetHashCode">
      <summary>지정된 집합의 해시 함수를 반환합니다.</summary>
      <returns>집합의 해시 함수입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.DbSet.GetType">
      <summary>현재 집합의 형식을 가져옵니다.</summary>
      <returns>현재 집합의 형식입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.DbSet.Local">
      <summary>이 집합의 모든 Added, Unchanged 및 Modified 엔터티의 로컬 뷰를 나타내는 <see cref="T:System.Collections.ObjectModel.ObservableCollection`1" />을 가져옵니다.이 로컬 뷰는 엔터티가 컨텍스트에서 추가되거나 제거될 때 동기화 상태로 유지됩니다.이와 마찬가지로 로컬 뷰에서 추가되거나 제거된 엔터티는 자동으로 컨텍스트에서 추가되거나 제거됩니다.</summary>
      <returns>로컬 뷰입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.DbSet.Remove(System.Object)">
      <summary>SaveChanges가 호출될 때 데이터베이스에서 삭제되도록 지정된 엔터티를 Deleted로 표시합니다.이 메서드가 호출되기 전에 다른 상태의 엔터티가 컨텍스트에 있어야 합니다.</summary>
      <returns>엔터티입니다.</returns>
      <param name="entity">제거할 엔터티입니다.</param>
    </member>
    <member name="M:System.Data.Entity.DbSet.RemoveRange(System.Collections.IEnumerable)">
      <summary>지정된 엔터티의 요소를 집합의 끝에서 제거합니다.</summary>
      <returns>제거된 엔터티가 있는 집합입니다.</returns>
      <param name="entities">제거할 엔터티입니다.</param>
    </member>
    <member name="M:System.Data.Entity.DbSet.SqlQuery(System.String,System.Object[])">
      <summary>이 집합에 엔터티를 반환할 원시 SQL 쿼리를 만듭니다.기본적으로 반환된 엔터티는 컨텍스트에서 추적됩니다. 이는 반환된 <see cref="T:System.Data.Entity.Infrastructure.DbRawSqlQuery" />에 대해 AsNoTracking을 호출하여 변경할 수 있습니다.반환된 엔터티의 형식은 항상 이 집합에 대한 형식이며 파생 형식이 아닙니다.쿼리된 테이블에 다른 엔터티 형식의 데이터가 포함될 수 있는 경우 SQL 쿼리는 올바른 형식의 엔터티만 반환되도록 적절하게 작성되어야 합니다.</summary>
      <returns> 열거될 때 쿼리를 실행할 <see cref="T:System.Data.Entity.Infrastructure.DbSqlQuery" /> 개체입니다.</returns>
      <param name="sql">SQL 쿼리 문자열입니다.</param>
      <param name="parameters">SQL 쿼리 문자열에 적용할 매개 변수입니다.</param>
    </member>
    <member name="T:System.Data.Entity.DbSet`1">
      <summary>DbSet은 컨텍스트의 모든 엔터티 컬렉션이나 데이터베이스에서 쿼리될 수 있는, 지정된 형식의 엔터티 컬렉션을 나타냅니다.DbSet 개체는 DbContext.Set 메서드를 사용하여 DbContext에서 만들어집니다.</summary>
      <typeparam name="TEntity"> 집합을 정의하는 형식입니다. </typeparam>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.#ctor"></member>
    <member name="M:System.Data.Entity.DbSet`1.Add(`0)">
      <summary>SaveChanges가 호출될 때 데이터베이스에 삽입되도록 집합의 기반이 되는 컨텍스트에 지정된 엔터티를 Added 상태로 추가합니다.</summary>
      <param name="entity">추가할 엔터티입니다.</param>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.AddRange(System.Collections.Generic.IEnumerable{`0})"></member>
    <member name="M:System.Data.Entity.DbSet`1.Attach(`0)">
      <summary>집합의 기반이 되는 컨텍스트에 지정된 엔터티를 연결합니다.즉, 엔터티가 마치 데이터베이스에서 읽은 것처럼 변경되지 않은 상태로 컨텍스트에 배치됩니다.</summary>
      <param name="entity">연결할 엔터티입니다.</param>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.Create">
      <summary>이 집합의 형식에 대해 엔터티의 새 인스턴스를 만듭니다.이 인스턴스는 집합에 추가되거나 연결되지 않습니다.기본 컨텍스트가 프록시를 만들도록 구성되고 엔터티 형식이 프록시를 만들기 위한 요구 사항을 충족하는 경우 반환된 인스턴스는 프록시가 됩니다.</summary>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.Create``1">
      <summary>이 집합의 형식 또는 이 집합의 형식에서 파생된 형식에 대한 엔터티의 새 인스턴스를 만듭니다.이 인스턴스는 집합에 추가되거나 연결되지 않습니다.기본 컨텍스트가 프록시를 만들도록 구성되고 엔터티 형식이 프록시를 만들기 위한 요구 사항을 충족하는 경우 반환된 인스턴스는 프록시가 됩니다.</summary>
      <typeparam name="TDerivedEntity">만들 엔터티의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.Equals(System.Object)">
      <summary>지정한 DbSet과 현재 DbSet이 같은지 여부를 확인합니다.</summary>
      <returns>지정된 DbSet이 현재 DbSet과 같으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="obj">현재 DbSet과 비교할 개체입니다.</param>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.Find(System.Object[])">
      <summary>지정된 기본 키 값이 있는 엔터티를 찾습니다.지정된 기본 키 값이 있는 엔터티가 컨텍스트에 있으면 저장소에 요청하지 않고 해당 엔터티가 즉시 반환됩니다.그렇지 않으면 지정된 기본 키 값이 있는 엔터티가 저장소에 요청되고 이 엔터티가 있으면 컨텍스트에 연결되고 반환됩니다.엔터티가 컨텍스트 또는 저장소에 없으면 null이 반환됩니다.</summary>
      <param name="keyValues">찾을 엔터티의 기본 키 값입니다.</param>
      <exception cref="T:System.InvalidOperationException">지정된 기본 키 값이 있는 엔터티가 컨텍스트에 여러 개 있는 경우 throw됩니다.</exception>
      <exception cref="T:System.InvalidOperationException">엔터티 형식이 이 컨텍스트에 대한 데이터 모델의 일부가 아닌 경우 throw됩니다.</exception>
      <exception cref="T:System.InvalidOperationException">키 값의 형식이 찾을 엔터티 형식에 대한 키 값의 형식과 일치하지 않는 경우 throw됩니다.</exception>
      <exception cref="T:System.InvalidOperationException">컨텍스트가 삭제된 경우에 발생합니다.</exception>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.FindAsync(System.Object[])"></member>
    <member name="M:System.Data.Entity.DbSet`1.FindAsync(System.Threading.CancellationToken,System.Object[])">
      <summary>지정된 기본 키 값이 있는 엔터티를 비동기적으로 찾습니다.지정된 기본 키 값이 있는 엔터티가 컨텍스트에 있으면 저장소에 요청하지 않고 해당 엔터티가 즉시 반환됩니다.그렇지 않으면 지정된 기본 키 값이 있는 엔터티가 저장소에 요청되고 이 엔터티가 있으면 컨텍스트에 연결되고 반환됩니다.엔터티가 컨텍스트 또는 저장소에 없으면 null이 반환됩니다.</summary>
      <returns>비동기 찾기 작업을 나타내는 작업입니다.작업 결과에는 찾은 엔터티나 null이 포함됩니다.</returns>
      <param name="cancellationToken">작업이 완료되기를 기다리는 동안 관찰할 <see cref="T:System.Threading.CancellationToken" />입니다.</param>
      <param name="keyValues">찾을 엔터티의 기본 키 값입니다.</param>
      <exception cref="T:System.InvalidOperationException">지정된 기본 키 값이 있는 엔터티가 컨텍스트에 여러 개 있는 경우 throw됩니다.</exception>
      <exception cref="T:System.InvalidOperationException">엔터티 형식이 이 컨텍스트에 대한 데이터 모델의 일부가 아닌 경우 throw됩니다.</exception>
      <exception cref="T:System.InvalidOperationException">키 값의 형식이 찾을 엔터티 형식에 대한 키 값의 형식과 일치하지 않는 경우 throw됩니다.</exception>
      <exception cref="T:System.InvalidOperationException">컨텍스트가 삭제된 경우에 발생합니다.</exception>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.GetHashCode">
      <summary>이 DbSet의 해시 함수를 반환합니다.</summary>
      <returns>이 DbSet의 해시 함수입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.GetType">
      <summary>현재 DbSet의 형식을 반환합니다.</summary>
      <returns>현재 DbSet의 형식입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.DbSet`1.Local">
      <summary>이 집합의 모든 Added, Unchanged 및 Modified 엔터티의 로컬 뷰를 나타내는 <see cref="T:System.Collections.ObjectModel.ObservableCollection`1" />을 가져옵니다.이 로컬 뷰는 엔터티가 컨텍스트에서 추가되거나 제거될 때 동기화 상태로 유지됩니다.이와 마찬가지로 로컬 뷰에서 추가되거나 제거된 엔터티는 자동으로 컨텍스트에서 추가되거나 제거됩니다.</summary>
      <returns>로컬 뷰입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.op_Implicit(System.Data.Entity.DbSet{`0})~System.Data.Entity.DbSet"></member>
    <member name="M:System.Data.Entity.DbSet`1.Remove(`0)">
      <summary>SaveChanges가 호출될 때 데이터베이스에서 삭제되도록 지정된 엔터티를 Deleted로 표시합니다.이 메서드가 호출되기 전에 다른 상태의 엔터티가 컨텍스트에 있어야 합니다.</summary>
      <param name="entity">제거할 엔터티입니다.</param>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.RemoveRange(System.Collections.Generic.IEnumerable{`0})"></member>
    <member name="M:System.Data.Entity.DbSet`1.SqlQuery(System.String,System.Object[])">
      <summary>이 집합에 엔터티를 반환할 원시 SQL 쿼리를 만듭니다.기본적으로 반환된 엔터티는 컨텍스트에서 추적됩니다. 이는 반환된 <see cref="T:System.Data.Entity.Infrastructure.DbSqlQuery`1" />에 대해 AsNoTracking을 호출하여 변경할 수 있습니다.반환된 엔터티의 형식은 항상 이 집합에 대한 형식이며 파생 형식이 아닙니다.쿼리된 테이블에 다른 엔터티 형식의 데이터가 포함될 수 있는 경우 SQL 쿼리는 올바른 형식의 엔터티만 반환되도록 적절하게 작성되어야 합니다.</summary>
      <returns>열거될 때 쿼리를 실행할 <see cref="T:System.Data.Entity.Infrastructure.DbSqlQuery`1" /> 개체입니다.</returns>
      <param name="sql">SQL 쿼리 문자열입니다.</param>
      <param name="parameters">SQL 쿼리 문자열에 적용할 매개 변수입니다.</param>
    </member>
    <member name="T:System.Data.Entity.DropCreateDatabaseAlways`1">
      <summary>컨텍스트가 응용 프로그램 도메인에서 처음 사용될 때 항상 데이터베이스를 다시 만들고 선택적으로 데이터베이스를 다시 시드할 IDatabaseInitializer의 구현입니다.데이터베이스를 시드하려면 파생 클래스를 만들고 Seed 메서드를 재정의합니다.</summary>
      <typeparam name="TContext"> 컨텍스트의 형식입니다. </typeparam>
    </member>
    <member name="M:System.Data.Entity.DropCreateDatabaseAlways`1.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.DropCreateDatabaseAlways`1" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.DropCreateDatabaseAlways`1.InitializeDatabase(`0)">
      <summary>     전략을 실행하여 지정된 컨텍스트에 대한 데이터베이스를 초기화합니다. </summary>
      <param name="context"> 컨텍스트입니다. </param>
      <exception cref="T:System.ArgumentNullException">context가 null인 경우</exception>
    </member>
    <member name="M:System.Data.Entity.DropCreateDatabaseAlways`1.Seed(`0)">
      <summary>시드를 위해 실제로 컨텍스트에 데이터를 추가하도록 재정의되어야 하는 메서드입니다.기본 구현은 아무 작업도 수행하지 않습니다.</summary>
      <param name="context"> 시드할 컨텍스트입니다. </param>
    </member>
    <member name="T:System.Data.Entity.DropCreateDatabaseIfModelChanges`1">
      <summary>     데이터베이스가 만들어진 후 모델이 변경된 경우에만 데이터베이스를 &lt;b&gt;삭제&lt;/b&gt;하고, 다시 만들고, 선택적으로 데이터베이스를 다시 시드할 IDatabaseInitializer의 구현입니다. </summary>
      <typeparam name="TContext"></typeparam>
    </member>
    <member name="M:System.Data.Entity.DropCreateDatabaseIfModelChanges`1.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.DropCreateDatabaseIfModelChanges`1" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.DropCreateDatabaseIfModelChanges`1.InitializeDatabase(`0)">
      <summary>     전략을 실행하여 지정된 컨텍스트에 대한 데이터베이스를 초기화합니다. </summary>
      <param name="context"> 컨텍스트입니다. </param>
      <exception cref="T:System.ArgumentNullException">context가 null인 경우</exception>
    </member>
    <member name="M:System.Data.Entity.DropCreateDatabaseIfModelChanges`1.Seed(`0)">
      <summary>시드를 위해 실제로 컨텍스트에 데이터를 추가하도록 재정의되어야 하는 메서드입니다.기본 구현은 아무 작업도 수행하지 않습니다.</summary>
      <param name="context"> 시드할 컨텍스트입니다. </param>
    </member>
    <member name="T:System.Data.Entity.EntityState">
      <summary>     엔터티의 상태를 설명합니다. </summary>
    </member>
    <member name="F:System.Data.Entity.EntityState.Added">
      <summary>     엔터티가 컨텍스트에서 추적되고 있지만 아직 데이터베이스에 없습니다. </summary>
    </member>
    <member name="F:System.Data.Entity.EntityState.Deleted">
      <summary>     엔터티가 컨텍스트에서 추적되고 있고 데이터베이스에 있지만 다음에 SaveChanges가 호출될 때 데이터베이스에서 삭제되도록 표시되었습니다. </summary>
    </member>
    <member name="F:System.Data.Entity.EntityState.Detached">
      <summary>엔터티가 컨텍스트에서 추적되고 있지 않습니다.엔터티는 new 연산자 또는 <see cref="T:System.Data.Entity.DbSet" /> Create 메서드 중 하나를 사용하여 만들어진 후 즉시 이 상태가 됩니다.</summary>
    </member>
    <member name="F:System.Data.Entity.EntityState.Modified">
      <summary>     엔터티가 컨텍스트에서 추적되고 있고 데이터베이스에 있으며 엔터티의 속성 값 중 일부나 전체가 수정되었습니다. </summary>
    </member>
    <member name="F:System.Data.Entity.EntityState.Unchanged">
      <summary>     엔터티가 컨텍스트에서 추적되고 있고 데이터베이스에 있으며 엔터티의 속성 값이 데이터베이스의 값에서 변경되지 않았습니다. </summary>
    </member>
    <member name="T:System.Data.Entity.IDatabaseInitializer`1">
      <summary>이 인터페이스의 구현은 <see cref="T:System.Data.Entity.DbContext" /> 파생 클래스의 인스턴스가 처음으로 사용될 때 기본 데이터베이스를 초기화하는 데 사용됩니다.이 초기화는 조건에 따라 데이터베이스를 만들거나 데이터베이스를 데이터로 시드할 수 있습니다.사용되는 전략은 <see cref="T:System.Data.Entity.Database" /> 클래스의 정적 InitializationStrategy 속성을 사용하여 설정됩니다.<see cref="T:System.Data.Entity.DropCreateDatabaseIfModelChanges`1" />, <see cref="T:System.Data.Entity.DropCreateDatabaseAlways`1" /> 및 <see cref="T:System.Data.Entity.CreateDatabaseIfNotExists`1" /> 구현이 제공됩니다.</summary>
      <typeparam name="TContext">이 유형 매개 변수는 반공변(contravariant)입니다. 즉, 지정한 유형 또는 보다 적게 파생된 모든 유형을 사용할 수 있습니다. 공변(covariance) 및 반공변(contravariance)에 대한 자세한 내용은 을(를) 참조하십시오.</typeparam>
    </member>
    <member name="M:System.Data.Entity.IDatabaseInitializer`1.InitializeDatabase(`0)">
      <summary>     전략을 실행하여 지정된 컨텍스트에 대한 데이터베이스를 초기화합니다. </summary>
      <param name="context"> 컨텍스트입니다. </param>
    </member>
    <member name="T:System.Data.Entity.IDbSet`1">
      <summary>IDbSet은 컨텍스트의 모든 엔터티 컬렉션이나 데이터베이스에서 쿼리될 수 있는, 지정된 형식의 엔터티 컬렉션을 나타냅니다.DbSet은 IDbSet의 구체적인 구현입니다.</summary>
      <typeparam name="TEntity"> 집합을 정의하는 형식입니다. </typeparam>
    </member>
    <member name="M:System.Data.Entity.IDbSet`1.Add(`0)">
      <summary>     SaveChanges가 호출될 때 데이터베이스에 삽입되도록 집합의 기반이 되는 컨텍스트에 지정된 엔터티를 Added 상태로 추가합니다. </summary>
      <param name="entity"> 추가할 엔터티입니다. </param>
    </member>
    <member name="M:System.Data.Entity.IDbSet`1.Attach(`0)">
      <summary>집합의 기반이 되는 컨텍스트에 지정된 엔터티를 연결합니다.즉, 엔터티가 마치 데이터베이스에서 읽은 것처럼 Unchanged 상태로 컨텍스트에 배치됩니다.</summary>
      <param name="entity"> 연결할 엔터티입니다. </param>
    </member>
    <member name="M:System.Data.Entity.IDbSet`1.Create">
      <summary>이 집합의 형식에 대해 엔터티의 새 인스턴스를 만듭니다.이 인스턴스는 집합에 추가되거나 연결되지 않습니다.기본 컨텍스트가 프록시를 만들도록 구성되고 엔터티 형식이 프록시를 만들기 위한 요구 사항을 충족하는 경우 반환된 인스턴스는 프록시가 됩니다.</summary>
    </member>
    <member name="M:System.Data.Entity.IDbSet`1.Create``1">
      <summary>이 집합의 형식 또는 이 집합의 형식에서 파생된 형식에 대한 엔터티의 새 인스턴스를 만듭니다.이 인스턴스는 집합에 추가되거나 연결되지 않습니다.기본 컨텍스트가 프록시를 만들도록 구성되고 엔터티 형식이 프록시를 만들기 위한 요구 사항을 충족하는 경우 반환된 인스턴스는 프록시가 됩니다.</summary>
      <typeparam name="TDerivedEntity"> 만들 엔터티의 형식입니다. </typeparam>
    </member>
    <member name="M:System.Data.Entity.IDbSet`1.Find(System.Object[])">
      <summary>지정된 기본 키 값이 있는 엔터티를 찾습니다.지정된 기본 키 값이 있는 엔터티가 컨텍스트에 있으면 저장소에 요청하지 않고 해당 엔터티가 즉시 반환됩니다.그렇지 않으면 지정된 기본 키 값이 있는 엔터티가 저장소에 요청되고 이 엔터티가 있으면 컨텍스트에 연결되고 반환됩니다.엔터티가 컨텍스트 또는 저장소에 없으면 null이 반환됩니다.</summary>
      <param name="keyValues"> 찾을 엔터티의 기본 키 값입니다. </param>
    </member>
    <member name="P:System.Data.Entity.IDbSet`1.Local">
      <summary>이 집합의 모든 Added, Unchanged 및 Modified 엔터티의 로컬 뷰를 나타내는 <see cref="T:System.Collections.ObjectModel.ObservableCollection`1" />을 가져옵니다.이 로컬 뷰는 엔터티가 컨텍스트에서 추가되거나 제거될 때 동기화 상태로 유지됩니다.이와 마찬가지로 로컬 뷰에서 추가되거나 제거된 엔터티는 자동으로 컨텍스트에서 추가되거나 제거됩니다.</summary>
      <returns> 로컬 뷰입니다. </returns>
    </member>
    <member name="M:System.Data.Entity.IDbSet`1.Remove(`0)">
      <summary>SaveChanges가 호출될 때 데이터베이스에서 삭제되도록 지정된 엔터티를 Deleted로 표시합니다.이 메서드가 호출되기 전에 다른 상태의 엔터티가 컨텍스트에 있어야 합니다.</summary>
      <param name="entity"> 제거할 엔터티입니다. </param>
    </member>
    <member name="T:System.Data.Entity.MigrateDatabaseToLatestVersion`2">
      <summary>Code First 마이그레이션을 사용하여 데이터베이스를 최신 버전으로 업데이트하는 <see cref="T:System.Data.Entity.IDatabaseInitializer`1" />의 구현을 나타냅니다.</summary>
      <typeparam name="TContext">컨텍스트의 형식입니다.</typeparam>
      <typeparam name="TMigrationsConfiguration">마이그레이션 구성의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.MigrateDatabaseToLatestVersion`2.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.MigrateDatabaseToLatestVersion`2" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.MigrateDatabaseToLatestVersion`2.#ctor(System.String)">
      <summary>마이그레이션을 수행하기 위해 구성 파일의 특정 연결 문자열을 사용하여 데이터베이스에 연결하는 <see cref="T:System.Data.Entity.MigrateDatabaseToLatestVersion`2" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="connectionStringName">마이그레이션에 사용할 연결 문자열의 이름입니다.</param>
    </member>
    <member name="M:System.Data.Entity.MigrateDatabaseToLatestVersion`2.InitializeDatabase(`0)">
      <summary>지정된 컨텍스트에 대한 데이터베이스를 초기화합니다.</summary>
      <param name="context">컨텍스트입니다.</param>
    </member>
    <member name="T:System.Data.Entity.NullDatabaseInitializer`1">
      <summary>아무 작업도 수행하지 않는 <see cref="T:System.Data.Entity.IDatabaseInitializer`1" />의 구현입니다.이 이니셜라이저를 사용하면 지정된 컨텍스트 형식에 대한 데이터베이스 초기화를 사용하지 않도록 설정됩니다.이 클래스의 인스턴스를 <see cref="M:System.Data.Entity.Database.SetInitializer``1(System.Data.Entity.IDatabaseInitializer{``0})" />에 전달하는 것은 null을 전달하는 것과 같습니다.<see cref="T:System.Data.Entity.Config.IDbDependencyResolver" />가 이니셜라이저를 확인하는 데 사용되는 경우 이 클래스의 인스턴스를 사용하여 초기화를 사용하지 않도록 설정해야 합니다.</summary>
      <typeparam name="TContext">컨텍스트의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.NullDatabaseInitializer`1.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.NullDatabaseInitializer`1" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.NullDatabaseInitializer`1.InitializeDatabase(`0)">
      <summary>전략을 실행하여 지정된 컨텍스트에 대한 데이터베이스를 초기화합니다.</summary>
      <param name="context">컨텍스트입니다.</param>
    </member>
    <member name="T:System.Data.Entity.ObservableCollectionExtensions">
      <summary>식별할 수 있는 컬렉션에 대한 확장 메서드를 제공합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.ObservableCollectionExtensions.ToBindingList``1(System.Collections.ObjectModel.ObservableCollection{``0})">
      <summary>지정된 <see cref="T:System.Collections.ObjectModel.ObservableCollection`1" />과 동기화 상태로 유지되는 <see cref="T:System.ComponentModel.BindingList`1" /> 구현을 반환합니다.</summary>
      <returns>바인딩 목록입니다.</returns>
      <param name="source">바인딩 목록이 동기화 상태로 유지될 컬렉션입니다.</param>
      <typeparam name="T">요소 형식입니다.</typeparam>
    </member>
    <member name="T:System.Data.Entity.QueryableExtensions">
      <summary>Entity Framework LINQ 쿼리와 함께 사용할 수 있는 유용한 확장 메서드입니다.</summary>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AllAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>시퀀스의 모든 요소가 조건을 만족하는지 여부를 비동기적으로 확인합니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.소스 시퀀스의 모든 요소가 지정된 조건자에서 테스트를 통과하면 작업 결과에 true가 포함되고, 그렇지 않으면 false가 포함됩니다.</returns>
      <param name="source">조건에 대해 테스트할 요소가 포함된 <see cref="T:System.Linq.IQueryable`1" />입니다.</param>
      <param name="predicate">각 요소를 조건에 대해 테스트하는 함수입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="predicate" />가 null인 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" />가 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />를 구현하지 않는 경우</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AllAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)">
      <summary>시퀀스의 모든 요소가 조건을 만족하는지 여부를 비동기적으로 확인합니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.소스 시퀀스의 모든 요소가 지정된 조건자에서 테스트를 통과하면 작업 결과에 true가 포함되고, 그렇지 않으면 false가 포함됩니다.</returns>
      <param name="source">조건에 대해 테스트할 요소가 포함된 <see cref="T:System.Linq.IQueryable`1" />입니다.</param>
      <param name="predicate">각 요소를 조건에 대해 테스트하는 함수입니다.</param>
      <param name="cancellationToken">작업이 완료되기를 기다리는 동안 관찰할 <see cref="T:System.Threading.CancellationToken" />입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="predicate" />가 null인 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" />가 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />를 구현하지 않는 경우</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AnyAsync``1(System.Linq.IQueryable{``0})">
      <summary>시퀀스에 요소가 포함되어 있는지 여부를 비동기적으로 확인합니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.소스 시퀀스에 요소가 포함되어 있으면 작업 결과에 true가 포함되고, 그렇지 않으면 false가 포함됩니다.</returns>
      <param name="source">비어 있는지 확인할 <see cref="T:System.Linq.IQueryable`1" />입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />가 null인 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" />가 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />를 구현하지 않는 경우</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AnyAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>시퀀스의 요소 중에 조건을 만족하는 요소가 있는지 여부를 비동기적으로 확인합니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.소스 시퀀스의 요소 중에 지정된 조건자에서 테스트를 통과하는 요소가 있으면 작업 결과에 true가 포함되고, 그렇지 않으면 false가 포함됩니다.</returns>
      <param name="source">조건에 대해 테스트할 요소가 포함된 <see cref="T:System.Linq.IQueryable`1" />입니다.</param>
      <param name="predicate">각 요소를 조건에 대해 테스트하는 함수입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="predicate" />가 null인 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" />가 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />를 구현하지 않는 경우</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AnyAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)">
      <summary>시퀀스의 요소 중에 조건을 만족하는 요소가 있는지 여부를 비동기적으로 확인합니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.소스 시퀀스의 요소 중에 지정된 조건자에서 테스트를 통과하는 요소가 있으면 작업 결과에 true가 포함되고, 그렇지 않으면 false가 포함됩니다.</returns>
      <param name="source">조건에 대해 테스트할 요소가 포함된 <see cref="T:System.Linq.IQueryable`1" />입니다.</param>
      <param name="predicate">각 요소를 조건에 대해 테스트하는 함수입니다.</param>
      <param name="cancellationToken">작업이 완료되기를 기다리는 동안 관찰할 <see cref="T:System.Threading.CancellationToken" />입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="predicate" />가 null인 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" />가 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />를 구현하지 않는 경우</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AnyAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)">
      <summary>시퀀스에 요소가 포함되어 있는지 여부를 비동기적으로 확인합니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.소스 시퀀스에 요소가 포함되어 있으면 작업 결과에 true가 포함되고, 그렇지 않으면 false가 포함됩니다.</returns>
      <param name="source">비어 있는지 확인할 <see cref="T:System.Linq.IQueryable`1" />입니다.</param>
      <param name="cancellationToken">작업이 완료되기를 기다리는 동안 관찰할 <see cref="T:System.Threading.CancellationToken" />입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />가 null인 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" />가 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />를 구현하지 않는 경우</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AsNoTracking(System.Linq.IQueryable)">
      <summary>반환된 엔터티가 <see cref="T:System.Data.Entity.DbContext" /> 또는 <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" />에서 캐시되지 않을 새 쿼리를 반환합니다.이 메서드는 기본 쿼리 개체의 AsNoTracking 메서드를 호출하여 작동합니다.기본 쿼리 개체에 AsNoTracking 메서드가 없는 경우 이 메서드를 호출하면 아무 영향도 미치지 않습니다.</summary>
      <returns>NoTracking이 적용된 새 쿼리이거나, NoTracking이 지원되지 않는 경우 소스 쿼리입니다.</returns>
      <param name="source">소스 쿼리입니다.</param>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AsNoTracking``1(System.Linq.IQueryable{``0})">
      <summary>반환된 엔터티가 <see cref="T:System.Data.Entity.DbContext" /> 또는 <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" />에서 캐시되지 않을 새 쿼리를 반환합니다.이 메서드는 기본 쿼리 개체의 AsNoTracking 메서드를 호출하여 작동합니다.기본 쿼리 개체에 AsNoTracking 메서드가 없는 경우 이 메서드를 호출하면 아무 영향도 미치지 않습니다.</summary>
      <returns>NoTracking이 적용된 새 쿼리이거나, NoTracking이 지원되지 않는 경우 소스 쿼리입니다.</returns>
      <param name="source">소스 쿼리입니다.</param>
      <typeparam name="T">요소 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AsStreaming(System.Linq.IQueryable)">
      <summary>버퍼링 대신 결과를 스트리밍할 새 쿼리를 반환합니다.이 메서드는 기본 쿼리 개체의 AsStreaming 메서드를 호출하여 작동합니다.기본 쿼리 개체에 AsStreaming 메서드가 없는 경우 이 메서드를 호출하면 아무 영향도 미치지 않습니다.</summary>
      <returns>AsStreaming이 적용된 새 쿼리이거나, AsStreaming이 지원되지 않는 경우 소스 쿼리입니다.</returns>
      <param name="source">AsStreaming을 적용할 <see cref="T:System.Linq.IQueryable" />입니다.</param>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AsStreaming``1(System.Linq.IQueryable{``0})">
      <summary>버퍼링 대신 결과를 스트리밍할 새 쿼리를 반환합니다.이 메서드는 기본 쿼리 개체의 AsStreaming 메서드를 호출하여 작동합니다.기본 쿼리 개체에 AsStreaming 메서드가 없는 경우 이 메서드를 호출하면 아무 영향도 미치지 않습니다.</summary>
      <returns>AsStreaming이 적용된 새 쿼리이거나, AsStreaming이 지원되지 않는 경우 소스 쿼리입니다.</returns>
      <param name="source">AsStreaming을 적용할 <see cref="T:System.Linq.IQueryable`1" />입니다.</param>
      <typeparam name="T">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Decimal})">
      <summary>
        <see cref="T:System.Decimal" /> 값 시퀀스의 평균을 비동기적으로 계산합니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.작업 결과에는 값 시퀀스의 평균이 포함됩니다.</returns>
      <param name="source">평균을 계산할 <see cref="T:System.Decimal" /> 값의 시퀀스입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />가 null인 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" />가 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />를 구현하지 않는 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" />에 요소가 없는 경우</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Decimal},System.Threading.CancellationToken)">
      <summary>
        <see cref="T:System.Decimal" /> 값 시퀀스의 평균을 비동기적으로 계산합니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.작업 결과에는 값 시퀀스의 평균이 포함됩니다.</returns>
      <param name="source">평균을 계산할 <see cref="T:System.Decimal" /> 값의 시퀀스입니다.</param>
      <param name="cancellationToken">작업이 완료되기를 기다리는 동안 관찰할 <see cref="T:System.Threading.CancellationToken" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />가 null인 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" />가 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />를 구현하지 않는 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" />에 요소가 없는 경우</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Double})">
      <summary>
        <see cref="T:System.Double" /> 값 시퀀스의 평균을 비동기적으로 계산합니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.작업 결과에는 값 시퀀스의 평균이 포함됩니다.</returns>
      <param name="source">평균을 계산할 <see cref="T:System.Double" /> 값의 시퀀스입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />가 null인 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" />가 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />를 구현하지 않는 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" />에 요소가 없는 경우</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Double},System.Threading.CancellationToken)">
      <summary>
        <see cref="T:System.Double" /> 값 시퀀스의 평균을 비동기적으로 계산합니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.작업 결과에는 값 시퀀스의 평균이 포함됩니다.</returns>
      <param name="source">평균을 계산할 <see cref="T:System.Double" /> 값의 시퀀스입니다.</param>
      <param name="cancellationToken">작업이 완료되기를 기다리는 동안 관찰할 <see cref="T:System.Threading.CancellationToken" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />가 null인 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" />가 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />를 구현하지 않는 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" />에 요소가 없는 경우</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Int32})">
      <summary>
        <see cref="T:System.Int32" /> 값 시퀀스의 평균을 비동기적으로 계산합니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.작업 결과에는 값 시퀀스의 평균이 포함됩니다.</returns>
      <param name="source">평균을 계산할 <see cref="T:System.Int32" /> 값의 시퀀스입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />가 null인 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" />가 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />를 구현하지 않는 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" />에 요소가 없는 경우</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Int32},System.Threading.CancellationToken)">
      <summary>
        <see cref="T:System.Int32" /> 값 시퀀스의 평균을 비동기적으로 계산합니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.작업 결과에는 값 시퀀스의 평균이 포함됩니다.</returns>
      <param name="source">평균을 계산할 <see cref="T:System.Int32" /> 값의 시퀀스입니다.</param>
      <param name="cancellationToken">작업이 완료되기를 기다리는 동안 관찰할 <see cref="T:System.Threading.CancellationToken" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />가 null인 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" />가 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />를 구현하지 않는 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" />에 요소가 없는 경우</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Int64})">
      <summary>
        <see cref="T:System.Int64" /> 값 시퀀스의 평균을 비동기적으로 계산합니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.작업 결과에는 값 시퀀스의 평균이 포함됩니다.</returns>
      <param name="source">평균을 계산할 <see cref="T:System.Int64" /> 값의 시퀀스입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />가 null인 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" />가 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />를 구현하지 않는 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" />에 요소가 없는 경우</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Int64},System.Threading.CancellationToken)">
      <summary>
        <see cref="T:System.Int64" /> 값 시퀀스의 평균을 비동기적으로 계산합니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.작업 결과에는 값 시퀀스의 평균이 포함됩니다.</returns>
      <param name="source">평균을 계산할 <see cref="T:System.Int64" /> 값의 시퀀스입니다.</param>
      <param name="cancellationToken">작업이 완료되기를 기다리는 동안 관찰할 <see cref="T:System.Threading.CancellationToken" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />가 null인 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" />가 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />를 구현하지 않는 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" />에 요소가 없는 경우</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Nullable{System.Decimal}})">
      <summary>nullable <see cref="T:System.Decimal" /> 값 시퀀스의 평균을 비동기적으로 계산합니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.작업 결과에는 값 시퀀스의 평균이 포함됩니다.</returns>
      <param name="source">평균을 계산할 nullable <see cref="T:System.Decimal" /> 값의 시퀀스입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />가 null인 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" />가 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />를 구현하지 않는 경우</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Nullable{System.Decimal}},System.Threading.CancellationToken)">
      <summary>nullable <see cref="T:System.Decimal" /> 값 시퀀스의 평균을 비동기적으로 계산합니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.작업 결과에는 값 시퀀스의 평균이 포함됩니다.</returns>
      <param name="source">평균을 계산할 nullable <see cref="T:System.Decimal" /> 값의 시퀀스입니다.</param>
      <param name="cancellationToken">작업이 완료되기를 기다리는 동안 관찰할 <see cref="T:System.Threading.CancellationToken" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />가 null인 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" />가 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />를 구현하지 않는 경우</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Nullable{System.Double}})">
      <summary>nullable <see cref="T:System.Double" /> 값 시퀀스의 평균을 비동기적으로 계산합니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.작업 결과에는 값 시퀀스의 평균이 포함됩니다.</returns>
      <param name="source">평균을 계산할 nullable <see cref="T:System.Double" /> 값의 시퀀스입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />가 null인 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" />가 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />를 구현하지 않는 경우</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Nullable{System.Double}},System.Threading.CancellationToken)">
      <summary>nullable <see cref="T:System.Double" /> 값 시퀀스의 평균을 비동기적으로 계산합니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.작업 결과에는 값 시퀀스의 평균이 포함됩니다.</returns>
      <param name="source">평균을 계산할 nullable <see cref="T:System.Double" /> 값의 시퀀스입니다.</param>
      <param name="cancellationToken">작업이 완료되기를 기다리는 동안 관찰할 <see cref="T:System.Threading.CancellationToken" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />가 null인 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" />가 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />를 구현하지 않는 경우</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Nullable{System.Int32}})">
      <summary>nullable <see cref="T:System.Int32" /> 값 시퀀스의 평균을 비동기적으로 계산합니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.작업 결과에는 값 시퀀스의 평균이 포함됩니다.</returns>
      <param name="source">평균을 계산할 nullable <see cref="T:System.Int32" /> 값의 시퀀스입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />가 null인 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" />가 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />를 구현하지 않는 경우</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Nullable{System.Int32}},System.Threading.CancellationToken)">
      <summary>nullable <see cref="T:System.Int32" /> 값 시퀀스의 평균을 비동기적으로 계산합니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.작업 결과에는 값 시퀀스의 평균이 포함됩니다.</returns>
      <param name="source">평균을 계산할 nullable <see cref="T:System.Int32" /> 값의 시퀀스입니다.</param>
      <param name="cancellationToken">작업이 완료되기를 기다리는 동안 관찰할 <see cref="T:System.Threading.CancellationToken" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />가 null인 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" />가 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />를 구현하지 않는 경우</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Nullable{System.Int64}})">
      <summary>nullable <see cref="T:System.Int64" /> 값 시퀀스의 평균을 비동기적으로 계산합니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.작업 결과에는 값 시퀀스의 평균이 포함됩니다.</returns>
      <param name="source">평균을 계산할 nullable <see cref="T:System.Int64" /> 값의 시퀀스입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />가 null인 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" />가 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />를 구현하지 않는 경우</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Nullable{System.Int64}},System.Threading.CancellationToken)">
      <summary>nullable <see cref="T:System.Int64" /> 값 시퀀스의 평균을 비동기적으로 계산합니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.작업 결과에는 값 시퀀스의 평균이 포함됩니다.</returns>
      <param name="source">평균을 계산할 nullable <see cref="T:System.Int64" /> 값의 시퀀스입니다.</param>
      <param name="cancellationToken">작업이 완료되기를 기다리는 동안 관찰할 <see cref="T:System.Threading.CancellationToken" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />가 null인 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" />가 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />를 구현하지 않는 경우</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Nullable{System.Single}})">
      <summary>nullable <see cref="T:System.Single" /> 값 시퀀스의 평균을 비동기적으로 계산합니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.작업 결과에는 값 시퀀스의 평균이 포함됩니다.</returns>
      <param name="source">평균을 계산할 nullable <see cref="T:System.Single" /> 값의 시퀀스입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />가 null인 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" />가 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />를 구현하지 않는 경우</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Nullable{System.Single}},System.Threading.CancellationToken)">
      <summary>nullable <see cref="T:System.Single" /> 값 시퀀스의 평균을 비동기적으로 계산합니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.작업 결과에는 값 시퀀스의 평균이 포함됩니다.</returns>
      <param name="source">평균을 계산할 nullable <see cref="T:System.Single" /> 값의 시퀀스입니다.</param>
      <param name="cancellationToken">작업이 완료되기를 기다리는 동안 관찰할 <see cref="T:System.Threading.CancellationToken" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />가 null인 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" />가 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />를 구현하지 않는 경우</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Single})">
      <summary>
        <see cref="T:System.Single" /> 값 시퀀스의 평균을 비동기적으로 계산합니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.작업 결과에는 값 시퀀스의 평균이 포함됩니다.</returns>
      <param name="source">평균을 계산할 <see cref="T:System.Single" /> 값의 시퀀스입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />가 null인 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" />가 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />를 구현하지 않는 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" />에 요소가 없는 경우</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Single},System.Threading.CancellationToken)">
      <summary>
        <see cref="T:System.Single" /> 값 시퀀스의 평균을 비동기적으로 계산합니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.작업 결과에는 값 시퀀스의 평균이 포함됩니다.</returns>
      <param name="source">평균을 계산할 <see cref="T:System.Single" /> 값의 시퀀스입니다.</param>
      <param name="cancellationToken">작업이 완료되기를 기다리는 동안 관찰할 <see cref="T:System.Threading.CancellationToken" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />가 null인 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" />가 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />를 구현하지 않는 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" />에 요소가 없는 경우</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})">
      <summary>입력 시퀀스의 각 요소에 대해 프로젝션 함수를 호출하여 가져온 <see cref="T:System.Decimal" /> 값 시퀀스의 평균을 비동기적으로 계산합니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.작업 결과에는 값 시퀀스의 평균이 포함됩니다.</returns>
      <param name="source">평균을 계산할 값의 시퀀스입니다.</param>
      <param name="selector">각 요소에 적용할 프로젝션 함수입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="selector" />가 null인 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" />가 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />를 구현하지 않는 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" />에 요소가 없는 경우</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}},System.Threading.CancellationToken)">
      <summary>입력 시퀀스의 각 요소에 대해 프로젝션 함수를 호출하여 가져온 <see cref="T:System.Decimal" /> 값 시퀀스의 평균을 비동기적으로 계산합니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.작업 결과에는 값 시퀀스의 평균이 포함됩니다.</returns>
      <param name="source">평균을 계산할 값의 시퀀스입니다.</param>
      <param name="selector">각 요소에 적용할 프로젝션 함수입니다.</param>
      <param name="cancellationToken">작업이 완료되기를 기다리는 동안 관찰할 <see cref="T:System.Threading.CancellationToken" />입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="selector" />가 null인 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" />가 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />를 구현하지 않는 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" />에 요소가 없는 경우</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})">
      <summary>입력 시퀀스의 각 요소에 대해 프로젝션 함수를 호출하여 가져온 <see cref="T:System.Double" /> 값 시퀀스의 평균을 비동기적으로 계산합니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.작업 결과에는 값 시퀀스의 평균이 포함됩니다.</returns>
      <param name="source">평균을 계산할 값의 시퀀스입니다.</param>
      <param name="selector">각 요소에 적용할 프로젝션 함수입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="selector" />가 null인 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" />가 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />를 구현하지 않는 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" />에 요소가 없는 경우</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}},System.Threading.CancellationToken)">
      <summary>입력 시퀀스의 각 요소에 대해 프로젝션 함수를 호출하여 가져온 <see cref="T:System.Double" /> 값 시퀀스의 평균을 비동기적으로 계산합니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.작업 결과에는 값 시퀀스의 평균이 포함됩니다.</returns>
      <param name="source">평균을 계산할 값의 시퀀스입니다.</param>
      <param name="selector">각 요소에 적용할 프로젝션 함수입니다.</param>
      <param name="cancellationToken">작업이 완료되기를 기다리는 동안 관찰할 <see cref="T:System.Threading.CancellationToken" />입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="selector" />가 null인 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" />가 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />를 구현하지 않는 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" />에 요소가 없는 경우</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})">
      <summary>입력 시퀀스의 각 요소에 대해 프로젝션 함수를 호출하여 가져온 <see cref="T:System.Int32" /> 값 시퀀스의 평균을 비동기적으로 계산합니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.작업 결과에는 값 시퀀스의 평균이 포함됩니다.</returns>
      <param name="source">평균을 계산할 값의 시퀀스입니다.</param>
      <param name="selector">각 요소에 적용할 프로젝션 함수입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="selector" />가 null인 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" />가 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />를 구현하지 않는 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" />에 요소가 없는 경우</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}},System.Threading.CancellationToken)">
      <summary>입력 시퀀스의 각 요소에 대해 프로젝션 함수를 호출하여 가져온 <see cref="T:System.Int32" /> 값 시퀀스의 평균을 비동기적으로 계산합니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.작업 결과에는 값 시퀀스의 평균이 포함됩니다.</returns>
      <param name="source">평균을 계산할 값의 시퀀스입니다.</param>
      <param name="selector">각 요소에 적용할 프로젝션 함수입니다.</param>
      <param name="cancellationToken">작업이 완료되기를 기다리는 동안 관찰할 <see cref="T:System.Threading.CancellationToken" />입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="selector" />가 null인 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" />가 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />를 구현하지 않는 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" />에 요소가 없는 경우</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})">
      <summary>입력 시퀀스의 각 요소에 대해 프로젝션 함수를 호출하여 가져온 <see cref="T:System.Int64" /> 값 시퀀스의 평균을 비동기적으로 계산합니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.작업 결과에는 값 시퀀스의 평균이 포함됩니다.</returns>
      <param name="source">평균을 계산할 값의 시퀀스입니다.</param>
      <param name="selector">각 요소에 적용할 프로젝션 함수입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="selector" />가 null인 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" />가 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />를 구현하지 않는 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" />에 요소가 없는 경우</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}},System.Threading.CancellationToken)">
      <summary>입력 시퀀스의 각 요소에 대해 프로젝션 함수를 호출하여 가져온 <see cref="T:System.Int64" /> 값 시퀀스의 평균을 비동기적으로 계산합니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.작업 결과에는 값 시퀀스의 평균이 포함됩니다.</returns>
      <param name="source">평균을 계산할 값의 시퀀스입니다.</param>
      <param name="selector">각 요소에 적용할 프로젝션 함수입니다.</param>
      <param name="cancellationToken">작업이 완료되기를 기다리는 동안 관찰할 <see cref="T:System.Threading.CancellationToken" />입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="selector" />가 null인 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" />가 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />를 구현하지 않는 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" />에 요소가 없는 경우</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})">
      <summary>입력 시퀀스의 각 요소에 대해 프로젝션 함수를 호출하여 가져온 nullable <see cref="T:System.Decimal" /> 값 시퀀스의 평균을 비동기적으로 계산합니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.작업 결과에는 값 시퀀스의 평균이 포함됩니다.</returns>
      <param name="source">평균을 계산할 값의 시퀀스입니다.</param>
      <param name="selector">각 요소에 적용할 프로젝션 함수입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="selector" />가 null인 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" />가 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />를 구현하지 않는 경우</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}},System.Threading.CancellationToken)">
      <summary>입력 시퀀스의 각 요소에 대해 프로젝션 함수를 호출하여 가져온 nullable <see cref="T:System.Decimal" /> 값 시퀀스의 평균을 비동기적으로 계산합니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.작업 결과에는 값 시퀀스의 평균이 포함됩니다.</returns>
      <param name="source">평균을 계산할 값의 시퀀스입니다.</param>
      <param name="selector">각 요소에 적용할 프로젝션 함수입니다.</param>
      <param name="cancellationToken">작업이 완료되기를 기다리는 동안 관찰할 <see cref="T:System.Threading.CancellationToken" />입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="selector" />가 null인 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" />가 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />를 구현하지 않는 경우</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})">
      <summary>입력 시퀀스의 각 요소에 대해 프로젝션 함수를 호출하여 가져온 nullable <see cref="T:System.Double" /> 값 시퀀스의 평균을 비동기적으로 계산합니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.작업 결과에는 값 시퀀스의 평균이 포함됩니다.</returns>
      <param name="source">평균을 계산할 값의 시퀀스입니다.</param>
      <param name="selector">각 요소에 적용할 프로젝션 함수입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="selector" />가 null인 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" />가 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />를 구현하지 않는 경우</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}},System.Threading.CancellationToken)">
      <summary>입력 시퀀스의 각 요소에 대해 프로젝션 함수를 호출하여 가져온 nullable <see cref="T:System.Double" /> 값 시퀀스의 평균을 비동기적으로 계산합니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.작업 결과에는 값 시퀀스의 평균이 포함됩니다.</returns>
      <param name="source">평균을 계산할 값의 시퀀스입니다.</param>
      <param name="selector">각 요소에 적용할 프로젝션 함수입니다.</param>
      <param name="cancellationToken">작업이 완료되기를 기다리는 동안 관찰할 <see cref="T:System.Threading.CancellationToken" />입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="selector" />가 null인 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" />가 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />를 구현하지 않는 경우</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})">
      <summary>입력 시퀀스의 각 요소에 대해 프로젝션 함수를 호출하여 가져온 nullable <see cref="T:System.Int32" /> 값 시퀀스의 평균을 비동기적으로 계산합니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.작업 결과에는 값 시퀀스의 평균이 포함됩니다.</returns>
      <param name="source">평균을 계산할 값의 시퀀스입니다.</param>
      <param name="selector">각 요소에 적용할 프로젝션 함수입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="selector" />가 null인 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" />가 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />를 구현하지 않는 경우</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}},System.Threading.CancellationToken)">
      <summary>입력 시퀀스의 각 요소에 대해 프로젝션 함수를 호출하여 가져온 nullable <see cref="T:System.Int32" /> 값 시퀀스의 평균을 비동기적으로 계산합니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.작업 결과에는 값 시퀀스의 평균이 포함됩니다.</returns>
      <param name="source">평균을 계산할 값의 시퀀스입니다.</param>
      <param name="selector">각 요소에 적용할 프로젝션 함수입니다.</param>
      <param name="cancellationToken">작업이 완료되기를 기다리는 동안 관찰할 <see cref="T:System.Threading.CancellationToken" />입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="selector" />가 null인 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" />가 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />를 구현하지 않는 경우</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})">
      <summary>입력 시퀀스의 각 요소에 대해 프로젝션 함수를 호출하여 가져온 nullable <see cref="T:System.Int64" /> 값 시퀀스의 평균을 비동기적으로 계산합니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.작업 결과에는 값 시퀀스의 평균이 포함됩니다.</returns>
      <param name="source">평균을 계산할 값의 시퀀스입니다.</param>
      <param name="selector">각 요소에 적용할 프로젝션 함수입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="selector" />가 null인 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" />가 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />를 구현하지 않는 경우</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}},System.Threading.CancellationToken)">
      <summary>입력 시퀀스의 각 요소에 대해 프로젝션 함수를 호출하여 가져온 nullable <see cref="T:System.Int64" /> 값 시퀀스의 평균을 비동기적으로 계산합니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.작업 결과에는 값 시퀀스의 평균이 포함됩니다.</returns>
      <param name="source">평균을 계산할 값의 시퀀스입니다.</param>
      <param name="selector">각 요소에 적용할 프로젝션 함수입니다.</param>
      <param name="cancellationToken">작업이 완료되기를 기다리는 동안 관찰할 <see cref="T:System.Threading.CancellationToken" />입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="selector" />가 null인 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" />가 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />를 구현하지 않는 경우</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})">
      <summary>입력 시퀀스의 각 요소에 대해 프로젝션 함수를 호출하여 가져온 nullable <see cref="T:System.Single" /> 값 시퀀스의 평균을 비동기적으로 계산합니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.작업 결과에는 값 시퀀스의 평균이 포함됩니다.</returns>
      <param name="source">평균을 계산할 값의 시퀀스입니다.</param>
      <param name="selector">각 요소에 적용할 프로젝션 함수입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="selector" />가 null인 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" />가 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />를 구현하지 않는 경우</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}},System.Threading.CancellationToken)">
      <summary>입력 시퀀스의 각 요소에 대해 프로젝션 함수를 호출하여 가져온 nullable <see cref="T:System.Single" /> 값 시퀀스의 평균을 비동기적으로 계산합니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.작업 결과에는 값 시퀀스의 평균이 포함됩니다.</returns>
      <param name="source">평균을 계산할 값의 시퀀스입니다.</param>
      <param name="selector">각 요소에 적용할 프로젝션 함수입니다.</param>
      <param name="cancellationToken">작업이 완료되기를 기다리는 동안 관찰할 <see cref="T:System.Threading.CancellationToken" />입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="selector" />가 null인 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" />가 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />를 구현하지 않는 경우</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})">
      <summary>입력 시퀀스의 각 요소에 대해 프로젝션 함수를 호출하여 가져온 <see cref="T:System.Single" /> 값 시퀀스의 평균을 비동기적으로 계산합니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.작업 결과에는 값 시퀀스의 평균이 포함됩니다.</returns>
      <param name="source">평균을 계산할 값의 시퀀스입니다.</param>
      <param name="selector">각 요소에 적용할 프로젝션 함수입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="selector" />가 null인 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" />가 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />를 구현하지 않는 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" />에 요소가 없는 경우</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}},System.Threading.CancellationToken)">
      <summary>입력 시퀀스의 각 요소에 대해 프로젝션 함수를 호출하여 가져온 <see cref="T:System.Single" /> 값 시퀀스의 평균을 비동기적으로 계산합니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.작업 결과에는 값 시퀀스의 평균이 포함됩니다.</returns>
      <param name="source">평균을 계산할 값의 시퀀스입니다.</param>
      <param name="selector">각 요소에 적용할 프로젝션 함수입니다.</param>
      <param name="cancellationToken">작업이 완료되기를 기다리는 동안 관찰할 <see cref="T:System.Threading.CancellationToken" />입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="selector" />가 null인 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" />가 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />를 구현하지 않는 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" />에 요소가 없는 경우</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.ContainsAsync``1(System.Linq.IQueryable{``0},``0)">
      <summary>기본 같음 비교자를 사용하여 시퀀스에 지정된 요소가 포함되어 있는지 여부를 비동기적으로 확인합니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.입력 시퀀스에 지정된 값이 포함되어 있으면 작업 결과에 true가 포함되고, 그렇지 않으면 false가 포함됩니다.</returns>
      <param name="source">단일 요소를 반환할 <see cref="T:System.Linq.IQueryable`1" />입니다.</param>
      <param name="item">시퀀스에서 찾을 개체입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />가 null인 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" />가 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />를 구현하지 않는 경우</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.ContainsAsync``1(System.Linq.IQueryable{``0},``0,System.Threading.CancellationToken)">
      <summary>기본 같음 비교자를 사용하여 시퀀스에 지정된 요소가 포함되어 있는지 여부를 비동기적으로 확인합니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.입력 시퀀스에 지정된 값이 포함되어 있으면 작업 결과에 true가 포함되고, 그렇지 않으면 false가 포함됩니다.</returns>
      <param name="source">단일 요소를 반환할 <see cref="T:System.Linq.IQueryable`1" />입니다.</param>
      <param name="item">시퀀스에서 찾을 개체입니다.</param>
      <param name="cancellationToken">작업이 완료되기를 기다리는 동안 관찰할 <see cref="T:System.Threading.CancellationToken" />입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />가 null인 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" />가 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />를 구현하지 않는 경우</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.CountAsync``1(System.Linq.IQueryable{``0})">
      <summary>시퀀스의 요소 수를 비동기적으로 반환합니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.작업 결과에는 입력 시퀀스의 요소 수가 포함됩니다.</returns>
      <param name="source">개수를 셀 요소가 포함된 <see cref="T:System.Linq.IQueryable`1" />입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />가 null인 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" />가 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />를 구현하지 않는 경우</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="source" />의 요소 수가 <see cref="F:System.Int32.MaxValue" />보다 큰 경우</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.CountAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>조건을 만족하는 시퀀스의 요소 수를 비동기적으로 반환합니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.작업 결과에는 조건자 함수의 조건을 만족하는 시퀀스의 요소 수가 포함됩니다.</returns>
      <param name="source">개수를 셀 요소가 포함된 <see cref="T:System.Linq.IQueryable`1" />입니다.</param>
      <param name="predicate">각 요소를 조건에 대해 테스트하는 함수입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="predicate" />가 null인 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" />가 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />를 구현하지 않는 경우</exception>
      <exception cref="T:System.OverflowException">조건자 함수의 조건을 만족하는 <paramref name="source" />의 요소 수가 <see cref="F:System.Int32.MaxValue" />보다 큰 경우</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.CountAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)">
      <summary>조건을 만족하는 시퀀스의 요소 수를 비동기적으로 반환합니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.작업 결과에는 조건자 함수의 조건을 만족하는 시퀀스의 요소 수가 포함됩니다.</returns>
      <param name="source">개수를 셀 요소가 포함된 <see cref="T:System.Linq.IQueryable`1" />입니다.</param>
      <param name="predicate">각 요소를 조건에 대해 테스트하는 함수입니다.</param>
      <param name="cancellationToken">작업이 완료되기를 기다리는 동안 관찰할 <see cref="T:System.Threading.CancellationToken" />입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="predicate" />가 null인 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" />가 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />를 구현하지 않는 경우</exception>
      <exception cref="T:System.OverflowException">조건자 함수의 조건을 만족하는 <paramref name="source" />의 요소 수가 <see cref="F:System.Int32.MaxValue" />보다 큰 경우</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.CountAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)">
      <summary>시퀀스의 요소 수를 비동기적으로 반환합니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.작업 결과에는 입력 시퀀스의 요소 수가 포함됩니다.</returns>
      <param name="source">개수를 셀 요소가 포함된 <see cref="T:System.Linq.IQueryable`1" />입니다.</param>
      <param name="cancellationToken">작업이 완료되기를 기다리는 동안 관찰할 <see cref="T:System.Threading.CancellationToken" />입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />가 null인 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" />가 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />를 구현하지 않는 경우</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="source" />의 요소 수가 <see cref="F:System.Int32.MaxValue" />보다 큰 경우</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.FirstAsync``1(System.Linq.IQueryable{``0})">
      <summary>시퀀스의 첫 번째 요소를 비동기적으로 반환합니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.작업 결과에는 <paramref name="source" />의 첫 번째 요소가 포함됩니다.</returns>
      <param name="source">첫 번째 요소를 반환할 <see cref="T:System.Linq.IQueryable`1" />입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />가 null인 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" />가 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />를 구현하지 않는 경우</exception>
      <exception cref="T:System.InvalidOperationException">소스 시퀀스가 비어 있는 경우</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.FirstAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>지정된 조건을 만족하는 시퀀스의 첫 번째 요소를 비동기적으로 반환합니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.작업 결과에는 <paramref name="predicate" />에서 테스트를 통과하는 <paramref name="source" />의 첫 번째 요소가 포함됩니다.</returns>
      <param name="source">첫 번째 요소를 반환할 <see cref="T:System.Linq.IQueryable`1" />입니다.</param>
      <param name="predicate">각 요소를 조건에 대해 테스트하는 함수입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="predicate" />가 null인 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" />가 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />를 구현하지 않는 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="predicate" />의 조건을 충족하는 요소가 없는 경우</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.FirstAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)">
      <summary>지정된 조건을 만족하는 시퀀스의 첫 번째 요소를 비동기적으로 반환합니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.작업 결과에는 <paramref name="predicate" />에서 테스트를 통과하는 <paramref name="source" />의 첫 번째 요소가 포함됩니다.</returns>
      <param name="source">첫 번째 요소를 반환할 <see cref="T:System.Linq.IQueryable`1" />입니다.</param>
      <param name="predicate">각 요소를 조건에 대해 테스트하는 함수입니다.</param>
      <param name="cancellationToken">작업이 완료되기를 기다리는 동안 관찰할 <see cref="T:System.Threading.CancellationToken" />입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="predicate" />가 null인 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" />가 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />를 구현하지 않는 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="predicate" />의 조건을 충족하는 요소가 없는 경우</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.FirstAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)">
      <summary>시퀀스의 첫 번째 요소를 비동기적으로 반환합니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.작업 결과에는 <paramref name="source" />의 첫 번째 요소가 포함됩니다.</returns>
      <param name="source">첫 번째 요소를 반환할 <see cref="T:System.Linq.IQueryable`1" />입니다.</param>
      <param name="cancellationToken">작업이 완료되기를 기다리는 동안 관찰할 <see cref="T:System.Threading.CancellationToken" />입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />가 null인 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" />가 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />를 구현하지 않는 경우</exception>
      <exception cref="T:System.InvalidOperationException">소스 시퀀스가 비어 있는 경우</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.FirstOrDefaultAsync``1(System.Linq.IQueryable{``0})">
      <summary>시퀀스의 첫 번째 요소 또는 시퀀스에 요소가 없는 경우에는 기본값을 비동기적으로 반환합니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.<paramref name="source" />가 비어 있으면 작업 결과에 default(<paramref name="TSource" />)가 포함되고, 그렇지 않으면 <paramref name="source" />의 첫 번째 요소가 포함됩니다.</returns>
      <param name="source">첫 번째 요소를 반환할 <see cref="T:System.Linq.IQueryable`1" />입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />가 null인 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" />가 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />를 구현하지 않는 경우</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.FirstOrDefaultAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>지정된 조건을 만족하는 시퀀스의 첫 번째 요소 또는 이러한 요소가 없는 경우에는 기본값을 비동기적으로 반환합니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.<paramref name="source" />가 비어 있거나 <paramref name="predicate" />로 지정된 테스트를 통과하는 요소가 없으면 작업 결과에 default(<paramref name="TSource" />)가 포함되고, 그렇지 않으면 <paramref name="predicate" />로 지정된 테스트를 통과하는 <paramref name="source" />의 첫 번째 요소가 포함됩니다.</returns>
      <param name="source">첫 번째 요소를 반환할 <see cref="T:System.Linq.IQueryable`1" />입니다.</param>
      <param name="predicate">각 요소를 조건에 대해 테스트하는 함수입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="predicate" />가 null인 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" />가 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />를 구현하지 않는 경우</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.FirstOrDefaultAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)">
      <summary>지정된 조건을 만족하는 시퀀스의 첫 번째 요소 또는 이러한 요소가 없는 경우에는 기본값을 비동기적으로 반환합니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.<paramref name="source" />가 비어 있거나 <paramref name="predicate" />로 지정된 테스트를 통과하는 요소가 없으면 작업 결과에 default(<paramref name="TSource" />)가 포함되고, 그렇지 않으면 <paramref name="predicate" />로 지정된 테스트를 통과하는 <paramref name="source" />의 첫 번째 요소가 포함됩니다.</returns>
      <param name="source">첫 번째 요소를 반환할 <see cref="T:System.Linq.IQueryable`1" />입니다.</param>
      <param name="predicate">각 요소를 조건에 대해 테스트하는 함수입니다.</param>
      <param name="cancellationToken">작업이 완료되기를 기다리는 동안 관찰할 <see cref="T:System.Threading.CancellationToken" />입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="predicate" />가 null인 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" />가 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />를 구현하지 않는 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" />에 둘 이상의 요소가 있는 경우</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.FirstOrDefaultAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)">
      <summary>시퀀스의 첫 번째 요소 또는 시퀀스에 요소가 없는 경우에는 기본값을 비동기적으로 반환합니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.<paramref name="source" />가 비어 있으면 작업 결과에 default(<paramref name="TSource" />)가 포함되고, 그렇지 않으면 <paramref name="source" />의 첫 번째 요소가 포함됩니다.</returns>
      <param name="source">첫 번째 요소를 반환할 <see cref="T:System.Linq.IQueryable`1" />입니다.</param>
      <param name="cancellationToken">작업이 완료되기를 기다리는 동안 관찰할 <see cref="T:System.Threading.CancellationToken" />입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />가 null인 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" />가 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />를 구현하지 않는 경우</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.ForEachAsync(System.Linq.IQueryable,System.Action{System.Object})">
      <summary>쿼리 결과를 비동기적으로 열거하고 각 요소에 대해 지정된 작업을 수행합니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.</returns>
      <param name="source">열거할 <see cref="T:System.Linq.IQueryable" />입니다.</param>
      <param name="action">각 요소에 대해 수행할 작업입니다.</param>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.ForEachAsync(System.Linq.IQueryable,System.Action{System.Object},System.Threading.CancellationToken)">
      <summary>쿼리 결과를 비동기적으로 열거하고 각 요소에 대해 지정된 작업을 수행합니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.</returns>
      <param name="source">열거할 <see cref="T:System.Linq.IQueryable" />입니다.</param>
      <param name="action">각 요소에 대해 수행할 작업입니다.</param>
      <param name="cancellationToken">작업이 완료되기를 기다리는 동안 관찰할 <see cref="T:System.Threading.CancellationToken" />입니다.</param>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.ForEachAsync``1(System.Linq.IQueryable{``0},System.Action{``0})">
      <summary>쿼리 결과를 비동기적으로 열거하고 각 요소에 대해 지정된 작업을 수행합니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.</returns>
      <param name="source">열거할 <see cref="T:System.Linq.IQueryable`1" />입니다.</param>
      <param name="action">각 요소에 대해 수행할 작업입니다.</param>
      <typeparam name="T">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.ForEachAsync``1(System.Linq.IQueryable{``0},System.Action{``0},System.Threading.CancellationToken)">
      <summary>쿼리 결과를 비동기적으로 열거하고 각 요소에 대해 지정된 작업을 수행합니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.</returns>
      <param name="source">열거할 <see cref="T:System.Linq.IQueryable`1" />입니다.</param>
      <param name="action">각 요소에 대해 수행할 작업입니다.</param>
      <param name="cancellationToken">작업이 완료되기를 기다리는 동안 관찰할 <see cref="T:System.Threading.CancellationToken" />입니다.</param>
      <typeparam name="T">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.Include(System.Linq.IQueryable,System.String)">
      <summary>쿼리 결과에 포함할 관련 개체를 지정합니다.</summary>
      <returns>쿼리 경로가 정의된 새 <see cref="T:System.Linq.IQueryable" />입니다.</returns>
      <param name="source">Include를 호출할 소스 <see cref="T:System.Linq.IQueryable" />입니다.</param>
      <param name="path">쿼리 결과에 반환할 관련 개체의 목록입니다(점으로 구분됨).</param>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.Include``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>쿼리 결과에 포함할 관련 개체를 지정합니다.</summary>
      <returns>쿼리 경로가 정의된 새 IQueryable&amp;lt;T&amp;gt;입니다.</returns>
      <param name="source">Include를 호출할 소스 IQueryable입니다.</param>
      <param name="path">포함할 경로를 나타내는 람다 식입니다.</param>
      <typeparam name="T">쿼리되는 엔터티의 형식입니다.</typeparam>
      <typeparam name="TProperty">포함되는 탐색 속성의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.Include``1(System.Linq.IQueryable{``0},System.String)">
      <summary>쿼리 결과에 포함할 관련 개체를 지정합니다.</summary>
      <returns>쿼리 경로가 정의된 새 <see cref="T:System.Linq.IQueryable`1" />입니다.</returns>
      <param name="source">Include를 호출할 소스 <see cref="T:System.Linq.IQueryable`1" />입니다.</param>
      <param name="path">쿼리 결과에 반환할 관련 개체의 목록입니다(점으로 구분됨).</param>
      <typeparam name="T">쿼리되는 엔터티의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.Load(System.Linq.IQueryable)">
      <summary>
        <see cref="T:System.Data.Entity.DbSet`1" />, <see cref="T:System.Data.Entity.Core.Objects.ObjectSet`1" /> , <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" /> 등의 쿼리와 같은 서버 쿼리의 경우 쿼리의 결과가 연결된 <see cref="T:System.Data.Entity.DbContext" />, <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> 또는 클라이언트의 다른 캐시에 로드되도록 쿼리를 열거합니다.이것은 ToList를 호출한 다음 목록을 실제로 만드는 오버헤드 없이 목록을 제거하는 것과 같습니다.</summary>
      <param name="source">소스 쿼리입니다.</param>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.LoadAsync(System.Linq.IQueryable)">
      <summary>
        <see cref="T:System.Data.Entity.DbSet`1" />, <see cref="T:System.Data.Entity.Core.Objects.ObjectSet`1" /> , <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" /> 등의 쿼리와 같은 서버 쿼리의 경우 쿼리의 결과가 연결된 <see cref="T:System.Data.Entity.DbContext" />, <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> 또는 클라이언트의 다른 캐시에 로드되도록 쿼리를 비동기적으로 열거합니다.이것은 ToList를 호출한 다음 목록을 실제로 만드는 오버헤드 없이 목록을 제거하는 것과 같습니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.</returns>
      <param name="source">소스 쿼리입니다.</param>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.LoadAsync(System.Linq.IQueryable,System.Threading.CancellationToken)">
      <summary>
        <see cref="T:System.Data.Entity.DbSet`1" />, <see cref="T:System.Data.Entity.Core.Objects.ObjectSet`1" /> , <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" /> 등의 쿼리와 같은 서버 쿼리의 경우 쿼리의 결과가 연결된 <see cref="T:System.Data.Entity.DbContext" />, <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> 또는 클라이언트의 다른 캐시에 로드되도록 쿼리를 비동기적으로 열거합니다.이것은 ToList를 호출한 다음 목록을 실제로 만드는 오버헤드 없이 목록을 제거하는 것과 같습니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.</returns>
      <param name="source">소스 쿼리입니다.</param>
      <param name="cancellationToken">작업이 완료되기를 기다리는 동안 관찰할 <see cref="T:System.Threading.CancellationToken" />입니다.</param>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.LongCountAsync``1(System.Linq.IQueryable{``0})">
      <summary>시퀀스의 총 요소 수를 나타내는 <see cref="T:System.Int64" />를 비동기적으로 반환합니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.작업 결과에는 입력 시퀀스의 요소 수가 포함됩니다.</returns>
      <param name="source">개수를 셀 요소가 포함된 <see cref="T:System.Linq.IQueryable`1" />입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />가 null인 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" />가 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />를 구현하지 않는 경우</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="source" />의 요소 수가 <see cref="F:System.Int64.MaxValue" />보다 큰 경우</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.LongCountAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>조건을 만족하는 시퀀스의 요소 수를 나타내는 <see cref="T:System.Int64" />를 비동기적으로 반환합니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.작업 결과에는 조건자 함수의 조건을 만족하는 시퀀스의 요소 수가 포함됩니다.</returns>
      <param name="source">개수를 셀 요소가 포함된 <see cref="T:System.Linq.IQueryable`1" />입니다.</param>
      <param name="predicate">각 요소를 조건에 대해 테스트하는 함수입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="predicate" />가 null인 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" />가 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />를 구현하지 않는 경우</exception>
      <exception cref="T:System.OverflowException">조건자 함수의 조건을 만족하는 <paramref name="source" />의 요소 수가 <see cref="F:System.Int64.MaxValue" />보다 큰 경우</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.LongCountAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)">
      <summary>조건을 만족하는 시퀀스의 요소 수를 나타내는 <see cref="T:System.Int64" />를 비동기적으로 반환합니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.작업 결과에는 조건자 함수의 조건을 만족하는 시퀀스의 요소 수가 포함됩니다.</returns>
      <param name="source">개수를 셀 요소가 포함된 <see cref="T:System.Linq.IQueryable`1" />입니다.</param>
      <param name="predicate">각 요소를 조건에 대해 테스트하는 함수입니다.</param>
      <param name="cancellationToken">작업이 완료되기를 기다리는 동안 관찰할 <see cref="T:System.Threading.CancellationToken" />입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="predicate" />가 null인 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" />가 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />를 구현하지 않는 경우</exception>
      <exception cref="T:System.OverflowException">조건자 함수의 조건을 만족하는 <paramref name="source" />의 요소 수가 <see cref="F:System.Int64.MaxValue" />보다 큰 경우</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.LongCountAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)">
      <summary>시퀀스의 총 요소 수를 나타내는 <see cref="T:System.Int64" />를 비동기적으로 반환합니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.작업 결과에는 입력 시퀀스의 요소 수가 포함됩니다.</returns>
      <param name="source">개수를 셀 요소가 포함된 <see cref="T:System.Linq.IQueryable`1" />입니다.</param>
      <param name="cancellationToken">작업이 완료되기를 기다리는 동안 관찰할 <see cref="T:System.Threading.CancellationToken" />입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />가 null인 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" />가 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />를 구현하지 않는 경우</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="source" />의 요소 수가 <see cref="F:System.Int64.MaxValue" />보다 큰 경우</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.MaxAsync``1(System.Linq.IQueryable{``0})">
      <summary>시퀀스의 최대값을 비동기적으로 반환합니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.작업 결과에는 시퀀스의 최대값이 포함됩니다.</returns>
      <param name="source">최대값을 확인할 요소가 포함된 <see cref="T:System.Linq.IQueryable`1" />입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />가 null인 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" />가 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />를 구현하지 않는 경우</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.MaxAsync``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>시퀀스의 각 요소에 대해 프로젝션 함수를 비동기적으로 호출하고 최대 결과 값을 반환합니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.작업 결과에는 시퀀스의 최대값이 포함됩니다.</returns>
      <param name="source">최대값을 확인할 요소가 포함된 <see cref="T:System.Linq.IQueryable`1" />입니다.</param>
      <param name="selector">각 요소에 적용할 프로젝션 함수입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <typeparam name="TResult">
        <paramref name="selector" />에 지정된 함수가 반환하는 값의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="selector" />가 null인 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" />가 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />를 구현하지 않는 경우</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.MaxAsync``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Threading.CancellationToken)">
      <summary>시퀀스의 각 요소에 대해 프로젝션 함수를 비동기적으로 호출하고 최대 결과 값을 반환합니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.작업 결과에는 시퀀스의 최대값이 포함됩니다.</returns>
      <param name="source">최대값을 확인할 요소가 포함된 <see cref="T:System.Linq.IQueryable`1" />입니다.</param>
      <param name="selector">각 요소에 적용할 프로젝션 함수입니다.</param>
      <param name="cancellationToken">작업이 완료되기를 기다리는 동안 관찰할 <see cref="T:System.Threading.CancellationToken" />입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <typeparam name="TResult">
        <paramref name="selector" />에 지정된 함수가 반환하는 값의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="selector" />가 null인 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" />가 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />를 구현하지 않는 경우</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.MaxAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)">
      <summary>시퀀스의 최대값을 비동기적으로 반환합니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.작업 결과에는 시퀀스의 최대값이 포함됩니다.</returns>
      <param name="source">최대값을 확인할 요소가 포함된 <see cref="T:System.Linq.IQueryable`1" />입니다.</param>
      <param name="cancellationToken">작업이 완료되기를 기다리는 동안 관찰할 <see cref="T:System.Threading.CancellationToken" />입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />가 null인 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" />가 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />를 구현하지 않는 경우</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.MinAsync``1(System.Linq.IQueryable{``0})">
      <summary>시퀀스의 최소값을 비동기적으로 반환합니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.작업 결과에는 시퀀스의 최소값이 포함됩니다.</returns>
      <param name="source">최소값을 확인할 요소가 포함된 <see cref="T:System.Linq.IQueryable`1" />입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />가 null인 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" />가 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />를 구현하지 않는 경우</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.MinAsync``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>시퀀스의 각 요소에 대해 프로젝션 함수를 비동기적으로 호출하고 최소 결과 값을 반환합니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.작업 결과에는 시퀀스의 최소값이 포함됩니다.</returns>
      <param name="source">최소값을 확인할 요소가 포함된 <see cref="T:System.Linq.IQueryable`1" />입니다.</param>
      <param name="selector">각 요소에 적용할 프로젝션 함수입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <typeparam name="TResult">
        <paramref name="selector" />에 지정된 함수가 반환하는 값의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="selector" />가 null인 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" />가 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />를 구현하지 않는 경우</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.MinAsync``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Threading.CancellationToken)">
      <summary>시퀀스의 각 요소에 대해 프로젝션 함수를 비동기적으로 호출하고 최소 결과 값을 반환합니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.작업 결과에는 시퀀스의 최소값이 포함됩니다.</returns>
      <param name="source">최소값을 확인할 요소가 포함된 <see cref="T:System.Linq.IQueryable`1" />입니다.</param>
      <param name="selector">각 요소에 적용할 프로젝션 함수입니다.</param>
      <param name="cancellationToken">작업이 완료되기를 기다리는 동안 관찰할 <see cref="T:System.Threading.CancellationToken" />입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <typeparam name="TResult">
        <paramref name="selector" />에 지정된 함수가 반환하는 값의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="selector" />가 null인 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" />가 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />를 구현하지 않는 경우</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.MinAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)">
      <summary>시퀀스의 최소값을 비동기적으로 반환합니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.작업 결과에는 시퀀스의 최소값이 포함됩니다.</returns>
      <param name="source">최소값을 확인할 요소가 포함된 <see cref="T:System.Linq.IQueryable`1" />입니다.</param>
      <param name="cancellationToken">작업이 완료되기를 기다리는 동안 관찰할 <see cref="T:System.Threading.CancellationToken" />입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />가 null인 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" />가 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />를 구현하지 않는 경우</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SingleAsync``1(System.Linq.IQueryable{``0})">
      <summary>시퀀스의 유일한 요소를 비동기적으로 반환하고, 시퀀스의 요소가 정확히 하나가 아니면 예외를 throw합니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.작업 결과에는 입력 시퀀스의 단일 요소가 포함됩니다.</returns>
      <param name="source">단일 요소를 반환할 <see cref="T:System.Linq.IQueryable`1" />입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />가 null인 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" />가 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />를 구현하지 않는 경우</exception>
      <exception cref="T:System.InvalidOperationException">소스 시퀀스가 비어 있는 경우</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SingleAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>지정된 조건을 만족하는 시퀀스의 유일한 요소를 비동기적으로 반환하고, 이러한 요소가 둘 이상 있으면 예외를 throw합니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.작업 결과에는 <paramref name="predicate" />의 조건을 만족하는 입력 시퀀스의 단일 요소가 포함됩니다.</returns>
      <param name="source">단일 요소를 반환할 <see cref="T:System.Linq.IQueryable`1" />입니다.</param>
      <param name="predicate">요소를 조건에 대해 테스트할 함수입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="predicate" />가 null인 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" />가 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />를 구현하지 않는 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="predicate" />의 조건을 충족하는 요소가 없는 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="predicate" />의 조건을 충족하는 요소가 둘 이상인 경우</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SingleAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)">
      <summary>지정된 조건을 만족하는 시퀀스의 유일한 요소를 비동기적으로 반환하고, 이러한 요소가 둘 이상 있으면 예외를 throw합니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.작업 결과에는 <paramref name="predicate" />의 조건을 만족하는 입력 시퀀스의 단일 요소가 포함됩니다.</returns>
      <param name="source">단일 요소를 반환할 <see cref="T:System.Linq.IQueryable`1" />입니다.</param>
      <param name="predicate">요소를 조건에 대해 테스트할 함수입니다.</param>
      <param name="cancellationToken">작업이 완료되기를 기다리는 동안 관찰할 <see cref="T:System.Threading.CancellationToken" />입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="predicate" />가 null인 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" />가 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />를 구현하지 않는 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="predicate" />의 조건을 충족하는 요소가 없는 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="predicate" />의 조건을 충족하는 요소가 둘 이상인 경우</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SingleAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)">
      <summary>시퀀스의 유일한 요소를 비동기적으로 반환하고, 시퀀스의 요소가 정확히 하나가 아니면 예외를 throw합니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.작업 결과에는 입력 시퀀스의 단일 요소가 포함됩니다.</returns>
      <param name="source">단일 요소를 반환할 <see cref="T:System.Linq.IQueryable`1" />입니다.</param>
      <param name="cancellationToken">작업이 완료되기를 기다리는 동안 관찰할 <see cref="T:System.Threading.CancellationToken" />입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />가 null인 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" />가 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />를 구현하지 않는 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" />에 둘 이상의 요소가 있는 경우</exception>
      <exception cref="T:System.InvalidOperationException">소스 시퀀스가 비어 있는 경우</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SingleOrDefaultAsync``1(System.Linq.IQueryable{``0})">
      <summary>시퀀스의 유일한 요소 또는 시퀀스가 비어 있는 경우에는 기본값을 비동기적으로 반환합니다. 시퀀스에 요소가 둘 이상 있으면 예외를 throw합니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.작업 결과에는 입력 시퀀스의 단일 요소 또는 시퀀스에 요소가 없는 경우에는 default(<paramref name="TSource" />)가 포함됩니다.</returns>
      <param name="source">단일 요소를 반환할 <see cref="T:System.Linq.IQueryable`1" />입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />가 null인 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" />가 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />를 구현하지 않는 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" />에 둘 이상의 요소가 있는 경우</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SingleOrDefaultAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>지정된 조건을 만족하는 시퀀스의 유일한 요소 또는 이러한 요소가 없는 경우에는 기본값을 비동기적으로 반환합니다. 조건을 만족하는 요소가 둘 이상 있으면 예외를 throw합니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.작업 결과에는 <paramref name="predicate" />의 조건을 만족하는 입력 시퀀스의 단일 요소 또는 이러한 요소가 없는 경우에는 default(<paramref name="TSource" />)가 포함됩니다.</returns>
      <param name="source">단일 요소를 반환할 <see cref="T:System.Linq.IQueryable`1" />입니다.</param>
      <param name="predicate">요소를 조건에 대해 테스트할 함수입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="predicate" />가 null인 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" />가 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />를 구현하지 않는 경우</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SingleOrDefaultAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)">
      <summary>지정된 조건을 만족하는 시퀀스의 유일한 요소 또는 이러한 요소가 없는 경우에는 기본값을 비동기적으로 반환합니다. 조건을 만족하는 요소가 둘 이상 있으면 예외를 throw합니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.작업 결과에는 <paramref name="predicate" />의 조건을 만족하는 입력 시퀀스의 단일 요소 또는 이러한 요소가 없는 경우에는 default(<paramref name="TSource" />)가 포함됩니다.</returns>
      <param name="source">단일 요소를 반환할 <see cref="T:System.Linq.IQueryable`1" />입니다.</param>
      <param name="predicate">요소를 조건에 대해 테스트할 함수입니다.</param>
      <param name="cancellationToken">작업이 완료되기를 기다리는 동안 관찰할 <see cref="T:System.Threading.CancellationToken" />입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="predicate" />가 null인 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" />가 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />를 구현하지 않는 경우</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SingleOrDefaultAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)">
      <summary>시퀀스의 유일한 요소 또는 시퀀스가 비어 있는 경우에는 기본값을 비동기적으로 반환합니다. 시퀀스에 요소가 둘 이상 있으면 예외를 throw합니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.작업 결과에는 입력 시퀀스의 단일 요소 또는 시퀀스에 요소가 없는 경우에는 default(<paramref name="TSource" />)가 포함됩니다.</returns>
      <param name="source">단일 요소를 반환할 <see cref="T:System.Linq.IQueryable`1" />입니다.</param>
      <param name="cancellationToken">작업이 완료되기를 기다리는 동안 관찰할 <see cref="T:System.Threading.CancellationToken" />입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />가 null인 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" />가 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />를 구현하지 않는 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" />에 둘 이상의 요소가 있는 경우</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.Skip``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{System.Int32}})">
      <summary>시퀀스에서 지정된 수의 요소를 건너뛴 다음 나머지 요소를 반환합니다.</summary>
      <returns>입력 시퀀스에서 지정된 인덱스 뒤에 나오는 요소가 포함된 시퀀스입니다.</returns>
      <param name="source">요소가 반환되는 시퀀스입니다.</param>
      <param name="countAccessor">건너뛸 요소 수를 반환하는 식입니다.</param>
      <typeparam name="TSource">소스 요소의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Decimal})">
      <summary>
        <see cref="T:System.Decimal" /> 값 시퀀스의 합을 비동기적으로 계산합니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.작업 결과에는 시퀀스에 있는 값의 합이 포함됩니다.</returns>
      <param name="source">합을 계산할 <see cref="T:System.Decimal" /> 값의 시퀀스입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />가 null인 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" />가 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />를 구현하지 않는 경우</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Decimal},System.Threading.CancellationToken)">
      <summary>
        <see cref="T:System.Decimal" /> 값 시퀀스의 합을 비동기적으로 계산합니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.작업 결과에는 시퀀스에 있는 값의 합이 포함됩니다.</returns>
      <param name="source">합을 계산할 <see cref="T:System.Decimal" /> 값의 시퀀스입니다.</param>
      <param name="cancellationToken">작업이 완료되기를 기다리는 동안 관찰할 <see cref="T:System.Threading.CancellationToken" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />가 null인 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" />가 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />를 구현하지 않는 경우</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Double})">
      <summary>
        <see cref="T:System.Double" /> 값 시퀀스의 합을 비동기적으로 계산합니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.작업 결과에는 시퀀스에 있는 값의 합이 포함됩니다.</returns>
      <param name="source">합을 계산할 <see cref="T:System.Double" /> 값의 시퀀스입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />가 null인 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" />가 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />를 구현하지 않는 경우</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Double},System.Threading.CancellationToken)">
      <summary>
        <see cref="T:System.Double" /> 값 시퀀스의 합을 비동기적으로 계산합니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.작업 결과에는 시퀀스에 있는 값의 합이 포함됩니다.</returns>
      <param name="source">합을 계산할 <see cref="T:System.Double" /> 값의 시퀀스입니다.</param>
      <param name="cancellationToken">작업이 완료되기를 기다리는 동안 관찰할 <see cref="T:System.Threading.CancellationToken" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />가 null인 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" />가 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />를 구현하지 않는 경우</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Int32})">
      <summary>
        <see cref="T:System.Int32" /> 값 시퀀스의 합을 비동기적으로 계산합니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.작업 결과에는 시퀀스에 있는 값의 합이 포함됩니다.</returns>
      <param name="source">합을 계산할 <see cref="T:System.Int32" /> 값의 시퀀스입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />가 null인 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" />가 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />를 구현하지 않는 경우</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="source" />의 요소 수가 <see cref="F:System.Int32.MaxValue" />보다 큰 경우</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Int32},System.Threading.CancellationToken)">
      <summary>
        <see cref="T:System.Int32" /> 값 시퀀스의 합을 비동기적으로 계산합니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.작업 결과에는 시퀀스에 있는 값의 합이 포함됩니다.</returns>
      <param name="source">합을 계산할 <see cref="T:System.Int32" /> 값의 시퀀스입니다.</param>
      <param name="cancellationToken">작업이 완료되기를 기다리는 동안 관찰할 <see cref="T:System.Threading.CancellationToken" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />가 null인 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" />가 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />를 구현하지 않는 경우</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="source" />의 요소 수가 <see cref="F:System.Int32.MaxValue" />보다 큰 경우</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Int64})">
      <summary>
        <see cref="T:System.Int64" /> 값 시퀀스의 합을 비동기적으로 계산합니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.작업 결과에는 시퀀스에 있는 값의 합이 포함됩니다.</returns>
      <param name="source">합을 계산할 <see cref="T:System.Int64" /> 값의 시퀀스입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />가 null인 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" />가 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />를 구현하지 않는 경우</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="source" />의 요소 수가 <see cref="F:System.Int64.MaxValue" />보다 큰 경우</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Int64},System.Threading.CancellationToken)">
      <summary>
        <see cref="T:System.Int64" /> 값 시퀀스의 합을 비동기적으로 계산합니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.작업 결과에는 시퀀스에 있는 값의 합이 포함됩니다.</returns>
      <param name="source">합을 계산할 <see cref="T:System.Int64" /> 값의 시퀀스입니다.</param>
      <param name="cancellationToken">작업이 완료되기를 기다리는 동안 관찰할 <see cref="T:System.Threading.CancellationToken" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />가 null인 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" />가 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />를 구현하지 않는 경우</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="source" />의 요소 수가 <see cref="F:System.Int64.MaxValue" />보다 큰 경우</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Nullable{System.Decimal}})">
      <summary>nullable <see cref="T:System.Decimal" /> 값 시퀀스의 합을 비동기적으로 계산합니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.작업 결과에는 시퀀스에 있는 값의 합이 포함됩니다.</returns>
      <param name="source">합을 계산할 nullable <see cref="T:System.Decimal" /> 값의 시퀀스입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />가 null인 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" />가 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />를 구현하지 않는 경우</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Nullable{System.Decimal}},System.Threading.CancellationToken)">
      <summary>nullable <see cref="T:System.Decimal" /> 값 시퀀스의 합을 비동기적으로 계산합니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.작업 결과에는 시퀀스에 있는 값의 합이 포함됩니다.</returns>
      <param name="source">합을 계산할 nullable <see cref="T:System.Decimal" /> 값의 시퀀스입니다.</param>
      <param name="cancellationToken">작업이 완료되기를 기다리는 동안 관찰할 <see cref="T:System.Threading.CancellationToken" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />가 null인 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" />가 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />를 구현하지 않는 경우</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="source" />의 요소 수가 <see cref="F:System.Decimal.MaxValue" />보다 큰 경우</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Nullable{System.Double}})">
      <summary>nullable <see cref="T:System.Double" /> 값 시퀀스의 합을 비동기적으로 계산합니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.작업 결과에는 시퀀스에 있는 값의 합이 포함됩니다.</returns>
      <param name="source">합을 계산할 nullable <see cref="T:System.Double" /> 값의 시퀀스입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />가 null인 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" />가 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />를 구현하지 않는 경우</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Nullable{System.Double}},System.Threading.CancellationToken)">
      <summary>nullable <see cref="T:System.Double" /> 값 시퀀스의 합을 비동기적으로 계산합니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.작업 결과에는 시퀀스에 있는 값의 합이 포함됩니다.</returns>
      <param name="source">합을 계산할 nullable <see cref="T:System.Double" /> 값의 시퀀스입니다.</param>
      <param name="cancellationToken">작업이 완료되기를 기다리는 동안 관찰할 <see cref="T:System.Threading.CancellationToken" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />가 null인 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" />가 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />를 구현하지 않는 경우</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Nullable{System.Int32}})">
      <summary>nullable <see cref="T:System.Int32" /> 값 시퀀스의 합을 비동기적으로 계산합니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.작업 결과에는 시퀀스에 있는 값의 합이 포함됩니다.</returns>
      <param name="source">합을 계산할 nullable <see cref="T:System.Int32" /> 값의 시퀀스입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />가 null인 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" />가 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />를 구현하지 않는 경우</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="source" />의 요소 수가 <see cref="F:System.Int32.MaxValue" />보다 큰 경우</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Nullable{System.Int32}},System.Threading.CancellationToken)">
      <summary>nullable <see cref="T:System.Int32" /> 값 시퀀스의 합을 비동기적으로 계산합니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.작업 결과에는 시퀀스에 있는 값의 합이 포함됩니다.</returns>
      <param name="source">합을 계산할 nullable <see cref="T:System.Int32" /> 값의 시퀀스입니다.</param>
      <param name="cancellationToken">작업이 완료되기를 기다리는 동안 관찰할 <see cref="T:System.Threading.CancellationToken" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />가 null인 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" />가 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />를 구현하지 않는 경우</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="source" />의 요소 수가 <see cref="F:System.Int32.MaxValue" />보다 큰 경우</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Nullable{System.Int64}})">
      <summary>nullable <see cref="T:System.Int64" /> 값 시퀀스의 합을 비동기적으로 계산합니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.작업 결과에는 시퀀스에 있는 값의 합이 포함됩니다.</returns>
      <param name="source">합을 계산할 nullable <see cref="T:System.Int64" /> 값의 시퀀스입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />가 null인 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" />가 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />를 구현하지 않는 경우</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="source" />의 요소 수가 <see cref="F:System.Int64.MaxValue" />보다 큰 경우</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Nullable{System.Int64}},System.Threading.CancellationToken)">
      <summary>nullable <see cref="T:System.Int64" /> 값 시퀀스의 합을 비동기적으로 계산합니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.작업 결과에는 시퀀스에 있는 값의 합이 포함됩니다.</returns>
      <param name="source">합을 계산할 nullable <see cref="T:System.Int64" /> 값의 시퀀스입니다.</param>
      <param name="cancellationToken">작업이 완료되기를 기다리는 동안 관찰할 <see cref="T:System.Threading.CancellationToken" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />가 null인 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" />가 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />를 구현하지 않는 경우</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="source" />의 요소 수가 <see cref="F:System.Int64.MaxValue" />보다 큰 경우</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Nullable{System.Single}})">
      <summary>nullable <see cref="T:System.Single" /> 값 시퀀스의 합을 비동기적으로 계산합니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.작업 결과에는 시퀀스에 있는 값의 합이 포함됩니다.</returns>
      <param name="source">합을 계산할 nullable <see cref="T:System.Single" /> 값의 시퀀스입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />가 null인 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" />가 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />를 구현하지 않는 경우</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Nullable{System.Single}},System.Threading.CancellationToken)">
      <summary>nullable <see cref="T:System.Single" /> 값 시퀀스의 합을 비동기적으로 계산합니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.작업 결과에는 시퀀스에 있는 값의 합이 포함됩니다.</returns>
      <param name="source">합을 계산할 nullable <see cref="T:System.Single" /> 값의 시퀀스입니다.</param>
      <param name="cancellationToken">작업이 완료되기를 기다리는 동안 관찰할 <see cref="T:System.Threading.CancellationToken" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />가 null인 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" />가 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />를 구현하지 않는 경우</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Single})">
      <summary>
        <see cref="T:System.Single" /> 값 시퀀스의 합을 비동기적으로 계산합니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.작업 결과에는 시퀀스에 있는 값의 합이 포함됩니다.</returns>
      <param name="source">합을 계산할 <see cref="T:System.Single" /> 값의 시퀀스입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />가 null인 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" />가 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />를 구현하지 않는 경우</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Single},System.Threading.CancellationToken)">
      <summary>
        <see cref="T:System.Single" /> 값 시퀀스의 합을 비동기적으로 계산합니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.작업 결과에는 시퀀스에 있는 값의 합이 포함됩니다.</returns>
      <param name="source">합을 계산할 <see cref="T:System.Single" /> 값의 시퀀스입니다.</param>
      <param name="cancellationToken">작업이 완료되기를 기다리는 동안 관찰할 <see cref="T:System.Threading.CancellationToken" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />가 null인 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" />가 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />를 구현하지 않는 경우</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})">
      <summary>입력 시퀀스의 각 요소에 대해 프로젝션 함수를 호출하여 가져온 <see cref="T:System.Decimal" /> 값 시퀀스의 합을 비동기적으로 계산합니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.작업 결과에는 프로젝션된 값의 합이 포함됩니다.</returns>
      <param name="source">
        <paramref name="TSource" /> 형식 값의 시퀀스입니다.</param>
      <param name="selector">각 요소에 적용할 프로젝션 함수입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="selector" />가 null인 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" />가 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />를 구현하지 않는 경우</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="source" />의 요소 수가 <see cref="F:System.Decimal.MaxValue" />보다 큰 경우</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}},System.Threading.CancellationToken)">
      <summary>입력 시퀀스의 각 요소에 대해 프로젝션 함수를 호출하여 가져온 <see cref="T:System.Decimal" /> 값 시퀀스의 합을 비동기적으로 계산합니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.작업 결과에는 프로젝션된 값의 합이 포함됩니다.</returns>
      <param name="source">
        <paramref name="TSource" /> 형식 값의 시퀀스입니다.</param>
      <param name="selector">각 요소에 적용할 프로젝션 함수입니다.</param>
      <param name="cancellationToken">작업이 완료되기를 기다리는 동안 관찰할 <see cref="T:System.Threading.CancellationToken" />입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="selector" />가 null인 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" />가 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />를 구현하지 않는 경우</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="source" />의 요소 수가 <see cref="F:System.Decimal.MaxValue" />보다 큰 경우</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})">
      <summary>입력 시퀀스의 각 요소에 대해 프로젝션 함수를 호출하여 가져온 <see cref="T:System.Double" /> 값 시퀀스의 합을 비동기적으로 계산합니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.작업 결과에는 프로젝션된 값의 합이 포함됩니다.</returns>
      <param name="source">
        <paramref name="TSource" /> 형식 값의 시퀀스입니다.</param>
      <param name="selector">각 요소에 적용할 프로젝션 함수입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="selector" />가 null인 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" />가 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />를 구현하지 않는 경우</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}},System.Threading.CancellationToken)">
      <summary>입력 시퀀스의 각 요소에 대해 프로젝션 함수를 호출하여 가져온 <see cref="T:System.Double" /> 값 시퀀스의 합을 비동기적으로 계산합니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.작업 결과에는 프로젝션된 값의 합이 포함됩니다.</returns>
      <param name="source">
        <paramref name="TSource" /> 형식 값의 시퀀스입니다.</param>
      <param name="selector">각 요소에 적용할 프로젝션 함수입니다.</param>
      <param name="cancellationToken">작업이 완료되기를 기다리는 동안 관찰할 <see cref="T:System.Threading.CancellationToken" />입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="selector" />가 null인 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" />가 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />를 구현하지 않는 경우</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})">
      <summary>입력 시퀀스의 각 요소에 대해 프로젝션 함수를 호출하여 가져온 <see cref="T:System.Int32" /> 값 시퀀스의 합을 비동기적으로 계산합니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.작업 결과에는 프로젝션된 값의 합이 포함됩니다.</returns>
      <param name="source">
        <paramref name="TSource" /> 형식 값의 시퀀스입니다.</param>
      <param name="selector">각 요소에 적용할 프로젝션 함수입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="selector" />가 null인 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" />가 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />를 구현하지 않는 경우</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="source" />의 요소 수가 <see cref="F:System.Int32.MaxValue" />보다 큰 경우</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}},System.Threading.CancellationToken)">
      <summary>입력 시퀀스의 각 요소에 대해 프로젝션 함수를 호출하여 가져온 <see cref="T:System.Int32" /> 값 시퀀스의 합을 비동기적으로 계산합니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.작업 결과에는 프로젝션된 값의 합이 포함됩니다.</returns>
      <param name="source">
        <paramref name="TSource" /> 형식 값의 시퀀스입니다.</param>
      <param name="selector">각 요소에 적용할 프로젝션 함수입니다.</param>
      <param name="cancellationToken">작업이 완료되기를 기다리는 동안 관찰할 <see cref="T:System.Threading.CancellationToken" />입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="selector" />가 null인 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" />가 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />를 구현하지 않는 경우</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="source" />의 요소 수가 <see cref="F:System.Int32.MaxValue" />보다 큰 경우</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})">
      <summary>입력 시퀀스의 각 요소에 대해 프로젝션 함수를 호출하여 가져온 <see cref="T:System.Int64" /> 값 시퀀스의 합을 비동기적으로 계산합니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.작업 결과에는 프로젝션된 값의 합이 포함됩니다.</returns>
      <param name="source">
        <paramref name="TSource" /> 형식 값의 시퀀스입니다.</param>
      <param name="selector">각 요소에 적용할 프로젝션 함수입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="selector" />가 null인 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" />가 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />를 구현하지 않는 경우</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="source" />의 요소 수가 <see cref="F:System.Int64.MaxValue" />보다 큰 경우</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}},System.Threading.CancellationToken)">
      <summary>입력 시퀀스의 각 요소에 대해 프로젝션 함수를 호출하여 가져온 <see cref="T:System.Int64" /> 값 시퀀스의 합을 비동기적으로 계산합니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.작업 결과에는 프로젝션된 값의 합이 포함됩니다.</returns>
      <param name="source">
        <paramref name="TSource" /> 형식 값의 시퀀스입니다.</param>
      <param name="selector">각 요소에 적용할 프로젝션 함수입니다.</param>
      <param name="cancellationToken">작업이 완료되기를 기다리는 동안 관찰할 <see cref="T:System.Threading.CancellationToken" />입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="selector" />가 null인 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" />가 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />를 구현하지 않는 경우</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="source" />의 요소 수가 <see cref="F:System.Int64.MaxValue" />보다 큰 경우</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})">
      <summary>입력 시퀀스의 각 요소에 대해 프로젝션 함수를 호출하여 가져온 nullable <see cref="T:System.Decimal" /> 값 시퀀스의 합을 비동기적으로 계산합니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.작업 결과에는 프로젝션된 값의 합이 포함됩니다.</returns>
      <param name="source">
        <paramref name="TSource" /> 형식 값의 시퀀스입니다.</param>
      <param name="selector">각 요소에 적용할 프로젝션 함수입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="selector" />가 null인 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" />가 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />를 구현하지 않는 경우</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="source" />의 요소 수가 <see cref="F:System.Decimal.MaxValue" />보다 큰 경우</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}},System.Threading.CancellationToken)">
      <summary>입력 시퀀스의 각 요소에 대해 프로젝션 함수를 호출하여 가져온 nullable <see cref="T:System.Decimal" /> 값 시퀀스의 합을 비동기적으로 계산합니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.작업 결과에는 프로젝션된 값의 합이 포함됩니다.</returns>
      <param name="source">
        <paramref name="TSource" /> 형식 값의 시퀀스입니다.</param>
      <param name="selector">각 요소에 적용할 프로젝션 함수입니다.</param>
      <param name="cancellationToken">작업이 완료되기를 기다리는 동안 관찰할 <see cref="T:System.Threading.CancellationToken" />입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="selector" />가 null인 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" />가 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />를 구현하지 않는 경우</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="source" />의 요소 수가 <see cref="F:System.Decimal.MaxValue" />보다 큰 경우</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})">
      <summary>입력 시퀀스의 각 요소에 대해 프로젝션 함수를 호출하여 가져온 nullable <see cref="T:System.Double" /> 값 시퀀스의 합을 비동기적으로 계산합니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.작업 결과에는 프로젝션된 값의 합이 포함됩니다.</returns>
      <param name="source">
        <paramref name="TSource" /> 형식 값의 시퀀스입니다.</param>
      <param name="selector">각 요소에 적용할 프로젝션 함수입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="selector" />가 null인 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" />가 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />를 구현하지 않는 경우</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}},System.Threading.CancellationToken)">
      <summary>입력 시퀀스의 각 요소에 대해 프로젝션 함수를 호출하여 가져온 nullable <see cref="T:System.Double" /> 값 시퀀스의 합을 비동기적으로 계산합니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.작업 결과에는 프로젝션된 값의 합이 포함됩니다.</returns>
      <param name="source">
        <paramref name="TSource" /> 형식 값의 시퀀스입니다.</param>
      <param name="selector">각 요소에 적용할 프로젝션 함수입니다.</param>
      <param name="cancellationToken">작업이 완료되기를 기다리는 동안 관찰할 <see cref="T:System.Threading.CancellationToken" />입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="selector" />가 null인 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" />가 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />를 구현하지 않는 경우</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})">
      <summary>입력 시퀀스의 각 요소에 대해 프로젝션 함수를 호출하여 가져온 nullable <see cref="T:System.Int32" /> 값 시퀀스의 합을 비동기적으로 계산합니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.작업 결과에는 프로젝션된 값의 합이 포함됩니다.</returns>
      <param name="source">
        <paramref name="TSource" /> 형식 값의 시퀀스입니다.</param>
      <param name="selector">각 요소에 적용할 프로젝션 함수입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="selector" />가 null인 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" />가 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />를 구현하지 않는 경우</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="source" />의 요소 수가 <see cref="F:System.Int32.MaxValue" />보다 큰 경우</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}},System.Threading.CancellationToken)">
      <summary>입력 시퀀스의 각 요소에 대해 프로젝션 함수를 호출하여 가져온 nullable <see cref="T:System.Int32" /> 값 시퀀스의 합을 비동기적으로 계산합니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.작업 결과에는 프로젝션된 값의 합이 포함됩니다.</returns>
      <param name="source">
        <paramref name="TSource" /> 형식 값의 시퀀스입니다.</param>
      <param name="selector">각 요소에 적용할 프로젝션 함수입니다.</param>
      <param name="cancellationToken">작업이 완료되기를 기다리는 동안 관찰할 <see cref="T:System.Threading.CancellationToken" />입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="selector" />가 null인 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" />가 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />를 구현하지 않는 경우</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="source" />의 요소 수가 <see cref="F:System.Int32.MaxValue" />보다 큰 경우</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})">
      <summary>입력 시퀀스의 각 요소에 대해 프로젝션 함수를 호출하여 가져온 nullable <see cref="T:System.Int64" /> 값 시퀀스의 합을 비동기적으로 계산합니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.작업 결과에는 프로젝션된 값의 합이 포함됩니다.</returns>
      <param name="source">
        <paramref name="TSource" /> 형식 값의 시퀀스입니다.</param>
      <param name="selector">각 요소에 적용할 프로젝션 함수입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="selector" />가 null인 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" />가 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />를 구현하지 않는 경우</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="source" />의 요소 수가 <see cref="F:System.Int64.MaxValue" />보다 큰 경우</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}},System.Threading.CancellationToken)">
      <summary>입력 시퀀스의 각 요소에 대해 프로젝션 함수를 호출하여 가져온 nullable <see cref="T:System.Int64" /> 값 시퀀스의 합을 비동기적으로 계산합니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.작업 결과에는 프로젝션된 값의 합이 포함됩니다.</returns>
      <param name="source">
        <paramref name="TSource" /> 형식 값의 시퀀스입니다.</param>
      <param name="selector">각 요소에 적용할 프로젝션 함수입니다.</param>
      <param name="cancellationToken">작업이 완료되기를 기다리는 동안 관찰할 <see cref="T:System.Threading.CancellationToken" />입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="selector" />가 null인 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" />가 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />를 구현하지 않는 경우</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="source" />의 요소 수가 <see cref="F:System.Int64.MaxValue" />보다 큰 경우</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})">
      <summary>입력 시퀀스의 각 요소에 대해 프로젝션 함수를 호출하여 가져온 nullable <see cref="T:System.Single" /> 값 시퀀스의 합을 비동기적으로 계산합니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.작업 결과에는 프로젝션된 값의 합이 포함됩니다.</returns>
      <param name="source">
        <paramref name="TSource" /> 형식 값의 시퀀스입니다.</param>
      <param name="selector">각 요소에 적용할 프로젝션 함수입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="selector" />가 null인 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" />가 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />를 구현하지 않는 경우</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}},System.Threading.CancellationToken)">
      <summary>입력 시퀀스의 각 요소에 대해 프로젝션 함수를 호출하여 가져온 nullable <see cref="T:System.Single" /> 값 시퀀스의 합을 비동기적으로 계산합니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.작업 결과에는 프로젝션된 값의 합이 포함됩니다.</returns>
      <param name="source">
        <paramref name="TSource" /> 형식 값의 시퀀스입니다.</param>
      <param name="selector">각 요소에 적용할 프로젝션 함수입니다.</param>
      <param name="cancellationToken">작업이 완료되기를 기다리는 동안 관찰할 <see cref="T:System.Threading.CancellationToken" />입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="selector" />가 null인 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" />가 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />를 구현하지 않는 경우</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})">
      <summary>입력 시퀀스의 각 요소에 대해 프로젝션 함수를 호출하여 가져온 <see cref="T:System.Single" /> 값 시퀀스의 합을 비동기적으로 계산합니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.작업 결과에는 프로젝션된 값의 합이 포함됩니다.</returns>
      <param name="source">
        <paramref name="TSource" /> 형식 값의 시퀀스입니다.</param>
      <param name="selector">각 요소에 적용할 프로젝션 함수입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="selector" />가 null인 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" />가 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />를 구현하지 않는 경우</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}},System.Threading.CancellationToken)">
      <summary>입력 시퀀스의 각 요소에 대해 프로젝션 함수를 호출하여 가져온 <see cref="T:System.Single" /> 값 시퀀스의 합을 비동기적으로 계산합니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.작업 결과에는 프로젝션된 값의 합이 포함됩니다.</returns>
      <param name="source">
        <paramref name="TSource" /> 형식 값의 시퀀스입니다.</param>
      <param name="selector">각 요소에 적용할 프로젝션 함수입니다.</param>
      <param name="cancellationToken">작업이 완료되기를 기다리는 동안 관찰할 <see cref="T:System.Threading.CancellationToken" />입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="selector" />가 null인 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" />가 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />를 구현하지 않는 경우</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.Take``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{System.Int32}})">
      <summary>시퀀스의 시작 위치에서 지정된 수의 연속 요소를 반환합니다.</summary>
      <returns>입력 시퀀스의 시작 위치부터 지정된 수의 요소가 포함된 시퀀스입니다.</returns>
      <param name="source">요소가 반환되는 시퀀스입니다.</param>
      <param name="countAccessor">반환할 요소 수를 반환하는 식입니다.</param>
      <typeparam name="TSource">소스 요소의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.ToArrayAsync``1(System.Linq.IQueryable{``0})">
      <summary>비동기적으로 열거하여 <see cref="T:System.Linq.IQueryable`1" />에서 배열을 만듭니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.작업 결과에는 입력 시퀀스의 요소를 포함하는 배열이 포함됩니다.</returns>
      <param name="source">배열을 만드는 데 사용할 <see cref="T:System.Linq.IQueryable`1" />입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.ToArrayAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)">
      <summary>비동기적으로 열거하여 <see cref="T:System.Linq.IQueryable`1" />에서 배열을 만듭니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.작업 결과에는 입력 시퀀스의 요소를 포함하는 배열이 포함됩니다.</returns>
      <param name="source">배열을 만드는 데 사용할 <see cref="T:System.Linq.IQueryable`1" />입니다.</param>
      <param name="cancellationToken">작업이 완료되기를 기다리는 동안 관찰할 <see cref="T:System.Threading.CancellationToken" />입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.ToDictionaryAsync``2(System.Linq.IQueryable{``0},System.Func{``0,``1})">
      <summary>지정된 키 선택기 함수에 따라 비동기적으로 열거하여 <see cref="T:System.Linq.IQueryable`1" />에서 <see cref="T:System.Collections.Generic.Dictionary`2" />를 만듭니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.작업 결과에는 선택된 키 및 값을 포함하는 <see cref="T:System.Collections.Generic.Dictionary`2" />가 포함됩니다.</returns>
      <param name="source">
        <see cref="T:System.Collections.Generic.Dictionary`2" />를 만드는 데 사용할 <see cref="T:System.Linq.IQueryable`1" />입니다.</param>
      <param name="keySelector">각 요소에서 키를 추출하는 함수입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" />에서 반환하는 키의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.ToDictionaryAsync``2(System.Linq.IQueryable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>지정된 키 선택기 함수와 비교자에 따라 비동기적으로 열거하여 <see cref="T:System.Linq.IQueryable`1" />에서 <see cref="T:System.Collections.Generic.Dictionary`2" />를 만듭니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.작업 결과에는 선택된 키 및 값을 포함하는 <see cref="T:System.Collections.Generic.Dictionary`2" />가 포함됩니다.</returns>
      <param name="source">
        <see cref="T:System.Collections.Generic.Dictionary`2" />를 만드는 데 사용할 <see cref="T:System.Linq.IQueryable`1" />입니다.</param>
      <param name="keySelector">각 요소에서 키를 추출하는 함수입니다.</param>
      <param name="comparer">키를 비교할 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" />에서 반환하는 키의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.ToDictionaryAsync``2(System.Linq.IQueryable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1},System.Threading.CancellationToken)">
      <summary>지정된 키 선택기 함수와 비교자에 따라 비동기적으로 열거하여 <see cref="T:System.Linq.IQueryable`1" />에서 <see cref="T:System.Collections.Generic.Dictionary`2" />를 만듭니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.작업 결과에는 선택된 키 및 값을 포함하는 <see cref="T:System.Collections.Generic.Dictionary`2" />가 포함됩니다.</returns>
      <param name="source">
        <see cref="T:System.Collections.Generic.Dictionary`2" />를 만드는 데 사용할 <see cref="T:System.Linq.IQueryable`1" />입니다.</param>
      <param name="keySelector">각 요소에서 키를 추출하는 함수입니다.</param>
      <param name="comparer">키를 비교할 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />입니다.</param>
      <param name="cancellationToken">작업이 완료되기를 기다리는 동안 관찰할 <see cref="T:System.Threading.CancellationToken" />입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" />에서 반환하는 키의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.ToDictionaryAsync``3(System.Linq.IQueryable{``0},System.Func{``0,``1},System.Func{``0,``2})">
      <summary>지정된 키 선택기 및 요소 선택기 함수에 따라 비동기적으로 열거하여 <see cref="T:System.Linq.IQueryable`1" />에서 <see cref="T:System.Collections.Generic.Dictionary`2" />를 만듭니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.작업 결과에는 입력 시퀀스에서 선택된 <paramref name="TElement" /> 형식의 값을 포함하는 <see cref="T:System.Collections.Generic.Dictionary`2" />가 포함됩니다.</returns>
      <param name="source">
        <see cref="T:System.Collections.Generic.Dictionary`2" />를 만드는 데 사용할 <see cref="T:System.Linq.IQueryable`1" />입니다.</param>
      <param name="keySelector">각 요소에서 키를 추출하는 함수입니다.</param>
      <param name="elementSelector">각 요소에서 결과 요소 값을 생성하는 변환 함수입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" />에서 반환하는 키의 형식입니다.</typeparam>
      <typeparam name="TElement">
        <paramref name="elementSelector" />에서 반환하는 값의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.ToDictionaryAsync``3(System.Linq.IQueryable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>지정된 키 선택기 함수, 비교자 및 요소 선택기 함수에 따라 비동기적으로 열거하여 <see cref="T:System.Linq.IQueryable`1" />에서 <see cref="T:System.Collections.Generic.Dictionary`2" />를 만듭니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.작업 결과에는 입력 시퀀스에서 선택된 <paramref name="TElement" /> 형식의 값을 포함하는 <see cref="T:System.Collections.Generic.Dictionary`2" />가 포함됩니다.</returns>
      <param name="source">
        <see cref="T:System.Collections.Generic.Dictionary`2" />를 만드는 데 사용할 <see cref="T:System.Linq.IQueryable`1" />입니다.</param>
      <param name="keySelector">각 요소에서 키를 추출하는 함수입니다.</param>
      <param name="elementSelector">각 요소에서 결과 요소 값을 생성하는 변환 함수입니다.</param>
      <param name="comparer">키를 비교할 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" />에서 반환하는 키의 형식입니다.</typeparam>
      <typeparam name="TElement">
        <paramref name="elementSelector" />에서 반환하는 값의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.ToDictionaryAsync``3(System.Linq.IQueryable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1},System.Threading.CancellationToken)">
      <summary>지정된 키 선택기 함수, 비교자 및 요소 선택기 함수에 따라 비동기적으로 열거하여 <see cref="T:System.Linq.IQueryable`1" />에서 <see cref="T:System.Collections.Generic.Dictionary`2" />를 만듭니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.작업 결과에는 입력 시퀀스에서 선택된 <see cref="T:System.Collections.Generic.Dictionary`2" /> 형식의 값을 포함하는 <paramref name="TElement" />가 포함됩니다.</returns>
      <param name="source">
        <see cref="T:System.Collections.Generic.Dictionary`2" />를 만드는 데 사용할 <see cref="T:System.Linq.IQueryable`1" />입니다.</param>
      <param name="keySelector">각 요소에서 키를 추출하는 함수입니다.</param>
      <param name="elementSelector">각 요소에서 결과 요소 값을 생성하는 변환 함수입니다.</param>
      <param name="comparer">키를 비교할 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />입니다.</param>
      <param name="cancellationToken">작업이 완료되기를 기다리는 동안 관찰할 <see cref="T:System.Threading.CancellationToken" />입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" />에서 반환하는 키의 형식입니다.</typeparam>
      <typeparam name="TElement">
        <paramref name="elementSelector" />에서 반환하는 값의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.ToDictionaryAsync``3(System.Linq.IQueryable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Threading.CancellationToken)">
      <summary>지정된 키 선택기 및 요소 선택기 함수에 따라 비동기적으로 열거하여 <see cref="T:System.Linq.IQueryable`1" />에서 <see cref="T:System.Collections.Generic.Dictionary`2" />를 만듭니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.작업 결과에는 입력 시퀀스에서 선택된 <see cref="T:System.Collections.Generic.Dictionary`2" /> 형식의 값을 포함하는 <paramref name="TElement" />가 포함됩니다.</returns>
      <param name="source">
        <see cref="T:System.Collections.Generic.Dictionary`2" />를 만드는 데 사용할 <see cref="T:System.Linq.IQueryable`1" />입니다.</param>
      <param name="keySelector">각 요소에서 키를 추출하는 함수입니다.</param>
      <param name="elementSelector">각 요소에서 결과 요소 값을 생성하는 변환 함수입니다.</param>
      <param name="cancellationToken">작업이 완료되기를 기다리는 동안 관찰할 <see cref="T:System.Threading.CancellationToken" />입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" />에서 반환하는 키의 형식입니다.</typeparam>
      <typeparam name="TElement">
        <paramref name="elementSelector" />에서 반환하는 값의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.ToDictionaryAsync``2(System.Linq.IQueryable{``0},System.Func{``0,``1},System.Threading.CancellationToken)">
      <summary>지정된 키 선택기 함수에 따라 비동기적으로 열거하여 <see cref="T:System.Linq.IQueryable`1" />에서 <see cref="T:System.Collections.Generic.Dictionary`2" />를 만듭니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.작업 결과에는 선택된 키 및 값을 포함하는 <see cref="T:System.Collections.Generic.Dictionary`2" />가 포함됩니다.</returns>
      <param name="source">
        <see cref="T:System.Collections.Generic.Dictionary`2" />를 만드는 데 사용할 <see cref="T:System.Linq.IQueryable`1" />입니다.</param>
      <param name="keySelector">각 요소에서 키를 추출하는 함수입니다.</param>
      <param name="cancellationToken">작업이 완료되기를 기다리는 동안 관찰할 <see cref="T:System.Threading.CancellationToken" />입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" />에서 반환하는 키의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.ToListAsync(System.Linq.IQueryable)">
      <summary>비동기적으로 열거하여 <see cref="T:System.Linq.IQueryable" />에서 <see cref="T:System.Collections.Generic.List`1" />를 만듭니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.작업 결과에는 입력 시퀀스의 요소를 포함하는 <see cref="T:System.Collections.Generic.List`1" />가 포함됩니다.</returns>
      <param name="source">
        <see cref="T:System.Collections.Generic.List`1" />를 만드는 데 사용할 <see cref="T:System.Linq.IQueryable" />입니다.</param>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.ToListAsync(System.Linq.IQueryable,System.Threading.CancellationToken)">
      <summary>비동기적으로 열거하여 <see cref="T:System.Linq.IQueryable" />에서 <see cref="T:System.Collections.Generic.List`1" />를 만듭니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.작업 결과에는 입력 시퀀스의 요소를 포함하는 <see cref="T:System.Collections.Generic.List`1" />가 포함됩니다.</returns>
      <param name="source">
        <see cref="T:System.Collections.Generic.List`1" />를 만드는 데 사용할 <see cref="T:System.Linq.IQueryable" />입니다.</param>
      <param name="cancellationToken">작업이 완료되기를 기다리는 동안 관찰할 <see cref="T:System.Threading.CancellationToken" />입니다.</param>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.ToListAsync``1(System.Linq.IQueryable{``0})">
      <summary>비동기적으로 열거하여 <see cref="T:System.Linq.IQueryable`1" />에서 <see cref="T:System.Collections.Generic.List`1" />를 만듭니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.작업 결과에는 입력 시퀀스의 요소를 포함하는 <see cref="T:System.Collections.Generic.List`1" />가 포함됩니다.</returns>
      <param name="source">
        <see cref="T:System.Collections.Generic.List`1" />를 만드는 데 사용할 <see cref="T:System.Linq.IQueryable`1" />입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.ToListAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)">
      <summary>비동기적으로 열거하여 <see cref="T:System.Linq.IQueryable`1" />에서 <see cref="T:System.Collections.Generic.List`1" />를 만듭니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.작업 결과에는 입력 시퀀스의 요소를 포함하는 <see cref="T:System.Collections.Generic.List`1" />가 포함됩니다.</returns>
      <param name="source">목록을 만드는 데 사용할 <see cref="T:System.Linq.IQueryable`1" />입니다.</param>
      <param name="cancellationToken">작업이 완료되기를 기다리는 동안 관찰할 <see cref="T:System.Threading.CancellationToken" />입니다.</param>
      <typeparam name="TSource">
        <paramref name="source" /> 요소의 형식입니다.</typeparam>
    </member>
    <member name="T:System.Data.Entity.TransactionalBehavior">
      <summary>트랜잭션 만들기 동작을 제어합니다.</summary>
    </member>
    <member name="F:System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction">
      <summary>트랜잭션 만들기가 보장되지 않습니다.</summary>
    </member>
    <member name="F:System.Data.Entity.TransactionalBehavior.EnsureTransaction">
      <summary>트랜잭션 만들기가 보장됩니다.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.EntityCommandCompilationException">
      <summary>CommandCompilation을 준비하거나 실행하려는 동안의 오류를 나타냅니다.이 예외는 EntityCommand를 사용하여 문을 실행할 때 공급자 예외(SqlException, OracleException)를 보유하기 위해 catch할 수 있는 일반 예외를 제공하기 위한 것입니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityCommandCompilationException.#ctor">
      <summary>메시지와 내부 예외를 사용하지 않고 <see cref="T:System.Data.Entity.Core.EntityCommandCompilationException" />의 새 인스턴스를 초기화합니다.존재해서는 안 되겠지만 FxCop에 유용합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityCommandCompilationException.#ctor(System.String)">
      <summary>내부 예외 없이 메시지를 사용하여 <see cref="T:System.Data.Entity.Core.EntityCommandCompilationException" />의 새 인스턴스를 초기화합니다.존재해서는 안 되겠지만 FxCop에 유용합니다.</summary>
      <param name="message">메시지입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityCommandCompilationException.#ctor(System.String,System.Exception)">
      <summary>메시지와 내부 예외 인스턴스를 사용하여 <see cref="T:System.Data.Entity.Core.EntityCommandCompilationException" />의 새 인스턴스를 초기화합니다.</summary>
      <param name="message">메시지입니다.</param>
      <param name="innerException">내부 예외입니다.</param>
    </member>
    <member name="T:System.Data.Entity.Core.EntityCommandExecutionException">
      <summary>CommandExecution을 준비하거나 실행하려는 동안의 오류를 나타냅니다.이 예외는 EntityCommand를 사용하여 문을 실행할 때 공급자 예외(SqlException, OracleException)를 보유하기 위해 catch할 수 있는 일반 예외를 제공하기 위한 것입니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityCommandExecutionException.#ctor">
      <summary>메시지와 내부 예외를 사용하지 않고 EntityCommandExecutionException의 새 인스턴스를 초기화합니다.존재해서는 안 되겠지만 FxCop에 유용합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityCommandExecutionException.#ctor(System.String)">
      <summary>내부 예외 없이 메시지를 사용하여 EntityCommandExecutionException의 새 인스턴스를 초기화합니다.존재해서는 안 되겠지만 FxCop에 유용합니다.</summary>
      <param name="message">오류를 설명하는 메시지입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityCommandExecutionException.#ctor(System.String,System.Exception)">
      <summary>메시지와 내부 예외 인스턴스를 사용하여 EntityCommandExecutionException의 새 인스턴스를 초기화합니다.</summary>
      <param name="message">오류를 설명하는 메시지입니다.</param>
      <param name="innerException">이 현재 예외를 발생시킨 내부 예외입니다.</param>
    </member>
    <member name="T:System.Data.Entity.Core.EntityException">
      <summary>엔터티 클라이언트에서 사용하는 예외를 제공합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityException.#ctor">
      <summary>기본값을 사용하여 <see cref="T:System.Data.Entity.Core.EntityException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <see cref="T:System.Data.Entity.Core.EntityException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="info">serialization 정보입니다.</param>
      <param name="context">스트리밍 컨텍스트입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityException.#ctor(System.String)">
      <summary>미리 서식이 지정된 메시지를 허용하는 <see cref="T:System.Data.Entity.Core.EntityException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="message">지역화된 오류 메시지입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityException.#ctor(System.String,System.Exception)">
      <summary>미리 서식이 지정된 메시지와 내부 예외를 허용하는 <see cref="T:System.Data.Entity.Core.EntityException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="message">지역화된 오류 메시지입니다.</param>
      <param name="innerException">내부 예외입니다.</param>
    </member>
    <member name="T:System.Data.Entity.Core.EntityKey">
      <summary>엔터티의 식별자를 나타냅니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityKey.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.Core.EntityKey" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityKey.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
      <summary>지정된 키 값을 사용하여 <see cref="T:System.Data.Entity.Core.EntityKey" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="qualifiedEntitySetName">EntityContainer 이름으로 정규화되는, 엔터티의 EntitySet 이름입니다.</param>
      <param name="entityKeyValues">엔터티를 식별하는 키-값 쌍입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityKey.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.EntityKeyMember})">
      <summary>지정된 키 값을 사용하여 <see cref="T:System.Data.Entity.Core.EntityKey" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="qualifiedEntitySetName">EntityContainer 이름으로 정규화되는, 엔터티의 EntitySet 이름입니다.</param>
      <param name="entityKeyValues">엔터티를 식별하는 키-값 쌍입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityKey.#ctor(System.String,System.String,System.Object)">
      <summary>지정된 단일 키 이름 및 값을 사용하여 <see cref="T:System.Data.Entity.Core.EntityKey" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="qualifiedEntitySetName">EntityContainer 이름으로 정규화되는, 엔터티의 EntitySet 이름입니다.</param>
      <param name="keyName">엔터티를 식별하는 키 이름입니다.</param>
      <param name="keyValue">엔터티를 식별하는 키 값입니다.</param>
    </member>
    <member name="P:System.Data.Entity.Core.EntityKey.EntityContainerName">
      <summary>엔터티가 포함된 엔터티 컨테이너를 식별하는 EntityContainer 이름을 가져오거나 설정합니다.</summary>
      <returns>엔터티가 포함된 엔터티 컨테이너를 식별하는 EntityContainer 이름입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityKey.EntityKeyValues">
      <summary>엔터티를 식별하는 키 값을 가져오거나 설정합니다.</summary>
      <returns>엔터티를 식별하는 키 값입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityKey.EntityNotValidKey">
      <summary>실패한 TREAT의 결과인 엔터티를 식별하는 singleton EntityKey를 가져옵니다.</summary>
      <returns>실패한 TREAT의 결과인 엔터티를 식별하는 singleton EntityKey입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityKey.EntitySetName">
      <summary>엔터티가 포함된 엔터티 집합을 식별하는 EntitySet 이름을 가져오거나 설정합니다.</summary>
      <returns>엔터티가 포함된 엔터티 집합을 식별하는 EntitySet 이름입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityKey.Equals(System.Data.Entity.Core.EntityKey)">
      <summary>이 인스턴스가 지정된 키와 같은지 여부를 의미하는 값을 나타냅니다.</summary>
      <returns>이 인스턴스가 지정된 키와 같으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="other">이 인스턴스와 비교할 키입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityKey.Equals(System.Object)">
      <summary>이 인스턴스가 지정된 키와 같은지 여부를 의미하는 값을 나타냅니다.</summary>
      <returns>이 인스턴스가 지정된 키와 같으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="obj">이 인스턴스와 비교할 키입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityKey.GetEntitySet(System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace)">
      <summary>엔터티 컨테이너 이름 및 엔터티 집합 이름을 기준으로 지정된 메타데이터 작업 영역에서 이 엔터티 키의 엔터티 집합을 가져옵니다.</summary>
      <returns>지정된 작업 영역에 있는, 이 엔터티 키의 엔터티 집합입니다.</returns>
      <param name="metadataWorkspace">엔터티 집합을 조회할 작업 영역입니다.</param>
      <exception cref="T:System.ArgumentException">작업 영역에서 엔터티 집합을 찾을 수 없습니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.EntityKey.GetHashCode">
      <summary>해시 테이블에서 EntityKey를 사용할 수 있도록 값 기반 해시 코드를 반환합니다.</summary>
      <returns>이 EntityKey의 해시 값입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityKey.IsTemporary">
      <summary>이 키가 임시 키인지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>이 키가 임시 키이면 true이고, 그렇지 않으면 false입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityKey.NoEntitySetKey">
      <summary>읽기 전용 엔터티가 식별되는 singleton EntityKey를 가져옵니다.</summary>
      <returns>읽기 전용 엔터티가 식별되는 singleton EntityKey입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityKey.OnDeserialized(System.Runtime.Serialization.StreamingContext)">
      <summary>이 EntityKey가 deserialize된 후 호출합니다.</summary>
      <param name="context">serialization 컨텍스트입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityKey.OnDeserializing(System.Runtime.Serialization.StreamingContext)">
      <summary>이 EntityKey가 deserialize된 후 호출합니다.</summary>
      <param name="context">serialization 컨텍스트입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityKey.op_Equality(System.Data.Entity.Core.EntityKey,System.Data.Entity.Core.EntityKey)">
      <summary>두 키가 같은지 여부를 의미하는 값을 나타냅니다.</summary>
      <returns>두 키가 같으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="key1">비교할 키입니다.</param>
      <param name="key2">비교할 키입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityKey.op_Inequality(System.Data.Entity.Core.EntityKey,System.Data.Entity.Core.EntityKey)">
      <summary>두 키가 같지 않은지 여부를 의미하는 값을 나타냅니다.</summary>
      <returns>두 키가 같지 않으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="key1">비교할 키입니다.</param>
      <param name="key2">비교할 키입니다.</param>
    </member>
    <member name="T:System.Data.Entity.Core.EntityKeyMember">
      <summary>EntityKey의 일부인 키에 대한 정보입니다.키 멤버에는 키 이름 및 값이 포함됩니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityKeyMember.#ctor">
      <summary>빈 EntityKeyMember를 만듭니다.이 생성자는 serialization에서 사용됩니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityKeyMember.#ctor(System.String,System.Object)">
      <summary>     지정된 키 이름 및 값을 사용하여 새 EntityKeyMember를 만듭니다. </summary>
      <param name="keyName"> 키 이름입니다. </param>
      <param name="keyValue"> 키 값입니다. </param>
    </member>
    <member name="P:System.Data.Entity.Core.EntityKeyMember.Key">
      <summary>     키 이름입니다. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityKeyMember.ToString">
      <summary>     EntityKeyMember의 문자열 표현을 반환합니다. </summary>
      <returns> EntityKeyMember의 문자열 표현입니다. </returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityKeyMember.Value">
      <summary>     키 값입니다. </summary>
    </member>
    <member name="T:System.Data.Entity.Core.EntitySqlException">
      <summary>eSQL 쿼리 컴파일 예외를 나타냅니다. 이 예외를 발생시킬 수 있는 예외 조건의 종류는 주로 다음과 같습니다. 1) 구문 오류: 쿼리 텍스트 구문 분석 중에 주어진 쿼리가 eSQL 정식 문법을 따르지 않는 경우 발생, 2) 의미 오류: 정확하지 않거나 존재하지 않는 메타데이터 또는 스키마 정보, 형식 유효성 검사 오류, 범위 지정 규칙 위반, 정의되지 않은 변수의 사용자와 같이 eSQL 언어의 의미 규칙이 충족되지 않는 경우 발생.자세한 내용은 eSQL 언어 사양을 참조하십시오.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntitySqlException.#ctor">
      <summary>일반 오류 메시지를 사용하여 <see cref="T:System.Data.Entity.Core.EntitySqlException" />의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntitySqlException.#ctor(System.String)">
      <summary>지정된 메시지를 사용하여 <see cref="T:System.Data.Entity.Core.EntitySqlException" />의 새 인스턴스를 초기화합니다.</summary>
      <param name="message">오류 메시지입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntitySqlException.#ctor(System.String,System.Exception)">
      <summary>지정된 메시지 및 innerException 인스턴스를 사용하여 <see cref="T:System.Data.Entity.Core.EntitySqlException" />의 새 인스턴스를 초기화합니다.</summary>
      <param name="message">오류 메시지입니다.</param>
      <param name="innerException">내부 예외입니다.</param>
    </member>
    <member name="P:System.Data.Entity.Core.EntitySqlException.Column">
      <summary>오류가 발생한 대략적인 열 번호를 가져옵니다.</summary>
      <returns>오류가 발생한 대략적인 열 번호입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntitySqlException.ErrorContext">
      <summary>사용 가능한 경우 오류가 발생한 대략적인 컨텍스트를 가져옵니다.</summary>
      <returns>사용 가능한 경우 오류가 발생한 대략적인 컨텍스트입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntitySqlException.ErrorDescription">
      <summary>쿼리가 허용되지 않은 이유를 설명하는 오류 설명 또는 빈 String.Empty를 가져옵니다. </summary>
      <returns>쿼리가 허용되지 않은 이유를 설명하는 오류 설명 또는 빈 String.Empty입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntitySqlException.Line">
      <summary>오류가 발생한 대략적인 줄 번호를 가져옵니다. </summary>
      <returns>오류가 발생한 대략적인 줄 번호입니다.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.IExtendedDataRecord">
      <summary>구조적 형식과 다양한 메타데이터 정보를 지원하는 DataRecord 인터페이스를 제공합니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.IExtendedDataRecord.DataRecordInfo">
      <summary>레코드의 내용을 설명하는 DataRecordInfo 속성을 가져옵니다.</summary>
      <returns>레코드의 내용을 설명하는 DataRecordInfo 속성입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.IExtendedDataRecord.GetDataReader(System.Int32)">
      <summary>중첩된 판독기를 DbDataReader 개체로 반환합니다.</summary>
      <returns>DbDataReader 개체인 중첩된 판독기입니다.</returns>
      <param name="i">열 서수입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.IExtendedDataRecord.GetDataRecord(System.Int32)">
      <summary>지정된 인덱스에 있는 DbDataRecord 개체를 가져옵니다.</summary>
      <returns>DbDataRecord 개체입니다.</returns>
      <param name="i">행의 인덱스입니다.</param>
    </member>
    <member name="T:System.Data.Entity.Core.InvalidCommandTreeException">
      <summary>     명령 트리가 잘못되었음을 나타내기 위해 throw됩니다. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.InvalidCommandTreeException.#ctor">
      <summary>     기본 메시지를 사용하여 새로운 InvalidCommandTreeException을 생성합니다. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.InvalidCommandTreeException.#ctor(System.String)">
      <summary>     지정된 메시지를 사용하여 새로운 InvalidCommandTreeException을 생성합니다. </summary>
      <param name="message"> 예외 메시지입니다. </param>
    </member>
    <member name="M:System.Data.Entity.Core.InvalidCommandTreeException.#ctor(System.String,System.Exception)">
      <summary>     지정된 메시지와 내부 예외를 사용하여 새로운 InvalidCommandTreeException을 생성합니다. </summary>
      <param name="message"> 예외 메시지입니다. </param>
      <param name="innerException"> 이 InvalidCommandTreeException의 원인이 되는 예외입니다. </param>
    </member>
    <member name="T:System.Data.Entity.Core.MappingException">
      <summary>예외 클래스를 매핑합니다.이 클래스에는 상태가 있으므로 클래스의 내부를 변경하는 경우에도 주요 변경에 해당할 수 있습니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.MappingException.#ctor">
      <summary>     기본 메시지가 있는 생성자입니다. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.MappingException.#ctor(System.String)">
      <summary>     기본 생성자 </summary>
      <param name="message"> 지역화된 오류 메시지입니다. </param>
    </member>
    <member name="M:System.Data.Entity.Core.MappingException.#ctor(System.String,System.Exception)">
      <summary>     생성자 </summary>
      <param name="message"> 지역화된 오류 메시지입니다. </param>
      <param name="innerException"> 내부 예외입니다. </param>
    </member>
    <member name="T:System.Data.Entity.Core.MetadataException">
      <summary>     메타데이터 예외 클래스입니다. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.MetadataException.#ctor">
      <summary>     기본 메시지가 있는 생성자입니다. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.MetadataException.#ctor(System.String)">
      <summary>     기본 생성자 </summary>
      <param name="message"> 지역화된 오류 메시지입니다. </param>
    </member>
    <member name="M:System.Data.Entity.Core.MetadataException.#ctor(System.String,System.Exception)">
      <summary>     생성자 </summary>
      <param name="message"> 지역화된 오류 메시지입니다. </param>
      <param name="innerException"> 내부 예외입니다. </param>
    </member>
    <member name="T:System.Data.Entity.Core.ObjectNotFoundException">
      <summary>이 예외는 요청된 개체가 저장소에 없는 경우 throw됩니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.ObjectNotFoundException.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.Core.ObjectNotFoundException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.ObjectNotFoundException.#ctor(System.String)">
      <summary>
        <see cref="T:System.Data.Entity.Core.ObjectNotFoundException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="message">지역화된 오류 메시지입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.ObjectNotFoundException.#ctor(System.String,System.Exception)">
      <summary>메시지와 내부 예외를 사용하는 생성자 및 <see cref="T:System.Data.Entity.Core.ObjectNotFoundException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="message">지역화된 오류 메시지입니다.</param>
      <param name="innerException">내부 예외입니다.</param>
    </member>
    <member name="T:System.Data.Entity.Core.OptimisticConcurrencyException">
      <summary>이 예외는 업데이트 작업이 동시성 제약 조건을 위반하는 경우 throw됩니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.OptimisticConcurrencyException.#ctor">
      <summary>기본값을 사용하여 <see cref="T:System.Data.Entity.Core.OptimisticConcurrencyException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.OptimisticConcurrencyException.#ctor(System.String)">
      <summary>지정된 메시지를 사용하여 <see cref="T:System.Data.Entity.Core.OptimisticConcurrencyException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="message">예외와 관련된 메시지입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.OptimisticConcurrencyException.#ctor(System.String,System.Exception)">
      <summary>지정된 메시지 및 내부 예외를 사용하여 <see cref="T:System.Data.Entity.Core.OptimisticConcurrencyException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="message">예외와 관련된 메시지입니다.</param>
      <param name="innerException">예외를 발생시킨 오류입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.OptimisticConcurrencyException.#ctor(System.String,System.Exception,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Objects.ObjectStateEntry})">
      <summary>지정된 메시지 및 내부 예외를 사용하여 <see cref="T:System.Data.Entity.Core.OptimisticConcurrencyException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="message">메시지입니다.</param>
      <param name="innerException">예외를 발생시킨 오류입니다.</param>
      <param name="stateEntries">상태 항목입니다.</param>
    </member>
    <member name="T:System.Data.Entity.Core.PropertyConstraintException">
      <summary>속성 제약 조건 예외 클래스를 나타냅니다.이 클래스에는 상태가 있으므로 클래스의 내부를 변경하는 경우에도 주요 변경에 해당할 수 있습니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.PropertyConstraintException.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.Core.PropertyConstraintException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.PropertyConstraintException.#ctor(System.String)">
      <summary>
        <see cref="T:System.Data.Entity.Core.PropertyConstraintException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="message">지역화된 오류 메시지입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.PropertyConstraintException.#ctor(System.String,System.Exception)">
      <summary>제공된 메시지 및 내부 예외를 사용하여 <see cref="T:System.Data.Entity.Core.PropertyConstraintException" /> 클래스의 새 인스턴스를 초기화합니다. </summary>
      <param name="message">지역화된 오류 메시지입니다.</param>
      <param name="innerException">내부 예외입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.PropertyConstraintException.#ctor(System.String,System.String)">
      <summary>
        <see cref="T:System.Data.Entity.Core.PropertyConstraintException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="message">지역화된 오류 메시지입니다.</param>
      <param name="propertyName">속성 이름입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.PropertyConstraintException.#ctor(System.String,System.String,System.Exception)">
      <summary>
        <see cref="T:System.Data.Entity.Core.PropertyConstraintException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="message">지역화된 오류 메시지입니다.</param>
      <param name="propertyName">속성 이름입니다.</param>
      <param name="innerException">내부 예외입니다.</param>
    </member>
    <member name="P:System.Data.Entity.Core.PropertyConstraintException.PropertyName">
      <summary>제약 조건을 위반한 속성의 이름을 가져옵니다.</summary>
      <returns>제약 조건을 위반한 속성의 이름입니다.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.ProviderIncompatibleException">
      <summary>저장소 공급자가 엔터티 클라이언트 공급자와 호환되지 않는 동작을 수행하는 경우 throw되는 예외입니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.ProviderIncompatibleException.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.Core.ProviderIncompatibleException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.ProviderIncompatibleException.#ctor(System.String)">
      <summary>지정된 오류 메시지를 사용하여 <see cref="T:System.Data.Entity.Core.ProviderIncompatibleException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="message">예외를 설명하는 오류 메시지입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.ProviderIncompatibleException.#ctor(System.String,System.Exception)">
      <summary>지정한 오류 메시지와 내부 예외를 사용하여 <see cref="T:System.Data.Entity.Core.ProviderIncompatibleException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="message">예외를 설명하는 오류 메시지입니다.</param>
      <param name="innerException">현재 예외의 원인인 내부 예외입니다.</param>
    </member>
    <member name="T:System.Data.Entity.Core.UpdateException">
      <summary>     저장소에 변경 내용을 저장하는 동안의 예외입니다. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.UpdateException.#ctor">
      <summary>     기본 생성자 </summary>
    </member>
    <member name="M:System.Data.Entity.Core.UpdateException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>     serialization에 대한 protected 생성자입니다. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.UpdateException.#ctor(System.String)">
      <summary>     메시지를 사용하는 생성자입니다. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.UpdateException.#ctor(System.String,System.Exception)">
      <summary>     메시지와 내부 예외를 사용하는 생성자입니다. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.UpdateException.#ctor(System.String,System.Exception,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Objects.ObjectStateEntry})">
      <summary>     메시지와 내부 예외를 사용하는 생성자입니다. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.UpdateException.StateEntries">
      <summary>     오류에 관련된 상태 항목을 가져옵니다. </summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.DataRecordInfo">
      <summary>형식 정보와 열 정보에 액세스할 수 있는 간단한 방법을 제공하는 DataRecordInfo 클래스입니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DataRecordInfo.#ctor(System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.EdmMember})">
      <summary>열거할 수 있는 데이터 필드 컬렉션을 가진 특정 형식에 대한 새 <see cref="T:System.Data.Common.DbDataRecord" /> 개체를 초기화합니다.</summary>
      <param name="metadata">이 개체로 표현되는 형식에 대한 메타데이터로서 <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" />에서 제공됩니다.</param>
      <param name="memberInfo">열 정보를 나타내는 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmMember" /> 개체의 열거할 수 있는 컬렉션입니다.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Common.DataRecordInfo.FieldMetadata">
      <summary>이 <see cref="P:System.Data.Entity.Core.IExtendedDataRecord.DataRecordInfo" /> 개체의 <see cref="T:System.Data.Entity.Core.Common.FieldMetadata" />를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Common.FieldMetadata" /> 개체입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Common.DataRecordInfo.RecordType">
      <summary>이 개체의 형식 정보를 <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> 개체 형태로 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> 값입니다.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Common.DbCommandDefinition">
      <summary>준비된 명령 정의를 캐시하고 다시 사용하면 명령을 다시 준비하지 않아도 됩니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbCommandDefinition.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.DbCommandDefinition" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbCommandDefinition.#ctor(System.Data.Common.DbCommand)">
      <summary>지정한 <see cref="T:System.Data.Common.DbCommand" />를 사용하여 <see cref="T:System.Data.Entity.Core.Common.DbCommandDefinition" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="prototype">제공된 <see cref="T:System.Data.Common.DbCommand" />입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbCommandDefinition.CreateCommand">
      <summary>실행할 수 있는 <see cref="T:System.Data.Common.DbCommand" /> 개체를 만들고 반환합니다.</summary>
      <returns>데이터베이스에 대한 명령입니다.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Common.DbProviderManifest">
      <summary>모든 CLR 형식의 메타데이터 인터페이스</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderManifest.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.DbProviderManifest" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.DbProviderManifest.CollationFacetName">
      <summary>데이터 정렬 패싯의 이름입니다.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.DbProviderManifest.ConceptualSchemaDefinition">
      <summary>ConceptualSchemaDefinition을 가져오기 위해 GetInformation에 전달할 값입니다.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.DbProviderManifest.ConceptualSchemaDefinitionVersion3">
      <summary>ConceptualSchemaDefinitionVersion3을 가져오기 위해 GetInformation에 전달할 값입니다.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.DbProviderManifest.DefaultValueFacetName">
      <summary>DefaultValue 패싯의 이름입니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderManifest.EscapeLikeArgument(System.String)">
      <summary>공급자 작성자는 와일드카드와 이스케이프 문자가 이스케이프된 상태로 인수가 반환되도록 이 메서드를 재정의해야 합니다.이 메서드는 SupportsEscapingLikeArgument가 true를 반환하는 경우에만 사용됩니다.</summary>
      <returns>와일드카드와 이스케이프 문자가 이스케이프된 인수입니다.</returns>
      <param name="argument">이스케이프될 인수입니다.</param>
    </member>
    <member name="F:System.Data.Entity.Core.Common.DbProviderManifest.FixedLengthFacetName">
      <summary>FixedLength 패싯의 이름입니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderManifest.GetDbInformation(System.String)">
      <summary>파생 클래스에서 재정의되는 경우 이 메서드는 공급자 관련 정보를 반환합니다.</summary>
      <returns>내부 데이터 저장소 카탈로그에 대한 매핑을 나타내는 XmlReader 개체입니다.</returns>
      <param name="informationType">반환할 정보의 형식입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderManifest.GetEdmType(System.Data.Entity.Core.Metadata.Edm.TypeUsage)">
      <summary>파생 클래스에서 재정의되는 경우 이 메서드는 지정된 저장소 형식과 해당 형식의 패싯 집합을 EDM 형식으로 매핑합니다.</summary>
      <returns>EDM 형식과 해당 형식의 패싯 집합을 설명하는 <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> 인스턴스입니다.</returns>
      <param name="storeType">EDM 형식으로 매핑할 저장소 형식과 해당 형식의 패싯 집합을 설명하는 TypeUsage 인스턴스입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderManifest.GetFacetDescriptions(System.Data.Entity.Core.Metadata.Edm.EdmType)">
      <summary>특정 형식의 FacetDescription 개체를 반환합니다.</summary>
      <returns>지정된 EDM 형식의 FacetDescription 개체입니다.</returns>
      <param name="edmType">패싯 설명을 반환할 EDM 형식입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderManifest.GetInformation(System.String)">
      <summary>공급자 관련 정보를 가져옵니다.</summary>
      <returns>공급자 관련 정보입니다.</returns>
      <param name="informationType">반환할 정보의 형식입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderManifest.GetStoreFunctions">
      <summary>파생 클래스에서 재정의되는 경우 공급자 매니페스트가 지원하는 EDM 함수의 컬렉션을 반환합니다.</summary>
      <returns>EDM 함수의 컬렉션입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderManifest.GetStoreType(System.Data.Entity.Core.Metadata.Edm.TypeUsage)">
      <summary>파생 클래스에서 재정의되는 경우 이 메서드는 지정된 EDM 형식과 해당 형식의 패싯 집합을 저장소 형식으로 매핑합니다.</summary>
      <returns>저장소 형식과 해당 형식의 패싯 집합을 설명하는 TypeUsage 인스턴스입니다.</returns>
      <param name="edmType">저장소 형식으로 매핑할 EDM 형식과 해당 형식의 패싯 집합을 설명하는 TypeUsage 인스턴스입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderManifest.GetStoreTypes">
      <summary>파생 클래스에서 재정의되는 경우 데이터 원본에서 지원하는 기본 형식의 집합을 반환합니다.</summary>
      <returns>데이터 원본에서 지원하는 형식의 집합입니다.</returns>
    </member>
    <member name="F:System.Data.Entity.Core.Common.DbProviderManifest.IsStrictFacetName">
      <summary>IsStrict 패싯의 이름입니다.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.DbProviderManifest.MaxLengthFacetName">
      <summary>MaxLength 패싯의 이름입니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.DbProviderManifest.NamespaceName">
      <summary>이 공급자 매니페스트에서 사용하는 네임스페이스를 가져옵니다.</summary>
      <returns>이 공급자 매니페스트에서 사용하는 네임스페이스입니다.</returns>
    </member>
    <member name="F:System.Data.Entity.Core.Common.DbProviderManifest.NullableFacetName">
      <summary>null을 허용하는 패싯의 이름입니다.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.DbProviderManifest.PrecisionFacetName">
      <summary>전체 자릿수 패싯의 이름입니다.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.DbProviderManifest.ScaleFacetName">
      <summary>소수 자릿수 패싯의 이름입니다.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.DbProviderManifest.SridFacetName">
      <summary>SRID 패싯의 이름입니다.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.DbProviderManifest.StoreSchemaDefinition">
      <summary>StoreSchemaDefinition을 가져오기 위해 GetInformation에 전달할 값입니다.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.DbProviderManifest.StoreSchemaDefinitionVersion3">
      <summary>StoreSchemaDefinitionVersion3을 가져오기 위해 GetInformation에 전달할 값입니다.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.DbProviderManifest.StoreSchemaMapping">
      <summary>StoreSchemaMapping을 가져오기 위해 GetInformation에 전달할 값입니다.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.DbProviderManifest.StoreSchemaMappingVersion3">
      <summary>StoreSchemaMappingVersion3을 가져오기 위해 GetInformation에 전달할 값입니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderManifest.SupportsEscapingLikeArgument(System.Char@)">
      <summary>공급자가 Like 식에서 이스케이프 문자열을 패턴으로 사용하도록 지원하는지 여부를 나타냅니다.</summary>
      <returns>이 공급자가 Like 식에서 이스케이프 문자열을 패턴으로 사용하도록 지원하면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="escapeCharacter">공급자가 이스케이프 처리를 지원하는 경우 이스케이프 문자로 사용될 문자입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderManifest.SupportsInExpression">
      <summary>공급자가 DbInExpression 인스턴스가 포함된 식 트리를 처리할 수 있는지 여부를 지정하는 부울을 반환합니다.기본 구현에서는 이전 버전과의 호환성을 위해 false를 반환합니다.파생 클래스는 이 메서드를 재정의할 수 있습니다.</summary>
      <returns>false</returns>
    </member>
    <member name="F:System.Data.Entity.Core.Common.DbProviderManifest.UnicodeFacetName">
      <summary>유니코드 패싯의 이름입니다.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.DbProviderServices">
      <summary>명령 정의를 작성하는 팩터리입니다. 다음 공급자 팩터리에서 이 개체 유형을 IServiceProvider.GetService 메서드에 대한 인수로 사용합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.#ctor">
      <summary>응용 프로그램 도메인 <see cref="T:System.Data.Entity.DbConfiguration" /> Singleton에서 가져온 <see cref="T:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver" />를 사용하여 사용할 <see cref="T:System.Data.Entity.Spatial.DbSpatialServices" /> 인스턴스와 같은 EF 종속성을 확인할 EF 공급자를 생성합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.AddDependencyResolver(System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver)">
      <summary>응용 프로그램의 구성 파일 항목을 사용하거나 <see cref="T:System.Data.Entity.DbConfiguration" />의 코드 기반 등록을 통해 파생 형식이 EF 공급자로 등록된 경우 추가 기본 공급자 서비스를 확인하는 데 사용되는 <see cref="T:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver" />를 추가합니다.</summary>
      <param name="resolver">추가할 확인자입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.CreateCommandDefinition(System.Data.Common.DbCommand)">
      <summary>프로토타입 명령을 기반으로 기본 DbCommandDefinition 개체를 만듭니다. 이 메서드는 공급자 작성기가 명령에서 기본 명령 정의를 빌드하는 데 사용됩니다.참고: 이 메서드는 프로토타입을 복제합니다.</summary>
      <returns>실행 가능한 명령 정의 개체</returns>
      <param name="prototype">프로토타입 명령입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.CreateCommandDefinition(System.Data.Entity.Core.Common.CommandTrees.DbCommandTree)">
      <summary>주어진 명령 트리에서 명령 정의 개체를 만듭니다.</summary>
      <returns>실행 가능한 명령 정의 개체</returns>
      <param name="commandTree">문에 대한 명령 트리입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.CreateCommandDefinition(System.Data.Entity.Core.Common.DbProviderManifest,System.Data.Entity.Core.Common.CommandTrees.DbCommandTree)">
      <summary>지정된 매니페스트 및 명령 트리에서 명령 정의를 만듭니다.</summary>
      <returns>생성된 명령 정의입니다.</returns>
      <param name="providerManifest">매니페스트입니다.</param>
      <param name="commandTree">명령 트리입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.CreateDatabase(System.Data.Common.DbConnection,System.Nullable{System.Int32},System.Data.Entity.Core.Metadata.Edm.StoreItemCollection)">
      <summary>연결에서 지정한 데이터베이스를 만들고 storeItemCollection의 내용을 기반으로 스키마 개체(테이블, 기본 키, 외래 키)를 만듭니다.</summary>
      <param name="connection">새로 만들어서 storeItemCollection 매개 변수로 지정된 저장소 개체로 채워야 하는 존재하지 않는 데이터베이스에 대한 연결입니다.</param>
      <param name="commandTimeout">데이터베이스를 만들어야 하는 모든 명령에 대한 실행 제한 시간입니다.</param>
      <param name="storeItemCollection">스크립트를 만들 기반이 되는 모든 저장소 항목의 컬렉션입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.CreateDatabaseScript(System.String,System.Data.Entity.Core.Metadata.Edm.StoreItemCollection)">
      <summary>StoreItemCollection 매개 변수의 내용을 기반으로 하고 공급자 매니페스트 토큰에 해당하는 데이터베이스 버전을 대상으로 스키마 개체(테이블, 기본 키, 외래 키)를 만드는 DDL(데이터 정의 언어) 스크립트를 생성합니다.</summary>
      <returns>StoreItemCollection 매개 변수의 내용을 기반으로 하고 공급자 매니페스트 토큰에 해당하는 데이터베이스 버전을 대상으로 스키마 개체를 만드는 DDL 스크립트입니다.</returns>
      <param name="providerManifestToken">대상 버전을 식별하는 공급자 매니페스트 토큰입니다.</param>
      <param name="storeItemCollection">데이터베이스의 구조입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.CreateDbCommandDefinition(System.Data.Entity.Core.Common.DbProviderManifest,System.Data.Entity.Core.Common.CommandTrees.DbCommandTree)">
      <summary>지정된 공급자 매니페스트 및 명령 트리에 대한 명령 정의 개체를 만듭니다.</summary>
      <returns>실행 가능한 명령 정의 개체입니다.</returns>
      <param name="providerManifest">저장소 공급자에서 이전에 검색한 공급자 매니페스트입니다.</param>
      <param name="commandTree">문에 대한 명령 트리입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.DatabaseExists(System.Data.Common.DbConnection,System.Nullable{System.Int32},System.Data.Entity.Core.Metadata.Edm.StoreItemCollection)">
      <summary>지정된 데이터베이스가 서버에 있는지 여부를 나타내는 값을 반환합니다.</summary>
      <returns>공급자가 연결에 따라서만 데이터베이스를 추론할 수 있으면 true입니다.</returns>
      <param name="connection">이 메서드에서 존재 여부를 확인할 데이터베이스에 대한 연결입니다.</param>
      <param name="commandTimeout">데이터베이스 존재 여부를 확인해야 하는 모든 명령에 대한 실행 제한 시간입니다.</param>
      <param name="storeItemCollection">모델의 전체 저장소 항목 컬렉션입니다.이 매개 변수는 데이터베이스 존재 여부 확인에 더 이상 사용되지 않습니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.DbCreateDatabase(System.Data.Common.DbConnection,System.Nullable{System.Int32},System.Data.Entity.Core.Metadata.Edm.StoreItemCollection)">
      <summary>연결에서 지정한 데이터베이스를 만들고 StoreItemCollection의 내용을 기반으로 스키마 개체(테이블, 기본 키, 외래 키)를 만듭니다.</summary>
      <param name="connection">새로 만들어서 storeItemCollection 매개 변수로 지정된 저장소 개체로 채워야 하는 존재하지 않는 데이터베이스에 대한 연결입니다.</param>
      <param name="commandTimeout">데이터베이스를 만들어야 하는 모든 명령에 대한 실행 제한 시간입니다.</param>
      <param name="storeItemCollection">스크립트를 만들 기반이 되는 모든 저장소 항목의 컬렉션입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.DbCreateDatabaseScript(System.String,System.Data.Entity.Core.Metadata.Edm.StoreItemCollection)">
      <summary>StoreItemCollection 매개 변수의 내용을 기반으로 하고 공급자 매니페스트 토큰에 해당하는 데이터베이스 버전을 대상으로 스키마 개체(테이블, 기본 키, 외래 키)를 만드는 DDL(데이터 정의 언어) 스크립트를 생성합니다.</summary>
      <returns>StoreItemCollection 매개 변수의 내용을 기반으로 하고 공급자 매니페스트 토큰에 해당하는 데이터베이스 버전을 대상으로 스키마 개체를 만드는 DDL 스크립트입니다.</returns>
      <param name="providerManifestToken">대상 버전을 식별하는 공급자 매니페스트 토큰입니다.</param>
      <param name="storeItemCollection">데이터베이스의 구조입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.DbDatabaseExists(System.Data.Common.DbConnection,System.Nullable{System.Int32},System.Data.Entity.Core.Metadata.Edm.StoreItemCollection)">
      <summary>지정된 데이터베이스가 서버에 있는지 여부를 나타내는 값을 반환합니다.</summary>
      <returns>공급자가 연결에 따라서만 데이터베이스를 추론할 수 있으면 true입니다.</returns>
      <param name="connection">이 메서드에서 존재 여부를 확인할 데이터베이스에 대한 연결입니다.</param>
      <param name="commandTimeout">데이터베이스 존재 여부를 확인해야 하는 모든 명령에 대한 실행 제한 시간입니다.</param>
      <param name="storeItemCollection">모델의 전체 저장소 항목 컬렉션입니다.이 매개 변수는 데이터베이스 존재 여부 확인에 더 이상 사용되지 않습니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.DbDeleteDatabase(System.Data.Common.DbConnection,System.Nullable{System.Int32},System.Data.Entity.Core.Metadata.Edm.StoreItemCollection)">
      <summary>지정된 데이터베이스를 삭제합니다.</summary>
      <param name="connection">삭제해야 하는 기존 데이터베이스에 대한 연결입니다.</param>
      <param name="commandTimeout">데이터베이스를 삭제해야 하는 모든 명령에 대한 실행 제한 시간입니다.</param>
      <param name="storeItemCollection">모델의 전체 저장소 항목 컬렉션입니다.이 매개 변수는 데이터베이스 삭제에 더 이상 사용되지 않습니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.DbGetSpatialServices(System.String)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.DbProviderServices" />에 대한 공간 서비스를 가져옵니다.</summary>
      <returns>공간 서비스입니다.</returns>
      <param name="manifestToken">공급자 매니페스트에 연결된 토큰 정보입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.DeleteDatabase(System.Data.Common.DbConnection,System.Nullable{System.Int32},System.Data.Entity.Core.Metadata.Edm.StoreItemCollection)">
      <summary>지정된 데이터베이스를 삭제합니다.</summary>
      <param name="connection">삭제해야 하는 기존 데이터베이스에 대한 연결입니다.</param>
      <param name="commandTimeout">데이터베이스를 삭제해야 하는 모든 명령에 대한 실행 제한 시간입니다.</param>
      <param name="storeItemCollection">모델의 전체 저장소 항목 컬렉션입니다.이 매개 변수는 데이터베이스 삭제에 더 이상 사용되지 않습니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.ExpandDataDirectory(System.String)">
      <summary>지정된 경로가 |DataDirectory|로 시작하고 확장 경로를 반환하는 경우 해당 경로에서 |DataDirectory|를 확장합니다. 경로가 |DataDirectory|로 시작하지 않는 경우에는 지정된 문자열을 반환합니다.</summary>
      <returns>확장된 경로입니다.</returns>
      <param name="path">확장할 경로입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.GetConceptualSchemaDefinition(System.String)">
      <summary>CSDL 설명을 나타내는 XML 판독기를 반환합니다.</summary>
      <returns>CSDL 설명을 나타내는 XmlReader</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.GetDbProviderManifest(System.String)">
      <summary>파생 클래스에서 재정의되면 DbProviderManifest에서 파생되는 클래스의 인스턴스를 반환합니다.</summary>
      <returns>공급자 매니페스트를 나타내는 DbProviderManifest 개체입니다.</returns>
      <param name="manifestToken">공급자 매니페스트에 연결된 토큰 정보입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.GetDbProviderManifestToken(System.Data.Common.DbConnection)">
      <summary>지정된 연결에 대한 공급자 매니페스트 토큰을 반환합니다.</summary>
      <returns>지정된 연결에 대한 공급자 매니페스트 토큰입니다.</returns>
      <param name="connection">매니페스트 토큰을 찾을 연결입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.GetDbSpatialDataReader(System.Data.Common.DbDataReader,System.String)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.DbProviderServices" />에 대한 공간 데이터 판독기를 가져옵니다.</summary>
      <returns>공간 데이터 판독기입니다.</returns>
      <param name="fromReader">공간 데이터를 가져온 판독기입니다.</param>
      <param name="manifestToken">공급자 매니페스트에 연결된 토큰 정보입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.GetExecutionStrategy(System.Data.Common.DbConnection)">
      <summary>지정된 연결을 사용하는 메서드를 실행하는 데 사용할 <see cref="T:System.Data.Entity.Infrastructure.IDbExecutionStrategy" />를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Data.Entity.Infrastructure.DbExecutionStrategy" />의 새 인스턴스</returns>
      <param name="connection">데이터베이스 연결입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.GetProviderFactory(System.Data.Common.DbConnection)">
      <summary>지정된 DbConnection을 기반으로 하는 DbProviderFactory를 검색합니다.</summary>
      <returns>검색된 DbProviderFactory입니다.</returns>
      <param name="connection">사용할 연결입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.GetProviderManifest(System.String)">
      <summary>지정된 버전 정보를 사용하여 공급자 매니페스트를 반환합니다.</summary>
      <returns>지정된 버전 정보를 사용하여 반환된 공급자 매니페스트입니다.</returns>
      <param name="manifestToken">공급자 매니페스트에 연결된 토큰 정보입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.GetProviderManifestToken(System.Data.Common.DbConnection)">
      <summary>연결이 제공될 경우 공급자 매니페스트 토큰을 반환합니다.</summary>
      <returns>공급자 매니페스트 토큰입니다.</returns>
      <param name="connection">공급자에 대한 연결입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.GetProviderServices(System.Data.Common.DbConnection)">
      <summary>연결이 제공될 경우 공급자를 반환합니다.</summary>
      <returns>지정된 연결을 기반으로 인스턴스화된 <see cref="T:System.Data.Entity.Core.Common.DbProviderServices" />입니다.</returns>
      <param name="connection">공급자에 대한 연결입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.GetService(System.Type,System.Object)">
      <summary>응용 프로그램의 구성 파일 항목을 사용하거나 <see cref="T:System.Data.Entity.DbConfiguration" />의 코드 기반 등록을 통해 파생 형식이 EF 공급자로 등록된 경우 추가 기본 공급자 서비스를 확인하기 위해 호출됩니다.이 클래스의 이 메서드 구현에서는 AddDependencyResolver 메서드와 함께 추가된 확인자를 사용하여 종속성을 확인합니다.</summary>
      <returns>지정된 형식의 인스턴스 또는 서비스를 확인할 수 없는 경우 null</returns>
      <param name="type">확인할 서비스의 형식입니다.</param>
      <param name="key">서비스를 확인하기 위한 추가 정보를 제공하는 선택적 키입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.GetServices(System.Type,System.Object)">
      <summary>응용 프로그램의 구성 파일 항목을 사용하거나 <see cref="T:System.Data.Entity.DbConfiguration" />의 코드 기반 등록을 통해 파생 형식이 EF 공급자로 등록된 경우 추가 기본 공급자 서비스를 확인하기 위해 호출됩니다.이 클래스의 이 메서드 구현에서는 AddDependencyResolver 메서드와 함께 추가된 확인자를 사용하여 종속성을 확인합니다.</summary>
      <returns>지정된 형식 및 키를 만족하는 모든 등록된 서비스이거나, 없는 경우 빈 열거형입니다.</returns>
      <param name="type">확인할 서비스의 형식입니다.</param>
      <param name="key">서비스를 확인하기 위한 추가 정보를 제공하는 선택적 키입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.GetSpatialDataReader(System.Data.Common.DbDataReader,System.String)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.DbProviderServices" />에 대한 공간 데이터 판독기를 가져옵니다.</summary>
      <returns>공간 데이터 판독기입니다.</returns>
      <param name="fromReader">공간 데이터를 가져온 판독기입니다.</param>
      <param name="manifestToken">공급자 매니페스트에 연결된 매니페스트 토큰입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.GetSpatialServices(System.Data.Entity.Infrastructure.DbProviderInfo)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.DbProviderServices" />에 대한 공간 서비스를 가져옵니다.</summary>
      <returns>공간 서비스입니다.</returns>
      <param name="key">공간 서비스가 사용될 대상 데이터베이스에 대한 정보입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.GetSpatialServices(System.String)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.DbProviderServices" />에 대한 공간 서비스를 가져옵니다.</summary>
      <returns>공간 서비스입니다.</returns>
      <param name="manifestToken">공급자 매니페스트에 연결된 토큰 정보입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.RegisterInfoMessageHandler(System.Data.Common.DbConnection,System.Action{System.String})">
      <summary>데이터베이스 공급자가 보내는 오류 없음 메시지를 처리할 처리기를 등록합니다.</summary>
      <param name="connection">정보를 받을 연결입니다.</param>
      <param name="handler">메시지를 처리할 처리기입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.SetDbParameterValue(System.Data.Common.DbParameter,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Object)">
      <summary>매개 변수 값과 지정된 <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" />에 적절한 패싯을 설정합니다.</summary>
      <param name="parameter">매개 변수입니다.</param>
      <param name="parameterType">매개 변수의 형식입니다.</param>
      <param name="value">매개 변수의 값입니다.</param>
    </member>
    <member name="T:System.Data.Entity.Core.Common.DbXmlEnabledProviderManifest">
      <summary>XmlReader를 허용하는 ProviderManifest의 특수화입니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbXmlEnabledProviderManifest.#ctor(System.Xml.XmlReader)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.DbXmlEnabledProviderManifest" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="reader">공급자 매니페스트 파일의 XML 데이터에 대한 액세스를 제공하는 <see cref="T:System.Xml.XmlReader" /> 개체입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbXmlEnabledProviderManifest.GetFacetDescriptions(System.Data.Entity.Core.Metadata.Edm.EdmType)">
      <summary>지정된 EDM(엔터티 데이터 모델) 형식에 대한 패싯 설명 목록을 반환합니다.</summary>
      <returns>지정된 EDM 형식에 대한 패싯 설명 목록이 포함된 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 형식의 컬렉션입니다.</returns>
      <param name="edmType">검색할 패싯 설명에 해당하는 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" />입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbXmlEnabledProviderManifest.GetStoreFunctions">
      <summary>공급자 지원 함수의 목록을 반환합니다.</summary>
      <returns>공급자 지원 함수 목록이 포함된 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 형식의 컬렉션입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbXmlEnabledProviderManifest.GetStoreTypes">
      <summary>저장소 공급자에서 지원되는 기본 형식의 목록을 반환합니다.</summary>
      <returns>저장소 공급자에서 지원되는 기본 형식 목록이 포함된 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 형식의 컬렉션입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Common.DbXmlEnabledProviderManifest.NamespaceName">
      <summary>이 공급자 매니페스트에서 지원되는 네임스페이스 이름을 가져옵니다.</summary>
      <returns>이 공급자 매니페스트에서 지원되는 네임스페이스 이름입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Common.DbXmlEnabledProviderManifest.StoreTypeNameToEdmPrimitiveType">
      <summary>지정된 저장소 형식 이름에 대해 최상으로 매핑된 동일한 EDM(엔터티 데이터 모델) 형식을 가져옵니다.</summary>
      <returns>지정된 저장소 형식 이름에 대해 최상으로 매핑된 동일한 EDM 형식입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Common.DbXmlEnabledProviderManifest.StoreTypeNameToStorePrimitiveType">
      <summary>지정된 저장소 형식 이름에 대해 최상으로 매핑된 동일한 저장소 기본 형식을 가져옵니다.</summary>
      <returns>지정된 저장소 형식 이름에 대해 최상으로 매핑된 동일한 저장소 기본 형식입니다.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Common.EntityRecordInfo">
      <summary>형식 정보와 열 정보에 액세스할 수 있는 간단한 방법을 제공하는 EntityRecordInfo 클래스입니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.EntityRecordInfo.#ctor(System.Data.Entity.Core.Metadata.Edm.EntityType,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.EdmMember},System.Data.Entity.Core.EntityKey,System.Data.Entity.Core.Metadata.Edm.EntitySet)">
      <summary>열거할 수 있는 데이터 필드 컬렉션 및 특정 키와 엔터티 집합 정보를 가진 특정 엔터티 형식의 새 <see cref="T:System.Data.Entity.Core.Common.EntityRecordInfo" /> 클래스 인스턴스를 초기화합니다.</summary>
      <param name="metadata">이 <see cref="T:System.Data.Entity.Core.Common.EntityRecordInfo" /> 개체에서 설명하는 <see cref="T:System.Data.Common.DbDataRecord" />가 나타내는 엔터티의 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityType" />입니다.</param>
      <param name="memberInfo">열 정보를 나타내는 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmMember" /> 개체의 열거할 수 있는 컬렉션입니다.</param>
      <param name="entityKey">엔터티의 키입니다.</param>
      <param name="entitySet">엔터티가 속한 엔터티 집합입니다.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Common.EntityRecordInfo.EntityKey">
      <summary>엔터티의 <see cref="T:System.Data.Entity.Core.EntityKey" />를 가져옵니다.</summary>
      <returns>엔터티의 키입니다.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Common.FieldMetadata">
      <summary>열 서수와 MemberMetadata 간의 상관 관계를 제공하는 FieldMetadata 클래스입니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.FieldMetadata.#ctor(System.Int32,System.Data.Entity.Core.Metadata.Edm.EdmMember)">
      <summary>지정된 서수 값 및 필드 형식을 사용하여 새 <see cref="T:System.Data.Entity.Core.Common.FieldMetadata" /> 개체를 초기화합니다.</summary>
      <param name="ordinal">메타데이터 위치를 지정하는 정수입니다.</param>
      <param name="fieldType">필드 형식입니다.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Common.FieldMetadata.FieldType">
      <summary>이 <see cref="T:System.Data.Entity.Core.Common.FieldMetadata" /> 개체에 대한 필드 형식을 가져옵니다.</summary>
      <returns>이 <see cref="T:System.Data.Entity.Core.Common.FieldMetadata" /> 개체의 필드 형식입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Common.FieldMetadata.Ordinal">
      <summary>이 <see cref="T:System.Data.Entity.Core.Common.FieldMetadata" /> 개체에 대한 서수를 가져옵니다.</summary>
      <returns>서수 값을 나타내는 정수입니다.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.BasicCommandTreeVisitor">
      <summary>파생시킬 IExpressionVisitor 인터페이스를 구현하는 형식에 대한 추상 기본 형식을 나타냅니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicCommandTreeVisitor.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.BasicCommandTreeVisitor" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicCommandTreeVisitor.VisitCommandTree(System.Data.Entity.Core.Common.CommandTrees.DbCommandTree)">
      <summary>명령 트리에 대한 방문자 패턴을 구현합니다.</summary>
      <param name="commandTree">명령 트리입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicCommandTreeVisitor.VisitDeleteCommandTree(System.Data.Entity.Core.Common.CommandTrees.DbDeleteCommandTree)">
      <summary>삭제 명령 트리에 대한 방문자 패턴을 구현합니다.</summary>
      <param name="deleteTree">삭제 명령 트리입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicCommandTreeVisitor.VisitFunctionCommandTree(System.Data.Entity.Core.Common.CommandTrees.DbFunctionCommandTree)">
      <summary>함수 명령 트리에 대한 방문자 패턴을 구현합니다.</summary>
      <param name="functionTree">함수 명령 트리입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicCommandTreeVisitor.VisitInsertCommandTree(System.Data.Entity.Core.Common.CommandTrees.DbInsertCommandTree)">
      <summary>삽입 명령 트리에 대한 방문자 패턴을 구현합니다.</summary>
      <param name="insertTree">삽입 명령 트리입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicCommandTreeVisitor.VisitModificationClause(System.Data.Entity.Core.Common.CommandTrees.DbModificationClause)">
      <summary>수정 절에 대한 방문자 패턴을 구현합니다.</summary>
      <param name="modificationClause">수정 절입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicCommandTreeVisitor.VisitModificationClauses(System.Collections.Generic.IList{System.Data.Entity.Core.Common.CommandTrees.DbModificationClause})">
      <summary>수정 절의 컬렉션에 대한 방문자 패턴을 구현합니다.</summary>
      <param name="modificationClauses">수정 절입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicCommandTreeVisitor.VisitQueryCommandTree(System.Data.Entity.Core.Common.CommandTrees.DbQueryCommandTree)">
      <summary>쿼리 명령 트리에 대한 방문자 패턴을 구현합니다.</summary>
      <param name="queryTree">쿼리 명령 트리입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicCommandTreeVisitor.VisitSetClause(System.Data.Entity.Core.Common.CommandTrees.DbSetClause)">
      <summary>set 절에 대한 방문자 패턴을 구현합니다.</summary>
      <param name="setClause">set 절입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicCommandTreeVisitor.VisitUpdateCommandTree(System.Data.Entity.Core.Common.CommandTrees.DbUpdateCommandTree)">
      <summary>업데이트 명령 트리에 대한 방문자 패턴을 구현합니다.</summary>
      <param name="updateTree">업데이트 명령 트리입니다.</param>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor">
      <summary>IExpressionVisitor 인터페이스에서 파생시킬 형식을 적용하는 추상 기본 형식입니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbAndExpression)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbAndExpression" />에 대한 방문자 패턴 메서드입니다.</summary>
      <param name="expression">방문 중인 DbAndExpression입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" />이 null입니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression" />에 대한 방문자 패턴 메서드입니다.</summary>
      <param name="expression">방문 중인 DbApplyExpression입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" />이 null입니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression" />에 대한 방문자 패턴 메서드입니다.</summary>
      <param name="expression">방문 중인 DbArithmeticExpression입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" />이 null입니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbCaseExpression)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbCaseExpression" />에 대한 방문자 패턴 메서드입니다.</summary>
      <param name="expression">방문 중인 DbCaseExpression입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" />이 null입니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbCastExpression)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbCastExpression" />에 대한 방문자 패턴 메서드입니다.</summary>
      <param name="expression">방문 중인 DbCastExpression입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" />이 null입니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression" />에 대한 방문자 패턴 메서드입니다.</summary>
      <param name="expression">방문 중인 DbComparisonExpression입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" />이 null입니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression" />에 대한 방문자 패턴 메서드입니다.</summary>
      <param name="expression">방문 중인 DbConstantExpression입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" />이 null입니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbCrossJoinExpression)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbCrossJoinExpression" />에 대한 방문자 패턴 메서드입니다.</summary>
      <param name="expression">방문 중인 DbCrossJoinExpression입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" />이 null입니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbDerefExpression)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbDerefExpression" />에 대한 방문자 패턴 메서드입니다.</summary>
      <param name="expression">방문 중인 DeRefExpression입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" />이 null입니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbDistinctExpression)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbDistinctExpression" />에 대한 방문자 패턴 메서드입니다.</summary>
      <param name="expression">방문 중인 DbDistinctExpression입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" />이 null입니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbElementExpression)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbElementExpression" />에 대한 방문자 패턴 메서드입니다.</summary>
      <param name="expression">방문 중인 DbElementExpression입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" />이 null입니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbEntityRefExpression)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbEntityRefExpression" />에 대한 방문자 패턴 메서드입니다.</summary>
      <param name="expression">방문 중인 DbEntityRefExpression입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" />이 null입니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbExceptExpression)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExceptExpression" />에 대한 방문자 패턴 메서드입니다.</summary>
      <param name="expression">방문 중인 DbExceptExpression입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" />이 null입니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>인식할 수 없는 형식의 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />이 발견되면 호출됩니다.</summary>
      <param name="expression">식입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" />이 null입니다.</exception>
      <exception cref="T:System.NotSupportedException">이 메서드가 호출되는 경우 <paramref name="expression" />이 지원되지 않는 형식으로 되어 있음을 나타내므로 항상 throw됩니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbFilterExpression)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFilterExpression" />에 대한 방문자 패턴 메서드입니다.</summary>
      <param name="expression">방문 중인 DbFilterExpression입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" />이 null입니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />에 대한 방문자 패턴 메서드입니다.</summary>
      <param name="expression">방문 중인 DbFunctionExpression입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" />이 null입니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbGroupByExpression)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbGroupByExpression" />에 대한 방문자 패턴 메서드입니다.</summary>
      <param name="expression">방문 중인 DbExpression입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" />이 null입니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbInExpression)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbInExpression" />에 대한 방문자 패턴 메서드입니다.</summary>
      <param name="expression">방문 중인 DbInExpression입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" />이 null입니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbIntersectExpression)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbIntersectExpression" />에 대한 방문자 패턴 메서드입니다.</summary>
      <param name="expression">방문 중인 DbIntersectExpression입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" />이 null입니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbIsEmptyExpression)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbIsEmptyExpression" />에 대한 방문자 패턴 메서드입니다.</summary>
      <param name="expression">방문 중인 DbIsEmptyExpression입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" />이 null입니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbIsNullExpression)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbIsNullExpression" />에 대한 방문자 패턴 메서드입니다.</summary>
      <param name="expression">방문 중인 DbIsNullExpression입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" />이 null입니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbIsOfExpression)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbIsOfExpression" />에 대한 방문자 패턴 메서드입니다.</summary>
      <param name="expression">방문 중인 DbIsOfExpression입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" />이 null입니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression" />에 대한 방문자 패턴 메서드입니다.</summary>
      <param name="expression">방문 중인 DbJoinExpression입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" />이 null입니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbLambdaExpression)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLambdaExpression" />에 대한 방문자 패턴 메서드입니다.</summary>
      <param name="expression">방문 중인 DbLambdaExpression입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" />이 null입니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbLikeExpression)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLikeExpression" />에 대한 방문자 패턴 메서드입니다.</summary>
      <param name="expression">방문 중인 DbLikeExpression입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" />이 null입니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbLimitExpression)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLimitExpression" />에 대한 방문자 패턴 메서드입니다.</summary>
      <param name="expression">방문 중인 DbLimitExpression입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" />이 null입니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression" />에 대한 방문자 패턴 메서드입니다.</summary>
      <param name="expression">방문 중인 DbNewInstanceExpression입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" />이 null입니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbNotExpression)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbNotExpression" />에 대한 방문자 패턴 메서드입니다.</summary>
      <param name="expression">방문 중인 DbNotExpression입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" />이 null입니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbNullExpression)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbNullExpression" />에 대한 방문자 패턴 메서드입니다.</summary>
      <param name="expression">방문 중인 DbNullExpression입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" />이 null입니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbOfTypeExpression)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbOfTypeExpression" />에 대한 방문자 패턴 메서드입니다.</summary>
      <param name="expression">방문 중인 DbOfTypeExpression입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" />이 null입니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbOrExpression)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbOrExpression" />에 대한 방문자 패턴 메서드입니다.</summary>
      <param name="expression">방문 중인 DbOrExpression입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" />이 null입니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbParameterReferenceExpression)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbParameterReferenceExpression" />에 대한 방문자 패턴 메서드입니다.</summary>
      <param name="expression">방문 중인 DbParameterReferenceExpression입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" />이 null입니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression" />에 대한 방문자 패턴 메서드입니다.</summary>
      <param name="expression">방문 중인 DbProjectExpression입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" />이 null입니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression" />에 대한 방문자 패턴 메서드입니다.</summary>
      <param name="expression">방문 중인 DbPropertyExpression입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" />이 null입니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbQuantifierExpression)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbQuantifierExpression" />에 대한 방문자 패턴 메서드입니다.</summary>
      <param name="expression">방문 중인 DbQuantifierExpression입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" />이 null입니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbRefExpression)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbRefExpression" />에 대한 방문자 패턴 메서드입니다.</summary>
      <param name="expression">방문 중인 DbRefExpression입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" />이 null입니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbRefKeyExpression)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbRefKeyExpression" />에 대한 방문자 패턴 메서드입니다.</summary>
      <param name="expression">방문 중인 DbRefKeyExpression입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" />이 null입니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbRelationshipNavigationExpression)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbRelationshipNavigationExpression" />에 대한 방문자 패턴 메서드입니다.</summary>
      <param name="expression">방문 중인 DbRelationshipNavigationExpression입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" />이 null입니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbScanExpression)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbScanExpression" />에 대한 방문자 패턴 메서드입니다.</summary>
      <param name="expression">방문 중인 DbScanExpression입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" />이 null입니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbSkipExpression)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSkipExpression" />에 대한 방문자 패턴 메서드입니다.</summary>
      <param name="expression">방문 중인 DbSkipExpression입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" />이 null입니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbSortExpression)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortExpression" />에 대한 방문자 패턴 메서드입니다.</summary>
      <param name="expression">방문 중인 DbSortExpression입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" />이 null입니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbTreatExpression)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbTreatExpression" />에 대한 방문자 패턴 메서드입니다.</summary>
      <param name="expression">방문 중인 DbTreatExpression입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" />이 null입니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbUnionAllExpression)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbUnionAllExpression" />에 대한 방문자 패턴 메서드입니다.</summary>
      <param name="expression">방문 중인 DbUnionAllExpression입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" />이 null입니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression" />에 대한 방문자 패턴 메서드입니다.</summary>
      <param name="expression">방문 중인 DbVariableReferenceExpression입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" />이 null입니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.VisitAggregate(System.Data.Entity.Core.Common.CommandTrees.DbAggregate)">
      <summary>지정된 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbAggregate" />를 방문하도록 편의상 제공되는 메서드입니다.</summary>
      <param name="aggregate">방문할 집계입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="aggregate" />가 null입니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.VisitAggregateList(System.Collections.Generic.IList{System.Data.Entity.Core.Common.CommandTrees.DbAggregate})">
      <summary>목록이 null이 아닌 경우 목록의 각 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbAggregate" />를 방문하도록 편의상 제공되는 메서드입니다.</summary>
      <param name="aggregates">방문할 집계 목록입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="aggregates" />가 null입니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.VisitBinaryExpression(System.Data.Entity.Core.Common.CommandTrees.DbBinaryExpression)">
      <summary>지정된 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbBinaryExpression" />를 방문하도록 편의상 제공되는 메서드입니다.</summary>
      <param name="expression">방문할 DbBinaryExpression입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" />이 null입니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.VisitExpression(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>지정된 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />(null이 아닌 경우)을 방문하도록 편의상 제공되는 메서드입니다.</summary>
      <param name="expression">방문할 식입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" />이 null입니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.VisitExpressionBindingPost(System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding)">
      <summary>DbExpressionBinding을 방문한 이후의 후처리를 위해 편의상 제공되는 메서드입니다.</summary>
      <param name="binding">이전에 방문한 DbExpressionBinding입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.VisitExpressionBindingPre(System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding)">
      <summary>지정된 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" />를 방문하도록 편의상 제공되는 메서드입니다.</summary>
      <param name="binding">방문할 DbExpressionBinding입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="binding" />이 null입니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.VisitExpressionList(System.Collections.Generic.IList{System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
      <summary>목록이 null이 아닌 경우 지정된 목록의 각 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />를 방문하도록 편의상 제공되는 메서드입니다.</summary>
      <param name="expressionList">방문할 식 목록입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expressionList" />가 null입니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.VisitGroupExpressionBindingMid(System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbGroupByExpression" />의 그룹화 키를 방문했으며 이제 집계를 방문할 것임을 나타내는 편의상 제공되는 메서드입니다.</summary>
      <param name="binding">DbGroupByExpression의 DbGroupExpressionBinding</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.VisitGroupExpressionBindingPost(System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding)">
      <summary>DbGroupExpressionBinding을 방문한 이후의 후처리를 위해 편의상 제공되는 메서드입니다.</summary>
      <param name="binding">이전에 방문한 DbGroupExpressionBinding입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.VisitGroupExpressionBindingPre(System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding)">
      <summary>지정된 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding" />를 방문하도록 편의상 제공되는 메서드입니다.</summary>
      <param name="binding">방문할 DbGroupExpressionBinding입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="binding" />이 null입니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.VisitLambdaPost(System.Data.Entity.Core.Common.CommandTrees.DbLambda)">
      <summary>DbLambda를 방문한 이후의 후처리를 위해 편의상 제공되는 메서드입니다.</summary>
      <param name="lambda">이전에 방문한 DbLambda입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.VisitLambdaPre(System.Data.Entity.Core.Common.CommandTrees.DbLambda)">
      <summary>이제 람다 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />의 본문을 방문할 것임을 나타내는 편의상 제공되는 메서드입니다.</summary>
      <param name="lambda">방문할 DbLambda입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="lambda" />가 null입니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.VisitUnaryExpression(System.Data.Entity.Core.Common.CommandTrees.DbUnaryExpression)">
      <summary>지정된 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbUnaryExpression" />를 방문하도록 편의상 제공되는 메서드입니다.</summary>
      <param name="expression">방문할 DbUnaryExpression입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" />이 null입니다.</exception>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbAggregate">
      <summary>집계는 의사(pseudo) 식입니다.식처럼 보이지만 사용할 수 있는 위치가 엄격하게 제한됩니다. group-by 식의 집계 절에만 사용할 수 있습니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbAggregate.Arguments">
      <summary>     집계에 대한 인수를 정의하는 식의 목록을 가져옵니다. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbAggregate.ResultType">
      <summary>     이 집계의 결과 형식을 가져옵니다. </summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbAndExpression">
      <summary>     두 부울 인수의 논리적 And 연산을 나타냅니다. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbAndExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     결과 값을 생성하지 않는 식 방문자에 대한 방문자 패턴 메서드입니다. </summary>
      <param name="visitor"> DbExpressionVisitor의 인스턴스입니다. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbAndExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     특정 형식의 결과 값을 생성하는 식 방문자에 대한 방문자 패턴 메서드입니다. </summary>
      <param name="visitor"> TResultType 형식의 결과 값을 생성하는 형식화된 DbExpressionVisitor의 인스턴스입니다. </param>
      <typeparam name="TResultType">     visitor에서 생성하는 결과의 형식</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression">
      <summary>     지정된 입력 집합의 각 요소에 대한 지정된 functor의 호출인 적용 작업을 나타냅니다. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     결과 값을 생성하지 않는 식 방문자에 대한 방문자 패턴 메서드입니다. </summary>
      <param name="visitor"> DbExpressionVisitor의 인스턴스입니다. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     특정 형식의 결과 값을 생성하는 식 방문자에 대한 방문자 패턴 메서드입니다. </summary>
      <param name="visitor"> TResultType 형식의 결과 값을 생성하는 형식화된 DbExpressionVisitor의 인스턴스입니다. </param>
      <typeparam name="TResultType">     visitor에서 생성하는 결과의 형식</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression.Apply">
      <summary>     입력 집합의 각 요소에 대해 호출되는 functor를 지정하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" />을 가져옵니다. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression.Input">
      <summary>     입력 집합을 지정하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" />을 가져옵니다. </summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression">
      <summary>     두 숫자 인수에 적용되는 산술 연산(더하기, 빼기, 곱하기, 나누기, 나머지, 부정)을 나타냅니다. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     결과 값을 생성하지 않는 식 방문자에 대한 방문자 패턴 메서드입니다. </summary>
      <param name="visitor"> DbExpressionVisitor의 인스턴스입니다. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     특정 형식의 결과 값을 생성하는 식 방문자에 대한 방문자 패턴 메서드입니다. </summary>
      <param name="visitor"> TResultType 형식의 결과 값을 생성하는 형식화된 DbExpressionVisitor의 인스턴스입니다. </param>
      <typeparam name="TResultType">     visitor에서 생성하는 결과의 형식</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression.Arguments">
      <summary>     현재 인수를 정의하는 식의 목록을 가져옵니다. </summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbBinaryExpression">
      <summary>     두 개의 식 피연산자를 사용하는 식의 추상 기본 형식입니다. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbBinaryExpression.Left">
      <summary>     왼쪽 인수를 정의하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />을 가져옵니다. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbBinaryExpression.Right">
      <summary>     오른쪽 인수를 정의하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />을 가져옵니다. </summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbCaseExpression">
      <summary>     When...Then...Else 논리 연산을 나타냅니다. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbCaseExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     결과 값을 생성하지 않는 식 방문자에 대한 방문자 패턴 메서드입니다. </summary>
      <param name="visitor"> DbExpressionVisitor의 인스턴스입니다. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbCaseExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     특정 형식의 결과 값을 생성하는 식 방문자에 대한 방문자 패턴 메서드입니다. </summary>
      <param name="visitor"> TResultType 형식의 결과 값을 생성하는 형식화된 DbExpressionVisitor의 인스턴스입니다. </param>
      <typeparam name="TResultType">     visitor에서 생성하는 결과의 형식</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbCaseExpression.Else">
      <summary>     이 DbCaseExpression의 Else 절을 가져옵니다. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbCaseExpression.Then">
      <summary>     이 DbCaseExpression의 Then 절을 가져옵니다. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbCaseExpression.When">
      <summary>     이 DbCaseExpression의 When 절을 가져옵니다. </summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbCastExpression">
      <summary>     다형 인수에 적용된 캐스트 연산을 나타냅니다. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbCastExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     결과 값을 생성하지 않는 식 방문자에 대한 방문자 패턴 메서드입니다. </summary>
      <param name="visitor"> DbExpressionVisitor의 인스턴스입니다. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbCastExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     특정 형식의 결과 값을 생성하는 식 방문자에 대한 방문자 패턴 메서드입니다. </summary>
      <param name="visitor"> TResultType 형식의 결과 값을 생성하는 형식화된 DbExpressionVisitor의 인스턴스입니다. </param>
      <typeparam name="TResultType">     visitor에서 생성하는 결과의 형식</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbCommandTree">
      <summary>     DbCommandTree는 DbCommandTree 형식을 삭제, 쿼리, 삽입 및 업데이트할 수 있는 추상 기본 형식입니다. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbCommandTree.CommandTreeKind">
      <summary>     이 명령 트리의 종류를 가져옵니다. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbCommandTree.DataSpace">
      <summary>     이 명령 트리에서 사용하는 메타데이터가 있어야 하는 데이터 공간을 가져옵니다. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbCommandTree.MetadataWorkspace">
      <summary>     이 명령 트리에서 사용하는 메타데이터 작업 영역을 가져옵니다. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbCommandTree.Parameters">
      <summary>     이 명령 트리에서 참조할 수 있는 각 매개 변수의 이름 및 해당 형식을 가져옵니다. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbCommandTree.ToString"></member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbCommandTreeKind">
      <summary>명령 트리의 여러 "종류"(클래스)에 대해 설명합니다.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbCommandTreeKind.Delete">
      <summary>삭제 명령을 지정합니다.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbCommandTreeKind.Function">
      <summary>함수 명령을 지정합니다.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbCommandTreeKind.Insert">
      <summary>삽입 명령을 지정합니다.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbCommandTreeKind.Query">
      <summary>쿼리 명령을 지정합니다.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbCommandTreeKind.Update">
      <summary>업데이트 명령을 지정합니다.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression">
      <summary>     두 인수에 적용되는 비교 연산(같음, 보다 큼, 보다 작음, 보다 작거나 같음, 다름)을 나타냅니다. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     결과 값을 생성하지 않는 식 방문자에 대한 방문자 패턴 메서드입니다. </summary>
      <param name="visitor"> DbExpressionVisitor의 인스턴스입니다. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     특정 형식의 결과 값을 생성하는 식 방문자에 대한 방문자 패턴 메서드입니다. </summary>
      <param name="visitor"> TResultType 형식의 결과 값을 생성하는 형식화된 DbExpressionVisitor의 인스턴스입니다. </param>
      <typeparam name="TResultType">     visitor에서 생성하는 결과의 형식</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression">
      <summary>     상수 값을 나타냅니다. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     결과 값을 생성하지 않는 식 방문자에 대한 방문자 패턴 메서드입니다. </summary>
      <param name="visitor"> DbExpressionVisitor의 인스턴스입니다. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     특정 형식의 결과 값을 생성하는 식 방문자에 대한 방문자 패턴 메서드입니다. </summary>
      <param name="visitor"> TResultType 형식의 결과 값을 생성하는 형식화된 DbExpressionVisitor의 인스턴스입니다. </param>
      <typeparam name="TResultType">     visitor에서 생성하는 결과의 형식</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression.Value">
      <summary>     상수 값을 가져옵니다. </summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbCrossJoinExpression">
      <summary>     지정된 컬렉션 인수 사이의 비조건부 조인 연산을 나타냅니다 </summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbCrossJoinExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     결과 값을 생성하지 않는 식 방문자에 대한 방문자 패턴 메서드입니다. </summary>
      <param name="visitor"> DbExpressionVisitor의 인스턴스입니다. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbCrossJoinExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     특정 형식의 결과 값을 생성하는 식 방문자에 대한 방문자 패턴 메서드입니다. </summary>
      <param name="visitor"> TResultType 형식의 결과 값을 생성하는 형식화된 DbExpressionVisitor의 인스턴스입니다. </param>
      <typeparam name="TResultType">     visitor에서 생성하는 결과의 형식</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbCrossJoinExpression.Inputs">
      <summary>     조인에 입력 집합을 제공하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" /> 목록을 가져옵니다. </summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbDeleteCommandTree">
      <summary>정식 명령 트리로 표현된 단일 행 삭제 작업을 나타냅니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbDeleteCommandTree.#ctor(System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace,System.Data.Entity.Core.Metadata.Edm.DataSpace,System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Data.Entity.Core.Common.CommandTrees.DbExpression)"></member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbDeleteCommandTree.CommandTreeKind">
      <summary>이 명령 트리의 종류를 가져옵니다.</summary>
      <returns>이 명령 트리의 종류입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbDeleteCommandTree.Predicate">
      <summary>대상 컬렉션에서 삭제할 멤버를 결정하는 데 사용되는 조건자를 지정하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />을 가져옵니다.</summary>
      <returns>대상 컬렉션에서 삭제할 멤버를 결정하는 데 사용되는 조건자입니다.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbDerefExpression">
      <summary>     지정된 참조를 사용하는 특정 엔터티에 대한 검색을 나타냅니다. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbDerefExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     결과 값을 생성하지 않는 식 방문자에 대한 방문자 패턴 메서드입니다. </summary>
      <param name="visitor"> DbExpressionVisitor의 인스턴스입니다. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbDerefExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     특정 형식의 결과 값을 생성하는 식 방문자에 대한 방문자 패턴 메서드입니다. </summary>
      <param name="visitor"> TResultType 형식의 결과 값을 생성하는 형식화된 DbExpressionVisitor의 인스턴스입니다. </param>
      <typeparam name="TResultType">     visitor에서 생성하는 결과의 형식</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbDistinctExpression">
      <summary>     지정된 집합 피연산자에서 중복 요소를 제거함을 나타냅니다. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbDistinctExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     결과 값을 생성하지 않는 식 방문자에 대한 방문자 패턴 메서드입니다. </summary>
      <param name="visitor"> DbExpressionVisitor의 인스턴스입니다. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbDistinctExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     특정 형식의 결과 값을 생성하는 식 방문자에 대한 방문자 패턴 메서드입니다. </summary>
      <param name="visitor"> TResultType 형식의 결과 값을 생성하는 형식화된 DbExpressionVisitor의 인스턴스입니다. </param>
      <typeparam name="TResultType">     visitor에서 생성하는 결과의 형식</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbElementExpression">
      <summary>지정된 집합 피연산자를 singleton으로 변환합니다.집합이 비어 있으면 변환에서 null이 반환되고, 그렇지 않으면 집합의 요소 중 하나가 반환됩니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbElementExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     결과 값을 생성하지 않는 식 방문자에 대한 방문자 패턴 메서드입니다. </summary>
      <param name="visitor"> DbExpressionVisitor의 인스턴스입니다. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbElementExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     특정 형식의 결과 값을 생성하는 식 방문자에 대한 방문자 패턴 메서드입니다. </summary>
      <param name="visitor"> TResultType 형식의 결과 값을 생성하는 형식화된 DbExpressionVisitor의 인스턴스입니다. </param>
      <typeparam name="TResultType">     visitor에서 생성하는 결과의 형식</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbEntityRefExpression">
      <summary>     참조로 지정된 엔터티에 대한 참조 검색을 나타냅니다. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbEntityRefExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     결과 값을 생성하지 않는 식 방문자에 대한 방문자 패턴 메서드입니다. </summary>
      <param name="visitor"> DbExpressionVisitor의 인스턴스입니다. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbEntityRefExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     특정 형식의 결과 값을 생성하는 식 방문자에 대한 방문자 패턴 메서드입니다. </summary>
      <param name="visitor"> TResultType 형식의 결과 값을 생성하는 형식화된 DbExpressionVisitor의 인스턴스입니다. </param>
      <typeparam name="TResultType">     visitor에서 생성하는 결과의 형식</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbExceptExpression">
      <summary>     왼쪽과 오른쪽 피연산자 사이의 집합 빼기 연산을 나타냅니다. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExceptExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     결과 값을 생성하지 않는 식 방문자에 대한 방문자 패턴 메서드입니다. </summary>
      <param name="visitor"> DbExpressionVisitor의 인스턴스입니다. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExceptExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     특정 형식의 결과 값을 생성하는 식 방문자에 대한 방문자 패턴 메서드입니다. </summary>
      <param name="visitor"> TResultType 형식의 결과 값을 생성하는 형식화된 DbExpressionVisitor의 인스턴스입니다. </param>
      <typeparam name="TResultType">     visitor에서 생성하는 결과의 형식</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression">
      <summary>모든 식의 기본 형식을 나타냅니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>결과 값을 생성하지 않는 식 방문자에 대한 방문자 패턴 인터페이스 메서드를 구현합니다.</summary>
      <param name="visitor">DbExpressionVisitor의 인스턴스입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" />가 null입니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>특정 형식의 결과 값을 생성하는 식 방문자에 대한 방문자 패턴 인터페이스 메서드를 구현합니다.</summary>
      <returns>
        <paramref name="TResultType" />의 인스턴스입니다.</returns>
      <param name="visitor"> TResultType 형식의 결과 값을 생성하는 형식화된 DbExpressionVisitor의 인스턴스입니다.</param>
      <typeparam name="TResultType">
        <paramref name="visitor" />에서 생성되는 결과의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" />가 null입니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.Equals(System.Object)">
      <summary>지정한 개체가 현재 DbExpression 인스턴스와 같은지 여부를 확인합니다.</summary>
      <returns>지정된 개체가 현재 DbExpression 인스턴스와 같으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="obj">현재 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />과 비교할 개체입니다.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbExpression.ExpressionKind">
      <summary>이 식의 연산을 나타내는 식의 종류를 가져옵니다.</summary>
      <returns>이 식의 연산을 나타내는 식의 종류입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.FromBinary(System.Byte[])">
      <summary>null이 될 수 있는 지정된 이진 값을 나타내는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />을 만듭니다.</summary>
      <returns>지정된 이진 값을 나타내는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />입니다.</returns>
      <param name="value"> 반환된 식이 기반으로 해야 하는 이진 값입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.FromBoolean(System.Nullable{System.Boolean})">
      <summary>null을 허용하는 지정된 부울 값을 나타내는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />을 만듭니다.</summary>
      <returns>지정된 부울 값을 나타내는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />입니다.</returns>
      <param name="value">반환된 식이 기반으로 해야 하는 부울 값입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.FromByte(System.Nullable{System.Byte})">
      <summary>null을 허용하는 지정된 바이트 값을 나타내는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />을 만듭니다.</summary>
      <returns>지정된 바이트 값을 나타내는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />입니다.</returns>
      <param name="value">반환된 식이 기반으로 해야 하는 바이트 값입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.FromDateTime(System.Nullable{System.DateTime})">
      <summary>null을 허용하는 지정된 <see cref="T:System.DateTime" /> 값을 나타내는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />을 만듭니다.</summary>
      <returns>지정된 DateTime 값을 나타내는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />입니다.</returns>
      <param name="value">반환된 식이 기반으로 해야 하는 DateTime 값입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.FromDateTimeOffset(System.Nullable{System.DateTimeOffset})">
      <summary>null을 허용하는 지정된 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> 값을 나타내는 <see cref="T:System.DateTimeOffset" />을 만듭니다.</summary>
      <returns>지정된 DateTimeOffset 값을 나타내는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />입니다.</returns>
      <param name="value">반환된 식이 기반으로 해야 하는 DateTimeOffset 값입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.FromDecimal(System.Nullable{System.Decimal})">
      <summary>null을 허용하는 지정된 10진수 값을 나타내는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />을 만듭니다.</summary>
      <returns>지정된 10진수 값을 나타내는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />입니다.</returns>
      <param name="value">반환된 식이 기반으로 해야 하는 10진수 값입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.FromDouble(System.Nullable{System.Double})">
      <summary>null을 허용하는 지정된 double 값을 나타내는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />을 만듭니다.</summary>
      <returns>지정된 double 값을 나타내는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />입니다.</returns>
      <param name="value">반환된 식이 기반으로 해야 하는 double 값입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.FromGeography(System.Data.Entity.Spatial.DbGeography)">
      <summary>null이 될 수 있는 지정된 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 값을 나타내는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />을 만듭니다.</summary>
      <returns>지정된 DbGeography 값을 나타내는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />입니다.</returns>
      <param name="value">반환된 식이 기반으로 해야 하는 DbGeography 값입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.FromGeometry(System.Data.Entity.Spatial.DbGeometry)">
      <summary>null이 될 수 있는 지정된 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> 값을 나타내는 <see cref="T:System.Data.Entity.Spatial.DbGeometry" />을 만듭니다.</summary>
      <returns>지정된 DbGeometry 값을 나타내는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />입니다.</returns>
      <param name="value">반환된 식이 기반으로 해야 하는 DbGeometry 값입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.FromGuid(System.Nullable{System.Guid})">
      <summary>null을 허용하는 지정된 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> 값을 나타내는 <see cref="T:System.Guid" />을 만듭니다.</summary>
      <returns>지정된 Guid 값을 나타내는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />입니다.</returns>
      <param name="value">반환된 식이 기반으로 해야 하는 Guid 값입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.FromInt16(System.Nullable{System.Int16})">
      <summary>null을 허용하는 지정된 Int16 값을 나타내는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />을 만듭니다.</summary>
      <returns>지정된 Int16 값을 나타내는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />입니다.</returns>
      <param name="value">반환된 식이 기반으로 해야 하는 Int16 값입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.FromInt32(System.Nullable{System.Int32})">
      <summary>null을 허용하는 지정된 Int32 값을 나타내는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />을 만듭니다.</summary>
      <returns>지정된 Int32 값을 나타내는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />입니다.</returns>
      <param name="value">반환된 식이 기반으로 해야 하는 Int32 값입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.FromInt64(System.Nullable{System.Int64})">
      <summary>null을 허용하는 지정된 Int64 값을 나타내는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />을 만듭니다.</summary>
      <returns>지정된 Int64 값을 나타내는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />입니다.</returns>
      <param name="value">반환된 식이 기반으로 해야 하는 Int64 값입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.FromSingle(System.Nullable{System.Single})">
      <summary>null을 허용하는 지정된 Single 값을 나타내는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />을 만듭니다.</summary>
      <returns>지정된 Single 값을 나타내는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />입니다.</returns>
      <param name="value">반환된 식이 기반으로 해야 하는 Single 값입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.FromString(System.String)">
      <summary>지정된 문자열 값을 나타내는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />을 만듭니다.</summary>
      <returns>지정된 문자열 값을 나타내는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />입니다.</returns>
      <param name="value">반환된 식이 기반으로 해야 하는 문자열 값입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.GetHashCode">
      <summary>형식에 대한 해시 함수 역할을 합니다.</summary>
      <returns>현재 식의 해시 코드입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.op_Implicit(System.Byte[])~System.Data.Entity.Core.Common.CommandTrees.DbExpression">
      <summary>부호 없는 8비트 정수의 배열을 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />으로 변환합니다.</summary>
      <returns>부호 없는 8비트 정수의 변환된 배열을 나타내는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />입니다.</returns>
      <param name="value">부호 없는 8비트 정수의 배열입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.op_Implicit(System.Data.Entity.Spatial.DbGeography)~System.Data.Entity.Core.Common.CommandTrees.DbExpression">
      <summary>DbGeography 개체를 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />으로 변환합니다.</summary>
      <returns>변환된 DbGeography 개체를 나타내는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />입니다.</returns>
      <param name="value">DbGeography 개체입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.op_Implicit(System.Data.Entity.Spatial.DbGeometry)~System.Data.Entity.Core.Common.CommandTrees.DbExpression">
      <summary>DBGeometry 개체를 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />으로 변환합니다.</summary>
      <returns>변환된 DbGeography 개체를 나타내는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />입니다.</returns>
      <param name="value">DbGeometry 개체입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.op_Implicit(System.Nullable{System.Boolean})~System.Data.Entity.Core.Common.CommandTrees.DbExpression">
      <summary>null을 허용하는 부울 개체를 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />으로 변환합니다.</summary>
      <returns>null을 허용하는 변환된 부울 개체를 나타내는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />입니다.</returns>
      <param name="value">null을 허용하는 부울 개체입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.op_Implicit(System.Nullable{System.Byte})~System.Data.Entity.Core.Common.CommandTrees.DbExpression">
      <summary>null을 허용하는 부호 없는 8비트 정수를 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />으로 변환합니다.</summary>
      <returns>변환된 부호 없는 8비트 정수를 나타내는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />입니다.</returns>
      <param name="value">null을 허용하는 부호 없는 8비트 정수입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.op_Implicit(System.Nullable{System.DateTime})~System.Data.Entity.Core.Common.CommandTrees.DbExpression">
      <summary>null을 허용하는 <see cref="T:System.DateTime" /> 개체를 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />으로 변환합니다.</summary>
      <returns>
        <see cref="T:System.DateTime" /> 개체를 나타내는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />입니다.</returns>
      <param name="value">null을 허용하는 <see cref="T:System.DateTime" /> 개체입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.op_Implicit(System.Nullable{System.DateTimeOffset})~System.Data.Entity.Core.Common.CommandTrees.DbExpression">
      <summary>null을 허용하는 <see cref="T:System.DateTimeOffset" /> 개체를 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />으로 변환합니다.</summary>
      <returns>null을 허용하는 <see cref="T:System.DateTime" />을 나타내는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />입니다.</returns>
      <param name="value">null을 허용하는 <see cref="T:System.DateTime" /> 개체입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.op_Implicit(System.Nullable{System.Decimal})~System.Data.Entity.Core.Common.CommandTrees.DbExpression">
      <summary>null을 허용하는 Decimal 개체를 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />으로 변환합니다.</summary>
      <returns>null을 허용하는 Decimal 개체를 나타내는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />입니다.</returns>
      <param name="value">null을 허용하는 Decimal 개체입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.op_Implicit(System.Nullable{System.Double})~System.Data.Entity.Core.Common.CommandTrees.DbExpression">
      <summary>null을 허용하는 double 개체를 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />으로 변환합니다.</summary>
      <returns>null을 허용하는 double 개체를 나타내는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />입니다.</returns>
      <param name="value">null을 허용하는 double 개체입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.op_Implicit(System.Nullable{System.Guid})~System.Data.Entity.Core.Common.CommandTrees.DbExpression">
      <summary>null을 허용하는 Guid 개체를 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />으로 변환합니다.</summary>
      <returns>null을 허용하는 <see cref="T:System.Guid" /> 개체를 나타내는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />입니다.</returns>
      <param name="value">null을 허용하는 <see cref="T:System.Guid" /> 개체입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.op_Implicit(System.Nullable{System.Int16})~System.Data.Entity.Core.Common.CommandTrees.DbExpression">
      <summary>null을 허용하는 부호 없는 16비트 정수를 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />으로 변환합니다.</summary>
      <returns>null을 허용하는 부호 없는 16비트 정수를 나타내는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />입니다.</returns>
      <param name="value">null을 허용하는 부호 없는 16비트 정수입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.op_Implicit(System.Nullable{System.Int32})~System.Data.Entity.Core.Common.CommandTrees.DbExpression">
      <summary>null을 허용하는 부호 없는 32비트 정수를 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />으로 변환합니다.</summary>
      <returns>null을 허용하는 부호 없는 32비트 정수를 나타내는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />입니다.</returns>
      <param name="value">null을 허용하는 부호 없는 32비트 정수입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.op_Implicit(System.Nullable{System.Int64})~System.Data.Entity.Core.Common.CommandTrees.DbExpression">
      <summary>null을 허용하는 부호 없는 64비트 정수를 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />으로 변환합니다.</summary>
      <returns>null을 허용하는 부호 없는 64비트 정수를 나타내는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />입니다.</returns>
      <param name="value">null을 허용하는 부호 없는 64비트 정수입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.op_Implicit(System.Nullable{System.Single})~System.Data.Entity.Core.Common.CommandTrees.DbExpression">
      <summary>null을 허용하는 단정밀도 부동 소수점 숫자를 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />으로 변환합니다.</summary>
      <returns>단정밀도 부동 소수점 숫자를 나타내는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />입니다.</returns>
      <param name="value">단정밀도 부동 소수점 숫자입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.op_Implicit(System.String)~System.Data.Entity.Core.Common.CommandTrees.DbExpression">
      <summary>유니코드 문자의 순차적인 컬렉션을 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />으로 변환합니다.</summary>
      <returns>유니코드 문자의 순차적인 컬렉션을 나타내는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />입니다.</returns>
      <param name="value">유니코드 문자의 순차적인 컬렉션입니다.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbExpression.ResultType">
      <summary>식의 결과 형식에 대한 형식 메타데이터를 가져옵니다.</summary>
      <returns>식의 결과 형식에 대한 형식 메타데이터입니다.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding">
      <summary>식에 대한 바인딩을 설명합니다.개념적으로 C#의 foreach 루프와 비슷합니다.DbExpression 속성은 반복되는 컬렉션을 정의하지만 Var 속성은 반복되는 중의 컬렉션의 현재 요소를 참조하는 방법을 제공합니다.DbExpressionBinding은 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFilterExpression" />, <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression" />, <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression" /> 등의 관계식에 대한 합집합을 설명하는 데 사용됩니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding.Expression">
      <summary>     입력 집합을 정의하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />을 가져옵니다. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding.Variable">
      <summary>     요소 변수를 참조하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression" />을 가져옵니다. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding.VariableName">
      <summary>     요소 변수에 할당된 이름을 가져옵니다. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding.VariableType">
      <summary>     요소 변수의 형식 메타데이터를 가져옵니다. </summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind">
      <summary>     식의 다른 "종류"(클래스)에 대해 설명합니다. </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.All">
      <summary>     모두에 대해 True입니다. </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.And">
      <summary>     논리곱입니다. </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Any">
      <summary>     모든 것에 대해 True입니다. </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Case">
      <summary>     조건부 case 문입니다. </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Cast">
      <summary>     다형성 형식 캐스트입니다. </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Constant">
      <summary>     상수 값입니다. </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.CrossApply">
      <summary>     크로스 적용 </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.CrossJoin">
      <summary>     교차 조인 </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Deref">
      <summary>     역참조입니다. </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Distinct">
      <summary>     중복 제거입니다. </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Divide">
      <summary>     나눕니다. </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Element">
      <summary>     singleton 설정 변환입니다. </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.EntityRef">
      <summary>     엔터티 참조 값 검색입니다. </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Equals">
      <summary>     같음 </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Except">
      <summary>     집합 빼기 </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Filter">
      <summary>     제한입니다. </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.FullOuterJoin">
      <summary>     완전 외부 조인 </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Function">
      <summary>     독립 실행형 함수 호출 </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.GreaterThan">
      <summary>     보다 큼. </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.GreaterThanOrEquals">
      <summary>     크거나 같음. </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.GroupBy">
      <summary>     그룹화입니다. </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.In">
      <summary>     In. </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.InnerJoin">
      <summary>     내부 조인 </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Intersect">
      <summary>     교집합입니다. </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.IsEmpty">
      <summary>     빈 집합을 확인합니다. </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.IsNull">
      <summary>     Null 확인합니다. </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.IsOf">
      <summary>     형식 비교(형식 또는 하위 형식으로 지정됨)입니다. </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.IsOfOnly">
      <summary>     형식 비교(형식으로만 지정됨)입니다. </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Lambda">
      <summary>     람다 함수를 적용합니다. </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.LeftOuterJoin">
      <summary>     왼쪽 우선 외부 조인 </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.LessThan">
      <summary>     보다 작음. </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.LessThanOrEquals">
      <summary>     작거나 같음. </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Like">
      <summary>     문자열을 비교합니다. </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Limit">
      <summary>     결과 개수 제한(TOP n)입니다. </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Minus">
      <summary>     뺍니다. </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Modulo">
      <summary>     나머지입니다. </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Multiply">
      <summary>     곱합니다. </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.NewInstance">
      <summary>     인스턴스, 행 및 집합 생성입니다. </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Not">
      <summary>     논리 부정 연산자입니다. </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.NotEquals">
      <summary>     같지 않음. </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Null">
      <summary>     Null입니다. </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.OfType">
      <summary>     형식(또는 하위 형식)으로 지정된 집합 멤버입니다. </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.OfTypeOnly">
      <summary>     정확한 형식으로 지정된 집합 멤버입니다. </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Or">
      <summary>     논리합입니다. </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.OuterApply">
      <summary>     외부 적용됩니다. </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.ParameterReference">
      <summary>     매개 변수에 대한 참조입니다. </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Plus">
      <summary>     더합니다. </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Project">
      <summary>     프로젝션입니다. </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Property">
      <summary>     정적 또는 인스턴스 속성 검색입니다. </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Ref">
      <summary>     참조입니다. </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.RefKey">
      <summary>     참조 키 값 검색입니다. </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.RelationshipNavigation">
      <summary>     관계(컴퍼지션 또는 연결) 탐색입니다. </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Scan">
      <summary>     엔터티 또는 관계 집합 검색입니다. </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Skip">
      <summary>     정렬된 컬렉션의 건너뛰기 요소입니다. </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Sort">
      <summary>     정렬합니다. </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Treat">
      <summary>     형식을 변환합니다. </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.UnaryMinus">
      <summary>     부정합니다. </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.UnionAll">
      <summary>     집합 union(중복 포함)입니다. </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.VariableReference">
      <summary>     변수에 대한 참조입니다. </summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionRebinder">
      <summary>필요한 경우 적절한 대체 메타데이터로 식을 다시 바인딩하고 다시 빌드할 수 있도록 지정된 식 트리의 모든 메타데이터가 지정된 메타데이터 작업 영역에 포함되어 있는지 확인합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionRebinder.#ctor(System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionRebinder" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="targetWorkspace">대상 작업 영역입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionRebinder.Visit(System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression)">
      <summary>인스턴스 속성을 검색하는 작업에 대한 방문자 패턴을 구현합니다.</summary>
      <returns>구현된 방문자입니다.</returns>
      <param name="expression">식입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionRebinder.VisitEntitySet(System.Data.Entity.Core.Metadata.Edm.EntitySetBase)">
      <summary>엔터티 집합에 대한 방문자 패턴을 구현합니다.</summary>
      <returns>구현된 방문자 패턴입니다.</returns>
      <param name="entitySet">엔터티 집합입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionRebinder.VisitFunction(System.Data.Entity.Core.Metadata.Edm.EdmFunction)">
      <summary>함수에 대한 방문자 패턴을 구현합니다.</summary>
      <returns>구현된 방문자 패턴입니다.</returns>
      <param name="functionMetadata">함수 메타데이터입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionRebinder.VisitType(System.Data.Entity.Core.Metadata.Edm.EdmType)">
      <summary>형식에 대한 방문자 패턴을 구현합니다.</summary>
      <returns>구현된 방문자 패턴입니다.</returns>
      <param name="type">형식입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionRebinder.VisitTypeUsage(System.Data.Entity.Core.Metadata.Edm.TypeUsage)">
      <summary>형식 사용에 대한 방문자 패턴을 구현합니다.</summary>
      <returns>구현된 방문자 패턴입니다.</returns>
      <param name="type">형식입니다.</param>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor">
      <summary>결과 값을 반환하지 않는 방문자가 구현해야 하는 식 방문자 패턴 추상 기본 형식입니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbAndExpression)">
      <summary>DbAndExpression에 대한 방문자 패턴 메서드입니다.</summary>
      <param name="expression">방문 중인 DbAndExpression입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression)">
      <summary>DbApplyExpression에 대한 방문자 패턴 메서드입니다.</summary>
      <param name="expression">방문 중인 DbApplyExpression입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression)">
      <summary>DbArithmeticExpression에 대한 방문자 패턴 메서드입니다.</summary>
      <param name="expression">방문 중인 DbArithmeticExpression입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbCaseExpression)">
      <summary>DbCaseExpression에 대한 방문자 패턴 메서드입니다.</summary>
      <param name="expression">방문 중인 DbCaseExpression입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbCastExpression)">
      <summary>DbCastExpression에 대한 방문자 패턴 메서드입니다.</summary>
      <param name="expression">방문 중인 DbCastExpression입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression)">
      <summary>DbComparisonExpression에 대한 방문자 패턴 메서드입니다.</summary>
      <param name="expression">방문 중인 DbComparisonExpression입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression)">
      <summary>DbConstantExpression에 대한 방문자 패턴 메서드입니다.</summary>
      <param name="expression">방문 중인 DbConstantExpression입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbCrossJoinExpression)">
      <summary>DbCrossJoinExpression에 대한 방문자 패턴 메서드입니다.</summary>
      <param name="expression">방문 중인 DbCrossJoinExpression입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbDerefExpression)">
      <summary>DbDerefExpression에 대한 방문자 패턴 메서드입니다.</summary>
      <param name="expression">방문 중인 DbDerefExpression입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbDistinctExpression)">
      <summary>DbDistinctExpression에 대한 방문자 패턴 메서드입니다.</summary>
      <param name="expression">방문 중인 DbDistinctExpression입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbElementExpression)">
      <summary>DbElementExpression에 대한 방문자 패턴 메서드입니다.</summary>
      <param name="expression">방문 중인 DbElementExpression입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbEntityRefExpression)">
      <summary>DbEntityRefExpression에 대한 방문자 패턴 메서드입니다.</summary>
      <param name="expression">방문 중인 DbEntityRefExpression입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbExceptExpression)">
      <summary>DbExceptExpression에 대한 방문자 패턴 메서드입니다.</summary>
      <param name="expression">방문 중인 DbExceptExpression입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>인식할 수 없는 형식의 식이 발견되면 호출됩니다.</summary>
      <param name="expression">식입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbFilterExpression)">
      <summary>DbFilterExpression에 대한 방문자 패턴 메서드입니다.</summary>
      <param name="expression">방문 중인 DbFilterExpression입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression)">
      <summary>DbFunctionExpression에 대한 방문자 패턴 메서드입니다.</summary>
      <param name="expression">방문 중인 DbFunctionExpression입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbGroupByExpression)">
      <summary>DbGroupByExpression에 대한 방문자 패턴 메서드입니다.</summary>
      <param name="expression">방문 중인 DbGroupByExpression입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbInExpression)">
      <summary>DbInExpression에 대한 방문자 패턴 메서드입니다.</summary>
      <param name="expression">방문 중인 DbInExpression입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbIntersectExpression)">
      <summary>DbIntersectExpression에 대한 방문자 패턴 메서드입니다.</summary>
      <param name="expression">방문 중인 DbIntersectExpression입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbIsEmptyExpression)">
      <summary>DbIsEmptyExpression에 대한 방문자 패턴 메서드입니다.</summary>
      <param name="expression">방문 중인 DbIsEmptyExpression입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbIsNullExpression)">
      <summary>DbIsNullExpression에 대한 방문자 패턴 메서드입니다.</summary>
      <param name="expression">방문 중인 DbIsNullExpression입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbIsOfExpression)">
      <summary>DbIsOfExpression에 대한 방문자 패턴 메서드입니다.</summary>
      <param name="expression">방문 중인 DbIsOfExpression입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression)">
      <summary>DbJoinExpression에 대한 방문자 패턴 메서드입니다.</summary>
      <param name="expression">방문 중인 DbJoinExpression입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbLambdaExpression)">
      <summary>DbLambdaExpression에 대한 방문자 패턴 메서드입니다.</summary>
      <param name="expression">방문 중인 DbLambdaExpression입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbLikeExpression)">
      <summary>DbLikeExpression에 대한 방문자 패턴 메서드입니다.</summary>
      <param name="expression">방문 중인 DbLikeExpression입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbLimitExpression)">
      <summary>DbLimitExpression에 대한 방문자 패턴 메서드입니다.</summary>
      <param name="expression">방문 중인 DbLimitExpression입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression)">
      <summary>DbNewInstanceExpression에 대한 방문자 패턴 메서드입니다.</summary>
      <param name="expression">방문 중인 DbNewInstanceExpression입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbNotExpression)">
      <summary>DbNotExpression에 대한 방문자 패턴 메서드입니다.</summary>
      <param name="expression">방문 중인 DbNotExpression입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbNullExpression)">
      <summary>DbNullExpression에 대한 방문자 패턴 메서드입니다.</summary>
      <param name="expression">방문 중인 DbNullExpression입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbOfTypeExpression)">
      <summary>DbOfTypeExpression에 대한 방문자 패턴 메서드입니다.</summary>
      <param name="expression">방문 중인 DbOfTypeExpression입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbOrExpression)">
      <summary>DbOrExpression에 대한 방문자 패턴 메서드입니다.</summary>
      <param name="expression">방문 중인 DbOrExpression입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbParameterReferenceExpression)">
      <summary>DbParameterReferenceExpression에 대한 방문자 패턴 메서드입니다.</summary>
      <param name="expression">방문 중인 DbParameterReferenceExpression입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression)">
      <summary>DbProjectExpression에 대한 방문자 패턴 메서드입니다.</summary>
      <param name="expression">방문 중인 DbProjectExpression입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression)">
      <summary>DbPropertyExpression에 대한 방문자 패턴 메서드입니다.</summary>
      <param name="expression">방문 중인 DbPropertyExpression입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbQuantifierExpression)">
      <summary>DbQuantifierExpression에 대한 방문자 패턴 메서드입니다.</summary>
      <param name="expression">방문 중인 DbQuantifierExpression입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbRefExpression)">
      <summary>DbRefExpression에 대한 방문자 패턴 메서드입니다.</summary>
      <param name="expression">방문 중인 DbRefExpression입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbRefKeyExpression)">
      <summary>DbRefKeyExpression에 대한 방문자 패턴 메서드입니다.</summary>
      <param name="expression">방문 중인 DbRefKeyExpression입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbRelationshipNavigationExpression)">
      <summary>DbRelationshipNavigationExpression에 대한 방문자 패턴 메서드입니다.</summary>
      <param name="expression">방문 중인 DbRelationshipNavigationExpression입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbScanExpression)">
      <summary>DbScanExpression에 대한 방문자 패턴 메서드입니다.</summary>
      <param name="expression">방문 중인 DbScanExpression입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbSkipExpression)">
      <summary>DbSkipExpression에 대한 방문자 패턴 메서드입니다.</summary>
      <param name="expression">방문 중인 DbSkipExpression입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbSortExpression)">
      <summary>DbSortExpression에 대한 방문자 패턴 메서드입니다.</summary>
      <param name="expression">방문 중인 DbSortExpression입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbTreatExpression)">
      <summary>DbTreatExpression에 대한 방문자 패턴 메서드입니다.</summary>
      <param name="expression">방문 중인 DbTreatExpression입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbUnionAllExpression)">
      <summary>DbUnionAllExpression에 대한 방문자 패턴 메서드입니다.</summary>
      <param name="expression">방문 중인 DbUnionAllExpression입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression)">
      <summary>DbVariableReferenceExpression에 대한 방문자 패턴 메서드입니다.</summary>
      <param name="expression">방문 중인 DbVariableReferenceExpression입니다.</param>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1">
      <summary>     특정 형식의 결과 값을 반환하는 방문자가 구현해야 하는 식 방문자 패턴 추상 기본 형식입니다. </summary>
      <typeparam name="TResultType"> Visitor에서 생성하는 결과 값의 형식입니다. </typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbAndExpression)">
      <summary>     DbAndExpression에 대해 입력된 방문자 패턴 메서드입니다. </summary>
      <param name="expression"> 방문 중인 DbAndExpression입니다. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression)">
      <summary>     DbApplyExpression에 대해 입력된 방문자 패턴 메서드입니다. </summary>
      <param name="expression"> 방문 중인 DbApplyExpression입니다. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression)">
      <summary>     DbArithmeticExpression에 대해 입력된 방문자 패턴 메서드입니다. </summary>
      <param name="expression"> 방문 중인 DbArithmeticExpression입니다. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbCaseExpression)">
      <summary>     DbCaseExpression에 대해 입력된 방문자 패턴 메서드입니다. </summary>
      <param name="expression"> 방문 중인 DbCaseExpression입니다. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbCastExpression)">
      <summary>     DbCastExpression에 대해 입력된 방문자 패턴 메서드입니다. </summary>
      <param name="expression"> 방문 중인 DbCastExpression입니다. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression)">
      <summary>     DbComparisonExpression에 대해 입력된 방문자 패턴 메서드입니다. </summary>
      <param name="expression"> 방문 중인 DbComparisonExpression입니다. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression)">
      <summary>     DbConstantExpression에 대해 입력된 방문자 패턴 메서드입니다. </summary>
      <param name="expression"> 방문 중인 DbConstantExpression입니다. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbCrossJoinExpression)">
      <summary>     DbCrossJoinExpression에 대해 입력된 방문자 패턴 메서드입니다. </summary>
      <param name="expression"> 방문 중인 DbCrossJoinExpression입니다. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbDerefExpression)">
      <summary>     DbDerefExpression에 대한 방문자 패턴 메서드입니다. </summary>
      <param name="expression"> 방문 중인 DbDerefExpression입니다. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbDistinctExpression)">
      <summary>     DbDistinctExpression에 대해 입력된 방문자 패턴 메서드입니다. </summary>
      <param name="expression"> 방문 중인 DbDistinctExpression입니다. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbElementExpression)">
      <summary>     DbElementExpression에 대해 입력된 방문자 패턴 메서드입니다. </summary>
      <param name="expression"> 방문 중인 DbElementExpression입니다. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbEntityRefExpression)">
      <summary>     DbEntityRefExpression에 대한 방문자 패턴 메서드입니다. </summary>
      <param name="expression"> 방문 중인 DbEntityRefExpression입니다. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbExceptExpression)">
      <summary>     DbExceptExpression에 대해 입력된 방문자 패턴 메서드입니다. </summary>
      <param name="expression"> 방문 중인 DbExceptExpression입니다. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>     인식할 수 없는 형식의 식이 발견되면 호출됩니다. </summary>
      <param name="expression"> 식입니다. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbFilterExpression)">
      <summary>     DbFilterExpression에 대해 입력된 방문자 패턴 메서드입니다. </summary>
      <param name="expression"> 방문 중인 DbFilterExpression입니다. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression)">
      <summary>     DbFunctionExpression에 대한 방문자 패턴 메서드입니다. </summary>
      <param name="expression"> 방문 중인 DbFunctionExpression입니다. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbGroupByExpression)">
      <summary>     DbGroupByExpression에 대해 입력된 방문자 패턴 메서드입니다. </summary>
      <param name="expression"> 방문 중인 DbGroupByExpression입니다. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbInExpression)">
      <summary>     DbInExpression에 대해 입력된 방문자 패턴 메서드입니다. </summary>
      <param name="expression"> 방문 중인 DbInExpression입니다. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbIntersectExpression)">
      <summary>     DbIntersectExpression에 대해 입력된 방문자 패턴 메서드입니다. </summary>
      <param name="expression"> 방문 중인 DbIntersectExpression입니다. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbIsEmptyExpression)">
      <summary>     DbIsEmptyExpression에 대해 입력된 방문자 패턴 메서드입니다. </summary>
      <param name="expression"> 방문 중인 DbIsEmptyExpression입니다. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbIsNullExpression)">
      <summary>     DbIsNullExpression에 대해 입력된 방문자 패턴 메서드입니다. </summary>
      <param name="expression"> 방문 중인 DbIsNullExpression입니다. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbIsOfExpression)">
      <summary>     DbIsOfExpression에 대해 입력된 방문자 패턴 메서드입니다. </summary>
      <param name="expression"> 방문 중인 DbIsOfExpression입니다. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression)">
      <summary>     DbJoinExpression에 대해 입력된 방문자 패턴 메서드입니다. </summary>
      <param name="expression"> 방문 중인 DbJoinExpression입니다. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbLambdaExpression)">
      <summary>     DbLambdaExpression에 대한 방문자 패턴 메서드입니다. </summary>
      <param name="expression"> 방문 중인 DbLambdaExpression입니다. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbLikeExpression)">
      <summary>     DbLikeExpression에 대한 방문자 패턴 메서드입니다. </summary>
      <param name="expression"> 방문 중인 DbLikeExpression입니다. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbLimitExpression)">
      <summary>     DbLimitExpression에 대한 방문자 패턴 메서드입니다. </summary>
      <param name="expression"> 방문 중인 DbLimitExpression입니다. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression)">
      <summary>     DbNewInstanceExpression에 대해 입력된 방문자 패턴 메서드입니다. </summary>
      <param name="expression"> 방문 중인 DbNewInstanceExpression입니다. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbNotExpression)">
      <summary>     DbNotExpression에 대해 입력된 방문자 패턴 메서드입니다. </summary>
      <param name="expression"> 방문 중인 DbNotExpression입니다. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbNullExpression)">
      <summary>     DbNullExpression에 대해 입력된 방문자 패턴 메서드입니다. </summary>
      <param name="expression"> 방문 중인 DbNullExpression입니다. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbOfTypeExpression)">
      <summary>     DbOfTypeExpression에 대해 입력된 방문자 패턴 메서드입니다. </summary>
      <param name="expression"> 방문 중인 DbOfTypeExpression입니다. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbOrExpression)">
      <summary>     DbOrExpression에 대해 입력된 방문자 패턴 메서드입니다. </summary>
      <param name="expression"> 방문 중인 DbOrExpression입니다. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbParameterReferenceExpression)">
      <summary>     DbParameterReferenceExpression에 대해 입력된 방문자 패턴 메서드입니다. </summary>
      <param name="expression"> 방문 중인 DbParameterReferenceExpression입니다. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression)">
      <summary>     DbProjectExpression에 대해 입력된 방문자 패턴 메서드입니다. </summary>
      <param name="expression"> 방문 중인 DbProjectExpression입니다. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression)">
      <summary>     DbPropertyExpression에 대해 입력된 방문자 패턴 메서드입니다. </summary>
      <param name="expression"> 방문 중인 DbPropertyExpression입니다. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbQuantifierExpression)">
      <summary>     DbQuantifierExpression에 대해 입력된 방문자 패턴 메서드입니다. </summary>
      <param name="expression"> 방문 중인 DbQuantifierExpression입니다. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbRefExpression)">
      <summary>     DbRefExpression에 대해 입력된 방문자 패턴 메서드입니다. </summary>
      <param name="expression"> 방문 중인 DbRefExpression입니다. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbRefKeyExpression)">
      <summary>     DbRefKeyExpression에 대한 방문자 패턴 메서드입니다. </summary>
      <param name="expression"> 방문 중인 DbRefKeyExpression입니다. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbRelationshipNavigationExpression)">
      <summary>     DbRelationshipNavigationExpression에 대해 입력된 방문자 패턴 메서드입니다. </summary>
      <param name="expression"> 방문 중인 DbRelationshipNavigationExpression입니다. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbScanExpression)">
      <summary>     DbScanExpression에 대해 입력된 방문자 패턴 메서드입니다. </summary>
      <param name="expression"> 방문 중인 DbScanExpression입니다. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbSkipExpression)">
      <summary>     DbSkipExpression에 대해 입력된 방문자 패턴 메서드입니다. </summary>
      <param name="expression"> 방문 중인 DbSkipExpression입니다. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbSortExpression)">
      <summary>     DbSortExpression에 대해 입력된 방문자 패턴 메서드입니다. </summary>
      <param name="expression"> 방문 중인 DbSortExpression입니다. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbTreatExpression)">
      <summary>     DbTreatExpression에 대해 입력된 방문자 패턴 메서드입니다. </summary>
      <param name="expression"> 방문 중인 DbTreatExpression입니다. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbUnionAllExpression)">
      <summary>     DbUnionAllExpression에 대해 입력된 방문자 패턴 메서드입니다. </summary>
      <param name="expression"> 방문 중인 DbUnionAllExpression입니다. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression)">
      <summary>     DbVariableReferenceExpression에 대해 입력된 방문자 패턴 메서드입니다. </summary>
      <param name="expression"> 방문 중인 DbVariableReferenceExpression입니다. </param>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbFilterExpression">
      <summary>     조건자를 만족하는 요소 집합을 생성하기 위해 입력 집합에 적용된 조건자를 나타냅니다. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbFilterExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     결과 값을 생성하지 않는 식 방문자에 대한 방문자 패턴 메서드입니다. </summary>
      <param name="visitor"> DbExpressionVisitor의 인스턴스입니다. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbFilterExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     특정 형식의 결과 값을 생성하는 식 방문자에 대한 방문자 패턴 메서드입니다. </summary>
      <param name="visitor"> TResultType 형식의 결과 값을 생성하는 형식화된 DbExpressionVisitor의 인스턴스입니다. </param>
      <typeparam name="TResultType">     visitor에서 생성하는 결과의 형식</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbFilterExpression.Input">
      <summary>     입력 집합을 지정하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" />을 가져옵니다. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbFilterExpression.Predicate">
      <summary>     입력 집합을 필터링하는 데 사용되는 조건자를 지정하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />을 가져옵니다. </summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionAggregate">
      <summary>     집계 함수의 호출에 해당하는 집계 형식입니다. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbFunctionAggregate.Distinct">
      <summary>     집계 함수가 고유한 방식으로 적용되는지 여부를 나타내는 값을 가져옵니다. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbFunctionAggregate.Function">
      <summary>     호출할 집계 함수를 지정하는 메서드 메타데이터를 가져옵니다. </summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionCommandTree">
      <summary>정식 명령 트리로 표현된 함수의 호출을 나타냅니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbFunctionCommandTree.#ctor(System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace,System.Data.Entity.Core.Metadata.Edm.DataSpace,System.Data.Entity.Core.Metadata.Edm.EdmFunction,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Data.Entity.Core.Metadata.Edm.TypeUsage}})">
      <summary>지정된 메타데이터 작업 영역, 데이터 공간 및 함수 메타데이터를 사용하는 새로운 DbFunctionCommandTree를 생성합니다.</summary>
      <param name="metadata">명령 트리에서 사용할 메타데이터 작업 영역입니다. </param>
      <param name="dataSpace">이 명령 트리에서 사용되는 식에 있는 메타데이터가 속해 있어야 하는 논리적인 '공간'입니다.</param>
      <param name="edmFunction">호출할 EDM 함수입니다.</param>
      <param name="resultType">함수의 결과 형식입니다.</param>
      <param name="parameters">호출할 함수에 연결된 매개 변수입니다.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbFunctionCommandTree.CommandTreeKind">
      <summary>명령 트리 종류를 가져오거나 설정합니다.</summary>
      <returns>명령 트리 종류입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbFunctionCommandTree.EdmFunction">
      <summary>호출할 함수를 나타내는 <see cref="P:System.Data.Entity.Core.Common.CommandTrees.DbFunctionCommandTree.EdmFunction" />을 가져옵니다.</summary>
      <returns>호출할 함수를 나타내는 <see cref="P:System.Data.Entity.Core.Common.CommandTrees.DbFunctionCommandTree.EdmFunction" />입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbFunctionCommandTree.ResultType">
      <summary>함수의 결과 형식을 가져옵니다. 현재 RowTypes의 컬렉션으로 제한되어 있습니다.전형적인 RowType 인스턴스와는 달리 매개 변수의 순서가 아닌 단순히 이름/형식을 나타냅니다.</summary>
      <returns>함수의 결과 형식입니다.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression">
      <summary>     함수의 호출을 나타냅니다. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     결과 값을 생성하지 않는 식 방문자에 대한 방문자 패턴 메서드입니다. </summary>
      <param name="visitor"> DbExpressionVisitor의 인스턴스입니다. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     특정 형식의 결과 값을 생성하는 식 방문자에 대한 방문자 패턴 메서드입니다. </summary>
      <param name="visitor"> TResultType 형식의 결과 값을 생성하는 형식화된 DbExpressionVisitor의 인스턴스입니다. </param>
      <typeparam name="TResultType">     visitor에서 생성하는 결과의 형식</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression.Arguments">
      <summary>     함수에 대한 인수를 제공하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> 목록을 가져옵니다. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression.Function">
      <summary>     호출할 함수의 메타데이터를 가져옵니다. </summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbGroupAggregate">
      <summary>그룹을 구성하는 요소의 컬렉션을 나타냅니다.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbGroupByExpression">
      <summary>     지정된 키 식에 따라 입력 집합의 요소를 그룹화한 다음 지정된 집계를 적용하는 group by 연산을 나타냅니다. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbGroupByExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     결과 값을 생성하지 않는 식 방문자에 대한 방문자 패턴 메서드입니다. </summary>
      <param name="visitor"> DbExpressionVisitor의 인스턴스입니다. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbGroupByExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     특정 형식의 결과 값을 생성하는 식 방문자에 대한 방문자 패턴 메서드입니다. </summary>
      <param name="visitor"> TResultType 형식의 결과 값을 생성하는 형식화된 DbExpressionVisitor의 인스턴스입니다. </param>
      <typeparam name="TResultType">     visitor에서 생성하는 결과의 형식</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbGroupByExpression.Aggregates">
      <summary>     적용할 집계를 제공하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbAggregate" /> 목록을 가져옵니다. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbGroupByExpression.Input">
      <summary>     입력 집합을 지정하고 집합 요소 및 그룹 요소 변수에 대한 액세스를 제공하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding" />을 가져옵니다. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbGroupByExpression.Keys">
      <summary>     그룹화 키를 제공하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> 목록을 가져옵니다. </summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbGroupByExpression" />에 대한 입력 집합의 바인딩을 정의합니다.<see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" />의 속성 외에 DbGroupExpressionBinding도 &lt;seealso cref="P:System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding.GroupVariable" /&gt; 변수 참조를 통해 그룹 요소에 대한 액세스를 제공하고 &lt;seealso cref="P:System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding.GroupAggregate" /&gt; 속성을 통해 그룹 집계에 대한 액세스를 제공합니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding.Expression">
      <summary>     입력 집합을 정의하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />을 가져옵니다. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding.GroupAggregate">
      <summary>     그룹의 요소 컬렉션을 나타내는 DbGroupAggregate를 가져옵니다. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding.GroupVariable">
      <summary>     그룹 요소 변수를 참조하는 DbVariableReferenceExpression을 가져옵니다. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding.GroupVariableName">
      <summary>     그룹 요소 변수에 할당된 이름을 가져옵니다. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding.GroupVariableType">
      <summary>     그룹 요소 변수의 형식 메타데이터를 가져옵니다. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding.Variable">
      <summary>     요소 변수를 참조하는 DbVariableReferenceExpression을 가져옵니다. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding.VariableName">
      <summary>     요소 변수에 할당된 이름을 가져옵니다. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding.VariableType">
      <summary>     요소 변수의 형식 메타데이터를 가져옵니다. </summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbInExpression">
      <summary>     지정된 항목이 목록의 요소와 일치하는지 여부를 테스트하는 부울 식을 나타냅니다. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbInExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     결과 값을 생성하지 않는 식 방문자에 대한 방문자 패턴 메서드입니다. </summary>
      <param name="visitor"> DbExpressionVisitor의 인스턴스입니다. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbInExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     특정 형식의 결과 값을 생성하는 식 방문자에 대한 방문자 패턴 메서드입니다. </summary>
      <param name="visitor"> TResultType 형식의 결과 값을 생성하는 형식화된 DbExpressionVisitor의 인스턴스입니다. </param>
      <typeparam name="TResultType">     visitor에서 생성하는 결과의 형식</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbInExpression.Item">
      <summary>     일치 여부를 확인할 항목을 지정하는 DbExpression을 가져옵니다. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbInExpression.List">
      <summary>     일치 여부를 테스트할 DbExpression 목록을 가져옵니다. </summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbInsertCommandTree">
      <summary>정식 명령 트리로 표현된 단일 행 삽입 작업을 나타냅니다.이 명령은 <see cref="P:System.Data.Entity.Core.Common.CommandTrees.DbInsertCommandTree.Returning" /> 속성이 설정되어 있으면 판독기를 반환하고, 그렇지 않으면 영향을 받은 행 수를 나타내는 스칼라 값을 반환합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbInsertCommandTree.#ctor(System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace,System.Data.Entity.Core.Metadata.Edm.DataSpace,System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Collections.ObjectModel.ReadOnlyCollection{System.Data.Entity.Core.Common.CommandTrees.DbModificationClause},System.Data.Entity.Core.Common.CommandTrees.DbExpression)"></member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbInsertCommandTree.CommandTreeKind">
      <summary>명령 트리 종류를 가져옵니다.</summary>
      <returns>명령 트리 종류입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbInsertCommandTree.Returning">
      <summary>수정된 행을 기반으로 반환될 결과의 프로젝션을 지정하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />을 가져옵니다.Null인 경우 이 명령에서 결과가 반환되지 않음을 나타냅니다.</summary>
      <returns>수정된 행을 기반으로 반환될 결과의 프로젝션을 지정하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbInsertCommandTree.SetClauses">
      <summary>삽입된 행에서 열 값을 결정하는 set 절을 가져옵니다.</summary>
      <returns>삽입된 행에서 열 값을 결정하는 set 절입니다.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbIntersectExpression">
      <summary>     왼쪽과 오른쪽 피연산자 사이의 교집합 연산을 나타냅니다. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbIntersectExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     결과 값을 생성하지 않는 식 방문자에 대한 방문자 패턴 메서드입니다. </summary>
      <param name="visitor"> DbExpressionVisitor의 인스턴스입니다. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbIntersectExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     특정 형식의 결과 값을 생성하는 식 방문자에 대한 방문자 패턴 메서드입니다. </summary>
      <param name="visitor"> TResultType 형식의 결과 값을 생성하는 형식화된 DbExpressionVisitor의 인스턴스입니다. </param>
      <typeparam name="TResultType">     visitor에서 생성하는 결과의 형식</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbIsEmptyExpression">
      <summary>     단일 집합 인수에 적용되는 빈 집합 확인을 나타냅니다. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbIsEmptyExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     결과 값을 생성하지 않는 식 방문자에 대한 방문자 패턴 메서드입니다. </summary>
      <param name="visitor"> DbExpressionVisitor의 인스턴스입니다. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbIsEmptyExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     특정 형식의 결과 값을 생성하는 식 방문자에 대한 방문자 패턴 메서드입니다. </summary>
      <param name="visitor"> TResultType 형식의 결과 값을 생성하는 형식화된 DbExpressionVisitor의 인스턴스입니다. </param>
      <typeparam name="TResultType">     visitor에서 생성하는 결과의 형식</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbIsNullExpression">
      <summary>     단일 인수에 적용되는 Null 확인을 나타냅니다. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbIsNullExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     결과 값을 생성하지 않는 식 방문자에 대한 방문자 패턴 메서드입니다. </summary>
      <param name="visitor"> DbExpressionVisitor의 인스턴스입니다. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbIsNullExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     특정 형식의 결과 값을 생성하는 식 방문자에 대한 방문자 패턴 메서드입니다. </summary>
      <param name="visitor"> TResultType 형식의 결과 값을 생성하는 형식화된 DbExpressionVisitor의 인스턴스입니다. </param>
      <typeparam name="TResultType">     visitor에서 생성하는 결과의 형식</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbIsOfExpression">
      <summary>     단일 인수의 형식을 지정된 형식과 비교합니다. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbIsOfExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     결과 값을 생성하지 않는 식 방문자에 대한 방문자 패턴 메서드입니다. </summary>
      <param name="visitor"> DbExpressionVisitor의 인스턴스입니다. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbIsOfExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     특정 형식의 결과 값을 생성하는 식 방문자에 대한 방문자 패턴 메서드입니다. </summary>
      <param name="visitor"> TResultType 형식의 결과 값을 생성하는 형식화된 DbExpressionVisitor의 인스턴스입니다. </param>
      <typeparam name="TResultType">     visitor에서 생성하는 결과의 형식</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbIsOfExpression.OfType">
      <summary>     인수의 형식 메타데이터와 비교할 형식 메타데이터를 가져옵니다. </summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression">
      <summary>     지정된 조인 조건에 대한 지정된 컬렉션 인수 사이의 내부 조인, 왼쪽 우선 외부 조인 또는 완전 외부 조인 연산을 나타냅니다. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     결과 값을 생성하지 않는 식 방문자에 대한 방문자 패턴 메서드입니다. </summary>
      <param name="visitor"> DbExpressionVisitor의 인스턴스입니다. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     특정 형식의 결과 값을 생성하는 식 방문자에 대한 방문자 패턴 메서드입니다. </summary>
      <param name="visitor"> TResultType 형식의 결과 값을 생성하는 형식화된 DbExpressionVisitor의 인스턴스입니다. </param>
      <typeparam name="TResultType">     visitor에서 생성하는 결과의 형식</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression.JoinCondition">
      <summary>     적용할 조인 조건을 정의하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />을 가져옵니다. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression.Left">
      <summary>     왼쪽 입력을 제공하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" />을 가져옵니다. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression.Right">
      <summary>     오른쪽 입력을 제공하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" />을 가져옵니다. </summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbLambdaExpression">
      <summary>     람다 함수를 적용하는 것을 나타냅니다. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbLambdaExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     결과 값을 생성하지 않는 식 방문자에 대한 방문자 패턴 메서드입니다. </summary>
      <param name="visitor"> DbExpressionVisitor의 인스턴스입니다. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbLambdaExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     특정 형식의 결과 값을 생성하는 식 방문자에 대한 방문자 패턴 메서드입니다. </summary>
      <param name="visitor"> TResultType 형식의 결과 값을 생성하는 형식화된 DbExpressionVisitor의 인스턴스입니다. </param>
      <typeparam name="TResultType">     visitor에서 생성하는 결과의 형식</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbLambdaExpression.Arguments">
      <summary>     람다 함수가 적용될 인수를 제공하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> 목록을 가져옵니다. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbLambdaExpression.Lambda">
      <summary>     이 식에 의해 적용되는 람다 함수를 나타내는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLambda" />를 가져옵니다. </summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbLikeExpression">
      <summary>     선택적 이스케이프 문자열을 사용하여 지정된 패턴에 대한 문자열 비교를 수행합니다. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbLikeExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     결과 값을 생성하지 않는 식 방문자에 대한 방문자 패턴 메서드입니다. </summary>
      <param name="visitor"> DbExpressionVisitor의 인스턴스입니다. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbLikeExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     특정 형식의 결과 값을 생성하는 식 방문자에 대한 방문자 패턴 메서드입니다. </summary>
      <param name="visitor"> TResultType 형식의 결과 값을 생성하는 형식화된 DbExpressionVisitor의 인스턴스입니다. </param>
      <typeparam name="TResultType">     visitor에서 생성하는 결과의 형식</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbLikeExpression.Argument">
      <summary>     지정된 패턴과 비교할 문자열을 지정하는 식을 가져옵니다. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbLikeExpression.Escape">
      <summary>     비교에 사용할 선택적 이스케이프 문자열을 제공하는 식을 가져옵니다. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbLikeExpression.Pattern">
      <summary>     지정된 문자열을 비교할 패턴을 지정하는 식을 가져옵니다. </summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbLimitExpression">
      <summary>     인수 컬렉션의 요소 수를 지정된 제한 값으로 제한합니다. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbLimitExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     결과 값을 생성하지 않는 식 방문자에 대한 방문자 패턴 메서드입니다. </summary>
      <param name="visitor"> DbExpressionVisitor의 인스턴스입니다. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbLimitExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     특정 형식의 결과 값을 생성하는 식 방문자에 대한 방문자 패턴 메서드입니다. </summary>
      <param name="visitor"> TResultType 형식의 결과 값을 생성하는 형식화된 DbExpressionVisitor의 인스턴스입니다. </param>
      <typeparam name="TResultType">     visitor에서 생성하는 결과의 형식</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbLimitExpression.Argument">
      <summary>     입력 컬렉션을 지정하는 식을 가져옵니다. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbLimitExpression.Limit">
      <summary>     입력 컬렉션에서 반환되는 요소 수에 대한 제한을 지정하는 식을 가져옵니다. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbLimitExpression.WithTies">
      <summary>     제한 작업에 동점 결과가 포함되는지 여부를 가져옵니다. 동점 결과를 포함하면 제한 값에 지정된 것보다 많은 결과가 생성될 수 있습니다. </summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbModificationClause">
      <summary>삽입 또는 업데이트 수정 작업의 단일 절을 지정합니다(<see cref="P:System.Data.Entity.Core.Common.CommandTrees.DbInsertCommandTree.SetClauses" /> 및 <see cref="P:System.Data.Entity.Core.Common.CommandTrees.DbUpdateCommandTree.SetClauses" /> 참조).</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbModificationCommandTree">
      <summary>     정식 명령 트리로 표현된 DML 연산을 나타냅니다. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbModificationCommandTree.Target">
      <summary>     DML 작업의 대상 테이블을 지정하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" />을 가져옵니다. </summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression">
      <summary>     집합 및 레코드 형식을 포함하여 지정된 형식의 새 인스턴스를 생성합니다. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     결과 값을 생성하지 않는 식 방문자에 대한 방문자 패턴 메서드입니다. </summary>
      <param name="visitor"> DbExpressionVisitor의 인스턴스입니다. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     특정 형식의 결과 값을 생성하는 식 방문자에 대한 방문자 패턴 메서드입니다. </summary>
      <param name="visitor"> TResultType 형식의 결과 값을 생성하는 형식화된 DbExpressionVisitor의 인스턴스입니다. </param>
      <typeparam name="TResultType">     visitor에서 생성하는 결과의 형식</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression.Arguments">
      <summary>     새 인스턴스의 속성/열 값 또는 집합 요소를 제공하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> 목록을 가져옵니다. </summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbNotExpression">
      <summary>     단일 부일 인수의 논리적 Not 연산을 나타냅니다. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbNotExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     결과 값을 생성하지 않는 식 방문자에 대한 방문자 패턴 메서드입니다. </summary>
      <param name="visitor"> DbExpressionVisitor의 인스턴스입니다. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbNotExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     특정 형식의 결과 값을 생성하는 식 방문자에 대한 방문자 패턴 메서드입니다. </summary>
      <param name="visitor"> TResultType 형식의 결과 값을 생성하는 형식화된 DbExpressionVisitor의 인스턴스입니다. </param>
      <typeparam name="TResultType">     visitor에서 생성하는 결과의 형식</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbNullExpression">
      <summary>     null을 나타냅니다. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbNullExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     결과 값을 생성하지 않는 식 방문자에 대한 방문자 패턴 메서드입니다. </summary>
      <param name="visitor"> DbExpressionVisitor의 인스턴스입니다. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbNullExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     특정 형식의 결과 값을 생성하는 식 방문자에 대한 방문자 패턴 메서드입니다. </summary>
      <param name="visitor"> TResultType 형식의 결과 값을 생성하는 형식화된 DbExpressionVisitor의 인스턴스입니다. </param>
      <typeparam name="TResultType">     visitor에서 생성하는 결과의 형식</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbOfTypeExpression">
      <summary>     지정된 집합 인수에서 지정된 형식의 요소를 검색합니다. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbOfTypeExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     결과 값을 생성하지 않는 식 방문자에 대한 방문자 패턴 메서드입니다. </summary>
      <param name="visitor"> DbExpressionVisitor의 인스턴스입니다. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbOfTypeExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     특정 형식의 결과 값을 생성하는 식 방문자에 대한 방문자 패턴 메서드입니다. </summary>
      <param name="visitor"> TResultType 형식의 결과 값을 생성하는 형식화된 DbExpressionVisitor의 인스턴스입니다. </param>
      <typeparam name="TResultType">     visitor에서 생성하는 결과의 형식</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbOfTypeExpression.OfType">
      <summary>     집합 인수에서 검색할 요소 형식의 메타데이터를 가져옵니다. </summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbOrExpression">
      <summary>     두 부울 인수의 논리적 Or 연산을 나타냅니다. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbOrExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     결과 값을 생성하지 않는 식 방문자에 대한 방문자 패턴 메서드입니다. </summary>
      <param name="visitor"> DbExpressionVisitor의 인스턴스입니다. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbOrExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     특정 형식의 결과 값을 생성하는 식 방문자에 대한 방문자 패턴 메서드입니다. </summary>
      <param name="visitor"> TResultType 형식의 결과 값을 생성하는 형식화된 DbExpressionVisitor의 인스턴스입니다. </param>
      <typeparam name="TResultType">     visitor에서 생성하는 결과의 형식</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbParameterReferenceExpression">
      <summary>     이 식을 포함하는 명령 트리에 선언된 매개 변수에 대한 참조를 나타냅니다. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbParameterReferenceExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     결과 값을 생성하지 않는 식 방문자에 대한 방문자 패턴 메서드입니다. </summary>
      <param name="visitor"> DbExpressionVisitor의 인스턴스입니다. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbParameterReferenceExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     특정 형식의 결과 값을 생성하는 식 방문자에 대한 방문자 패턴 메서드입니다. </summary>
      <param name="visitor"> TResultType 형식의 결과 값을 생성하는 형식화된 DbExpressionVisitor의 인스턴스입니다. </param>
      <typeparam name="TResultType">     visitor에서 생성하는 결과의 형식</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbParameterReferenceExpression.ParameterName">
      <summary>     참조된 매개 변수의 이름을 가져옵니다. </summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression">
      <summary>     지정된 입력 집합에 대한 특정 값 집합의 프로젝션을 나타냅니다. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     결과 값을 생성하지 않는 식 방문자에 대한 방문자 패턴 메서드입니다. </summary>
      <param name="visitor"> DbExpressionVisitor의 인스턴스입니다. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     특정 형식의 결과 값을 생성하는 식 방문자에 대한 방문자 패턴 메서드입니다. </summary>
      <param name="visitor"> TResultType 형식의 결과 값을 생성하는 형식화된 DbExpressionVisitor의 인스턴스입니다. </param>
      <typeparam name="TResultType">     visitor에서 생성하는 결과의 형식</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression.Input">
      <summary>     입력 집합을 지정하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" />을 가져옵니다. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression.Projection">
      <summary>     프로젝션을 정의하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />을 가져옵니다. </summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression">
      <summary>인스턴스 속성을 검색하기 위한 메서드와 속성을 제공합니다.이 클래스는 상속될 수 없습니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>결과 값을 생성하지 않는 식의 visitor 패턴을 구현합니다.</summary>
      <param name="visitor">
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" />의 인스턴스입니다.</param>
      <exception cref="T:System.ArgumentNullException">visitor가 null인 경우</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>특정 형식의 결과 값을 생성하는 식의 visitor 패턴을 구현합니다.</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" />에서 생성한 특정 형식의 결과 값입니다.</returns>
      <param name="visitor">특정 형식의 결과 값을 생성하는 형식화된 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" />의 인스턴스입니다.</param>
      <typeparam name="TResultType">visitor에서 생성하는 결과의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor가 null인 경우</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression.Instance">
      <summary>속성을 검색할 인스턴스를 정의하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />을 가져옵니다.</summary>
      <returns>속성을 검색할 인스턴스를 정의하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression.op_Implicit(System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression)~System.Collections.Generic.KeyValuePair{System.String,System.Data.Entity.Core.Common.CommandTrees.DbExpression}">
      <summary>
        <see cref="T:System.Collections.Generic.KeyValuePair`2" />에 대한 암시적 캐스팅을 사용하도록 설정합니다.</summary>
      <returns>변환된 값입니다.</returns>
      <param name="value">변환될 식입니다.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression.Property">
      <summary>검색할 속성의 속성 메타데이터를 가져옵니다.</summary>
      <returns>검색할 속성의 속성 메타데이터입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression.ToKeyValuePair">
      <summary>이 속성 식을 기반으로 새 키/값 쌍을 만듭니다.</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression" />에서 파생된 키와 값이 포함된 새 키/값 쌍입니다.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbQuantifierExpression">
      <summary>     지정된 입력 집합의 요소에 대한 지정된 일부 또는 모든 종류의 한정사 작업을 나타냅니다. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbQuantifierExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     결과 값을 생성하지 않는 식 방문자에 대한 방문자 패턴 메서드입니다. </summary>
      <param name="visitor"> DbExpressionVisitor의 인스턴스입니다. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbQuantifierExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     특정 형식의 결과 값을 생성하는 식 방문자에 대한 방문자 패턴 메서드입니다. </summary>
      <param name="visitor"> TResultType 형식의 결과 값을 생성하는 형식화된 DbExpressionVisitor의 인스턴스입니다. </param>
      <typeparam name="TResultType">     visitor에서 생성하는 결과의 형식</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbQuantifierExpression.Input">
      <summary>     입력 집합을 지정하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" />을 가져옵니다. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbQuantifierExpression.Predicate">
      <summary>     입력 집합의 각 요소에 대해 계산할 Boolean 조건자를 가져옵니다. </summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbQueryCommandTree">
      <summary>정식 명령 트리로 표현된 쿼리 작업을 나타냅니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbQueryCommandTree.#ctor(System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace,System.Data.Entity.Core.Metadata.Edm.DataSpace,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>지정된 메타데이터 작업 영역을 사용하는 새 DbQueryCommandTree를 생성합니다.</summary>
      <param name="metadata">명령 트리에서 사용할 메타데이터 작업 영역입니다.</param>
      <param name="dataSpace">이 명령 트리에서 사용되는 식에 있는 메타데이터가 속해 있어야 하는 논리적인 '공간'입니다.</param>
      <param name="query">쿼리의 논리를 정의하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="metadata" /> 또는 <paramref name="query" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="dataSpace" />가 유효한 데이터 공간을 나타내지 않습니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbQueryCommandTree.#ctor(System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace,System.Data.Entity.Core.Metadata.Edm.DataSpace,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Boolean)">
      <summary>지정된 메타데이터 작업 영역을 사용하는 새 DbQueryCommandTree를 생성합니다.</summary>
      <param name="metadata">명령 트리에서 사용할 메타데이터 작업 영역입니다.</param>
      <param name="dataSpace">이 명령 트리에서 사용되는 식에 있는 메타데이터가 속해 있어야 하는 논리적인 '공간'입니다. </param>
      <param name="query">쿼리의 논리를 정의하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />입니다. </param>
      <param name="validate">False로 설정하면 트리의 유효성 검사가 해제됩니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="metadata" /> 또는 <paramref name="query" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="dataSpace" />가 유효한 데이터 공간을 나타내지 않습니다.</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbQueryCommandTree.CommandTreeKind">
      <summary>이 명령 트리의 종류를 가져옵니다.</summary>
      <returns>이 명령 트리의 종류입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbQueryCommandTree.Query">
      <summary>쿼리의 논리를 정의하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />을 가져옵니다.</summary>
      <returns>쿼리의 논리를 정의하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />입니다.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbRefExpression">
      <summary>     지정된 엔터티 집합 내의 특정 인스턴스에 대한 강력한 형식의 참조를 나타냅니다. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbRefExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     결과 값을 생성하지 않는 식 방문자에 대한 방문자 패턴 메서드입니다. </summary>
      <param name="visitor"> DbExpressionVisitor의 인스턴스입니다. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbRefExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     특정 형식의 결과 값을 생성하는 식 방문자에 대한 방문자 패턴 메서드입니다. </summary>
      <param name="visitor"> TResultType 형식의 결과 값을 생성하는 형식화된 DbExpressionVisitor의 인스턴스입니다. </param>
      <typeparam name="TResultType">     visitor에서 생성하는 결과의 형식</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbRefExpression.EntitySet">
      <summary>     인스턴스를 포함하는 엔터티 집합의 메타데이터를 가져옵니다. </summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbRefKeyExpression">
      <summary>     행으로 지정된 참조의 키 값 검색을 나타냅니다. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbRefKeyExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     결과 값을 생성하지 않는 식 방문자에 대한 방문자 패턴 메서드입니다. </summary>
      <param name="visitor"> DbExpressionVisitor의 인스턴스입니다. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbRefKeyExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     특정 형식의 결과 값을 생성하는 식 방문자에 대한 방문자 패턴 메서드입니다. </summary>
      <param name="visitor"> TResultType 형식의 결과 값을 생성하는 형식화된 DbExpressionVisitor의 인스턴스입니다. </param>
      <typeparam name="TResultType">     visitor에서 생성하는 결과의 형식</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbRelationshipNavigationExpression">
      <summary>     '원본' 역할, '대상' 역할 및 원본 역할의 인스턴스가 지정된 경우의 관계(컴퍼지션 또는 연결) 탐색을 나타냅니다. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbRelationshipNavigationExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     결과 값을 생성하지 않는 식 방문자에 대한 방문자 패턴 메서드입니다. </summary>
      <param name="visitor"> DbExpressionVisitor의 인스턴스입니다. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbRelationshipNavigationExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     특정 형식의 결과 값을 생성하는 식 방문자에 대한 방문자 패턴 메서드입니다. </summary>
      <param name="visitor"> TResultType 형식의 결과 값을 생성하는 형식화된 DbExpressionVisitor의 인스턴스입니다. </param>
      <typeparam name="TResultType">     visitor에서 생성하는 결과의 형식</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbRelationshipNavigationExpression.NavigateFrom">
      <summary>     탐색 시작 지점인 관계 끝의 메타데이터를 가져옵니다. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbRelationshipNavigationExpression.NavigateTo">
      <summary>     탐색 끝 지점인 관계 끝의 메타데이터를 가져옵니다. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbRelationshipNavigationExpression.NavigationSource">
      <summary>     탐색을 시작할 '원본' 관계 끝의 인스턴스를 지정하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />을 가져옵니다. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbRelationshipNavigationExpression.Relationship">
      <summary>     탐색할 관계의 메타데이터를 가져옵니다. </summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbScanExpression">
      <summary>     지정된 엔터티 집합의 모든 요소를 '검색'함을 나타냅니다. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbScanExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     결과 값을 생성하지 않는 식 방문자에 대한 방문자 패턴 메서드입니다. </summary>
      <param name="visitor"> DbExpressionVisitor의 인스턴스입니다. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbScanExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     특정 형식의 결과 값을 생성하는 식 방문자에 대한 방문자 패턴 메서드입니다. </summary>
      <param name="visitor"> TResultType 형식의 결과 값을 생성하는 형식화된 DbExpressionVisitor의 인스턴스입니다. </param>
      <typeparam name="TResultType">     visitor에서 생성하는 결과의 형식</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbScanExpression.Target">
      <summary>     참조된 엔터티 또는 관계 집합의 메타데이터를 가져옵니다. </summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbSetClause">
      <summary>     수정 작업에서 속성의 값을 설정하는 절을 지정합니다. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbSetClause.Property">
      <summary>     업데이트할 속성을 지정하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />을 가져옵니다. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbSetClause.Value">
      <summary>     속성을 업데이트할 새 값을 지정하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />을 가져옵니다. </summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbSkipExpression">
      <summary>     지정된 정렬 키에 설명된 순서를 적용한 후 입력 집합의 지정된 요소 수에 대한 건너뛰기 작업을 나타냅니다. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbSkipExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     결과 값을 생성하지 않는 식 방문자에 대한 방문자 패턴 메서드입니다. </summary>
      <param name="visitor"> DbExpressionVisitor의 인스턴스입니다. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbSkipExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     특정 형식의 결과 값을 생성하는 식 방문자에 대한 방문자 패턴 메서드입니다. </summary>
      <param name="visitor"> TResultType 형식의 결과 값을 생성하는 형식화된 DbExpressionVisitor의 인스턴스입니다. </param>
      <typeparam name="TResultType">     visitor에서 생성하는 결과의 형식</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbSkipExpression.Count">
      <summary>     입력 컬렉션에서 건너뛸 요소 수를 지정하는 식을 가져옵니다. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbSkipExpression.Input">
      <summary>     입력 집합을 지정하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" />을 가져옵니다. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbSkipExpression.SortOrder">
      <summary>     정렬 순서를 정의하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortClause" /> 목록을 가져옵니다. </summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbSortClause">
      <summary>     DbSortExpression에서 정렬 순서의 일부로 사용될 수 있는 정렬 키를 지정합니다. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbSortClause.Ascending">
      <summary>     이 정렬 키가 오름차순으로 정렬되었는지 여부를 나타내는 부울 값을 가져옵니다. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbSortClause.Collation">
      <summary>     이 정렬 키의 데이터 정렬을 지정하는 문자열 값을 가져옵니다. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbSortClause.Expression">
      <summary>     이 정렬 키에 값을 제공하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />을 가져옵니다. </summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbSortExpression">
      <summary>     지정된 정렬 키를 기준으로 지정된 입력 집합의 요소에 적용된 정렬 작업을 나타냅니다. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbSortExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     결과 값을 생성하지 않는 식 방문자에 대한 방문자 패턴 메서드입니다. </summary>
      <param name="visitor"> DbExpressionVisitor의 인스턴스입니다. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbSortExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     특정 형식의 결과 값을 생성하는 식 방문자에 대한 방문자 패턴 메서드입니다. </summary>
      <param name="visitor"> TResultType 형식의 결과 값을 생성하는 형식화된 DbExpressionVisitor의 인스턴스입니다. </param>
      <typeparam name="TResultType">     visitor에서 생성하는 결과의 형식</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbSortExpression.Input">
      <summary>     입력 집합을 지정하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" />을 가져옵니다. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbSortExpression.SortOrder">
      <summary>     정렬 순서를 정의하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortClause" /> 목록을 가져옵니다. </summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbTreatExpression">
      <summary>     단일 인수의 형식을 지정된 형식으로 변환합니다. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbTreatExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     결과 값을 생성하지 않는 식 방문자에 대한 방문자 패턴 메서드입니다. </summary>
      <param name="visitor"> DbExpressionVisitor의 인스턴스입니다. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbTreatExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     특정 형식의 결과 값을 생성하는 식 방문자에 대한 방문자 패턴 메서드입니다. </summary>
      <param name="visitor"> TResultType 형식의 결과 값을 생성하는 형식화된 DbExpressionVisitor의 인스턴스입니다. </param>
      <typeparam name="TResultType">     visitor에서 생성하는 결과의 형식</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbUnaryExpression">
      <summary>     단일 식 피연산자를 사용하는 식의 추상 기본 형식입니다. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbUnaryExpression.Argument">
      <summary>     인수를 정의하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />을 가져옵니다. </summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbUnionAllExpression">
      <summary>     왼쪽과 오른쪽 피연산자 사이의 집합 union 연산(중복 제거 제외)을 나타냅니다. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbUnionAllExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     결과 값을 생성하지 않는 식 방문자에 대한 방문자 패턴 메서드입니다. </summary>
      <param name="visitor"> DbExpressionVisitor의 인스턴스입니다. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbUnionAllExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     특정 형식의 결과 값을 생성하는 식 방문자에 대한 방문자 패턴 메서드입니다. </summary>
      <param name="visitor"> TResultType 형식의 결과 값을 생성하는 형식화된 DbExpressionVisitor의 인스턴스입니다. </param>
      <typeparam name="TResultType">     visitor에서 생성하는 결과의 형식</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbUpdateCommandTree">
      <summary>명령 트리로 표현된 단일 행 업데이트 작업을 나타냅니다.이 클래스는 상속될 수 없습니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbUpdateCommandTree.#ctor(System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace,System.Data.Entity.Core.Metadata.Edm.DataSpace,System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Collections.ObjectModel.ReadOnlyCollection{System.Data.Entity.Core.Common.CommandTrees.DbModificationClause},System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbUpdateCommandTree" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="metadata">이 명령이 실행될 모델입니다.</param>
      <param name="dataSpace">데이터 공간입니다.</param>
      <param name="target">DML(데이터 조작 언어) 작업의 대상 테이블입니다.</param>
      <param name="predicate">대상 컬렉션에서 업데이트할 멤버를 결정하는 데 사용되는 조건자입니다.</param>
      <param name="setClauses">업데이트 작업을 정의하는 update set 절의 목록입니다.</param>
      <param name="returning">수정된 행을 기반으로 반환될 결과의 프로젝션을 지정하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />입니다.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbUpdateCommandTree.CommandTreeKind">
      <summary>이 명령 트리의 종류를 가져옵니다.</summary>
      <returns>이 명령 트리의 종류입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbUpdateCommandTree.Predicate">
      <summary>대상 컬렉션에서 업데이트할 멤버를 결정하는 데 사용되는 조건자를 지정하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />을 가져옵니다.</summary>
      <returns>대상 컬렉션에서 업데이트할 멤버를 결정하는 데 사용되는 조건자를 지정하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbUpdateCommandTree.Returning">
      <summary>수정된 행에 기반하여 반환될 결과의 프로젝션을 지정하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />을 가져옵니다.</summary>
      <returns>수정된 행을 기반으로 반환될 결과의 프로젝션을 지정하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />입니다.null인 경우 이 명령에서 결과가 반환되지 않음을 나타냅니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbUpdateCommandTree.SetClauses">
      <summary>업데이트 작업을 정의하는 update set 절의 목록을 가져옵니다.</summary>
      <returns>업데이트 작업을 정의하는 update set 절의 목록입니다.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression">
      <summary>     현재 범위 내에 있는 변수에 대한 참조를 나타냅니다. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     결과 값을 생성하지 않는 식 방문자에 대한 방문자 패턴 메서드입니다. </summary>
      <param name="visitor"> DbExpressionVisitor의 인스턴스입니다. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     특정 형식의 결과 값을 생성하는 식 방문자에 대한 방문자 패턴 메서드입니다. </summary>
      <param name="visitor"> TResultType 형식의 결과 값을 생성하는 형식화된 DbExpressionVisitor의 인스턴스입니다. </param>
      <typeparam name="TResultType">     visitor에서 생성하는 결과의 형식</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression.VariableName">
      <summary>     참조되는 변수의 이름을 가져옵니다. </summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor">
      <summary>지정된 루트 식에서 식 트리의 각 요소를 열어 봅니다.요소가 변경되면 트리를 루트로 다시 빌드하고 새 루트 식이 반환되며, 그렇지 않으면 원래 루트 식이 반환됩니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.OnEnterScope(System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression})">
      <summary>지정한 범위 변수가 있는 식 방문자 범위에 진입하는 경우의 이벤트를 나타냅니다.</summary>
      <param name="scopeVariables">범위 변수의 컬렉션입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.OnExitScope">
      <summary>식 방문자의 범위를 벗어납니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.OnExpressionReplaced(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>이전 식을 식 방문자에 대한 새 식으로 바꿉니다.</summary>
      <param name="oldExpression">이전 식입니다.</param>
      <param name="newExpression">새 식입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.OnVariableRebound(System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression,System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression)">
      <summary>변수가 식 방문자에 대해 다시 바인딩되는 경우의 이벤트를 나타냅니다.</summary>
      <param name="fromVarRef">변수 위치입니다.</param>
      <param name="toVarRef">다시 바인딩되는 변수의 참조입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbAndExpression)">
      <summary>논리 AND 식에 대한 방문자 패턴을 구현합니다.</summary>
      <returns>구현된 방문자입니다.</returns>
      <param name="expression">방문 중인 DbAndExpression입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression)">
      <summary>특정 입력 집합의 각 요소에 대해 지정된 함수를 호출하는 작업에 대한 방문자 패턴을 구현합니다.</summary>
      <returns>구현된 방문자입니다.</returns>
      <param name="expression">방문 중인 DbApplyExpression입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression)">
      <summary>숫자 인수에 적용되는 산술 연산에 대한 방문자 패턴을 구현합니다.</summary>
      <returns>구현된 방문자입니다.</returns>
      <param name="expression">방문 중인 DbArithmeticExpression입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbCaseExpression)">
      <summary>When, Then 및 Else 절에 대한 방문자 패턴을 구현합니다.</summary>
      <returns>구현된 방문자입니다.</returns>
      <param name="expression">방문 중인 DbCaseExpression입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbCastExpression)">
      <summary>지정된 형식으로 단일 인수의 형식을 변환하는 작업에 대한 방문자 패턴을 구현합니다.</summary>
      <returns>구현된 방문자입니다.</returns>
      <param name="expression">방문 중인 DbCastExpression입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression)">
      <summary>두 인수에 적용되는 비교 연산에 대한 방문자 패턴을 구현합니다.</summary>
      <returns>구현된 방문자입니다.</returns>
      <param name="expression">방문 중인 DbComparisonExpression입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression)">
      <summary>다른 종류의 상수에 대한 방문자 패턴을 구현합니다.</summary>
      <returns>구현된 방문자입니다.</returns>
      <param name="expression">방문 중인 DbConstantExpression입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbCrossJoinExpression)">
      <summary>지정된 컬렉션 인수 간의 무조건 조인 연산에 대한 방문자 패턴을 구현합니다.</summary>
      <returns>구현된 방문자입니다.</returns>
      <param name="expression">방문 중인 DbCrossJoinExpression입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbDerefExpression)">
      <summary>지정된 참조를 기반으로 엔터티를 검색하는 식에 대한 방문자 패턴을 구현합니다.</summary>
      <returns>구현된 방문자입니다.</returns>
      <param name="expression">방문 중인 DbDerefExpression입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbDistinctExpression)">
      <summary>지정된 집합 인수에서 제거된 중복 요소에 대한 방문자 패턴을 구현합니다.</summary>
      <returns>구현된 방문자입니다.</returns>
      <param name="expression">방문 중인 DbDistinctExpression입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbElementExpression)">
      <summary>지정된 집합 인수를 singleton으로 변환하는 작업에 대한 방문자 패턴을 구현합니다.</summary>
      <returns>구현된 방문자입니다.</returns>
      <param name="expression">방문 중인 DbElementExpression입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbEntityRefExpression)">
      <summary>기본 엔터티 인스턴스에서 참조를 추출하는 식에 대한 방문자 패턴을 구현합니다.</summary>
      <returns>구현된 방문자입니다.</returns>
      <param name="expression">방문 중인 DbEntityRefExpression입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbExceptExpression)">
      <summary>왼쪽 피연산자와 오른쪽 피연산자 간의 차집합 연산에 대한 방문자 패턴을 구현합니다.</summary>
      <returns>구현된 방문자입니다.</returns>
      <param name="expression">방문 중인 DbExceptExpression입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>식 형식에 필요한 기본 기능에 대한 방문자 패턴을 구현합니다.</summary>
      <returns>구현된 방문자입니다.</returns>
      <param name="expression">방문 중인 DbExpression입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbFilterExpression)">
      <summary>입력 집합을 필터링하기 위해 적용되는 조건자에 대한 방문자 패턴을 구현합니다.</summary>
      <returns>구현된 방문자입니다.</returns>
      <param name="expression">방문 중인 DbFilterExpression입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression)">
      <summary>함수의 호출에 대한 방문자 패턴을 구현합니다.</summary>
      <returns>구현된 방문자입니다.</returns>
      <param name="expression">방문 중인 DbFunctionExpression입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbGroupByExpression)">
      <summary>group by 연산에 대한 방문자 패턴을 구현합니다.</summary>
      <returns>구현된 방문자입니다.</returns>
      <param name="expression">방문 중인 DbGroupByExpression입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbInExpression)">
      <summary>DbInExpression에 대한 방문자 패턴을 구현합니다.</summary>
      <returns>구현된 방문자입니다.</returns>
      <param name="expression">방문 중인 DbInExpression입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbIntersectExpression)">
      <summary>왼쪽 피연산자와 오른쪽 피연산자 간의 교집합 연산에 대한 방문자 패턴을 구현합니다.</summary>
      <returns>구현된 방문자입니다.</returns>
      <param name="expression">방문 중인 DbIntersectExpression입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbIsEmptyExpression)">
      <summary>단일 집합 인수에 적용되는 공집합 확인에 대한 방문자 패턴을 구현합니다.</summary>
      <returns>구현된 방문자입니다.</returns>
      <param name="expression">방문 중인 DbIsEmptyExpression입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbIsNullExpression)">
      <summary>단일 인수에 적용되는 null 확인에 대한 방문자 패턴을 구현합니다.</summary>
      <returns>구현된 방문자입니다.</returns>
      <param name="expression">방문 중인 DbIsNullExpression입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbIsOfExpression)">
      <summary>단일 인수와 지정된 형식 간의 형식 비교에 대한 방문자 패턴을 구현합니다.</summary>
      <returns>구현된 방문자입니다.</returns>
      <param name="expression">방문 중인 DbIsOfExpression입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression)">
      <summary>지정된 조인 조건에 따른 특정 컬렉션 인수 간의 내부, 왼쪽 우선 외부 또는 완전 외부 조인 연산에 대한 방문자 패턴을 구현합니다.</summary>
      <returns>구현된 방문자입니다.</returns>
      <param name="expression">방문 중인 DbJoinExpression입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbLambdaExpression)">
      <summary>람다 함수를 DbExpression 개체로 표현된 인수에 적용하는 작업에 대한 방문자 패턴을 구현합니다.</summary>
      <returns>구현된 방문자입니다.</returns>
      <param name="expression">방문 중인 DbLambdaExpression입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbLikeExpression)">
      <summary>지정된 패턴에 대해 선택적인 이스케이프 문자열을 사용한 문자열 비교에 대한 방문자 패턴을 구현합니다.</summary>
      <returns>구현된 방문자입니다.</returns>
      <param name="expression">방문 중인 DbLikeExpression입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbLimitExpression)">
      <summary>인수 컬렉션의 요소 수를 지정된 한계 값으로 제한하는 작업에 대한 방문자 패턴을 구현합니다.</summary>
      <returns>구현된 방문자입니다.</returns>
      <param name="expression">방문 중인 DbLimitExpression입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression)">
      <summary>집합 및 레코드 형식을 비롯하여 지정된 형식의 새 인스턴스 생성에 대한 방문자 패턴을 구현합니다.</summary>
      <returns>구현된 방문자입니다.</returns>
      <param name="expression">방문 중인 DbNewInstanceExpression입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbNotExpression)">
      <summary>단일 부울 인수의 논리적 NOT에 대한 방문자 패턴을 구현합니다.</summary>
      <returns>구현된 방문자입니다.</returns>
      <param name="expression">방문 중인 DbNotExpression입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbNullExpression)">
      <summary>형식화된 null 리터럴에 대한 참조의 방문자 패턴을 구현합니다.</summary>
      <returns>구현된 방문자입니다.</returns>
      <param name="expression">방문 중인 DbNullExpression입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbOfTypeExpression)">
      <summary>특정 집합 인수에서 지정된 형식의 요소를 검색하는 작업에 대한 방문자 패턴을 구현합니다.</summary>
      <returns>구현된 방문자입니다.</returns>
      <param name="expression">방문 중인 DbOfTypeExpression입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbOrExpression)">
      <summary>두 부울 인수의 논리적 OR에 대한 방문자 패턴을 구현합니다.</summary>
      <returns>구현된 방문자입니다.</returns>
      <param name="expression">방문 중인 DbOrExpression입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbParameterReferenceExpression)">
      <summary>이 식이 포함된 명령 트리에 선언된 매개 변수에 대한 참조의 방문자 패턴을 구현합니다.</summary>
      <returns>구현된 방문자입니다.</returns>
      <param name="expression">방문 중인 DbParameterReferenceExpression입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression)">
      <summary>지정된 식에 대한 특정 입력 집합의 프로젝션에 대한 방문자 패턴을 구현합니다.</summary>
      <returns>구현된 방문자입니다.</returns>
      <param name="expression">방문 중인 DbProjectExpression입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression)">
      <summary>인스턴스 속성을 검색하는 작업에 대한 방문자 패턴을 구현합니다.</summary>
      <returns>구현된 방문자입니다.</returns>
      <param name="expression">방문 중인 DbPropertyExpression입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbQuantifierExpression)">
      <summary>특정 입력 집합의 요소에 대한 지정된 종류의 한정사 작업에 대한 방문자 패턴을 구현합니다.</summary>
      <returns>구현된 방문자입니다.</returns>
      <param name="expression">방문 중인 DbQuantifierExpression입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbRefExpression)">
      <summary>엔터티 집합 내의 특정 인스턴스에 대한 강력한 형식의 참조에 대한 방문자 패턴을 구현합니다.</summary>
      <returns>구현된 방문자입니다.</returns>
      <param name="expression">방문 중인 DbRefExpression입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbRefKeyExpression)">
      <summary>내부 참조 값에서 키 값을 검색하는 작업에 대한 방문자 패턴을 구현합니다.</summary>
      <returns>구현된 방문자입니다.</returns>
      <param name="expression">방문 중인 DbRefKeyExpression입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbRelationshipNavigationExpression)">
      <summary>관계 탐색에 대한 방문자 패턴을 구현합니다.</summary>
      <returns>구현된 방문자입니다.</returns>
      <param name="expression">방문 중인 DbRelationshipNavigationExpression입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbScanExpression)">
      <summary>Target 속성에 지정된 대로 엔터티 집합 또는 관계 집합에 대한 검색의 방문자 패턴을 구현합니다.</summary>
      <returns>구현된 방문자입니다.</returns>
      <param name="expression">방문 중인 DbScanExpression입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbSkipExpression)">
      <summary>skip 식에 대한 방문자 패턴을 구현합니다.</summary>
      <returns>구현된 방문자입니다.</returns>
      <param name="expression">방문 중인 DbSkipExpression입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbSortExpression)">
      <summary>정렬 순서의 일부로 사용할 수 있는 정렬 키에 대한 방문자 패턴을 구현합니다.</summary>
      <returns>구현된 방문자입니다.</returns>
      <param name="expression">방문 중인 DbSortExpression입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbTreatExpression)">
      <summary>다형 인수에 적용되는 형식 변환 작업에 대한 방문자 패턴을 구현합니다.</summary>
      <returns>구현된 방문자입니다.</returns>
      <param name="expression">방문 중인 DbTreatExpression입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbUnionAllExpression)">
      <summary>왼쪽 피연산자와 오른쪽 피연산자 간의 합집합 연산에 대한 방문자 패턴을 구현합니다.</summary>
      <returns>구현된 방문자입니다.</returns>
      <param name="expression">방문 중인 DbUnionAllExpression입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression)">
      <summary>현재 범위에 있는 변수에 대한 참조의 방문자 패턴을 구현합니다.</summary>
      <returns>구현된 방문자입니다.</returns>
      <param name="expression">방문 중인 DbVariableReferenceExpression입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.VisitAggregate(System.Data.Entity.Core.Common.CommandTrees.DbAggregate)">
      <summary>집계에 대한 방문자 패턴을 구현합니다.</summary>
      <returns>구현된 방문자 패턴입니다.</returns>
      <param name="aggregate">방문할 집계입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.VisitEntitySet(System.Data.Entity.Core.Metadata.Edm.EntitySetBase)">
      <summary>엔터티 집합에 대한 방문자 패턴을 구현합니다.</summary>
      <returns>구현된 방문자 패턴입니다.</returns>
      <param name="entitySet">엔터티 집합입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.VisitExpression(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>식에 대한 방문자 패턴을 구현합니다.</summary>
      <returns>구현된 방문자 패턴입니다.</returns>
      <param name="expression">식입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.VisitExpressionBinding(System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding)">
      <summary>식 바인딩에 대한 방문자 패턴을 구현합니다.</summary>
      <returns>구현된 방문자 패턴입니다.</returns>
      <param name="binding">식 바인딩입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.VisitExpressionBindingList(System.Collections.Generic.IList{System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding})">
      <summary>식 바인딩 목록에 대한 방문자 패턴을 구현합니다.</summary>
      <returns>구현된 방문자 패턴입니다.</returns>
      <param name="list">식 바인딩 목록입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.VisitExpressionList(System.Collections.Generic.IList{System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
      <summary>식 목록에 대한 방문자 패턴을 구현합니다.</summary>
      <returns>구현된 방문자 패턴입니다.</returns>
      <param name="list">식 목록입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.VisitFunction(System.Data.Entity.Core.Metadata.Edm.EdmFunction)">
      <summary>함수에 대한 방문자 패턴을 구현합니다.</summary>
      <returns>구현된 방문자 패턴입니다.</returns>
      <param name="functionMetadata">함수 메타데이터입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.VisitFunctionAggregate(System.Data.Entity.Core.Common.CommandTrees.DbFunctionAggregate)">
      <summary>함수 집계에 대한 방문자 패턴을 구현합니다.</summary>
      <returns>구현된 방문자 패턴입니다.</returns>
      <param name="aggregate">집계입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.VisitGroupAggregate(System.Data.Entity.Core.Common.CommandTrees.DbGroupAggregate)">
      <summary>그룹 집계에 대한 방문자 패턴을 구현합니다.</summary>
      <returns>구현된 방문자 패턴입니다.</returns>
      <param name="aggregate">집계입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.VisitGroupExpressionBinding(System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding)">
      <summary>그룹 식 바인딩에 대한 방문자 패턴을 구현합니다.</summary>
      <returns>구현된 방문자 패턴입니다.</returns>
      <param name="binding">바인딩입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.VisitLambda(System.Data.Entity.Core.Common.CommandTrees.DbLambda)">
      <summary>람다 함수에 대한 방문자 패턴을 구현합니다.</summary>
      <returns>구현된 방문자 패턴입니다.</returns>
      <param name="lambda">람다 함수입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.VisitSortClause(System.Data.Entity.Core.Common.CommandTrees.DbSortClause)">
      <summary>정렬 절에 대한 방문자 패턴을 구현합니다.</summary>
      <returns>구현된 방문자 패턴입니다.</returns>
      <param name="clause">정렬 절입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.VisitSortOrder(System.Collections.Generic.IList{System.Data.Entity.Core.Common.CommandTrees.DbSortClause})">
      <summary>정렬 순서에 대한 방문자 패턴을 구현합니다.</summary>
      <returns>구현된 방문자 패턴입니다.</returns>
      <param name="sortOrder">정렬 순서입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.VisitType(System.Data.Entity.Core.Metadata.Edm.EdmType)">
      <summary>형식에 대한 방문자 패턴을 구현합니다.</summary>
      <returns>구현된 방문자 패턴입니다.</returns>
      <param name="type">형식입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.VisitTypeUsage(System.Data.Entity.Core.Metadata.Edm.TypeUsage)">
      <summary>형식 사용에 대한 방문자 패턴을 구현합니다.</summary>
      <returns>구현된 방문자 패턴입니다.</returns>
      <param name="type">형식입니다.</param>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />을 생성하는 API를 제공하고 이 API가 식 형식 자체에서 확장 메서드로 액세스될 수 있게 합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Aggregate(System.Data.Entity.Core.Metadata.Edm.EdmFunction,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>새 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionAggregate" />를 만듭니다.</summary>
      <returns>지정된 함수 및 인수에 대한 참조를 사용하는 새 함수 집계입니다.함수 집계의 Distinct 속성은 false 값을 갖게 됩니다.</returns>
      <param name="function">집계 작업을 정의하는 함수입니다.</param>
      <param name="argument">집계 함수를 계산할 인수입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> 또는 <paramref name="argument" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="function" />이 집계 함수가 아니거나 둘 이상의 인수가 있거나, <paramref name="argument" />의 결과 형식이 <paramref name="function" />의 매개 변수 형식과 동일하지 않거나 해당 형식으로 승격할 수 없습니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.AggregateDistinct(System.Data.Entity.Core.Metadata.Edm.EdmFunction,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>다른 방식으로 적용되는 새 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionAggregate" />를 만듭니다.</summary>
      <returns>지정된 함수 및 인수에 대한 참조를 사용하는 새 함수 집계입니다.함수 집계의 Distinct 속성은 true 값을 갖게 됩니다.</returns>
      <param name="function">집계 작업을 정의하는 함수입니다.</param>
      <param name="argument">집계 함수를 계산할 인수입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> 또는 <paramref name="argument" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="function" />이 집계 함수가 아니거나 둘 이상의 인수가 있거나, <paramref name="argument" />의 결과 형식이 <paramref name="function" />의 매개 변수 형식과 동일하지 않거나 해당 형식으로 승격할 수 없습니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.All(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
      <summary>지정된 조건자가 입력 집합의 모든 요소에 대해 성립하는지 여부를 결정하는 새 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbQuantifierExpression" />을 만듭니다.</summary>
      <returns>모든 작업을 나타내는 새 DbQuantifierExpression입니다.</returns>
      <param name="source">입력 집합을 지정하는 식입니다.</param>
      <param name="predicate">입력 집합의 각 멤버에 대해 평가할 조건자를 나타내는 메서드입니다.이 메서드는 조건자 논리를 제공하는 부울 결과 형식이 포함된 식을 생성해야 합니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="predicate" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="predicate" />에서 생성된 식이 null입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="source" />에 컬렉션 결과 형식이 없습니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="predicate" />에서 생성된 식에 부울 결과 형식이 없습니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.All(System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>지정된 조건자가 입력 집합의 모든 요소에 대해 성립하는지 여부를 결정하는 새 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbQuantifierExpression" />을 만듭니다.</summary>
      <returns>모든 작업을 나타내는 새 DbQuantifierExpression입니다.</returns>
      <param name="input">입력 집합을 지정하는 식 바인딩입니다.</param>
      <param name="predicate">입력 집합의 각 멤버에 대해 평가할 조건자를 나타내는 식입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="predicate" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="predicate" />에서 생성된 식에 부울 결과 형식이 없습니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.And(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>왼쪽 및 오른쪽 인수의 논리 And 연산을 수행하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbAndExpression" />을 만듭니다.</summary>
      <returns>지정된 인수를 사용하는 새 DbAndExpression입니다.</returns>
      <param name="left">왼쪽 인수를 지정하는 부울 식입니다.</param>
      <param name="right">오른쪽 인수를 지정하는 부울 식입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 또는 <paramref name="right" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="left" /> 또는 <paramref name="right" />에 부울 결과 형식이 없습니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Any(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>지정된 집합 인수가 비어 있지 않은지 여부를 결정하는 새 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />을 만듭니다.</summary>
      <returns>지정된 인수를 사용하여 새로운 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbIsEmptyExpression" />에 적용되는 새 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbNotExpression" />입니다.</returns>
      <param name="source">입력 집합을 지정하는 식입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="source" />에 컬렉션 결과 형식이 없습니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Any(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
      <summary>지정된 조건자가 입력 집합의 모든 요소에 대해 성립하는지 여부를 결정하는 새 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbQuantifierExpression" />을 만듭니다.</summary>
      <returns> Any 작업을 나타내는 새 DbQuantifierExpression입니다. </returns>
      <param name="source">입력 집합을 지정하는 식입니다.</param>
      <param name="predicate">입력 집합의 각 멤버에 대해 평가할 조건자를 나타내는 메서드입니다.이 메서드는 조건자 논리를 제공하는 부울 결과 형식이 포함된 식을 생성해야 합니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="predicate" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="predicate" />에서 생성된 식이 null입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="source" />에 컬렉션 결과 형식이 없습니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="predicate" />에서 생성된 식에 부울 결과 형식이 없습니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Any(System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>지정된 조건자가 입력 집합의 모든 요소에 대해 성립하는지 여부를 결정하는 새 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbQuantifierExpression" />을 만듭니다.</summary>
      <returns>Any 작업을 나타내는 새 DbQuantifierExpression입니다.</returns>
      <param name="input">입력 집합을 지정하는 식 바인딩입니다.</param>
      <param name="predicate">입력 집합의 각 멤버에 대해 평가할 조건자를 나타내는 식입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 또는 <paramref name="predicate" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="predicate" />에 부울 결과 형식이 없습니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.As(System.Data.Entity.Core.Common.CommandTrees.DbAggregate,System.String)">
      <summary>지정된 인수를 키/값 쌍 개체로 반환합니다.</summary>
      <returns>키/값 쌍 개체입니다.</returns>
      <param name="value">키/값 쌍의 값입니다.</param>
      <param name="alias">키/값 쌍의 키입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.As(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.String)">
      <summary>지정된 인수를 키/값 쌍 개체로 반환합니다.</summary>
      <returns>키/값 쌍 개체입니다.</returns>
      <param name="value">키/값 쌍의 값입니다.</param>
      <param name="alias">키/값 쌍의 키입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Bind(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>생성된 변수 이름을 사용하여 지정된 식을 바인딩하는 새 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" />을 만듭니다.</summary>
      <returns>지정된 식 및 생성된 변수 이름을 사용하는 새 식 바인딩입니다.</returns>
      <param name="input">바인딩할 식입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" />이 null입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="input" />에 컬렉션 결과 형식이 없습니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.BindAs(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.String)">
      <summary>지정된 변수 이름을 사용하여 지정된 식을 바인딩하는 새 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" />을 만듭니다.</summary>
      <returns>지정된 식 및 변수 이름을 사용하는 새 식 바인딩입니다.</returns>
      <param name="input">바인딩할 식입니다.</param>
      <param name="varName">바인딩에 사용할 변수 이름입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 또는 <paramref name="varName" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="input" />에 컬렉션 결과 형식이 없습니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Case(System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Common.CommandTrees.DbExpression},System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Common.CommandTrees.DbExpression},System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>새 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbCaseExpression" />를 만듭니다.</summary>
      <returns>지정된 사례 및 기본 결과를 사용하는 새 DbCaseExpression입니다.</returns>
      <param name="whenExpressions">각 case의 조건을 제공하는 식의 목록입니다.</param>
      <param name="thenExpressions">각 case의 결과를 제공하는 식의 목록입니다.</param>
      <param name="elseExpression">case가 일치하지 않는 경우 결과를 정의하는 식입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="whenExpressions" /> 또는 <paramref name="thenExpressions" />가 null이거나 null을 포함하거나, <paramref name="elseExpression" />이 null입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="whenExpressions" /> 또는 <paramref name="thenExpressions" />가 비어 있거나, <paramref name="whenExpressions" />에 부울이 아닌 결과 형식을 가진 식이 포함되어 있거나, <paramref name="thenExpressions" /> 및 <paramref name="elseExpression" />의 모든 식에 공통적인 결과 형식이 존재하지 않습니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.CastTo(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Metadata.Edm.TypeUsage)">
      <summary>다형 인수에 캐스트 작업을 적용하는 새 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbCastExpression" />을 만듭니다.</summary>
      <returns>지정된 인수 및 대상 형식을 사용하는 새 DbCastExpression입니다.</returns>
      <param name="argument">캐스트를 적용할 인수입니다.</param>
      <param name="toType">캐스팅할 형식을 지정하는 형식 메타데이터입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argument" /> 또는 <paramref name="toType" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentException">지정된 캐스트가 잘못되었습니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Constant(System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Object)">
      <summary>주어진 상수 값을 사용하여 지정된 기본 형식의 새 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression" />을 만듭니다.</summary>
      <returns>지정된 값 및 <paramref name="constantType" />의 결과 형식을 사용하는 새 DbConstantExpression입니다.</returns>
      <param name="constantType">상수 값의 형식입니다.</param>
      <param name="value">나타낼 상수 값입니다.</param>
      <exception cref="T:System.ArgumentNullException">valueconstantType</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" />가 유효한 상수 형식의 인스턴스가 아니거나, <paramref name="constantType" />이 기본 형식을 나타내지 않거나, <paramref name="value" />가 <paramref name="constantType" />으로 표현되는 것과 다른 기본 형식을 갖고 있습니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Constant(System.Object)">
      <summary>지정된 상수 값을 사용하여 새 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression" />을 만듭니다.</summary>
      <returns>지정된 값을 사용하는 새 DbConstantExpression입니다.</returns>
      <param name="value">나타낼 상수 값입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" />가 유효한 상수 형식의 인스턴스가 아닙니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.CreateRef(System.Data.Entity.Core.Metadata.Edm.EntitySet,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
      <summary>키 값을 기반으로 특정 엔터티에 대한 참조를 인코딩하는 새 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbRefExpression" />을 만듭니다.</summary>
      <returns>지정된 엔터티 집합에서 지정된 키 값을 사용하여 요소를 참조하는 새 DbRefExpression입니다.</returns>
      <param name="entitySet">참조된 요소가 상주하고 있는 엔터티 집합입니다.</param>
      <param name="keyValues">키 값을 제공하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />의 컬렉션입니다.이러한 식은 참조된 엔터티 형식의 키 속성과 개수, 형식 및 순서가 일치해야 합니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="entitySet" />이 null이거나, <paramref name="keyValues" />가 null이거나 null을 포함합니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="keyValues" />의 개수가 <paramref name="entitySet" />의 요소 형식에 의해 선언된 키 멤버의 개수와 일치하지 않거나, <paramref name="keyValues" />가 해당하는 키 멤버의 형식과 호환되지 않는 결과 형식이 있는 식을 포함합니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.CreateRef(System.Data.Entity.Core.Metadata.Edm.EntitySet,System.Data.Entity.Core.Common.CommandTrees.DbExpression[])">
      <summary>키 값을 기반으로 특정 엔터티에 대한 참조를 인코딩하는 새 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbRefExpression" />을 만듭니다.</summary>
      <returns>지정된 엔터티 집합에서 지정된 키 값을 사용하여 요소를 참조하는 새 DbRefExpression입니다.</returns>
      <param name="entitySet">참조된 요소가 상주하고 있는 엔터티 집합입니다.</param>
      <param name="keyValues">키 값을 제공하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />의 컬렉션입니다.이러한 식은 참조된 엔터티 형식의 키 속성과 개수, 형식 및 순서가 일치해야 합니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="entitySet" />이 null이거나, <paramref name="keyValues" />가 null이거나 null을 포함합니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="keyValues" />의 개수가 <paramref name="entitySet" />의 요소 형식에 의해 선언된 키 멤버의 개수와 일치하지 않거나, <paramref name="keyValues" />가 해당하는 키 멤버의 형식과 호환되지 않는 결과 형식이 있는 식을 포함합니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.CreateRef(System.Data.Entity.Core.Metadata.Edm.EntitySet,System.Data.Entity.Core.Metadata.Edm.EntityType,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
      <summary>키 값을 기반으로 지정된 형식의 특정 엔터티에 대한 참조를 인코딩하는 새 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbRefExpression" />을 만듭니다.</summary>
      <returns>지정된 엔터티 집합에서 지정된 키 값을 사용하여 요소를 참조하는 새 DbRefExpression입니다.</returns>
      <param name="entitySet">참조된 요소가 상주하고 있는 엔터티 집합입니다.</param>
      <param name="entityType">참조된 엔터티의 특정 형식입니다.이 형식은 엔터티 집합의 요소 형식과 동일한 계층 구조에 있는 엔터티 형식이어야 합니다.</param>
      <param name="keyValues">키 값을 제공하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />의 컬렉션입니다.이러한 식은 참조된 엔터티 형식의 키 속성과 개수, 형식 및 순서가 일치해야 합니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="entitySet" /> 또는 <paramref name="entityType" />이 null이거나, <paramref name="keyValues" />가 null이거나 null을 포함합니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="entityType" />이 <paramref name="entitySet" />의 요소 형식과 동일한 계층 구조(하위 형식, 상위 형식 또는 같은 형식)의 형식이 아닙니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="keyValues" />의 개수가 <paramref name="entitySet" />의 요소 형식에 의해 선언된 키 멤버의 개수와 일치하지 않거나, <paramref name="keyValues" />가 해당하는 키 멤버의 형식과 호환되지 않는 결과 형식이 있는 식을 포함합니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.CreateRef(System.Data.Entity.Core.Metadata.Edm.EntitySet,System.Data.Entity.Core.Metadata.Edm.EntityType,System.Data.Entity.Core.Common.CommandTrees.DbExpression[])">
      <summary>키 값을 기반으로 지정된 형식의 특정 엔터티에 대한 참조를 인코딩하는 새 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbRefExpression" />을 만듭니다.</summary>
      <returns>지정된 엔터티 집합에서 지정된 키 값을 사용하여 요소를 참조하는 새 DbRefExpression입니다.</returns>
      <param name="entitySet">참조된 요소가 상주하고 있는 엔터티 집합입니다.</param>
      <param name="entityType">참조된 엔터티의 특정 형식입니다.이 형식은 엔터티 집합의 요소 형식과 동일한 계층 구조에 있는 엔터티 형식이어야 합니다.</param>
      <param name="keyValues">키 값을 제공하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />의 컬렉션입니다.이러한 식은 참조된 엔터티 형식의 키 속성과 개수, 형식 및 순서가 일치해야 합니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="entitySet" /> 또는 <paramref name="entityType" />이 null이거나, <paramref name="keyValues" />가 null이거나 null을 포함합니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="entityType" />이 <paramref name="entitySet" />의 요소 형식과 동일한 형식 계층 구조(하위 형식, 상위 형식 또는 같은 형식)의 형식이 아닙니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="keyValues" />의 개수가 <paramref name="entitySet" />의 요소 형식에 의해 선언된 키 멤버의 개수와 일치하지 않거나, <paramref name="keyValues" />가 해당하는 키 멤버의 형식과 호환되지 않는 결과 형식이 있는 식을 포함합니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.CrossApply(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Collections.Generic.KeyValuePair{System.String,System.Data.Entity.Core.Common.CommandTrees.DbExpression}})">
      <summary>지정된 입력 집합의 각 요소에 대해 주어진 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression" /> 식을 한 번씩 계산하고 해당 입력 및 apply 열로 행 컬렉션을 생성하는 새 <paramref name="apply" />을 만듭니다.<paramref name="apply" />가 빈 집합으로 계산되는 행은 포함되지 않습니다.</summary>
      <returns>지정된 입력 및 적용 바인딩과 CrossApply의 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" />를 사용하는 새 DbApplyExpression입니다.</returns>
      <param name="source">입력 집합을 지정하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />입니다. </param>
      <param name="apply">입력 집합의 각 멤버에 대해 한 번씩 확인할 논리를 지정하는 메서드입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="apply" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="source" />에 컬렉션 결과 형식이 없습니다.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="apply" />의 결과에 null인 이름이나 식이 포함되어 있습니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="apply" />의 결과에 식 바인딩에서 유효하지 않은 이름이나 식이 포함되어 있습니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.CrossApply(System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding)">
      <summary>지정된 입력 집합의 각 요소에 대해 주어진 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression" /> 식을 한 번씩 계산하고 해당 입력 및 apply 열로 행 컬렉션을 생성하는 새 <paramref name="apply" />을 만듭니다.<paramref name="apply" />가 빈 집합으로 계산되는 행은 포함되지 않습니다.</summary>
      <returns>지정된 입력 및 적용 바인딩과 CrossApply의 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" />를 사용하는 새 DbApplyExpression입니다.</returns>
      <param name="input">입력 집합을 지정하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" />입니다.</param>
      <param name="apply">입력 집합의 각 멤버에 대해 한 번씩 확인할 논리를 지정하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 또는 <paramref name="apply" />가 null입니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.CrossJoin(System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding})">
      <summary>입력 식 바인딩의 목록으로 지정된 집합을 무조건 조인하는 새 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbCrossJoinExpression" />을 만듭니다.</summary>
      <returns>입력 집합의 무조건 조인을 나타내는 CrossJoin의 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" />를 사용하는 새 DbCrossJoinExpression입니다.</returns>
      <param name="inputs">입력 집합을 지정하는 식 바인딩의 목록입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="inputs" />가 null이거나 null을 포함합니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="inputs" />에 두 개 미만의 식 바인딩 포함되어 있습니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Deref(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>참조 식에 따라 특정 엔터티를 검색하는 새 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbDerefExpression" />을 만듭니다.</summary>
      <returns>지정된 엔터티를 검색하는 새 DbDerefExpression입니다.</returns>
      <param name="argument">참조를 제공하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />입니다.이 식에는 참조 형식이 있어야 합니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argument" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="argument" />에 참조 결과 형식이 없습니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Distinct(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>지정된 집합 인수에서 중복 항목을 제거하는 새 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbDistinctExpression" />을 만듭니다.</summary>
      <returns>지정된 집합 인수에 적용된 고유 작업을 나타내는 새 DbDistinctExpression입니다.</returns>
      <param name="argument">고유 작업을 수행할 집합을 정의하는 식입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argument" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="argument" />에 참조 결과 형식이 없습니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Divide(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>왼쪽 인수를 오른쪽 인수로 나누는 새 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression" />을 만듭니다.</summary>
      <returns>나누기 작업을 나타내는 새 DbArithmeticExpression입니다.</returns>
      <param name="left">왼쪽 인수를 지정하는 식입니다.</param>
      <param name="right">오른쪽 인수를 지정하는 식입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 또는 <paramref name="right" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="left" /> 및 <paramref name="right" />에 공통적인 숫자 결과 형식이 존재하지 않습니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Element(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>집합을 singleton으로 변환하는 새 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbElementExpression" />을 만듭니다.</summary>
      <returns>집합 인수가 singleton으로 변환되는 것을 나타내는 DbElementExpression입니다.</returns>
      <param name="argument">입력 집합을 지정하는 식입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argument" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="argument" />에 참조 결과 형식이 없습니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Equal(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>왼쪽 인수와 오른쪽 인수가 같은지 비교하는 새 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression" />을 만듭니다.</summary>
      <returns>같음 비교를 나타내는 새 DbComparisonExpression입니다.</returns>
      <param name="left">왼쪽 인수를 지정하는 식입니다.</param>
      <param name="right">오른쪽 인수를 지정하는 식입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 또는 <paramref name="right" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="left" /> 및 <paramref name="right" />에 공통적인 숫자 결과 형식이 존재하지 않습니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Except(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>왼쪽 집합 인수에서 오른쪽 집합 인수를 빼는 새 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExceptExpression" />을 만듭니다.</summary>
      <returns>오른쪽 인수와 왼쪽 인수의 차이를 나타내는 새로운 DbExceptExpression입니다.</returns>
      <param name="left">왼쪽 집합 인수를 정의하는 식입니다.</param>
      <param name="right">오른쪽 집합 인수를 정의하는 식입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 또는 <paramref name="right" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="left" /> 및 <paramref name="right" />에 공통적인 숫자 결과 형식이 존재하지 않습니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Exists(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>지정된 집합 인수가 비어 있지 않은지 여부를 결정하는 새 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />을 만듭니다.</summary>
      <returns>지정된 인수를 사용하여 새로운 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbNotExpression" />에 적용되는 새 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbIsEmptyExpression" />입니다.</returns>
      <param name="argument">입력 집합을 지정하는 식입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argument" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="argument" />에 컬렉션 결과 형식이 없습니다.</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.False">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression" />을 Boolean 값 false를 이용하여 만듭니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Filter(System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>지정된 조건자를 사용하여 주어진 입력 집합의 요소를 필터링하는 새 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFilterExpression" />을 만듭니다.</summary>
      <returns>필터링된 집합을 생성하는 새 DbFilterExpression입니다.</returns>
      <param name="input">입력 집합을 지정하는 식 바인딩입니다.</param>
      <param name="predicate">입력 집합의 각 멤버에 대해 평가할 조건자를 나타내는 식입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 또는 <paramref name="predicate" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="predicate" />에 부울 결과 형식이 없습니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.FullOuterJoin(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
      <summary>FullOuterJoin을 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression" />로 사용하여 지정된 조인 조건에서 왼쪽 및 오른쪽 식에 지정된 집합을 조인하는 새 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" />을 만듭니다.</summary>
      <returns>지정된 조인 조건에서 왼쪽 및 오른쪽 입력 집합에 적용된 전체 외부 조인 작업을 나타내는, FullOuterJoin의 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" />를 사용하는 새 DbJoinExpression입니다. </returns>
      <param name="left">왼쪽 집합 인수를 지정하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />입니다.</param>
      <param name="right">오른쪽 집합 인수를 지정하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />입니다.</param>
      <param name="joinCondition">조인할 조건을 나타내는 메서드입니다.이 메서드는 조인 조건의 논리를 제공하는 Boolean 결과 형식이 포함된 식을 생성해야 합니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" />, <paramref name="right" /> 또는 <paramref name="joinCondition" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="left" /> 또는 <paramref name="right" />에 컬렉션 결과 형식이 없습니다.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="joinCondition" />에서 생성된 식이 null입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="joinCondition" />에서 생성된 식에 부울 결과 형식이 없습니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.FullOuterJoin(System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>FullOuterJoin을 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" />로 사용하여 지정된 조인 조건에서 왼쪽 및 오른쪽 식 바인딩에 지정된 집합을 조인하는 새 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression" />을 만듭니다.</summary>
      <returns>지정된 조인 조건에서 왼쪽 및 오른쪽 입력 집합에 적용된 전체 외부 조인 작업을 나타내는, FullOuterJoin의 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" />를 사용하는 새 DbJoinExpression입니다.</returns>
      <param name="left">왼쪽 집합 인수를 지정하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" />입니다.</param>
      <param name="right">오른쪽 집합 인수를 지정하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" />입니다.</param>
      <param name="joinCondition">조인할 조건을 지정하는 식입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" />, <paramref name="right" /> 또는 <paramref name="joinCondition" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="joinCondition" />에 부울 결과 형식이 없습니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.GetEntityRef(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>구조적 형식의 지정된 엔터티에 대한 참조를 검색하는 새 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbEntityRefExpression" />을 만듭니다.</summary>
      <returns>지정된 엔터티에 대한 참조를 검색하는 새 DbEntityRefExpression입니다.</returns>
      <param name="argument">엔터티를 제공하는 식입니다.이 식의 결과 형식은 엔터티 형식이어야 합니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argument" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="argument" />에 엔터티 결과 형식이 없습니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.GetRefKey(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>구조적 형식의 지정된 참조에 대한 키 값을 검색하는 새 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbRefKeyExpression" />을 만듭니다.</summary>
      <returns>지정된 참조의 키 값을 검색하는 새 DbRefKeyExpression입니다.</returns>
      <param name="argument">참조를 제공하는 식입니다.이 식에는 엔터티 요소 형식이 포함된 참조 형식이 있어야 합니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argument" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="argument" />에 엔터티 결과 형식이 없습니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.GreaterThan(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>왼쪽 인수가 오른쪽 인수보다 큰지 여부를 결정하는 새 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression" />을 만듭니다.</summary>
      <returns>보다 큼 비교를 나타내는 새 DbComparisonExpression입니다.</returns>
      <param name="left">왼쪽 인수를 지정하는 식입니다.</param>
      <param name="right">오른쪽 인수를 지정하는 식입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 또는 <paramref name="right" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="left" /> 및 <paramref name="right" />에 순서를 비교할 수 있는 공통적인 결과 형식이 존재하지 않습니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.GreaterThanOrEqual(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>왼쪽 인수가 오른쪽 인수보다 크거나 같은지 여부를 결정하는 새 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression" />을 만듭니다.</summary>
      <returns>크거나 같음 비교를 나타내는 새 DbComparisonExpression입니다.</returns>
      <param name="left">왼쪽 인수를 지정하는 식입니다.</param>
      <param name="right">오른쪽 인수를 지정하는 식입니다.</param>
      <exception cref="T:System.ArgumentNullException">left 또는 right가 null입니다.</exception>
      <exception cref="T:System.ArgumentException">left 및 right에 순서를 비교할 수 있는 공통적인 결과 형식이 존재하지 않습니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.GroupAggregate(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>지정된 인수에 대해 새 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbGroupAggregate" />를 만듭니다.</summary>
      <returns>주어진 인수에 의해 참조되는 그룹의 요소를 나타내는 새로운 그룹 집계입니다.</returns>
      <param name="argument">중첩 작업을 수행할 인수</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argument" />가 null입니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.GroupBind(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>생성된 변수 및 그룹 변수 이름을 사용하여 지정된 식을 바인딩하는 새 그룹 식 바인딩을 만듭니다.</summary>
      <returns>지정된 식과 생성된 변수 이름 및 그룹 변수 이름을 사용하는 새 그룹 식 바인딩입니다.</returns>
      <param name="input">바인딩할 식입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" />이 null입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="input" />에 컬렉션 결과 형식이 없습니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.GroupBindAs(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.String,System.String)">
      <summary>지정된 변수 이름 및 그룹 변수 이름을 사용하여 주어진 식을 바인딩하는 새 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding" />을 만듭니다.</summary>
      <returns>지정된 식, 변수 이름 및 그룹 변수 이름을 사용하는 새 그룹 식 바인딩입니다.</returns>
      <param name="input">바인딩할 식입니다.</param>
      <param name="varName">바인딩에 사용할 변수 이름입니다.</param>
      <param name="groupVarName">새 그룹 식 바인딩이 group-by 식에서 사용되는 경우 그룹을 참조하는 데 사용할 변수 이름입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" />, <paramref name="varName" /> 또는 <paramref name="groupVarName" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="input" />에 컬렉션 결과 형식이 없습니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.GroupBy(System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Data.Entity.Core.Common.CommandTrees.DbExpression}},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Data.Entity.Core.Common.CommandTrees.DbAggregate}})">
      <summary>지정된 그룹 키에 따라 입력 집합의 요소를 그룹화하고 지정된 집계를 적용하는 새 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbGroupByExpression" />을 만듭니다.</summary>
      <returns>지정된 입력 집합, 그룹화 키 및 집계를 사용하는 새 DbGroupByExpression입니다.</returns>
      <param name="input">입력 집합을 지정하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding" />입니다.</param>
      <param name="keys">그룹 열을 정의하는 문자열-식 쌍의 목록입니다.</param>
      <param name="aggregates">적용할 집계를 지정하는 식의 목록입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" />, <paramref name="keys" /> 또는 <paramref name="aggregates" />가 null이거나, <paramref name="keys" />에 null 키 열 이름 또는 식이 포함되어 있거나, <paramref name="aggregates" />에 null 집계 열 이름 또는 집계가 포함되어 있습니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="keys" />와 <paramref name="aggregates" />가 둘 다 비어 있거나, 잘못되었거나 중복된 열 이름이 지정되었습니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.In(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Collections.Generic.IList{System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression})">
      <summary>지정된 식의 결과가 지정된 목록에 있는 상수 식의 결과와 일치하는지 확인하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbInExpression" />을 만듭니다.</summary>
      <returns>DbConstantExpression 목록이 비어 있지 않으면 지정된 인수가 있는 새 DbInExpression이고, 그렇지 않으면 false 상수 식입니다.</returns>
      <param name="expression">일치하는지 확인할 DbExpression입니다.</param>
      <param name="list">일치 여부를 테스트할 DbConstantExpression의 목록입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 또는 <paramref name="list" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expression" />의 결과 형식이 <paramref name="list" />에 있는 식의 결과 형식과 다릅니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.InnerJoin(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
      <summary>InnerJoin을 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression" />로 사용하여 지정된 조인 조건에서 왼쪽 및 오른쪽 식에 지정된 집합을 조인하는 새 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" />을 만듭니다.</summary>
      <returns>지정된 조인 조건에서 왼쪽 및 오른쪽 입력 집합에 적용된 내부 조인 작업을 나타내는, InnerJoin의 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" />를 사용하는 새 DbJoinExpression입니다.</returns>
      <param name="left">왼쪽 집합 인수를 지정하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />입니다.</param>
      <param name="right">오른쪽 집합 인수를 지정하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />입니다.</param>
      <param name="joinCondition">조인할 조건을 나타내는 메서드입니다.이 메서드는 조인 조건의 논리를 제공하는 Boolean 결과 형식이 포함된 식을 생성해야 합니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" />, <paramref name="right" /> 또는 <paramref name="joinCondition" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="left" /> 또는 <paramref name="right" />에 컬렉션 결과 형식이 없습니다.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="joinCondition" />에서 생성된 식이 null입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="joinCondition" />에서 생성된 식에 부울 결과 형식이 없습니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.InnerJoin(System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>InnerJoin을 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression" />로 사용하여 지정된 조인 조건에서 왼쪽 및 오른쪽 식에 지정된 집합을 조인하는 새 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" />을 만듭니다.</summary>
      <returns>지정된 조인 조건에서 왼쪽 및 오른쪽 입력 집합에 적용된 내부 조인 작업을 나타내는, InnerJoin의 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" />를 사용하는 새 DbJoinExpression입니다.</returns>
      <param name="left">왼쪽 집합 인수를 지정하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" />입니다.</param>
      <param name="right">오른쪽 집합 인수를 지정하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" />입니다.</param>
      <param name="joinCondition">조인할 조건을 지정하는 식입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" />, <paramref name="right" /> 또는 <paramref name="joinCondition" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="joinCondition" />에 부울 결과 형식이 없습니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Intersect(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>왼쪽 및 오른쪽 집합 인수의 교집합을 계산하는 새 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbIntersectExpression" />을 만듭니다.</summary>
      <returns>왼쪽 및 오른쪽 인수의 교집합을 나타내는 새 DbIntersectExpression입니다.</returns>
      <param name="left">왼쪽 집합 인수를 정의하는 식입니다.</param>
      <param name="right">오른쪽 집합 인수를 정의하는 식입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 또는 right가 <paramref name="null" />입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="left" /> 및 <paramref name="right" />에 공통적인 컬렉션 결과 형식이 존재하지 않습니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Invoke(System.Data.Entity.Core.Common.CommandTrees.DbLambda,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
      <summary>지정된 람다 함수를 지정된 인수에 적용하는 것을 나타내는 새 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLambdaExpression" />을 만듭니다.</summary>
      <returns>람다 함수 적용을 나타내는 새 DbLambdaExpression입니다.</returns>
      <param name="lambda">적용할 람다 함수를 나타내는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLambda" /> 인스턴스입니다.</param>
      <param name="arguments">인수를 제공하는 식 목록입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="lambda" />이 null이거나, <paramref name="arguments" />가 null이거나 null을 포함합니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="arguments" />의 개수가 <paramref name="lambda" />에서 선언된 변수의 수와 같지 않거나 <paramref name="arguments" />에 해당 변수 형식과 같지 않거나 해당 변수 형식으로 승격할 수 없는 결과 형식의 식이 포함되어 있습니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Invoke(System.Data.Entity.Core.Common.CommandTrees.DbLambda,System.Data.Entity.Core.Common.CommandTrees.DbExpression[])">
      <summary>지정된 람다 함수를 지정된 인수에 적용하는 것을 나타내는 새 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLambdaExpression" />을 만듭니다.</summary>
      <returns>람다 함수 적용을 나타내는 새 DbLambdaExpression입니다.</returns>
      <param name="lambda">적용할 람다 함수를 나타내는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLambda" /> 인스턴스입니다.</param>
      <param name="arguments">인수를 제공하는 식입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="lambda" />이 null이거나, <paramref name="arguments" />가 null이거나 null을 포함합니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="arguments" />의 개수가 <paramref name="lambda" />에서 선언된 변수의 수와 같지 않거나 <paramref name="arguments" />에 해당 변수 형식과 같지 않거나 해당 변수 형식으로 승격할 수 없는 결과 형식의 식이 포함되어 있습니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Invoke(System.Data.Entity.Core.Metadata.Edm.EdmFunction,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
      <summary>주어진 인수를 사용하여 지정된 함수를 호출하는 것을 나타내는 새 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />을 만듭니다.</summary>
      <returns>함수 호출을 나타내는 새 DbFunctionExpression입니다.</returns>
      <param name="function">호출할 함수의 메타데이터입니다.</param>
      <param name="arguments">함수에 인수를 제공하는 식 목록입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" />이 null이거나, <paramref name="arguments" />가 null이거나 null을 포함합니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="arguments" />의 개수가 <paramref name="function" />에서 선언된 변수의 수와 같지 않거나 <paramref name="arguments" />에 해당 변수 형식과 같지 않거나 해당 변수 형식으로 승격할 수 없는 결과 형식의 식이 포함되어 있습니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Invoke(System.Data.Entity.Core.Metadata.Edm.EdmFunction,System.Data.Entity.Core.Common.CommandTrees.DbExpression[])">
      <summary>주어진 인수를 사용하여 지정된 함수를 호출하는 것을 나타내는 새 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />을 만듭니다.</summary>
      <returns>함수 호출을 나타내는 새 DbFunctionExpression입니다.</returns>
      <param name="function">호출할 함수의 메타데이터입니다.</param>
      <param name="arguments">함수에 인수를 제공하는 식입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" />이 null이거나, <paramref name="arguments" />가 null이거나 null을 포함합니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="arguments" />의 개수가 <paramref name="function" />에서 선언된 변수의 수와 같지 않거나 <paramref name="arguments" />에 해당 변수 형식과 같지 않거나 해당 변수 형식으로 승격할 수 없는 결과 형식의 식이 포함되어 있습니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.IsEmpty(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>지정된 집합 인수가 비어 있지 않은지 여부를 결정하는 새 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbIsEmptyExpression" />을 만듭니다.</summary>
      <returns>지정된 인수를 사용하는 새 DbIsEmptyExpression입니다.</returns>
      <param name="argument">입력 집합을 지정하는 식입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argument" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="argument" />에 컬렉션 결과 형식이 없습니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.IsNull(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>지정된 인수가 null인지 여부를 결정하는 새 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbIsNullExpression" />을 만듭니다.</summary>
      <returns>지정된 인수를 사용하는 새 DbIsNullExpression입니다.</returns>
      <param name="argument">인수를 지정하는 식입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argument" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="argument" />에 컬렉션 결과 형식이 있습니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.IsOf(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Metadata.Edm.TypeUsage)">
      <summary>주어진 인수가 지정된 형식인지 하위 형식인지 여부를 결정하는 새 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbIsOfExpression" />을 만듭니다.</summary>
      <returns>지정된 인스턴스 및 형식과 DbExpressionKind IsOf를 사용하는 새 DbIsOfExpression입니다.</returns>
      <param name="argument">인스턴스를 지정하는 식입니다.</param>
      <param name="type">인스턴스의 결과 형식을 비교할 형식을 지정하는 형식 메타데이터입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argument" /> 또는 <paramref name="type" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" />이 <paramref name="argument" />의 결과 형식과 같은 형식 계층 구조에 있지 않습니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.IsOfOnly(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Metadata.Edm.TypeUsage)">
      <summary>주어진 인수가 지정된 형식일 뿐이며 하위 형식이 아닌지 여부를 결정하는 새 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbIsOfExpression" /> 식을 만듭니다.</summary>
      <returns>지정된 인스턴스 및 형식과 DbExpressionKind IsOfOnly를 사용하는 새 DbIsOfExpression입니다.</returns>
      <param name="argument">인스턴스를 지정하는 식입니다.</param>
      <param name="type">인스턴스의 결과 형식을 비교할 형식을 지정하는 형식 메타데이터입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argument" /> 또는 <paramref name="type" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" />이 <paramref name="argument" />의 결과 형식과 같은 형식 계층 구조에 있지 않습니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Join(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression},System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
      <summary>InnerJoin을 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" />로 사용하여 지정된 외부 및 내부 키 간의 일치 조건에서 외부 및 내부 식에 지정된 집합을 조인하는 새 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression" />을 만듭니다.</summary>
      <returns>외부 및 내부 키 값이 같은지 비교하는 조인 조건에서 왼쪽 및 오른쪽 입력 집합에 적용된 내부 조인 작업을 나타내는, InnerJoin의 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" />를 사용하는 새 DbJoinExpression입니다.</returns>
      <param name="outer">외부 집합 인수를 지정하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />입니다.</param>
      <param name="inner">내부 집합 인수를 지정하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />입니다.</param>
      <param name="outerKey">외부 키 값이 외부 집합의 요소에서 파생되는 방법을 지정하는 메서드입니다.</param>
      <param name="innerKey">내부 키 값이 내부 집합의 요소에서 파생되는 방법을 지정하는 메서드입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="outer" />, <paramref name="inner" />, <paramref name="outerKey" /> 또는 <paramref name="innerKey" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="outerKey" /> 또는 <paramref name="innerKey" />에 컬렉션 결과 형식이 없습니다.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="outerKey" /> 또는 <paramref name="innerKey" />에서 생성된 식이 null입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="outerKey" /> 또는 <paramref name="innerKey" />에서 생성된 식이 같은지 여부를 비교할 수 없습니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Join``1(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression},System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression},System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,``0})">
      <summary>InnerJoin을 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" />로 사용하여 지정된 외부 및 내부 키 간의 일치 조건에서 조인되는 외부 및 내부 식에 지정된 집합에 대해 지정된 선택기를 투영하는 새 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression" />을 만듭니다.</summary>
      <returns>지정된 선택기를 프로젝션으로 사용하고 새로운 DbJoinExpression을 입력으로 사용하는 새 DbProjectExpression입니다.입력 DbJoinExpression이 InnerJoin의 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" />와 함께 만들어집니다. 여기서 InnerJoin은 외부 및 내부 키 값이 같은지를 비교하는 조인 조건에서 왼쪽 및 오른쪽 입력 집합에 적용되는 내부 조인 작업을 나타냅니다.</returns>
      <param name="outer">외부 집합 인수를 지정하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />입니다.</param>
      <param name="inner">내부 집합 인수를 지정하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />입니다.</param>
      <param name="outerKey">외부 키 값이 외부 집합의 요소에서 파생되는 방법을 지정하는 메서드입니다.</param>
      <param name="innerKey">내부 키 값이 내부 집합의 요소에서 파생되는 방법을 지정하는 메서드입니다.</param>
      <param name="selector">결과 집합의 요소가 내부 및 외부 집합의 요소에서 파생되는 방법을 지정하는 메서드입니다.이 메서드는 조인과 호환되고 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />으로 확인될 수 있는 형식의 인스턴스를 생성해야 합니다.<paramref name="TSelector" />에 대한 호환성 요구 사항은 설명 단원에 나와 있습니다.</param>
      <typeparam name="TSelector">선택기의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="outer" />, <paramref name="inner" />, <paramref name="outerKey" />, <paramref name="innerKey" /> 또는 <paramref name="selector" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="outer" /> 또는 <paramref name="inner" />에 컬렉션 결과 형식이 없습니다.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="outerKey" /> 또는 <paramref name="innerKey" />에서 생성된 식이 null입니다.</exception>
      <exception cref="T:System.ArgumentNullException">DbExpression으로 변환한 후 <paramref name="selector" />의 결과가 null입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="outerKey" /> 및 <paramref name="innerKey" />에서 생성된 식이 같은지 확인할 수 있도록 호환되지 않습니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="selector" />의 결과가 SelectMany와 호환되지 않습니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Lambda(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression})">
      <summary>지정된 인라인 람다 함수 구현 및 형식 매개 변수를 사용하여 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLambda" />를 만듭니다.</summary>
      <returns>지정된 본문 및 정식 매개 변수를 사용하는 인라인 람다 함수를 설명하는 새 DbLambda입니다.</returns>
      <param name="body">람다 함수의 논리를 정의하는 식입니다.</param>
      <param name="variables">람다 함수에 대한 정식 매개 변수를 나타내는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression" /> 컬렉션입니다.이러한 변수는 <paramref name="body" /> 식에서 사용할 수 있습니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="variables" />가 null이거나 null을 포함하거나, <paramref name="body" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="variables" />에 변수 이름이 같은 요소가 두 개 이상 포함되어 있습니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Lambda(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression[])">
      <summary>지정된 인라인 람다 함수 구현 및 형식 매개 변수를 사용하여 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLambda" />를 만듭니다.</summary>
      <returns>지정된 본문 및 정식 매개 변수를 사용하는 인라인 람다 함수를 설명하는 새 DbLambda입니다.</returns>
      <param name="body">람다 함수의 논리를 정의하는 식입니다.</param>
      <param name="variables">람다 함수에 대한 정식 매개 변수를 나타내는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression" /> 컬렉션입니다.이러한 변수는 body 식에서 사용할 수 있습니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="variables" />가 null이거나 null을 포함하거나, <paramref name="body" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="variables" />에 변수 이름이 같은 요소가 두 개 이상 포함되어 있습니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.LeftOuterJoin(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
      <summary>LeftOuterJoin을 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression" />로 사용하여 지정된 조인 조건에서 왼쪽 및 오른쪽 식에 지정된 집합을 조인하는 새 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" />을 만듭니다.</summary>
      <returns>지정된 조인 조건에서 왼쪽 및 오른쪽 입력 집합에 적용된 왼쪽 우선 외부 조인 작업을 나타내는, LeftOuterJoin의 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" />를 사용하는 새 DbJoinExpression입니다.</returns>
      <param name="left">왼쪽 집합 인수를 지정하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />입니다.</param>
      <param name="right">오른쪽 집합 인수를 지정하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />입니다.</param>
      <param name="joinCondition">조인할 조건을 나타내는 메서드입니다.이 메서드는 조인 조건의 논리를 제공하는 Boolean 결과 형식이 포함된 식을 생성해야 합니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" />, <paramref name="right" /> 또는 <paramref name="joinCondition" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="left" /> 또는 <paramref name="right" />에 컬렉션 결과 형식이 없습니다.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="joinCondition" />에서 생성된 식이 null입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="joinCondition" />에서 생성된 식에 부울 결과 형식이 없습니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.LeftOuterJoin(System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>LeftOuterJoin을 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" />로 사용하여 지정된 조인 조건에서 왼쪽 및 오른쪽 식 바인딩에 지정된 집합을 조인하는 새 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression" />을 만듭니다.</summary>
      <returns>지정된 조인 조건에서 왼쪽 및 오른쪽 입력 집합에 적용된 왼쪽 우선 외부 조인 작업을 나타내는, LeftOuterJoin의 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" />를 사용하는 새 DbJoinExpression입니다.</returns>
      <param name="left">왼쪽 집합 인수를 지정하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" />입니다.</param>
      <param name="right">오른쪽 집합 인수를 지정하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" />입니다.</param>
      <param name="joinCondition">조인할 조건을 지정하는 식입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" />, <paramref name="right" /> 또는 <paramref name="joinCondition" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="joinCondition" />에 부울 결과 형식이 없습니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.LessThan(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>왼쪽 인수가 오른쪽 인수보다 작은지 여부를 결정하는 새 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression" />을 만듭니다.</summary>
      <returns>보다 작음 비교를 나타내는 새 DbComparisonExpression입니다.</returns>
      <param name="left">왼쪽 인수를 지정하는 식입니다.</param>
      <param name="right">오른쪽 인수를 지정하는 식입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 또는 <paramref name="right" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="left" /> 및 <paramref name="right" />에 순서를 비교할 수 있는 공통적인 결과 형식이 존재하지 않습니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.LessThanOrEqual(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>왼쪽 인수가 오른쪽 인수보다 작거나 같은지 여부를 결정하는 새 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression" />을 만듭니다.</summary>
      <returns>작거나 같음 비교를 나타내는 새 DbComparisonExpression입니다.</returns>
      <param name="left">왼쪽 인수를 지정하는 식입니다.</param>
      <param name="right">오른쪽 인수를 지정하는 식입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 또는 <paramref name="right" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="left" /> 및 <paramref name="right" />에 순서를 비교할 수 있는 공통적인 결과 형식이 존재하지 않습니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Like(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>지정된 입력 문자열을 주어진 패턴과 비교하는 새 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLikeExpression" />을 만듭니다.</summary>
      <returns>지정된 입력, 패턴 및 null 이스케이프를 사용하는 새 DbLikeExpression입니다.</returns>
      <param name="argument">입력 문자열을 지정하는 식입니다.</param>
      <param name="pattern">패턴 문자열을 지정하는 식입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argument" /> 또는 <paramref name="pattern" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="argument" /> 또는 <paramref name="pattern" />에 문자열 결과 형식이 없습니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Like(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>선택적 이스케이프를 사용하여 지정된 입력 문자열을 주어진 패턴과 비교하는 새 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLikeExpression" />을 만듭니다.</summary>
      <returns>지정된 입력, 패턴 및 이스케이프를 사용하는 새 DbLikeExpression입니다.</returns>
      <param name="argument">입력 문자열을 지정하는 식입니다.</param>
      <param name="pattern">패턴 문자열을 지정하는 식입니다.</param>
      <param name="escape">이스케이프 문자열을 지정하는 선택적 식입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argument" />, <paramref name="pattern" /> 또는 escape가 <paramref name="null" />입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="argument" />, <paramref name="pattern" /> 또는 escape에 문자열 결과 형식이 없습니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Limit(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>인수 컬렉션의 요소 수를 지정된 개수 제한 값으로 제한하는 새 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLimitExpression" /> 개체를 만듭니다.동급 결과는 출력에 포함되지 않습니다.</summary>
      <returns>동급 결과를 포함하지 않는 개수 제한 값 및 지정된 인수를 사용하는 새 DbLimitExpression입니다.</returns>
      <param name="argument">입력 컬렉션을 지정하는 식입니다.</param>
      <param name="count">제한 값을 지정하는 식입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argument" /> 또는 <paramref name="count" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="argument" />에 컬렉션 결과 형식 없거나, <paramref name="count" />에 64비트 정수 형식과 동일하거나 64비트 정수 형식으로 승격할 수 있는 결과 형식이 없습니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Minus(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>왼쪽 인수에서 오른쪽 인수를 빼는 새 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression" />을 만듭니다.</summary>
      <returns>빼기 작업을 나타내는 새 DbArithmeticExpression입니다.</returns>
      <param name="left">왼쪽 인수를 지정하는 식입니다.</param>
      <param name="right">오른쪽 인수를 지정하는 식입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 또는 <paramref name="right" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="left" /> 및 <paramref name="right" />에 순서를 비교할 수 있는 공통적인 결과 형식이 존재하지 않습니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Modulo(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>왼쪽 인수를 오른쪽 인수로 나눈 나머지를 계산하는 새 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression" />을 만듭니다.</summary>
      <returns>나머지 연산을 나타내는 새 DbArithmeticExpression입니다.</returns>
      <param name="left">왼쪽 인수를 지정하는 식입니다.</param>
      <param name="right">오른쪽 인수를 지정하는 식입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 또는 <paramref name="right" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="left" /> 및 <paramref name="right" />에 순서를 비교할 수 있는 공통적인 결과 형식이 존재하지 않습니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Multiply(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>왼쪽 인수를 오른쪽 인수와 곱하는 새 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression" />을 만듭니다.</summary>
      <returns>곱하기 연산을 나타내는 새 DbArithmeticExpression입니다.</returns>
      <param name="left">왼쪽 인수를 지정하는 식입니다.</param>
      <param name="right">오른쪽 인수를 지정하는 식입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 또는 <paramref name="right" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="left" /> 및 <paramref name="right" />에 순서를 비교할 수 있는 공통적인 결과 형식이 존재하지 않습니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Navigate(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Metadata.Edm.RelationshipEndMember,System.Data.Entity.Core.Metadata.Edm.RelationshipEndMember)">
      <summary>컴퍼지션이나 연결 관계의 탐색을 나타내는 새 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbRelationshipNavigationExpression" />을 만듭니다.</summary>
      <returns>지정된 탐색 소스 인스턴스에서 지정된 관계 형식의 지정된 시작 및 끝 관계 End에 대한 탐색을 나타내는 새 DbRelationshipNavigationExpression입니다.</returns>
      <param name="navigateFrom">탐색이 발생할 시작 인스턴스를 지정하는 식입니다.</param>
      <param name="fromEnd">탐색이 발생할 시작 관계의 End를 나타내는 속성의 메타데이터입니다.</param>
      <param name="toEnd">탐색이 발생할 끝 관계의 End를 나타내는 속성의 메타데이터입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="fromEnd" />, <paramref name="toEnd" /> 또는 <paramref name="NavigateForm" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="fromEnd" /> 및 <paramref name="toEnd" />를 동일한 관계 형식에서 선언하지 않았거나, <paramref name="navigateFrom" />에 <paramref name="fromEnd" />의 속성 형식과 호환되지 않는 결과 형식이 있습니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Navigate(System.Data.Entity.Core.Metadata.Edm.RelationshipType,System.String,System.String,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>컴퍼지션이나 연결 관계의 탐색을 나타내는 새 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbRelationshipNavigationExpression" />을 만듭니다.</summary>
      <returns>지정된 탐색 소스 인스턴스에서 지정된 관계 형식의 지정된 시작 및 끝 관계 End에 대한 탐색을 나타내는 새 DbRelationshipNavigationExpression입니다.</returns>
      <param name="type">관계를 나타내는 관계 형식의 메타데이터입니다.</param>
      <param name="fromEndName">탐색이 발생할 시작 관계의 End를 나타내는 관계 형식의 속성 이름입니다.</param>
      <param name="toEndName">탐색이 발생할 끝 관계의 End를 나타내는 관계 형식의 속성 이름입니다.</param>
      <param name="navigateFrom">탐색이 발생할 시작 인스턴스를 지정하는 식입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" />
        <paramref name="fromEndName" />, <paramref name="toEndName" /> 또는 <paramref name="NavigateForm" />이 null입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" />이 명령 트리의 메타데이터 작업 영역과 연결되어 있지 않거나, <paramref name="navigateFrom" />이 다른 명령 트리와 연결되어 있거나, <paramref name="type" />이 <paramref name="toEndName" /> 또는 <paramref name="fromEndName" />이라는 이름으로 관계 End 속성을 선언하지 않았거나, <paramref name="navigateFrom" />에 <paramref name="fromEndName" />과 호환되지 않는 결과 형식이 있습니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Negate(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>인수의 값을 부정하는 새 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression" />을 만듭니다.</summary>
      <returns>부정 연산을 나타내는 새 DbArithmeticExpression입니다.</returns>
      <param name="argument">인수를 지정하는 식입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argument" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="argument" />의 숫자 결과 형식이 존재하지 않습니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.New(System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
      <summary>새 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression" />를 만듭니다.형식 인수가 컬렉션 형식이면 인수는 컬렉션의 요소를 지정합니다.그렇지 않으면 인수가 새 인스턴스에서 속성 또는 열 값으로 사용됩니다.</summary>
      <returns>지정된 형식 및 인수를 사용하는 새 DbNewInstanceExpression입니다.</returns>
      <param name="instanceType">새 인스턴스의 형식입니다.</param>
      <param name="arguments">인스턴스의 형식에 따라 해석된, 새 인스턴스의 값을 지정하는 식입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="instanceType" /> 또는 <paramref name="arguments" />가 null이거나, <paramref name="arguments" />에 null이 포함되어 있습니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="arguments" />가 비어 있거나, 포함된 식의 결과 형식이 <paramref name="instanceType" />의 요구 사항과 일치하지 않습니다(자세한 내용은 설명 단원 참조).</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.New(System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Common.CommandTrees.DbExpression[])">
      <summary>새 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression" />를 만듭니다.형식 인수가 컬렉션 형식이면 인수는 컬렉션의 요소를 지정합니다.그렇지 않으면 인수가 새 인스턴스에서 속성 또는 열 값으로 사용됩니다.</summary>
      <returns>지정된 형식 및 인수를 사용하는 새 DbNewInstanceExpression입니다.</returns>
      <param name="instanceType">새 인스턴스의 형식입니다.</param>
      <param name="arguments">인스턴스의 형식에 따라 해석된, 새 인스턴스의 값을 지정하는 식입니다.</param>
      <exception cref="T:System.ArgumentNullException">instanceTypeargumentsarguments</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="instanceType" /> 또는 <paramref name="arguments" />가 null이거나, <paramref name="arguments" />에 null이 포함되어 있습니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.NewCollection(System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
      <summary>지정된 요소를 포함하는 컬렉션을 생성하는 새 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression" />을 만듭니다.컬렉션의 형식은 요소의 기본 형식을 기반으로 합니다.기본 요소 형식이 없으면 예외가 throw됩니다.</summary>
      <returns>지정된 컬렉션 형식 및 인수를 사용하는 새 DbNewInstanceExpression입니다.</returns>
      <param name="elements">컬렉션의 요소를 제공하는 식 목록</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="elements" />가 null이거나 null을 포함합니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="elements" />가 비어 있거나 공통의 결과 형식이 없는 식을 포함합니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.NewCollection(System.Data.Entity.Core.Common.CommandTrees.DbExpression[])">
      <summary>지정된 요소를 포함하는 컬렉션을 생성하는 새 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression" />을 만듭니다.컬렉션의 형식은 요소의 기본 형식을 기반으로 합니다.기본 요소 형식이 없으면 예외가 throw됩니다.</summary>
      <returns>지정된 컬렉션 형식 및 인수를 사용하는 새 DbNewInstanceExpression입니다.</returns>
      <param name="elements">컬렉션의 요소를 제공하는 식 목록</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="elements" />가 null이거나 null을 포함합니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="elements" />가 비어 있거나 공통의 결과 형식이 없는 식을 포함합니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.NewEmptyCollection(System.Data.Entity.Core.Metadata.Edm.TypeUsage)">
      <summary>지정된 컬렉션 형식의 빈 컬렉션을 생성하는 새 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression" />을 만듭니다.</summary>
      <returns>지정된 컬렉션 형식 및 비어 있는 Arguments 목록을 사용하는 새 DbNewInstanceExpression입니다.</returns>
      <param name="collectionType">생성할 컬렉션의 형식 메타데이터</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collectionType" />이 null입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="collectionType" />이 컬렉션 형식이 아닙니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.NewRow(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Data.Entity.Core.Common.CommandTrees.DbExpression}})">
      <summary>지정된 이름이 있는 열과 주어진 값을 지정된 식으로 생성하는 새 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression" />을 만듭니다.</summary>
      <returns>행의 생성을 나타내는 새 DbNewInstanceExpression입니다.</returns>
      <param name="columnValues">행의 구조와 값을 정의하는 문자열-DbExpression 키-값 쌍의 목록입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="columnValues" />가 null이거나 null 열 이름 또는 식이 있는 요소를 포함합니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="columnValues" />가 비어 있거나, 중복되거나 잘못된 열 이름을 포함합니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Not(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>지정된 인수의 논리 부정 연산을 수행하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbNotExpression" />을 만듭니다.</summary>
      <returns>지정된 인수를 사용하는 새 DbNotExpression입니다.</returns>
      <param name="argument">인수를 지정하는 부울 식입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argument" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentException">argument에 부울 결과 형식이 없습니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.NotEqual(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>왼쪽 인수와 오른쪽 인수가 같지 않은지 비교하는 새 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression" />을 만듭니다.</summary>
      <returns>같지 않음 비교를 나타내는 새 DbComparisonExpression입니다.</returns>
      <param name="left">왼쪽 인수를 지정하는 식입니다.</param>
      <param name="right">오른쪽 인수를 지정하는 식입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 또는 <paramref name="right" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="left" /> 및 <paramref name="right" />에 같은지 여부를 비교할 수 있는 공통적인 결과 형식이 존재하지 않습니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Null(System.Data.Entity.Core.Metadata.Edm.TypeUsage)">
      <summary>형식화된 null 값을 나타내는 새 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbNullExpression" />을 만듭니다.</summary>
      <returns>DbNullExpression의 인스턴스입니다.</returns>
      <param name="nullType">null 값의 형식입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="nullType" />이 null입니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.OfType(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Metadata.Edm.TypeUsage)">
      <summary>주어진 입력 집합에서 지정된 형식으로 된 요소로 구성된 집합을 생성하는 새 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbOfTypeExpression" />을 만듭니다.</summary>
      <returns>지정된 집합 인수 및 형식과 <see cref="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.OfType" />의 ExpressionKind를 사용하는 새 DbOfTypeExpression입니다.</returns>
      <param name="argument">입력 집합을 지정하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />입니다.</param>
      <param name="type">결과 집합에 포함되기 위해 입력 집합의 요소가 일치해야 하는 형식의 형식 메타데이터입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argument" /> 또는 <paramref name="type" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="argument" />에 컬렉션 결과 형식이 없거나, <paramref name="type" />이 <paramref name="argument" />에 대한 컬렉션 결과 형식의 요소 형식과 동일한 형식 계층 구조에 있는 형식이 아닙니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.OfTypeOnly(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Metadata.Edm.TypeUsage)">
      <summary>주어진 입력 집합에서 지정된 바로 그 형식으로 된 요소로 구성된 집합을 생성하는 새 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbOfTypeExpression" />을 만듭니다.</summary>
      <returns>지정된 집합 인수 및 형식과 <see cref="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.OfTypeOnly" />의 ExpressionKind를 사용하는 새 DbOfTypeExpression입니다.</returns>
      <param name="argument">입력 집합을 지정하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />입니다.</param>
      <param name="type">결과 집합에 포함되기 위해 입력 집합의 요소가 정확히 일치해야 하는 형식의 형식 메타데이터입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argument" /> 또는 <paramref name="type" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="argument" />에 컬렉션 결과 형식이 없거나, <paramref name="type" />이 <paramref name="argument" />에 대한 컬렉션 결과 형식의 요소 형식과 동일한 형식 계층 구조에 있는 형식이 아닙니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Or(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>왼쪽 및 오른쪽 인수의 논리 Or 연산을 수행하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbOrExpression" />을 만듭니다. </summary>
      <returns> 지정된 인수를 사용하는 새 DbOrExpression입니다. </returns>
      <param name="left"> 왼쪽 인수를 지정하는 부울 식입니다. </param>
      <param name="right"> 오른쪽 인수를 지정하는 부울 식입니다. </param>
      <exception cref="T:System.ArgumentNullException">leftright</exception>
      <exception cref="T:System.ArgumentException">leftright</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.OrderBy(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
      <summary>오름차순 정렬 순서와 기본 데이터 정렬을 사용하여 지정된 정렬 키를 기준으로 주어진 입력 집합을 정렬하는 새 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortExpression" />을 만듭니다.</summary>
      <returns>순서 기준 작업을 나타내는 새 DbSortExpression입니다.</returns>
      <param name="source">입력 집합을 지정하는 식입니다.</param>
      <param name="sortKey">지정된 입력 집합의 멤버에서 정렬 키 식을 파생시키는 방법을 지정하는 메서드입니다.이 메서드는 정렬 키 정의를 제공하는 순서 비교 가능 결과 형식이 포함된 식을 생성해야 합니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="sortKey" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sortKey" />에서 생성된 식이 null입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="source" />에 컬렉션 결과 형식이 없습니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="sortKey" />에서 생성된 식에 순서를 비교할 수 있는 결과 형식이 없습니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.OrderBy(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression},System.String)">
      <summary>오름차순 정렬 순서와 지정된 데이터 정렬을 사용하여 지정된 정렬 키를 기준으로 주어진 입력 집합을 정렬하는 새 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortExpression" />을 만듭니다.</summary>
      <returns>순서 기준 작업을 나타내는 새 DbSortExpression입니다.</returns>
      <param name="source">입력 집합을 지정하는 식입니다.</param>
      <param name="sortKey">지정된 입력 집합의 멤버에서 정렬 키 식을 파생시키는 방법을 지정하는 메서드입니다.이 메서드는 정렬 키 정의를 제공하는 순서 비교 가능 결과 형식이 포함된 식을 생성해야 합니다.</param>
      <param name="collation">정렬에 사용할 데이터 정렬</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />, <paramref name="sortKey" /> 또는 <paramref name="collation" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sortKey" />에서 생성된 식이 null입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="source" />에 컬렉션 결과 형식이 없습니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="sortKey" />에서 생성된 식에 순서를 비교할 수 있는 문자열 결과 형식이 없습니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="collation" />이 비어 있거나 공백 문자만 포함합니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.OrderByDescending(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
      <summary>내림차순 정렬 순서와 기본 데이터 정렬을 사용하여 지정된 정렬 키를 기준으로 주어진 입력 집합을 정렬하는 새 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortExpression" />을 만듭니다.</summary>
      <returns>순서 기준 작업을 나타내는 새 DbSortExpression입니다.</returns>
      <param name="source">입력 집합을 지정하는 식입니다.</param>
      <param name="sortKey">지정된 입력 집합의 멤버에서 정렬 키 식을 파생시키는 방법을 지정하는 메서드입니다.이 메서드는 정렬 키 정의를 제공하는 순서 비교 가능 결과 형식이 포함된 식을 생성해야 합니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="sortKey" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sortKey" />에서 생성된 식이 null입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="source" />에 컬렉션 결과 형식이 없습니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="sortKey" />에서 생성된 식에 순서를 비교할 수 있는 문자열 결과 형식이 없습니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.OrderByDescending(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression},System.String)">
      <summary>내림차순 정렬 순서와 기본 데이터 정렬을 사용하여 지정된 정렬 키를 기준으로 주어진 입력 집합을 정렬하는 새 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortExpression" />을 만듭니다.</summary>
      <returns>순서 기준 작업을 나타내는 새 DbSortExpression입니다.</returns>
      <param name="source">입력 집합을 지정하는 식입니다.</param>
      <param name="sortKey">지정된 입력 집합의 멤버에서 정렬 키 식을 파생시키는 방법을 지정하는 메서드입니다.이 메서드는 정렬 키 정의를 제공하는 순서 비교 가능 결과 형식이 포함된 식을 생성해야 합니다.</param>
      <param name="collation">정렬에 사용할 데이터 정렬</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />, <paramref name="sortKey" /> 또는 <paramref name="collation" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sortKey" />에서 생성된 식이 null입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="source" />에 컬렉션 결과 형식이 없습니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="sortKey" />에서 생성된 식에 순서를 비교할 수 있는 문자열 결과 형식이 없습니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="collation" />이 비어 있거나 공백 문자만 포함합니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.OuterApply(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Collections.Generic.KeyValuePair{System.String,System.Data.Entity.Core.Common.CommandTrees.DbExpression}})">
      <summary>지정된 입력 집합의 각 요소에 대해 주어진 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression" /> 식을 한 번씩 계산하고 해당 입력 및 apply 열로 행 컬렉션을 생성하는 새 <paramref name="apply" />을 만듭니다.<paramref name="apply" />가 빈 집합으로 계산되는 행의 apply 열 값이 null입니다.</summary>
      <returns>지정된 입력 및 적용 바인딩과 OuterApply의 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" />를 사용하는 새 DbApplyExpression입니다.</returns>
      <param name="source">입력 집합을 지정하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />입니다.</param>
      <param name="apply">입력 집합의 각 멤버에 대해 한 번씩 확인할 논리를 지정하는 메서드입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="apply" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="source" />에 컬렉션 결과 형식이 없습니다.</exception>
      <exception cref="T:System.ArgumentNullException">apply의 결과에 null인 이름이나 식이 포함되어 있습니다.</exception>
      <exception cref="T:System.ArgumentException">apply의 결과에 식 바인딩에서 유효하지 않은 이름이나 식이 포함되어 있습니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.OuterApply(System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding)">
      <summary>지정된 입력 집합의 각 요소에 대해 주어진 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression" /> 식을 한 번씩 계산하고 해당 입력 및 apply 열로 행 컬렉션을 생성하는 새 <paramref name="apply" />을 만듭니다.<paramref name="apply" />가 빈 집합으로 계산되는 행의 apply 열 값이 null입니다.</summary>
      <returns>지정된 입력 및 적용 바인딩과 OuterApply의 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" />를 사용하는 새 DbApplyExpression입니다.</returns>
      <param name="input">입력 집합을 지정하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" />입니다.</param>
      <param name="apply">입력 집합의 각 멤버에 대해 한 번씩 확인할 논리를 지정하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 또는 <paramref name="apply" />가 null입니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Parameter(System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.String)">
      <summary>지정된 이름 및 형식으로 매개 변수를 참조하는 새 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbParameterReferenceExpression" />을 만듭니다.</summary>
      <returns>지정된 이름 및 형식의 매개 변수에 대한 참조를 나타내는 DbParameterReferenceExpression입니다. 이 식의 결과 형식은 <paramref name="type" />과 같습니다.</returns>
      <param name="type">참조된 매개 변수 형식</param>
      <param name="name">참조된 매개 변수 이름</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Plus(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>왼쪽 인수를 오른쪽 인수에 더하는 새 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression" />을 만듭니다.</summary>
      <returns>더하기 연산을 나타내는 새 DbArithmeticExpression입니다.</returns>
      <param name="left">왼쪽 인수를 지정하는 식입니다.</param>
      <param name="right">오른쪽 인수를 지정하는 식입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 또는 <paramref name="right" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentException">left 및 right에 공통적인 숫자 결과 형식이 존재하지 않습니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Project(System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>주어진 입력 집합에 대해 지정된 식을 투영하는 새 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression" />을 만듭니다.</summary>
      <returns>프로젝션 작업을 나타내는 새 DbProjectExpression입니다.</returns>
      <param name="input">입력 집합을 지정하는 식 바인딩입니다.</param>
      <param name="projection">집합에 대해 투영할 식입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 또는 <paramref name="projection" />가 null입니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Property(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Metadata.Edm.EdmProperty)">
      <summary>지정된 속성의 검색을 나타내는 새 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression" />을 만듭니다.</summary>
      <returns>속성 검색을 나타내는 새 DbPropertyExpression입니다.</returns>
      <param name="instance">속성을 검색할 인스턴스입니다.속성이 정적인 경우 null일 수 있습니다.</param>
      <param name="propertyMetadata">검색할 속성의 메타데이터입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyMetadata" />가 null이거나 <paramref name="instance" />가 null이고 속성이 정적 속성이 아닙니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Property(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Metadata.Edm.NavigationProperty)">
      <summary>지정된 탐색 속성의 검색을 나타내는 새 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression" />을 만듭니다.</summary>
      <returns>탐색 속성 검색을 나타내는 새 DbPropertyExpression입니다.</returns>
      <param name="instance">탐색 속성을 검색할 인스턴스입니다.</param>
      <param name="navigationProperty">검색할 탐색 속성의 메타데이터입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="navigationProperty" />가 null이거나 <paramref name="instance" />가 null입니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Property(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Metadata.Edm.RelationshipEndMember)">
      <summary>지정된 관계 End 멤버의 검색을 나타내는 새 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression" />을 만듭니다.</summary>
      <returns>관계 End 멤버 검색을 나타내는 새 DbPropertyExpression입니다.</returns>
      <param name="instance">관계 End 멤버를 검색할 인스턴스입니다.</param>
      <param name="relationshipEnd">검색할 관계 End 멤버의 메타데이터입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="relationshipEnd" />가 null이거나 <paramref name="instance" />가 null이고 속성이 정적 속성이 아닙니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Property(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.String)">
      <summary>주어진 인스턴스에서 지정된 이름을 가진 인스턴스 속성의 검색을 나타내는 새 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression" />을 만듭니다.</summary>
      <returns>속성 검색을 나타내는 새 DbPropertyExpression</returns>
      <param name="instance">속성을 검색할 인스턴스입니다.</param>
      <param name="propertyName">검색할 속성의 이름입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyName" />가 null이거나 <paramref name="instance" />가 null이고 속성이 정적 속성이 아닙니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">지정된 이름을 가진 속성이 <paramref name="instance" />의 형식에 의해 선언되지 않았습니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.RefFromKey(System.Data.Entity.Core.Metadata.Edm.EntitySet,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>키 값을 기반으로 특정 엔터티에 대한 참조를 인코딩하는 새 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbRefExpression" />을 만듭니다.</summary>
      <returns>지정된 엔터티 집합에서 지정된 키 값을 사용하여 요소를 참조하는 새 DbRefExpression입니다.</returns>
      <param name="entitySet">참조된 요소가 상주하고 있는 엔터티 집합입니다.</param>
      <param name="keyRow">참조된 엔터티 형식의 키 속성과 개수, 형식 및 순서가 일치하는 열이 있는 레코드를 생성하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="entitySet" /> 또는 <paramref name="keyRow" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentException">keyRow</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.RefFromKey(System.Data.Entity.Core.Metadata.Edm.EntitySet,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Metadata.Edm.EntityType)">
      <summary>키 값을 기반으로 특정 엔터티에 대한 참조를 인코딩하는 새 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbRefExpression" />을 만듭니다.</summary>
      <returns>지정된 엔터티 집합에서 지정된 키 값을 사용하여 요소를 참조하는 새 DbRefExpression입니다.</returns>
      <param name="entitySet">참조된 요소가 상주하고 있는 엔터티 집합입니다.</param>
      <param name="keyRow">참조된 엔터티 형식의 키 속성과 개수, 형식 및 순서가 일치하는 열이 있는 레코드를 생성하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />입니다.</param>
      <param name="entityType">참조가 참조해야 하는 엔터티의 형식입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="entitySet" />, <paramref name="keyRow" /> 또는 <paramref name="entityType" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="entityType" />이 엔터티 집합의 엔터티 형식과 동일한 형식 계층 구조에 있지 않거나, <paramref name="keyRow" />에 참조된 엔터티 집합의 엔터티 형식에 대한 키 속성과 일치하는 레코드 결과 형식이 없습니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Scan(System.Data.Entity.Core.Metadata.Edm.EntitySetBase)">
      <summary>지정된 엔터티 또는 관계 집합을 참조하는 새 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbScanExpression" />을 만듭니다.</summary>
      <returns>지정된 엔터티 또는 관계 집합 기반의 새 DbScanExpression입니다.</returns>
      <param name="targetSet">참조할 엔터티 또는 관계 집합의 메타데이터입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="targetSet" />이 null입니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Select``1(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,``0})">
      <summary>주어진 입력 집합에 대해 지정된 식을 선택하는 새 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression" />을 만듭니다.</summary>
      <returns> 선택 작업을 나타내는 새 DbProjectExpression입니다. </returns>
      <param name="source">입력 집합을 지정하는 식입니다.</param>
      <param name="projection">지정된 입력 집합의 멤버에서 투영된 식을 파생시키는 방법을 지정하는 메서드입니다.이 메서드는 Select와 호환되고 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />으로 확인될 수 있는 형식의 인스턴스를 생성해야 합니다.<paramref name="TProjection" />에 대한 호환성 요구 사항은 설명 단원에 나와 있습니다.</param>
      <typeparam name="TProjection">
        <paramref name="projection" />의 메서드 결과 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="projection" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="projection" />의 결과가 null입니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.SelectMany(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
      <summary>지정된 입력 집합의 각 요소에 대해 주어진 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression" /> 식을 한 번씩 계산하고 해당 입력 및 apply 열로 행 컬렉션을 생성하는 새 <paramref name="apply" />을 만듭니다.<paramref name="apply" />가 빈 집합으로 계산되는 행은 포함되지 않습니다.그러면 각 행에서 지정된 <paramref name="selector" />를 선택하여 전체 결과 컬렉션을 생성하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression" />이 만들어집니다.</summary>
      <returns>지정된 입력 및 적용 바인딩과 CrossApply의 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" />를 사용하는 새로운 DbApplyExpression에서 apply 열을 선택하는 새 DbProjectExpression입니다.</returns>
      <param name="source">입력 집합을 지정하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />입니다.</param>
      <param name="apply">입력 집합의 각 멤버에 대해 한 번씩 확인할 논리를 나타내는 메서드입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="apply" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="apply" />에서 생성된 식이 null입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="source" />에 컬렉션 결과 형식이 없습니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="apply" />에서 생성된 식에 컬렉션 형식이 없습니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.SelectMany``1(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression},System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,``0})">
      <summary>지정된 입력 집합의 각 요소에 대해 주어진 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression" /> 식을 한 번씩 계산하고 해당 입력 및 apply 열로 행 컬렉션을 생성하는 새 <paramref name="apply" />을 만듭니다.<paramref name="apply" />가 빈 집합으로 계산되는 행은 포함되지 않습니다.그러면 각 행에서 지정된 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression" />를 선택하여 전체 결과 컬렉션을 생성하는 <paramref name="selector" />이 만들어집니다.</summary>
      <returns>지정된 입력 및 적용 바인딩과 CrossApply의 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" />를 사용하는 새로운 DbApplyExpression에서 지정된 선택기의 결과를 선택하는 새 DbProjectExpression입니다.</returns>
      <param name="source">입력 집합을 지정하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />입니다.</param>
      <param name="apply">입력 집합의 각 멤버에 대해 한 번씩 확인할 논리를 나타내는 메서드입니다.</param>
      <param name="selector">결과 집합의 요소가 입력 및 apply 집합의 요소에서 파생되는 방법을 지정하는 메서드입니다.이 메서드는 SelectMany와 호환되고 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />으로 확인될 수 있는 형식의 인스턴스를 생성해야 합니다.<paramref name="TSelector" />에 대한 호환성 요구 사항은 설명 단원에 나와 있습니다.</param>
      <typeparam name="TSelector">
        <paramref name="selector" />의 메서드 결과 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />, <paramref name="apply" /> 또는 <paramref name="selector" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="apply" />에서 생성된 식이 null입니다.</exception>
      <exception cref="T:System.ArgumentNullException">DbExpression으로 변환될 때 <paramref name="selector" />의 결과가 null입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="source" />에 컬렉션 결과 형식이 없습니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="apply" />에서 생성된 식에 컬렉션 형식이 없습니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Skip(System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Common.CommandTrees.DbSortClause},System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>지정된 수의 요소를 건너뛰기 전에 지정된 정렬 사양을 기준으로 입력 집합을 정렬하는 새 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSkipExpression" />을 만듭니다.</summary>
      <returns>건너뛰기 작업을 나타내는 새 DbSkipExpression입니다.</returns>
      <param name="input">입력 집합을 지정하는 식 바인딩입니다.</param>
      <param name="sortOrder">입력 집합의 요소를 정렬하는 방법을 결정하는 정렬 사양의 목록입니다.</param>
      <param name="count">정렬된 집합에서 건너뛸 요소 수를 지정하는 식입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" />, <paramref name="sortOrder" /> 또는 <paramref name="count" />가 null이거나, <paramref name="sortOrder" />가 null을 포함합니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="sortOrder" />가 비어 있거나, <paramref name="count" />가 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression" /> 또는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbParameterReferenceExpression" />이 아니거나 64비트 정수 형식과 같지 않거나 64비트 정수 형식으로 승격할 수 없는 결과 형식을 갖고 있습니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Skip(System.Data.Entity.Core.Common.CommandTrees.DbSortExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>정렬된 입력 집합에서 지정된 수의 요소를 건너뛰는 새 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSkipExpression" />을 만듭니다.</summary>
      <returns>건너뛰기 작업을 나타내는 새 DbSkipExpression입니다.</returns>
      <param name="argument">정렬된 입력 집합을 지정하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortExpression" />입니다.</param>
      <param name="count">정렬된 집합에서 건너뛸 요소 수를 지정하는 식입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argument" /> 또는 <paramref name="count" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="Count" />가 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression" /> 또는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbParameterReferenceExpression" />이 아니거나, 64비트 정수 형식과 같지 않거나 64비트 정수 형식으로 승격할 수 없는 결과 형식을 갖고 있습니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Sort(System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Common.CommandTrees.DbSortClause})">
      <summary>지정된 정렬 사양을 기준으로 주어진 입력 집합을 정렬하는 새 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortExpression" />을 만듭니다.</summary>
      <returns>정렬 작업을 나타내는 새 DbSortExpression입니다.</returns>
      <param name="input">입력 집합을 지정하는 식 바인딩입니다.</param>
      <param name="sortOrder">입력 집합의 요소를 정렬하는 방법을 결정하는 정렬 사양의 목록입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 또는 <paramref name="sortOrder" />가 null이거나, <paramref name="sortOrder" />에 null이 포함되어 있습니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="sortOrder" />가 비어 있습니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Take(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>인수 컬렉션의 요소 수를 지정된 개수 제한 값으로 제한하는 새 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLimitExpression" /> 개체를 만듭니다.동급 결과는 출력에 포함되지 않습니다.</summary>
      <returns>동급 결과를 포함하지 않는 개수 제한 값 및 지정된 인수를 사용하는 새 DbLimitExpression입니다.</returns>
      <param name="argument">입력 컬렉션을 지정하는 식입니다.</param>
      <param name="count">제한 값을 지정하는 식입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argument" /> 또는 <paramref name="count" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="argument" />에 컬렉션 결과 형식 없거나, <paramref name="count" />에 64비트 정수 형식과 동일하거나 64비트 정수 형식으로 승격할 수 있는 결과 형식이 없습니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.ThenBy(System.Data.Entity.Core.Common.CommandTrees.DbSortExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
      <summary>기본 데이터 정렬 및 오름차순의 지정된 정렬 키와 함께 지정된 순서 입력 집합의 정렬 순서를 포함하는 정렬 순서를 사용하여 새 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortExpression" />을 만듭니다.</summary>
      <returns>새로운 전체 순서별 작업을 나타내는 새 DbSortExpression입니다.</returns>
      <param name="source">순서가 지정된 입력 집합을 지정하는 DbSortExpression입니다.</param>
      <param name="sortKey">지정된 입력 집합의 멤버에서 추가적인 정렬 키 식을 파생시키는 방법을 지정하는 메서드입니다.이 메서드는 정렬 키 정의를 제공하는 순서 비교 가능 결과 형식이 포함된 식을 생성해야 합니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="sortKey" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sortKey" />에서 생성된 식이 null입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="source" />에 컬렉션 결과 형식이 없습니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="sortKey" />에서 생성된 식에 순서를 비교할 수 있는 결과 형식이 없습니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.ThenBy(System.Data.Entity.Core.Common.CommandTrees.DbSortExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression},System.String)">
      <summary>지정된 데이터 정렬 및 오름차순의 지정된 정렬 키와 함께 지정된 순서 입력 집합의 정렬 순서를 포함하는 정렬 순서를 사용하여 새 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortExpression" />을 만듭니다.</summary>
      <returns>새로운 전체 순서별 작업을 나타내는 새 DbSortExpression입니다.</returns>
      <param name="source">순서가 지정된 입력 집합을 지정하는 DbSortExpression입니다.</param>
      <param name="sortKey">지정된 입력 집합의 멤버에서 추가적인 정렬 키 식을 파생시키는 방법을 지정하는 메서드입니다.이 메서드는 정렬 키 정의를 제공하는 순서 비교 가능 결과 형식이 포함된 식을 생성해야 합니다.</param>
      <param name="collation">정렬에 사용할 데이터 정렬</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />, <paramref name="sortKey" /> 또는 <paramref name="collation" />이 null입니다.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sortKey" />에서 생성된 식이 null입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="source" />에 컬렉션 결과 형식이 없습니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="sortKey" />에서 생성된 식에 순서를 비교할 수 있는 문자열 결과 형식이 없습니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="collation" />이 비어 있거나 공백 문자만 포함합니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.ThenByDescending(System.Data.Entity.Core.Common.CommandTrees.DbSortExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
      <summary>기본 데이터 정렬 및 내림차순의 지정된 정렬 키와 함께 지정된 순서 입력 집합의 정렬 순서를 포함하는 정렬 순서를 사용하여 새 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortExpression" />을 만듭니다.</summary>
      <returns>새로운 전체 순서별 작업을 나타내는 새 DbSortExpression입니다.</returns>
      <param name="source">순서가 지정된 입력 집합을 지정하는 DbSortExpression입니다.</param>
      <param name="sortKey">지정된 입력 집합의 멤버에서 추가적인 정렬 키 식을 파생시키는 방법을 지정하는 메서드입니다.이 메서드는 정렬 키 정의를 제공하는 순서 비교 가능 결과 형식이 포함된 식을 생성해야 합니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="sortKey" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sortKey" />에서 생성된 식이 null입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="source" />에 컬렉션 결과 형식이 없습니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="sortKey" />에서 생성된 식에 순서를 비교할 수 있는 결과 형식이 없습니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.ThenByDescending(System.Data.Entity.Core.Common.CommandTrees.DbSortExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression},System.String)">
      <summary>지정된 데이터 정렬 및 내림차순의 지정된 정렬 키와 함께 지정된 순서 입력 집합의 정렬 순서를 포함하는 정렬 순서를 사용하여 새 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortExpression" />을 만듭니다.</summary>
      <returns>새로운 전체 순서별 작업을 나타내는 새 DbSortExpression입니다.</returns>
      <param name="source">순서가 지정된 입력 집합을 지정하는 DbSortExpression입니다.</param>
      <param name="sortKey">지정된 입력 집합의 멤버에서 추가적인 정렬 키 식을 파생시키는 방법을 지정하는 메서드입니다.이 메서드는 정렬 키 정의를 제공하는 순서 비교 가능 결과 형식이 포함된 식을 생성해야 합니다.</param>
      <param name="collation">정렬에 사용할 데이터 정렬</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />, <paramref name="sortKey" /> 또는 <paramref name="collation" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sortKey" />에서 생성된 식이 null입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="source" />에 컬렉션 결과 형식이 없습니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="sortKey" />에서 생성된 식에 순서를 비교할 수 있는 문자열 결과 형식이 없습니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="collation" />이 비어 있거나 공백 문자만 포함합니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.ToSortClause(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>오름차순 정렬 순서와 기본 데이터 정렬을 사용하여 새 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortClause" />를 만듭니다.</summary>
      <returns>지정된 정렬 키 및 오름차순 정렬 순서를 사용하는 새 정렬 절입니다.</returns>
      <param name="key">정렬 키를 정의하는 식</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="key" />에 순서를 비교할 수 있는 결과 형식이 없습니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.ToSortClause(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.String)">
      <summary>오름차순 정렬 순서와 지정된 데이터 정렬을 사용하여 새 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortClause" />를 만듭니다.</summary>
      <returns>지정된 정렬 키 및 데이터 정렬과 오름차순 정렬 순서를 사용하는 새 정렬 절</returns>
      <param name="key">정렬 키를 정의하는 식</param>
      <param name="collation">정렬에 사용할 데이터 정렬</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="collation" />이 비어 있거나 공백 문자만 포함합니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="key" />에 순서를 비교할 수 있는 결과 형식이 없습니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.ToSortClauseDescending(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>내림차순 정렬 순서와 기본 데이터 정렬을 사용하여 새 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortClause" />를 만듭니다.</summary>
      <returns>지정된 정렬 키 및 내림차순 정렬 순서를 사용하는 새 정렬 절</returns>
      <param name="key">정렬 키를 정의하는 식</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="key" />에 순서를 비교할 수 있는 결과 형식이 없습니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.ToSortClauseDescending(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.String)">
      <summary>내림차순 정렬 순서와 지정된 데이터 정렬을 사용하여 새 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortClause" />를 만듭니다.</summary>
      <returns>지정된 정렬 키 및 데이터 정렬과 내림차순 정렬 순서를 사용하는 새 정렬 절</returns>
      <param name="key">정렬 키를 정의하는 식</param>
      <param name="collation">정렬에 사용할 데이터 정렬</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="collation" />이 비어 있거나 공백 문자만 포함합니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="key" />에 순서를 비교할 수 있는 결과 형식이 없습니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.TreatAs(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Metadata.Edm.TypeUsage)">
      <summary>새 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbTreatExpression" />를 만듭니다.</summary>
      <returns>지정된 인수 및 형식을 사용하는 새 DbTreatExpression입니다.</returns>
      <param name="argument">인스턴스를 지정하는 식입니다.</param>
      <param name="treatType">treat-as 형식의 형식 메타데이터입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argument" /> 또는 <paramref name="treatType" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="treatType" />이 <paramref name="argument" />의 결과 형식과 같은 형식 계층 구조에 있지 않습니다.</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.True">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression" />을 Boolean 값 true를 이용하여 만듭니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.UnaryMinus(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>인수의 값을 부정하는 새 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression" />을 만듭니다.</summary>
      <returns>부정 연산을 나타내는 새 DbArithmeticExpression입니다.</returns>
      <param name="argument">인수를 지정하는 식입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argument" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="argument" />의 숫자 결과 형식이 존재하지 않습니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Union(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>중복 항목을 제거하고 왼쪽 및 오른쪽 집합 인수의 합집합을 계산하는 새 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />을 만듭니다.</summary>
      <returns>중복 항목 없이 왼쪽 및 오른쪽 인수의 합집합을 계산하는 새 DbExpression입니다.</returns>
      <param name="left">왼쪽 집합 인수를 정의하는 식입니다.</param>
      <param name="right">오른쪽 집합 인수를 정의하는 식입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 또는 <paramref name="right" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="left" /> 및 <paramref name="right" />에 같은지 비교할 수 있는 요소 형식이 있는 공통적인 컬렉션 결과 형식이 존재하지 않습니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.UnionAll(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>왼쪽 및 오른쪽 집합 인수의 합집합을 계산하고 중복 항목을 제거하지 않는 새 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbUnionAllExpression" />을 만듭니다.</summary>
      <returns>중복 항목을 포함하여 왼쪽 및 오른쪽 인수의 합집합을 계산하는 새 DbUnionAllExpression입니다.</returns>
      <param name="left">왼쪽 집합 인수를 정의하는 식입니다.</param>
      <param name="right">오른쪽 집합 인수를 정의하는 식입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 또는 <paramref name="right" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="left" /> 및 <paramref name="right" />에 공통적인 컬렉션 결과 형식이 존재하지 않습니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Variable(System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.String)">
      <summary>지정된 이름 및 형식으로 변수를 참조하는 새 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression" />을 만듭니다.</summary>
      <returns>지정된 이름 및 형식의 변수에 대한 참조를 나타내는 DbVariableReferenceExpression입니다. 이 식의 결과 형식은 <paramref name="type" />과 같습니다.</returns>
      <param name="type">참조된 변수 형식</param>
      <param name="name">참조되는 변수 이름</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Where(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
      <summary>지정된 조건자를 사용하여 주어진 입력 집합의 요소를 필터링하는 새 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFilterExpression" />을 만듭니다.</summary>
      <returns>Any 작업을 나타내는 새 DbQuantifierExpression입니다.</returns>
      <param name="source">입력 집합을 지정하는 식입니다.</param>
      <param name="predicate">입력 집합의 각 멤버에 대해 평가할 조건자를 나타내는 메서드입니다.이 메서드는 조건자 논리를 제공하는 부울 결과 형식이 포함된 식을 생성해야 합니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 또는 <paramref name="predicate" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="predicate" />에서 생성된 식이 null입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="predicate" />에서 생성된 식에 부울 결과 형식이 없습니다.</exception>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions">
      <summary>정식 EDM 함수를 호출하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />을 생성하기 위한 API를 제공하고 이 API가 식 형식 자체에서 확장 메서드로 액세스될 수 있도록 허용합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Abs(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>결과 형식이 각각 숫자 형식이어야 하는 지정된 인수를 사용하여 정식 'Abs' 함수를 호출하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />을 만듭니다.식의 결과 형식은 <paramref name="value" />의 결과 형식과 같습니다.</summary>
      <returns>
        <paramref name="value" />의 절대 값을 반환하는 새 DbFunctionExpression입니다.</returns>
      <param name="value">숫자 값을 지정하는 식입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentException">정식 ‘Abs’ 함수의 오버로드가 <paramref name="value" />의 결과 형식을 가진 인수를 허용하지 않습니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddDays(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>결과 형식이 DateTime, DateTimeOffset 또는 Time 및 정수 형식이어야 하는 지정된 인수를 사용하여 정식 'AddDays' 함수를 호출하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />을 만듭니다.식의 결과 형식은 <paramref name="dateValue" />의 결과 형식과 같습니다.</summary>
      <returns>
        <paramref name="addValue" />로 지정된 일수를 <paramref name="dateValue" />로 지정된 값에 더하는 새 DbFunctionExpression입니다.</returns>
      <param name="dateValue">
        <paramref name="addValue" />를 더할 값을 지정하는 식입니다.</param>
      <param name="addValue">
        <paramref name="dateValue" />에 더할 일수를 지정하는 식입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dateValue" /> 또는 <paramref name="addValue" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentException">정식 ‘AddDays’ 함수의 오버로드가 <paramref name="dateValue" /> 및 <paramref name="addValue" />의 결과 형식을 가진 인수를 허용하지 않습니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddHours(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>결과 형식이 DateTime, DateTimeOffset 또는 Time 및 정수 형식이어야 하는 지정된 인수를 사용하여 정식 'AddHours' 함수를 호출하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />을 만듭니다.식의 결과 형식은 <paramref name="timeValue" />의 결과 형식과 같습니다.</summary>
      <returns>
        <paramref name="addValue" />로 지정된 시간을 <paramref name="timeValue" />로 지정된 값에 더하는 새 DbFunctionExpression입니다.</returns>
      <param name="timeValue">
        <paramref name="addValue" />를 더할 값을 지정하는 식입니다.</param>
      <param name="addValue">
        <paramref name="timeValue" />에 더할 시간을 지정하는 식입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="timeValue" /> 또는 <paramref name="addValue" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentException">정식 ‘AddHours’ 함수의 오버로드가 <paramref name="timeValue" /> 및 <paramref name="addValue" />의 결과 형식을 가진 인수를 허용하지 않습니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddMicroseconds(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>결과 형식이 DateTime, DateTimeOffset 또는 Time 및 정수 형식이어야 하는 지정된 인수를 사용하여 정식 'AddMicroseconds' 함수를 호출하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />을 만듭니다.식의 결과 형식은 <paramref name="timeValue" />의 결과 형식과 같습니다.</summary>
      <returns>
        <paramref name="addValue" />로 지정된 마이크로초를 <paramref name="timeValue" />로 지정된 값에 더하는 새 DbFunctionExpression입니다.</returns>
      <param name="timeValue">
        <paramref name="addValue" />를 더할 값을 지정하는 식입니다.</param>
      <param name="addValue">
        <paramref name="timeValue" />에 더할 마이크로초를 지정하는 식입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="timeValue" /> 또는 <paramref name="addValue" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentException">정식 ‘AddMicroseconds’ 함수의 오버로드가 <paramref name="timeValue" /> 및 <paramref name="addValue" />의 결과 형식을 가진 인수를 허용하지 않습니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddMilliseconds(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>결과 형식이 DateTime, DateTimeOffset 또는 Time 및 정수 형식이어야 하는 지정된 인수를 사용하여 정식 'AddMilliseconds' 함수를 호출하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />을 만듭니다.식의 결과 형식은 <paramref name="timeValue" />의 결과 형식과 같습니다.</summary>
      <returns>
        <paramref name="addValue" />로 지정된 밀리초를 <paramref name="timeValue" />로 지정된 값에 더하는 새 DbFunctionExpression입니다.</returns>
      <param name="timeValue">
        <paramref name="addValue" />를 더할 값을 지정하는 식입니다.</param>
      <param name="addValue">
        <paramref name="timeValue" />에 더할 밀리초를 지정하는 식입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="timeValue" /> 또는 <paramref name="addValue" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentException">정식 ‘AddMilliseconds’ 함수의 오버로드가 <paramref name="timeValue" /> 및 <paramref name="addValue" />의 결과 형식을 가진 인수를 허용하지 않습니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddMinutes(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>결과 형식이 DateTime, DateTimeOffset 또는 Time 및 정수 형식이어야 하는 지정된 인수를 사용하여 정식 'AddMinutes' 함수를 호출하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />을 만듭니다.식의 결과 형식은 <paramref name="timeValue" />의 결과 형식과 같습니다.</summary>
      <returns>
        <paramref name="addValue" />로 지정된 분을 <paramref name="timeValue" />로 지정된 값에 더하는 새 DbFunctionExpression입니다.</returns>
      <param name="timeValue">
        <paramref name="addValue" />를 더할 값을 지정하는 식입니다.</param>
      <param name="addValue">
        <paramref name="timeValue" />에 더할 분을 지정하는 식입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="timeValue" /> 또는 <paramref name="addValue" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentException">정식 'AddMinutes' 함수의 오버로드가 <paramref name="timeValue" /> 및 <paramref name="addValue" />의 결과 형식을 가진 인수를 허용하지 않습니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddMonths(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>결과 형식이 DateTime, DateTimeOffset 또는 Time 및 정수 형식이어야 하는 지정된 인수를 사용하여 정식 'AddMonths' 함수를 호출하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />을 만듭니다.식의 결과 형식은 <paramref name="dateValue" />의 결과 형식과 같습니다.</summary>
      <returns>
        <paramref name="addValue" />로 지정된 개월 수를 <paramref name="dateValue" />로 지정된 값에 더하는 새 DbFunctionExpression입니다.</returns>
      <param name="dateValue">
        <paramref name="addValue" />를 더할 값을 지정하는 식입니다.</param>
      <param name="addValue">
        <paramref name="dateValue" />에 더할 개월 수를 지정하는 식입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dateValue" /> 또는 <paramref name="addValue" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentException">정식 'AddMonths' 함수의 오버로드가 <paramref name="dateValue" /> 및 <paramref name="addValue" />의 결과 형식을 가진 인수를 허용하지 않습니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddNanoseconds(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>결과 형식이 DateTime, DateTimeOffset 또는 Time 및 정수 형식이어야 하는 지정된 인수를 사용하여 정식 'AddNanoseconds' 함수를 호출하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />을 만듭니다.식의 결과 형식은 <paramref name="timeValue" />의 결과 형식과 같습니다.</summary>
      <returns>
        <paramref name="addValue" />로 지정된 나노초를 <paramref name="timeValue" />로 지정된 값에 더하는 새 DbFunctionExpression입니다.</returns>
      <param name="timeValue">
        <paramref name="addValue" />를 더할 값을 지정하는 식입니다.</param>
      <param name="addValue">
        <paramref name="timeValue" />에 더할 나노초를 지정하는 식입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="timeValue" /> 또는 <paramref name="addValue" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentException">정식 ‘AddNanoseconds’ 함수의 오버로드가 <paramref name="timeValue" /> 및 <paramref name="addValue" />의 결과 형식을 가진 인수를 허용하지 않습니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddSeconds(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>결과 형식이 DateTime, DateTimeOffset 또는 Time 및 정수 형식이어야 하는 지정된 인수를 사용하여 정식 'AddSeconds' 함수를 호출하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />을 만듭니다.식의 결과 형식은 <paramref name="timeValue" />의 결과 형식과 같습니다.</summary>
      <returns>
        <paramref name="addValue" />로 지정된 초를 <paramref name="timeValue" />로 지정된 값에 더하는 새 DbFunctionExpression입니다.</returns>
      <param name="timeValue">
        <paramref name="addValue" />를 더할 값을 지정하는 식입니다.</param>
      <param name="addValue">
        <paramref name="timeValue" />에 더할 초를 지정하는 식입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="timeValue" /> 또는 <paramref name="addValue" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentException">정식 'AddSeconds' 함수의 오버로드가 <paramref name="timeValue" /> 및 <paramref name="addValue" />의 결과 형식을 가진 인수를 허용하지 않습니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddYears(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>결과 형식이 DateTime, DateTimeOffset 또는 Time 및 정수 형식이어야 하는 지정된 인수를 사용하여 정식 'AddYears' 함수를 호출하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />을 만듭니다.식의 결과 형식은 <paramref name="dateValue" />의 결과 형식과 같습니다.</summary>
      <returns>
        <paramref name="addValue" />로 지정된 연수를 <paramref name="dateValue" />로 지정된 값에 더하는 새 DbFunctionExpression입니다.</returns>
      <param name="dateValue">
        <paramref name="addValue" />를 더할 값을 지정하는 식입니다.</param>
      <param name="addValue">
        <paramref name="dateValue" />에 더할 연수를 지정하는 식입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dateValue" /> 또는 <paramref name="addValue" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentException">정식 'AddYears' 함수의 오버로드가 <paramref name="dateValue" /> 및 <paramref name="addValue" />의 결과 형식을 가진 인수를 허용하지 않습니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Average(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>지정된 컬렉션에 대해 정식 'Avg' 함수를 호출하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />을 만듭니다.식의 결과 형식은 컬렉션의 요소 형식과 같습니다.</summary>
      <returns>평균 값을 생성하는 새 DbFunctionExpression입니다.</returns>
      <param name="collection">평균 값을 계산할 컬렉션을 지정하는 식입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" />이 null입니다.</exception>
      <exception cref="T:System.ArgumentException">정식 'Avg' 함수의 오버로드가 <paramref name="collection" />의 결과 형식을 가진 인수를 허용하지 않습니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.BitwiseAnd(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>결과 형식이 동일한 정수 형식이어야 하는 지정된 인수를 사용하여 정식 'BitwiseAnd' 함수를 호출하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />을 만듭니다.식의 결과 형식은 이 형식과 같습니다.</summary>
      <returns>
        <paramref name="value1" /> 및 <paramref name="value2" />의 비트 AND를 수행하여 생성된 값을 반환하는 새 DbFunctionExpression입니다.</returns>
      <param name="value1">첫 번째 피연산자를 지정하는 식입니다.</param>
      <param name="value2">두 번째 피연산자를 지정하는 식입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value1" /> 또는 <paramref name="value2" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentException">정식 'BitwiseAnd' 함수의 오버로드가 <paramref name="value1" /> 및 <paramref name="value2" />의 결과 형식을 가진 인수를 허용하지 않습니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.BitwiseNot(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>결과 형식이 정수 형식이어야 하는 지정된 인수를 사용하여 정식 'BitwiseNot' 함수를 호출하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />을 만듭니다.식의 결과 형식은 이 형식과 같습니다.</summary>
      <returns>
        <paramref name="value" />의 비트 NOT을 수행하여 생성된 값을 반환하는 새 DbFunctionExpression입니다.</returns>
      <param name="value">첫 번째 피연산자를 지정하는 식입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentException">정식 'BitwiseNot' 함수의 오버로드가 <paramref name="value" />의 결과 형식을 가진 인수를 허용하지 않습니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.BitwiseOr(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>결과 형식이 동일한 정수 형식이어야 하는 지정된 인수를 사용하여 정식 'BitwiseOr' 함수를 호출하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />을 만듭니다.식의 결과 형식은 이 형식과 같습니다.</summary>
      <returns>
        <paramref name="value1" /> 및 <paramref name="value2" />의 비트 OR를 수행하여 생성된 값을 반환하는 새 DbFunctionExpression입니다.</returns>
      <param name="value1">첫 번째 피연산자를 지정하는 식입니다.</param>
      <param name="value2">두 번째 피연산자를 지정하는 식입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value1" /> 또는 <paramref name="value2" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentException">정식 'BitwiseOr' 함수의 오버로드가 <paramref name="value1" /> 및 <paramref name="value2" />의 결과 형식을 가진 인수를 허용하지 않습니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.BitwiseXor(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>결과 형식이 동일한 정수 형식이어야 하는 지정된 인수를 사용하여 정식 'BitwiseXor' 함수를 호출하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />을 만듭니다.식의 결과 형식은 이 형식과 같습니다.</summary>
      <returns>
        <paramref name="value1" /> 및 <paramref name="value2" />의 비트 XOR(배타적 OR)를 수행하여 생성된 값을 반환하는 새 DbFunctionExpression입니다.</returns>
      <param name="value1">첫 번째 피연산자를 지정하는 식입니다.</param>
      <param name="value2">두 번째 피연산자를 지정하는 식입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value1" /> 또는 <paramref name="value2" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentException">정식 'BitwiseXor' 함수의 오버로드가 <paramref name="value1" /> 및 <paramref name="value2" />의 결과 형식을 가진 인수를 허용하지 않습니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Ceiling(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>결과 형식이 각각 single, double 또는 decimal 형식이어야 하는 지정된 인수를 사용하여 정식 'Ceiling' 함수를 호출하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />을 만듭니다.식의 결과 형식은 <paramref name="value" />의 결과 형식과 같습니다.</summary>
      <returns>
        <paramref name="value" />보다 작지 않은 가장 작은 정수 값을 반환하는 새 DbFunctionExpression입니다.</returns>
      <param name="value">숫자 값을 지정하는 식입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentException">정식 'Ceiling' 함수의 오버로드가 <paramref name="value" />의 결과 형식을 가진 인수를 허용하지 않습니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Concat(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>결과 형식이 각각 문자열 형식이어야 하는 지정된 인수를 사용하여 정식 'Concat' 함수를 호출하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />을 만듭니다.식의 결과 형식은 문자열입니다.</summary>
      <returns>연결된 문자열을 생성하는 새 DbFunctionExpression입니다.</returns>
      <param name="string1">연결된 결과 문자열에서 첫 번째로 나타날 문자열을 지정하는 식입니다.</param>
      <param name="string2">연결된 결과 문자열에서 두 번째로 나타날 문자열을 지정하는 식입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="string1" /> 또는 <paramref name="string2" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentException">정식 'Concat' 함수의 오버로드가 <paramref name="string1" /> 및 <paramref name="string2" />의 결과 형식을 가진 인수를 허용하지 않습니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Contains(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>결과 형식이 각각 문자열 형식이어야 하는 지정된 인수를 사용하여 정식 'Contains' 함수를 호출하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />을 만듭니다.식의 결과 형식은 부울입니다.</summary>
      <returns>
        <paramref name="searchedForString" />이 <paramref name="searchedString" /> 안에 있는지 여부를 나타내는 부울 값을 반환하는 새 DbFunctionExpression입니다.</returns>
      <param name="searchedString">
        <paramref name="searchedForString" />이 있는지 검색할 문자열을 지정하는 식입니다.</param>
      <param name="searchedForString">
        <paramref name="searchedString" />에서 검색할 문자열을 지정하는 식입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="searchedString" /> 또는 <paramref name="searchedForString" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentException">정식 'Contains' 함수의 오버로드가 <paramref name="searchedString" /> 및 <paramref name="searchedForString" />의 결과 형식을 가진 인수를 허용하지 않습니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Count(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>지정된 컬렉션에 대해 정식 'Count' 함수를 호출하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />을 만듭니다.식의 결과 형식은 Edm.Int32입니다.</summary>
      <returns>개수 값을 생성하는 새 DbFunctionExpression입니다.</returns>
      <param name="collection">개수 값을 계산할 컬렉션을 지정하는 식입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" />이 null입니다.</exception>
      <exception cref="T:System.ArgumentException">정식 'Count' 함수의 오버로드가 <paramref name="collection" />의 결과 형식을 가진 인수를 허용하지 않습니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.CreateDateTime(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>지정된 인수를 사용하여 정식 'CreateDateTime' 함수를 호출하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />을 만듭니다.<paramref name="second" />의 결과 형식은 Edm.Double이어야 하지만 다른 모든 인수의 결과 형식은 Edm.Int32여야 합니다.식의 결과 형식은 Edm.DateTime입니다.</summary>
      <returns>지정된 값을 기반으로 새로운 DateTime을 반환하는 새 DbFunctionExpression입니다.</returns>
      <param name="year">새 DateTime 인스턴스에 연도 값을 제공하는 식입니다.</param>
      <param name="month">새 DateTime 인스턴스에 월 값을 제공하는 식입니다.</param>
      <param name="day">새 DateTime 인스턴스에 일 값을 제공하는 식입니다.</param>
      <param name="hour">새 DateTime 인스턴스에 시 값을 제공하는 식입니다.</param>
      <param name="minute">새 DateTime 인스턴스에 분 값을 제공하는 식입니다.</param>
      <param name="second">새 DateTime 인스턴스에 초 값을 제공하는 식입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="year" />, <paramref name="month" />, <paramref name="day" />, <paramref name="hour" />, <paramref name="minute" />, <paramref name="second" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentException">정식 'CreateDateTime' 함수의 오버로드가 <paramref name="year" />, <paramref name="month" />, <paramref name="day" />, <paramref name="hour" />, <paramref name="minute" /> 및 <paramref name="second" />의 결과 형식을 가진 인수를 허용하지 않습니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.CreateDateTimeOffset(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>지정된 인수를 사용하여 정식 'CreateDateTimeOffset' 함수를 호출하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />을 만듭니다.<paramref name="second" />의 결과 형식은 Edm.Double이어야 하지만 다른 모든 인수의 결과 형식은 Edm.Int32여야 합니다.식의 결과 형식은 Edm.DateTimeOffset입니다.</summary>
      <returns>지정된 값을 기반으로 새로운 DateTimeOffset을 반환하는 새 DbFunctionExpression입니다.</returns>
      <param name="year">새 DateTimeOffset 인스턴스에 연도 값을 제공하는 식입니다.</param>
      <param name="month">새 DateTimeOffset 인스턴스에 월 값을 제공하는 식입니다.</param>
      <param name="day">새 DateTimeOffset 인스턴스에 일 값을 제공하는 식입니다.</param>
      <param name="hour">새 DateTimeOffset 인스턴스에 시 값을 제공하는 식입니다.</param>
      <param name="minute">새 DateTimeOffset 인스턴스에 분 값을 제공하는 식입니다.</param>
      <param name="second">새 DateTimeOffset 인스턴스에 초 값을 제공하는 식입니다.</param>
      <param name="timeZoneOffset">새 DateTimeOffset 인스턴스에 표준 시간대 오프셋의 분 값을 제공하는 식입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="year" />, <paramref name="month" />, <paramref name="day" />, <paramref name="hour" />, <paramref name="minute" />, <paramref name="second" /> 또는 <paramref name="timeZoneOffset" />이 null입니다.</exception>
      <exception cref="T:System.ArgumentException">정식 'CreateDateTimeOffset' 함수의 오버로드가 <paramref name="year" />, <paramref name="month" />, <paramref name="day" />, <paramref name="hour" />, <paramref name="minute" />, <paramref name="second" /> 및 <paramref name="timeZoneOffset" />의 결과 형식을 가진 인수를 허용하지 않습니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.CreateTime(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>지정된 인수를 사용하여 정식 'CreateTime' 함수를 호출하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />을 만듭니다.<paramref name="second" />의 결과 형식은 Edm.Double이어야 하지만 다른 모든 인수의 결과 형식은 Edm.Int32여야 합니다.식의 결과 형식은 Edm.Time입니다.</summary>
      <returns>지정된 값을 기반으로 새로운 Time을 반환하는 새 DbFunctionExpression입니다.</returns>
      <param name="hour">새 DateTime 인스턴스에 시 값을 제공하는 식입니다.</param>
      <param name="minute">새 DateTime 인스턴스에 분 값을 제공하는 식입니다.</param>
      <param name="second">새 DateTime 인스턴스에 초 값을 제공하는 식입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="hour" />, <paramref name="minute" /> 또는 <paramref name="second" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentException">정식 'CreateTime' 함수의 오버로드가 <paramref name="hour" />, <paramref name="minute" /> 및 <paramref name="second" />의 결과 형식을 가진 인수를 허용하지 않습니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.CurrentDateTime">
      <summary>정식 'CurrentDateTime' 함수를 호출하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />을 만듭니다.</summary>
      <returns>현재 날짜와 시간을 Edm.DateTime 인스턴스로 반환하는 새 DbFunctionExpression입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.CurrentDateTimeOffset">
      <summary>정식 'CurrentDateTimeOffset' 함수를 호출하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />을 만듭니다.</summary>
      <returns>현재 날짜와 시간을 Edm.DateTimeOffset 인스턴스로 반환하는 새 DbFunctionExpression입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.CurrentUtcDateTime">
      <summary>정식 'CurrentUtcDateTime' 함수를 호출하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />을 만듭니다.</summary>
      <returns>현재 UTC 날짜와 시간을 Edm.DateTime 인스턴스로 반환하는 새 DbFunctionExpression입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Day(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>결과 형식이 DateTime 또는 DateTimeOffset이어야 하는 지정된 인수를 사용하여 정식 'Day' 함수를 호출하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />을 만듭니다.식의 결과 형식은 Edm.Int32입니다.</summary>
      <returns>
        <paramref name="dateValue" />에서 정수 일 값을 반환하는 새 DbFunctionExpression입니다.</returns>
      <param name="dateValue">일을 검색할 값을 지정하는 식입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dateValue" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentException">정식 'Day' 함수의 오버로드가 <paramref name="dateValue" />의 결과 형식을 가진 인수를 허용하지 않습니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DayOfYear(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>결과 형식이 DateTime 또는 DateTimeOffset이어야 하는 지정된 인수를 사용하여 정식 'DayOfYear' 함수를 호출하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />을 만듭니다.식의 결과 형식은 Edm.Int32입니다.</summary>
      <returns>
        <paramref name="dateValue" />에서 연도 값의 정수 일을 반환하는 새 DbFunctionExpression입니다.</returns>
      <param name="dateValue">연도 내의 일을 검색할 값을 지정하는 식입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dateValue" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentException">정식 'DayOfYear' 함수의 오버로드가 <paramref name="dateValue" />의 결과 형식을 가진 인수를 허용하지 않습니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffDays(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>결과 형식이 각각 DateTime 또는 DateTimeOffset이어야 하는 지정된 인수를 사용하여 정식 'DiffDays' 함수를 호출하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />을 만듭니다.<paramref name="dateValue1" />의 결과 형식은 <paramref name="dateValue2" />의 결과 형식과 일치해야 합니다.식의 결과 형식은 Edm.Int32입니다.</summary>
      <returns>
        <paramref name="dateValue1" /> 및 <paramref name="dateValue2" />와의 일 차이를 반환하는 새 DbFunctionExpression입니다.</returns>
      <param name="dateValue1">첫 번째 DateTime 또는 DateTimeOffset 값을 지정하는 식입니다.</param>
      <param name="dateValue2">
        <paramref name="dateValue1" />과의 일 차이를 계산할 DateTime 또는 DateTimeOffset을 지정하는 식입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dateValue1" /> 또는 <paramref name="dateValue2" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentException">정식 'DiffDays' 함수의 오버로드가 <paramref name="dateValue1" /> 및 <paramref name="dateValue2" />의 결과 형식을 가진 인수를 허용하지 않습니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffHours(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>결과 형식이 각각 DateTime, DateTimeOffset 또는 Time이어야 하는 지정된 인수를 사용하여 정식 'DiffHours' 함수를 호출하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />을 만듭니다.<paramref name="timeValue1" />의 결과 형식은 <paramref name="timeValue2" />의 결과 형식과 일치해야 합니다.식의 결과 형식은 Edm.Int32입니다.</summary>
      <returns>
        <paramref name="timeValue1" /> 및 <paramref name="timeValue2" />와의 시 차이를 반환하는 새 DbFunctionExpression입니다.</returns>
      <param name="timeValue1">첫 번째 DateTime, DateTimeOffset 또는 Time 값을 지정하는 식입니다.</param>
      <param name="timeValue2">
        <paramref name="timeValue1" />과의 시 차이를 계산할 DateTime, DateTimeOffset 또는 Time을 지정하는 식입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="timeValue1" /> 또는 <paramref name="timeValue2" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentException">정식 'DiffHours' 함수의 오버로드가 <paramref name="timeValue1" /> 및 <paramref name="timeValue2" />의 결과 형식을 가진 인수를 허용하지 않습니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffMicroseconds(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>결과 형식이 각각 DateTime, DateTimeOffset 또는 Time이어야 하는 지정된 인수를 사용하여 정식 'DiffMicroseconds' 함수를 호출하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />을 만듭니다.<paramref name="timeValue1" />의 결과 형식은 <paramref name="timeValue2" />의 결과 형식과 일치해야 합니다.식의 결과 형식은 Edm.Int32입니다.</summary>
      <returns>
        <paramref name="timeValue1" /> 및 <paramref name="timeValue2" />와의 마이크로초 차이를 반환하는 새 DbFunctionExpression입니다.</returns>
      <param name="timeValue1">첫 번째 DateTime, DateTimeOffset 또는 Time 값을 지정하는 식입니다.</param>
      <param name="timeValue2">
        <paramref name="timeValue1" />과의 마이크로초 차이를 계산할 DateTime, DateTimeOffset 또는 Time을 지정하는 식입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="timeValue1" /> 또는 <paramref name="timeValue2" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentException">정식 ‘DiffMicroseconds’ 함수의 오버로드가 <paramref name="timeValue1" /> 및 <paramref name="timeValue2" />의 결과 형식을 가진 인수를 허용하지 않습니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffMilliseconds(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>결과 형식이 각각 DateTime, DateTimeOffset 또는 Time이어야 하는 지정된 인수를 사용하여 정식 'DiffMilliseconds' 함수를 호출하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />을 만듭니다.<paramref name="timeValue1" />의 결과 형식은 <paramref name="timeValue2" />의 결과 형식과 일치해야 합니다.식의 결과 형식은 Edm.Int32입니다.</summary>
      <returns>
        <paramref name="timeValue1" /> 및 <paramref name="timeValue2" />와의 밀리초 차이를 반환하는 새 DbFunctionExpression입니다.</returns>
      <param name="timeValue1">첫 번째 DateTime, DateTimeOffset 또는 Time 값을 지정하는 식입니다.</param>
      <param name="timeValue2">
        <paramref name="timeValue1" />과의 밀리초 차이를 계산할 DateTime, DateTimeOffset 또는 Time을 지정하는 식입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="timeValue1" /> 또는 <paramref name="timeValue2" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentException">정식 ‘DiffMilliseconds’ 함수의 오버로드가 <paramref name="timeValue1" /> 및 <paramref name="timeValue2" />의 결과 형식을 가진 인수를 허용하지 않습니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffMinutes(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>결과 형식이 각각 DateTime, DateTimeOffset 또는 Time이어야 하는 지정된 인수를 사용하여 정식 'DiffMinutes' 함수를 호출하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />을 만듭니다.<paramref name="timeValue1" />의 결과 형식은 <paramref name="timeValue2" />의 결과 형식과 일치해야 합니다.식의 결과 형식은 Edm.Int32입니다.</summary>
      <returns>
        <paramref name="timeValue1" /> 및 <paramref name="timeValue2" />와의 분 차이를 반환하는 새 DbFunctionExpression입니다.</returns>
      <param name="timeValue1">첫 번째 DateTime, DateTimeOffset 또는 Time 값을 지정하는 식입니다.</param>
      <param name="timeValue2">
        <paramref name="timeValue1" />과의 분 차이를 계산할 DateTime, DateTimeOffset 또는 Time을 지정하는 식입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="timeValue1" /> 또는 <paramref name="timeValue2" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentException">정식 'DiffMinutes' 함수의 오버로드가 <paramref name="timeValue1" /> 및 <paramref name="timeValue2" />의 결과 형식을 가진 인수를 허용하지 않습니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffMonths(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>결과 형식이 각각 DateTime 또는 DateTimeOffset이어야 하는 지정된 인수를 사용하여 정식 'DiffMonths' 함수를 호출하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />을 만듭니다.<paramref name="dateValue1" />의 결과 형식은 <paramref name="dateValue2" />의 결과 형식과 일치해야 합니다.식의 결과 형식은 Edm.Int32입니다.</summary>
      <returns>
        <paramref name="dateValue1" /> 및 <paramref name="dateValue2" />와의 월 차이를 반환하는 새 DbFunctionExpression입니다.</returns>
      <param name="dateValue1">첫 번째 DateTime 또는 DateTimeOffset 값을 지정하는 식입니다.</param>
      <param name="dateValue2">
        <paramref name="dateValue1" />과의 월 차이를 계산할 DateTime 또는 DateTimeOffset을 지정하는 식입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dateValue1" /> 또는 <paramref name="dateValue2" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentException">정식 'DiffMonths' 함수의 오버로드가 <paramref name="dateValue1" /> 및 <paramref name="dateValue2" />의 결과 형식을 가진 인수를 허용하지 않습니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffNanoseconds(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>결과 형식이 각각 DateTime, DateTimeOffset 또는 Time이어야 하는 지정된 인수를 사용하여 정식 'DiffNanoseconds' 함수를 호출하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />을 만듭니다.<paramref name="timeValue1" />의 결과 형식은 <paramref name="timeValue2" />의 결과 형식과 일치해야 합니다.식의 결과 형식은 Edm.Int32입니다.</summary>
      <returns>
        <paramref name="timeValue1" /> 및 <paramref name="timeValue2" />와의 나노초 차이를 반환하는 새 DbFunctionExpression입니다.</returns>
      <param name="timeValue1">첫 번째 DateTime, DateTimeOffset 또는 Time 값을 지정하는 식입니다.</param>
      <param name="timeValue2">
        <paramref name="timeValue1" />과의 나노초 차이를 계산할 DateTime, DateTimeOffset 또는 Time을 지정하는 식입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="timeValue1" /> 또는 <paramref name="timeValue2" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentException">정식 ‘DiffNanoseconds’ 함수의 오버로드가 <paramref name="timeValue1" /> 및 <paramref name="timeValue2" />의 결과 형식을 가진 인수를 허용하지 않습니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffSeconds(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>결과 형식이 각각 DateTime, DateTimeOffset 또는 Time이어야 하는 지정된 인수를 사용하여 정식 'DiffSeconds' 함수를 호출하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />을 만듭니다.<paramref name="timeValue1" />의 결과 형식은 <paramref name="timeValue2" />의 결과 형식과 일치해야 합니다.식의 결과 형식은 Edm.Int32입니다.</summary>
      <returns>
        <paramref name="timeValue1" /> 및 <paramref name="timeValue2" />와의 초 차이를 반환하는 새 DbFunctionExpression입니다.</returns>
      <param name="timeValue1">첫 번째 DateTime, DateTimeOffset 또는 Time 값을 지정하는 식입니다.</param>
      <param name="timeValue2">
        <paramref name="timeValue1" />과의 초 차이를 계산할 DateTime, DateTimeOffset 또는 Time을 지정하는 식입니다. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="timeValue1" /> 또는 <paramref name="timeValue2" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentException">정식 'DiffSeconds' 함수의 오버로드가 <paramref name="timeValue1" /> 및 <paramref name="timeValue2" />의 결과 형식을 가진 인수를 허용하지 않습니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffYears(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>결과 형식이 각각 DateTime 또는 DateTimeOffset이어야 하는 지정된 인수를 사용하여 정식 'DiffYears' 함수를 호출하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />을 만듭니다.<paramref name="dateValue1" />의 결과 형식은 <paramref name="dateValue2" />의 결과 형식과 일치해야 합니다.식의 결과 형식은 Edm.Int32입니다.</summary>
      <returns>
        <paramref name="dateValue1" /> 및 <paramref name="dateValue2" />와의 연도 차이를 반환하는 새 DbFunctionExpression입니다.</returns>
      <param name="dateValue1">첫 번째 DateTime 또는 DateTimeOffset 값을 지정하는 식입니다.</param>
      <param name="dateValue2">
        <paramref name="dateValue1" />과의 연도 차이를 계산할 DateTime 또는 DateTimeOffset을 지정하는 식입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dateValue1" /> 또는 <paramref name="dateValue2" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentException">정식 'DiffYears' 함수의 오버로드가 <paramref name="dateValue1" /> 및 <paramref name="dateValue2" />의 결과 형식을 가진 인수를 허용하지 않습니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.EndsWith(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>결과 형식이 각각 문자열 형식이어야 하는 지정된 인수를 사용하여 정식 'EndsWith' 함수를 호출하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />을 만듭니다.식의 결과 형식은 부울입니다.</summary>
      <returns>
        <paramref name="stringArgument" />가 <paramref name="suffix" />로 끝나는지 여부를 나타내는 새 DbFunctionExpression입니다.</returns>
      <param name="stringArgument">지정된 <paramref name="suffix" />가 있는지 검사할 문자열을 지정하는 식입니다.</param>
      <param name="suffix">
        <paramref name="stringArgument" />에서 검사할 접미사를 지정하는 식입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stringArgument" /> 또는 <paramref name="suffix" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentException">정식 ‘EndsWith’ 함수의 오버로드가 <paramref name="stringArgument" /> 및 <paramref name="suffix" />의 결과 형식을 가진 인수를 허용하지 않습니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Floor(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>결과 형식이 각각 single, double 또는 decimal 형식이어야 하는 지정된 인수를 사용하여 정식 'Floor' 함수를 호출하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />을 만듭니다.식의 결과 형식은 <paramref name="value" />의 결과 형식과 같습니다.</summary>
      <returns>
        <paramref name="value" />보다 크지 않은 가장 큰 정수 값을 반환하는 새 DbFunctionExpression입니다.</returns>
      <param name="value">숫자 값을 지정하는 식입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentException">정식 'Floor' 함수의 오버로드가 <paramref name="value" />의 결과 형식을 가진 인수를 허용하지 않습니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.GetTotalOffsetMinutes(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>결과 형식이 DateTimeOffset이어야 하는 지정된 인수를 사용하여 정식 'GetTotalOffsetMinutes' 함수를 호출하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />을 만듭니다.식의 결과 형식은 Edm.Int32입니다.</summary>
      <returns>GMT에서 <paramref name="dateTimeOffsetArgument" />의 오프셋인 분을 반환하는 새 DbFunctionExpression입니다.</returns>
      <param name="dateTimeOffsetArgument">GMT에서의 분 오프셋을 검색할 DateTimeOffset 값을 지정하는 식입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dateTimeOffsetArgument" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentException">정식 'GetTotalOffsetMinutes' 함수의 오버로드가 <paramref name="dateTimeOffsetArgument" />의 결과 형식을 가진 인수를 허용하지 않습니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Hour(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>결과 형식이 DateTime, DateTimeOffset 또는 Time이어야 하는 지정된 인수를 사용하여 정식 'Hour' 함수를 호출하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />을 만듭니다.식의 결과 형식은 Edm.Int32입니다.</summary>
      <returns>
        <paramref name="timeValue" />에서 정수 시간 값을 반환하는 새 DbFunctionExpression입니다.</returns>
      <param name="timeValue">시를 검색할 값을 지정하는 식입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="timeValue" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentException">정식 'Hours' 함수의 오버로드가 <paramref name="timeValue" />의 결과 형식을 가진 인수를 허용하지 않습니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.IndexOf(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>결과 형식이 각각 문자열 형식이어야 하는 지정된 인수를 사용하여 정식 'IndexOf' 함수를 호출하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />을 만듭니다.식의 결과 형식은 Edm.Int32입니다.</summary>
      <returns>
        <paramref name="searchString" />에서 <paramref name="stringToFind" />의 첫 번째 인덱스를 반환하는 새 DbFunctionExpression입니다.</returns>
      <param name="searchString">
        <paramref name="stringToFind" />를 검색할 문자열을 지정하는 식입니다.</param>
      <param name="stringToFind">
        <paramref name="searchString" />에서 찾을 문자열을 지정하는 식입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="searchString" /> 또는 <paramref name="stringToFind" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentException">정식 'IndexOf' 함수의 오버로드가 <paramref name="searchString" /> 및 <paramref name="stringToFind" />의 결과 형식을 가진 인수를 허용하지 않습니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Left(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>결과 형식이 문자열 및 정수 형식이어야 하는 지정된 인수를 사용하여 정식 'Left' 함수를 호출하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />을 만듭니다.식의 결과 형식은 문자열입니다.</summary>
      <returns>
        <paramref name="stringArgument" />에서 길이 <paramref name="length" />의 가장 왼쪽 부분 문자열을 반환하는 새 DbFunctionExpression입니다.</returns>
      <param name="stringArgument">가장 왼쪽의 하위 문자열을 추출할 문자열을 지정하는 식입니다.</param>
      <param name="length">
        <paramref name="stringArgument" />에서 추출할 가장 왼쪽의 부분 문자열 길이를 지정하는 식입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stringArgument" /> 또는 <paramref name="length" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentException">정식 'Left' 함수의 오버로드가 <paramref name="stringArgument" />의 결과 형식을 가진 인수를 허용하지 않습니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Length(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>결과 형식이 문자열 형식이어야 하는 지정된 인수를 사용하여 정식 'Length' 함수를 호출하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />을 만듭니다.식의 결과 형식도 문자열입니다.</summary>
      <returns>
        <paramref name="stringArgument" />의 길이를 반환하는 새 DbFunctionExpression입니다.</returns>
      <param name="stringArgument">길이를 계산할 문자열을 지정하는 식입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stringArgument" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentException">정식 'Length' 함수의 오버로드가 <paramref name="stringArgument" />의 결과 형식을 가진 인수를 허용하지 않습니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.LongCount(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>지정된 컬렉션에 대해 정식 'BigCount' 함수를 호출하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />을 만듭니다.식의 결과 형식은 Edm.Int64입니다.</summary>
      <returns>개수 값을 생성하는 새 DbFunctionExpression입니다.</returns>
      <param name="collection">개수 값을 계산할 컬렉션을 지정하는 식입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" />이 null입니다.</exception>
      <exception cref="T:System.ArgumentException">정식 'BigCount' 함수의 오버로드가 <paramref name="collection" />의 결과 형식을 가진 인수를 허용하지 않습니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Max(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>지정된 컬렉션에 대해 정식 'Max' 함수를 호출하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />을 만듭니다.식의 결과 형식은 컬렉션의 요소 형식과 같습니다.</summary>
      <returns>최대값을 생성하는 새 DbFunctionExpression입니다.</returns>
      <param name="collection">최대값을 검색할 컬렉션을 지정하는 식입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" />이 null입니다.</exception>
      <exception cref="T:System.ArgumentException">정식 'Max' 함수의 오버로드가 <paramref name="collection" />의 결과 형식을 가진 인수를 허용하지 않습니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Millisecond(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>결과 형식이 DateTime, DateTimeOffset 또는 Time이어야 하는 지정된 인수를 사용하여 정식 'Millisecond' 함수를 호출하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />을 만듭니다.식의 결과 형식은 Edm.Int32입니다.</summary>
      <returns>
        <paramref name="timeValue" />에서 정수 밀리초 값을 반환하는 새 DbFunctionExpression입니다.</returns>
      <param name="timeValue">밀리초를 검색할 값을 지정하는 식입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="timeValue" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentException">정식 'Millisecond' 함수의 오버로드가 <paramref name="timeValue" />의 결과 형식을 가진 인수를 허용하지 않습니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Min(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>지정된 컬렉션에 대해 정식 'Min' 함수를 호출하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />을 만듭니다.식의 결과 형식은 컬렉션의 요소 형식과 같습니다.</summary>
      <returns>최소값을 생성하는 새 DbFunctionExpression입니다.</returns>
      <param name="collection">최소값을 검색할 컬렉션을 지정하는 식입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" />이 null입니다.</exception>
      <exception cref="T:System.ArgumentException">정식 'Min' 함수의 오버로드가 <paramref name="collection" />의 결과 형식을 가진 인수를 허용하지 않습니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Minute(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>결과 형식이 DateTime, DateTimeOffset 또는 Time이어야 하는 지정된 인수를 사용하여 정식 'Minute' 함수를 호출하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />을 만듭니다.식의 결과 형식은 Edm.Int32입니다.</summary>
      <returns>
        <paramref name="timeValue" />에서 정수 분 값을 반환하는 새 DbFunctionExpression입니다.</returns>
      <param name="timeValue">분을 검색할 값을 지정하는 식입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="timeValue" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentException">정식 'Minute' 함수의 오버로드가 <paramref name="timeValue" />의 결과 형식을 가진 인수를 허용하지 않습니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Month(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>결과 형식이 DateTime 또는 DateTimeOffset이어야 하는 지정된 인수를 사용하여 정식 'Month' 함수를 호출하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />을 만듭니다.식의 결과 형식은 Edm.Int32입니다.</summary>
      <returns>
        <paramref name="dateValue" />에서 정수 월 값을 반환하는 새 DbFunctionExpression입니다.</returns>
      <param name="dateValue">월을 검색할 값을 지정하는 식입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dateValue" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentException">정식 'Month' 함수의 오버로드가 <paramref name="dateValue" />의 결과 형식을 가진 인수를 허용하지 않습니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.NewGuid">
      <summary>정식 'NewGuid' 함수를 호출하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />을 만듭니다.</summary>
      <returns>새 GUID 값을 반환하는 새 DbFunctionExpression입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Power(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>결과 형식이 숫자 형식이어야 하는 지정된 인수를 사용하여 정식 'Power' 함수를 호출하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />을 만듭니다.식의 결과 형식은 <paramref name="baseArgument" />의 결과 형식과 같습니다.</summary>
      <returns>
        <paramref name="exponent" />로 지정된 만큼 거듭제곱한 <paramref name="baseArgument" />의 값을 반환하는 새 DbFunctionExpression입니다.</returns>
      <param name="baseArgument">지정된 지수로 거듭제곱할 숫자 값을 지정하는 식입니다.</param>
      <param name="exponent">
        <paramref name="baseArgument" />를 거듭제곱할 지수를 지정하는 식입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="baseArgument" /> 또는 <paramref name="exponent" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentException">정식 'Power' 함수의 오버로드가 <paramref name="baseArgument" /> 및 <paramref name="exponent" />의 결과 형식을 가진 인수를 허용하지 않습니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Replace(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>결과 형식이 각각 문자열 형식이어야 하는 지정된 인수를 사용하여 정식 'Replace' 함수를 호출하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />을 만듭니다.식의 결과 형식도 문자열입니다.</summary>
      <returns>모든 <paramref name="toReplace" />가 <paramref name="replacement" />로 대체되는 <paramref name="stringArgument" /> 기반의 새 문자열을 반환하는 새 DbFunctionExpression입니다.</returns>
      <param name="stringArgument">바꾸기 작업을 수행할 문자열을 지정하는 식입니다.</param>
      <param name="toReplace">바꿀 문자열을 지정하는 식입니다.</param>
      <param name="replacement">대체 문자열을 지정하는 식입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stringArgument" />, <paramref name="toReplace" /> 또는 <paramref name="replacement" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentException">정식 'Replace' 함수의 오버로드가 <paramref name="stringArgument" />, <paramref name="toReplace" /> 및 <paramref name="replacement" />의 결과 형식을 가진 인수를 허용하지 않습니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Reverse(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>결과 형식이 문자열 형식이어야 하는 지정된 인수를 사용하여 정식 'Reverse' 함수를 호출하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />을 만듭니다.식의 결과 형식도 문자열입니다.</summary>
      <returns>
        <paramref name="stringArgument" />의 역순 값을 생성하는 새 DbFunctionExpression입니다.</returns>
      <param name="stringArgument">순서를 반대로 바꿀 문자열을 지정하는 식입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stringArgument" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentException">정식 'Reverse' 함수의 오버로드가 <paramref name="stringArgument" />의 결과 형식을 가진 인수를 허용하지 않습니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Right(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>결과 형식이 문자열 및 정수 형식이어야 하는 지정된 인수를 사용하여 정식 'Right' 함수를 호출하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />을 만듭니다.식의 결과 형식은 문자열입니다.</summary>
      <returns>
        <paramref name="stringArgument" />에서 길이 <paramref name="length" />의 가장 오른쪽 부분 문자열을 반환하는 새 DbFunctionExpression입니다.</returns>
      <param name="stringArgument">가장 오른쪽의 하위 문자열을 추출할 문자열을 지정하는 식입니다.</param>
      <param name="length">
        <paramref name="stringArgument" />에서 추출할 가장 오른쪽의 부분 문자열 길이를 지정하는 식입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stringArgument" /> 또는 <paramref name="length" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentException">정식 'Right' 함수의 오버로드가 <paramref name="stringArgument" />의 결과 형식을 가진 인수를 허용하지 않습니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Round(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>결과 형식이 각각 single, double 또는 decimal 형식이어야 하는 지정된 인수를 사용하여 정식 'Round' 함수를 호출하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />을 만듭니다.식의 결과 형식은 <paramref name="value" />의 결과 형식과 같습니다.</summary>
      <returns>지정된 인수를 가장 가까운 정수 값으로 반올림하는 새 DbFunctionExpression입니다.</returns>
      <param name="value">반올림할 숫자 값을 지정하는 식입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentException">정식 'Round' 함수의 오버로드가 <paramref name="value" />의 결과 형식을 가진 인수를 허용하지 않습니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Round(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>결과 형식이 single, double 또는 decimal 및 정수 형식이어야 하는 지정된 인수를 사용하여 정식 'Round' 함수를 호출하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />을 만듭니다.식의 결과 형식은 <paramref name="value" />의 결과 형식과 같습니다.</summary>
      <returns>
        <paramref name="digits" />로 지정된 전체 자릿수로, 지정된 인수를 가장 가까운 정수 값으로 반올림하는 새 DbFunctionExpression입니다.</returns>
      <param name="value">반올림할 숫자 값을 지정하는 식입니다.</param>
      <param name="digits">반올림할 때 사용할 전체 자릿수를 지정하는 식입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 또는 <paramref name="digits" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentException">정식 'Round' 함수의 오버로드가 <paramref name="value" /> 및 <paramref name="digits" />의 결과 형식을 가진 인수를 허용하지 않습니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Second(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>결과 형식이 DateTime, DateTimeOffset 또는 Time이어야 하는 지정된 인수를 사용하여 정식 'Second' 함수를 호출하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />을 만듭니다.식의 결과 형식은 Edm.Int32입니다.</summary>
      <returns>
        <paramref name="timeValue" />에서 정수 초 값을 반환하는 새 DbFunctionExpression입니다.</returns>
      <param name="timeValue">초를 검색할 값을 지정하는 식입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="timeValue" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentException">정식 'Second' 함수의 오버로드가 <paramref name="timeValue" />의 결과 형식을 가진 인수를 허용하지 않습니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.StartsWith(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>결과 형식이 각각 문자열 형식이어야 하는 지정된 인수를 사용하여 정식 'StartsWith' 함수를 호출하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />을 만듭니다.식의 결과 형식은 부울입니다.</summary>
      <returns>
        <paramref name="stringArgument" />가 <paramref name="prefix" />로 시작하는지 여부를 나타내는 새 DbFunctionExpression입니다.</returns>
      <param name="stringArgument">지정된 <paramref name="prefix" />가 있는지 검사할 문자열을 지정하는 식입니다.</param>
      <param name="prefix">
        <paramref name="stringArgument" />에서 검사할 접두사를 지정하는 식입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stringArgument" /> 또는 <paramref name="prefix" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentException">정식 'StartsWith' 함수의 오버로드가 <paramref name="stringArgument" /> 및 <paramref name="prefix" />의 결과 형식을 가진 인수를 허용하지 않습니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.StDev(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>지정된 컬렉션의 null이 아닌 멤버에 대해 정식 'StDev' 함수를 호출하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />을 만듭니다.식의 결과 형식은 Edm.Double입니다.</summary>
      <returns>컬렉션의 null이 아닌 멤버에 대한 표준 편차 값을 생성하는 새 DbFunctionExpression입니다.</returns>
      <param name="collection">표준 편차를 계산할 컬렉션을 지정하는 식입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" />이 null입니다.</exception>
      <exception cref="T:System.ArgumentException">정식 'StDev' 함수의 오버로드가 <paramref name="collection" />의 결과 형식을 가진 인수를 허용하지 않습니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.StDevP(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>지정된 컬렉션의 모집단에 대해 정식 'StDevP' 함수를 호출하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />을 만듭니다.식의 결과 형식은 Edm.Double입니다.</summary>
      <returns>표준 편차 값을 생성하는 새 DbFunctionExpression입니다.</returns>
      <param name="collection">표준 편차를 계산할 컬렉션을 지정하는 식입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" />이 null입니다.</exception>
      <exception cref="T:System.ArgumentException">정식 'StDevP' 함수의 오버로드가 <paramref name="collection" />의 결과 형식을 가진 인수를 허용하지 않습니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Substring(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>결과 형식이 문자열 및 정수 형식이어야 하는 지정된 인수를 사용하여 정식 'Substring' 함수를 호출하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />을 만듭니다.식의 결과 형식은 문자열입니다.</summary>
      <returns>
        <paramref name="stringArgument" />에서 <paramref name="start" />부터 길이 <paramref name="length" />의 부분 문자열을 반환하는 새 DbFunctionExpression입니다.</returns>
      <param name="stringArgument">하위 문자열을 추출할 문자열을 지정하는 식입니다.</param>
      <param name="start">하위 문자열을 가져올 시작 인덱스를 지정하는 식입니다.</param>
      <param name="length">하위 문자열의 길이를 지정하는 식입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stringArgument" />, <paramref name="start" /> 또는 <paramref name="length" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentException">정식 'Substring' 함수의 오버로드가 <paramref name="stringArgument" />, <paramref name="start" /> 및 <paramref name="length" />의 결과 형식을 가진 인수를 허용하지 않습니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Sum(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>지정된 컬렉션에 대해 정식 'Sum' 함수를 호출하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />을 만듭니다.식의 결과 형식은 컬렉션의 요소 형식과 같습니다.</summary>
      <returns>합계를 생성하는 새 DbFunctionExpression입니다.</returns>
      <param name="collection">합계를 계산할 컬렉션을 지정하는 식입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" />이 null입니다.</exception>
      <exception cref="T:System.ArgumentException">정식 'Sum' 함수의 오버로드가 <paramref name="collection" />의 결과 형식을 가진 인수를 허용하지 않습니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.ToLower(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>결과 형식이 문자열 형식이어야 하는 지정된 인수를 사용하여 정식 'ToLower' 함수를 호출하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />을 만듭니다.식의 결과 형식도 문자열입니다.</summary>
      <returns>소문자로 변환된 <paramref name="stringArgument" />의 값을 반환하는 새 DbFunctionExpression입니다.</returns>
      <param name="stringArgument">소문자로 변환되어야 하는 문자열을 지정하는 식입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stringArgument" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentException">정식 'ToLower' 함수의 오버로드가 <paramref name="stringArgument" />의 결과 형식을 가진 인수를 허용하지 않습니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.ToUpper(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>결과 형식이 문자열 형식이어야 하는 지정된 인수를 사용하여 정식 'ToUpper' 함수를 호출하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />을 만듭니다.식의 결과 형식도 문자열입니다.</summary>
      <returns>대문자로 변환된 <paramref name="stringArgument" />의 값을 반환하는 새 DbFunctionExpression입니다.</returns>
      <param name="stringArgument">대문자로 변환되어야 하는 문자열을 지정하는 식입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stringArgument" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentException">정식 'ToUpper' 함수의 오버로드가 <paramref name="stringArgument" />의 결과 형식을 가진 인수를 허용하지 않습니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Trim(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>결과 형식이 문자열 형식이어야 하는 지정된 인수를 사용하여 정식 'Trim' 함수를 호출하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />을 만듭니다.식의 결과 형식도 문자열입니다.</summary>
      <returns>선행 및 후행 공백이 제거된 <paramref name="stringArgument" />의 값을 반환하는 새 DbFunctionExpression입니다.</returns>
      <param name="stringArgument">선행 및 후행 공백을 제거할 문자열을 지정하는 식입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stringArgument" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentException">정식 'Trim' 함수의 오버로드가 <paramref name="stringArgument" />의 결과 형식을 가진 인수를 허용하지 않습니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.TrimEnd(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>결과 형식이 문자열 형식이어야 하는 지정된 인수를 사용하여 정식 'RTrim' 함수를 호출하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />을 만듭니다.식의 결과 형식도 문자열입니다.</summary>
      <returns>후행 공백이 제거된 <paramref name="stringArgument" />의 값을 반환하는 새 DbFunctionExpression입니다.</returns>
      <param name="stringArgument">후행 공백을 제거할 문자열을 지정하는 식입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stringArgument" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentException">정식 'RTrim' 함수의 오버로드가 <paramref name="stringArgument" />의 결과 형식을 가진 인수를 허용하지 않습니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.TrimStart(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>결과 형식이 문자열 형식이어야 하는 지정된 인수를 사용하여 정식 'LTrim' 함수를 호출하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />을 만듭니다.식의 결과 형식도 문자열입니다.</summary>
      <returns>선행 공백이 제거된 <paramref name="stringArgument" />의 값을 반환하는 새 DbFunctionExpression입니다.</returns>
      <param name="stringArgument">선행 공백을 제거할 문자열을 지정하는 식입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stringArgument" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentException">정식 'LTrim' 함수의 오버로드가 <paramref name="stringArgument" />의 결과 형식을 가진 인수를 허용하지 않습니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Truncate(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>결과 형식이 single, double 또는 decimal 및 정수 형식이어야 하는 지정된 인수를 사용하여 정식 'Truncate' 함수를 호출하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />을 만듭니다.식의 결과 형식은 <paramref name="value" />의 결과 형식과 같습니다.</summary>
      <returns>
        <paramref name="digits" />로 지정된 전체 자릿수로, 지정된 인수를 가장 가까운 정수 값으로 자르는 새 DbFunctionExpression입니다.</returns>
      <param name="value">잘라낼 숫자 값을 지정하는 식입니다.</param>
      <param name="digits">잘라낼 때 사용할 전체 자릿수를 지정하는 식입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 또는 <paramref name="digits" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentException">정식 'Truncate' 함수의 오버로드가 <paramref name="value" /> 및 <paramref name="digits" />의 결과 형식을 가진 인수를 허용하지 않습니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.TruncateTime(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>결과 형식이 DateTime 또는 DateTimeOffset이어야 하는 지정된 인수를 사용하여 정식 'TruncateTime' 함수를 호출하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />을 만듭니다.식의 결과 형식은 <paramref name="dateValue" />의 결과 형식과 같습니다.</summary>
      <returns>시간이 0으로 설정된 <paramref name="dateValue" />의 값을 반환하는 새 DbFunctionExpression입니다.</returns>
      <param name="dateValue">시간 부분을 잘라낼 값을 지정하는 식입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dateValue" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentException">정식 'TruncateTime' 함수의 오버로드가 <paramref name="dateValue" />의 결과 형식을 가진 인수를 허용하지 않습니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Var(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>지정된 컬렉션의 null이 아닌 멤버에 대해 정식 'Var' 함수를 호출하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />을 만듭니다.식의 결과 형식은 Edm.Double입니다.</summary>
      <returns>컬렉션의 null이 아닌 멤버에 대한 통계적 분산 값을 생성하는 새 DbFunctionExpression입니다.</returns>
      <param name="collection">통계적 분산을 계산할 컬렉션을 지정하는 식입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" />이 null입니다.</exception>
      <exception cref="T:System.ArgumentException">정식 'Var' 함수의 오버로드가 <paramref name="collection" />의 결과 형식을 가진 인수를 허용하지 않습니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.VarP(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>지정된 컬렉션의 모집단에 대해 정식 'VarP' 함수를 호출하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />을 만듭니다.식의 결과 형식은 Edm.Double입니다.</summary>
      <returns>통계적 분산 값을 생성하는 새 DbFunctionExpression입니다.</returns>
      <param name="collection">통계적 분산을 계산할 컬렉션을 지정하는 식입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" />이 null입니다.</exception>
      <exception cref="T:System.ArgumentException">정식 'VarP' 함수의 오버로드가 <paramref name="collection" />의 결과 형식을 가진 인수를 허용하지 않습니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Year(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>결과 형식이 DateTime 또는 DateTimeOffset이어야 하는 지정된 인수를 사용하여 정식 'Year' 함수를 호출하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />을 만듭니다.식의 결과 형식은 Edm.Int32입니다.</summary>
      <returns>
        <paramref name="dateValue" />에서 정수 연도 값을 반환하는 새 DbFunctionExpression입니다.</returns>
      <param name="dateValue">연도를 검색할 값을 지정하는 식입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dateValue" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentException">정식 'Year' 함수의 오버로드가 <paramref name="dateValue" />의 결과 형식을 가진 인수를 허용하지 않습니다.</exception>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Row">
      <summary>Row 클래스는 &lt;see cref="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.NewRow(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Data.Entity.Core.Common.CommandTrees.DbExpression}})" /&gt;를 호출하는 생성자와 같은 방법을 제공하기 위함을 나타냅니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Row.#ctor(System.Collections.Generic.KeyValuePair{System.String,System.Data.Entity.Core.Common.CommandTrees.DbExpression},System.Collections.Generic.KeyValuePair{System.String,System.Data.Entity.Core.Common.CommandTrees.DbExpression}[])">
      <summary>지정된 첫 번째 열 값과 선택적인 연속적 열 값을 사용하여 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Row" /> 클래스의 새 인스턴스를 초기화합니다. </summary>
      <param name="columnValue">새 행 인스턴스의 첫 번째 열을 제공하는 키/값 쌍입니다(필수).</param>
      <param name="columnValues">새 행 인스턴스의 이후 열을 모두 제공하는 키/값 쌍입니다(선택).</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Row.op_Implicit(System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Row)~System.Data.Entity.Core.Common.CommandTrees.DbExpression">
      <summary>Row 개체를 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />으로 변환합니다.</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />은 변환된 Row 개체를 나타냅니다.</returns>
      <param name="row">행 개체입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Row.ToExpression">
      <summary>이 행 인스턴스에 포함된 열을 기반으로 새 행을 생성하는 새 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression" />을 만듭니다.</summary>
      <returns>이 행 인스턴스와 동일한 열 이름과 DbExpression 값을 사용하여 행을 생성하는 새 DbNewInstanceExpression입니다.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions">
      <summary>정식 EDM 함수를 호출하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />을 생성하기 위한 API를 제공하고 이 API가 식 형식에서 확장 메서드로 액세스될 수 있게 합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.Area(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>결과 형식이 Edm.Geography 또는 Edm.Geometry 형식이어야 하는 지정된 인수를 사용하여 정식 'Area' 함수를 호출하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />을 만듭니다.식의 결과 형식은 Edm.Double입니다.</summary>
      <returns>spatialValue의 영역을 반환하거나 spatialValue가 표면이 아닌 경우 null을 반환하는 새 DbFunctionExpression입니다.</returns>
      <param name="spatialValue">영역을 계산할 공간 표면 값을 지정하는 식입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.AsBinary(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>결과 형식이 Edm.Geography 또는 Edm.Geometry 형식이어야 하는 지정된 인수를 사용하여 정식 'AsBinary' 함수를 호출하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />을 만듭니다.식의 결과 형식은 Edm.Binary입니다.</summary>
      <returns>spatialValue의 잘 알려진 이진 표현을 반환하는 새 DbFunctionExpression입니다.</returns>
      <param name="spatialValue">잘 알려진 이진 표현을 생성할 공간 값을 지정하는 식입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.AsGml(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>결과 형식이 Edm.Geography 또는 Edm.Geometry 형식이어야 하는 지정된 인수를 사용하여 정식 'AsGml' 함수를 호출하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />을 만듭니다.식의 결과 형식은 Edm.String입니다.</summary>
      <returns>spatialValue의 GML(Geography Markup Language) 표현을 반환하는 새 DbFunctionExpression입니다.</returns>
      <param name="spatialValue">GML(Geography Markup Language) 표현을 생성할 공간 값을 지정하는 식입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.AsText(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>결과 형식이 Edm.Geography 또는 Edm.Geometry 형식이어야 하는 지정된 인수를 사용하여 정식 'AsText' 함수를 호출하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />을 만듭니다.식의 결과 형식은 Edm.String입니다.</summary>
      <returns>spatialValue의 잘 알려진 텍스트 표현을 반환하는 새 DbFunctionExpression입니다.</returns>
      <param name="spatialValue">잘 알려진 텍스트 표현을 생성할 공간 값을 지정하는 식입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.Centroid(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>결과 형식이 Edm.Geometry 형식이어야 하는 지정된 인수를 사용하여 정식 'Centroid' 함수를 호출하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />을 만듭니다.식의 결과 형식은 Edm.Geometry입니다.</summary>
      <returns>geometryValue의 중심 점(표면 자체에 없을 수도 있음)을 반환하거나 geometryValue가 표면이 아닌 경우 null을 반환하는 새 DbFunctionExpression입니다.</returns>
      <param name="geometryValue">중앙을 검색할 기하 도형 표면 값을 지정하는 식입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.CoordinateSystemId(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>결과 형식이 Edm.Geography 또는 Edm.Geometry 형식이어야 하는 지정된 인수를 사용하여 정식 'CoordinateSystemId' 함수를 호출하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />을 만듭니다.식의 결과 형식은 Edm.Int32입니다.</summary>
      <returns>spatialValue에서 정수 SRID 값을 반환하는 새 DbFunctionExpression입니다.</returns>
      <param name="spatialValue">좌표계 ID(SRID)를 검색할 값을 지정하는 식입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.Distance(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>결과 형식이 각각 Edm.Geography 또는 Edm.Geometry 형식이어야 하는 지정된 인수를 사용하여 정식 'Distance' 함수를 호출하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />을 만듭니다.spatialValue1의 결과 형식은 spatialValue2 결과 형식과 일치해야 합니다.식의 결과 형식은 Edm.Double입니다.</summary>
      <returns>spatialValue1 및 spatialValue1에서 가장 가까운 점 간의 거리를 반환하는 새 DbFunctionExpression입니다.</returns>
      <param name="spatialValue1">첫 번째 공간 값을 지정하는 식입니다.</param>
      <param name="spatialValue2">spatialValue1을 측정할 거리의 공간 값을 지정하는 식입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.Elevation(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>결과 형식이 Edm.Geography 또는 Edm.Geometry 형식이어야 하는 지정된 인수를 사용하여 정식 'Elevation' 함수를 호출하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />을 만듭니다.식의 결과 형식은 Edm.Double입니다.</summary>
      <returns>spatialValue의 고도 값을 반환하거나 spatialValue가 점이 아닌 경우 null을 반환하는 새 DbFunctionExpression입니다.</returns>
      <param name="spatialValue">높이(Z 좌표) 값을 검색할 공간 점 값을 지정하는 식입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.EndPoint(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>결과 형식이 Edm.Geography 또는 Edm.Geometry 형식이어야 하는 지정된 인수를 사용하여 정식 'EndPoint' 함수를 호출하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />을 만듭니다.결과 형식은 spatialValue의 결과 형식과 같습니다.</summary>
      <returns>spatialValue의 끝점을 반환하거나 spatialValue가 곡선이 아닌 경우 null을 반환하는 새 DbFunctionExpression입니다.</returns>
      <param name="spatialValue">끝점을 검색할 공간 곡선 값을 지정하는 식입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.ExteriorRing(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>결과 형식이 Edm.Geometry 형식이어야 하는 지정된 인수를 사용하여 정식 'ExteriorRing' 함수를 호출하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />을 만듭니다.식의 결과 형식은 Edm.Geometry입니다.</summary>
      <returns>다각형 geometryValue의 외부 링을 반환하거나 geometryValue가 다각형이 아닌 경우 null을 반환하는 새 DbFunctionExpression입니다.</returns>
      <param name="geometryValue">기하 도형 값입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyCollectionFromBinary(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>지정된 인수를 사용하여 정식 'GeographyCollectionFromBinary' 함수를 호출하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />을 만듭니다.geographyCollectionWellKnownBinaryValue에 이진 결과 형식이 있어야 하는 반면 coordinateSystemId에는 정수 숫자 결과 형식이 있어야 합니다.식의 결과 형식은 Edm.Geography입니다.</summary>
      <returns>지정된 값을 기반으로 새로운 지리 컬렉션 값을 반환하는 새 DbFunctionExpression입니다.</returns>
      <param name="geographyCollectionWellKnownBinaryValue">지리 컬렉션 값의 잘 알려진 이진 표현을 제공하는 식입니다.</param>
      <param name="coordinateSystemId">지리 컬렉션 값 좌표계의 좌표계 ID(SRID)를 제공하는 식입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyCollectionFromText(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>지정된 인수를 사용하여 정식 'GeographyCollectionFromText' 함수를 호출하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />을 만듭니다.geographyCollectionWellKnownText에 문자열 결과 형식이 있어야 하는 반면 coordinateSystemId에는 정수 숫자 결과 형식이 있어야 합니다.식의 결과 형식은 Edm.Geography입니다.</summary>
      <returns>지정된 값을 기반으로 새로운 지리 컬렉션 값을 반환하는 새 DbFunctionExpression입니다.</returns>
      <param name="geographyCollectionWellKnownText">지리 컬렉션 값의 잘 알려진 텍스트 표현을 제공하는 식입니다.</param>
      <param name="coordinateSystemId">지리 컬렉션 값 좌표계의 좌표계 ID(SRID)를 제공하는 식입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyFromBinary(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>결과 형식이 이진이어야 하는 지정된 인수를 사용하여 정식 'GeographyFromBinary' 함수를 호출하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />을 만듭니다.식의 결과 형식은 Edm.Geography입니다.</summary>
      <returns>지정된 이진 값을 기반으로 새로운 지리 값을 반환하는 새 DbFunctionExpression입니다.</returns>
      <param name="wellKnownBinaryValue">지리 값의 잘 알려진 이진 표현을 제공하는 식입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyFromBinary(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>지정된 인수를 사용하여 정식 'GeographyFromBinary' 함수를 호출하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />을 만듭니다.wellKnownBinaryValue에 이진 결과 형식이 있어야 하는 반면 coordinateSystemId에는 정수 숫자 결과 형식이 있어야 합니다.식의 결과 형식은 Edm.Geography입니다.</summary>
      <returns>지정된 값을 기반으로 새로운 지리 값을 반환하는 새 DbFunctionExpression입니다.</returns>
      <param name="wellKnownBinaryValue">지리 값의 잘 알려진 이진 표현을 제공하는 식입니다.</param>
      <param name="coordinateSystemId">지리 값 좌표계의 좌표계 ID(SRID)를 제공하는 식입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyFromGml(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>결과 형식이 문자열이어야 하는 지정된 인수를 사용하여 정식 'GeographyFromGml' 함수를 호출하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />을 만듭니다.식의 결과 형식은 Edm.Geography입니다.</summary>
      <returns>기본 공급자의 기본 SRID(좌표계 ID)와 함께 지정된 값을 기반으로 새 지리 값을 반환하는 새 DbFunctionExpression입니다.</returns>
      <param name="geographyMarkup">지리 값의 GML(Geography Markup Language) 표현을 제공하는 식입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyFromGml(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>지정된 인수를 사용하여 정식 'GeographyFromGml' 함수를 호출하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />을 만듭니다.geographyMarkup에 문자열 결과 형식이 있어야 하는 반면 coordinateSystemId에는 정수 숫자 결과 형식이 있어야 합니다.식의 결과 형식은 Edm.Geography입니다.</summary>
      <returns>지정된 값을 기반으로 새로운 지리 값을 반환하는 새 DbFunctionExpression입니다.</returns>
      <param name="geographyMarkup">지리 값의 GML(Geography Markup Language) 표현을 제공하는 식입니다.</param>
      <param name="coordinateSystemId">지리 값 좌표계의 좌표계 ID(SRID)를 제공하는 식입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyFromText(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>결과 형식이 문자열이어야 하는 지정된 인수를 사용하여 정식 'GeographyFromText' 함수를 호출하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />을 만듭니다.식의 결과 형식은 Edm.Geography입니다.해당 값에는 기본 공급자의 기본 좌표계 ID(SRID)가 있습니다.</summary>
      <returns>지정된 값을 기반으로 새로운 지리 값을 반환하는 새 DbFunctionExpression입니다.</returns>
      <param name="wellKnownText">지리 값의 잘 알려진 텍스트 표현을 제공하는 식입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyFromText(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>지정된 인수를 사용하여 정식 'GeographyFromText' 함수를 호출하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />을 만듭니다.wellKnownText에 문자열 결과 형식이 있어야 하는 반면 coordinateSystemId에는 정수 숫자 결과 형식이 있어야 합니다.식의 결과 형식은 Edm.Geography입니다.</summary>
      <returns>지정된 값을 기반으로 새로운 지리 값을 반환하는 새 DbFunctionExpression입니다.</returns>
      <param name="wellKnownText">지리 값의 잘 알려진 텍스트 표현을 제공하는 식입니다.</param>
      <param name="coordinateSystemId">지리 값 좌표계의 좌표계 ID(SRID)를 제공하는 식입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyLineFromBinary(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>지정된 인수를 사용하여 정식 'GeographyLineFromBinary' 함수를 호출하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />을 만듭니다.lineWellKnownBinaryValue에 이진 결과 형식이 있어야 하는 반면 coordinateSystemId에는 정수 숫자 결과 형식이 있어야 합니다.식의 결과 형식은 Edm.Geography입니다.</summary>
      <returns>지정된 값을 기반으로 새로운 지리 선 값을 반환하는 새 DbFunctionExpression입니다.</returns>
      <param name="lineWellKnownBinaryValue">지리 선 값의 잘 알려진 이진 표현을 제공하는 식입니다.</param>
      <param name="coordinateSystemId">지리 선 값 좌표계의 좌표계 ID(SRID)를 제공하는 식입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyLineFromText(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>지정된 인수를 사용하여 정식 'GeographyLineFromText' 함수를 호출하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />을 만듭니다.lineWellKnownText에 문자열 결과 형식이 있어야 하는 반면 coordinateSystemId에는 정수 숫자 결과 형식이 있어야 합니다.식의 결과 형식은 Edm.Geography입니다.</summary>
      <returns>지정된 값을 기반으로 새로운 지리 선 값을 반환하는 새 DbFunctionExpression입니다.</returns>
      <param name="lineWellKnownText">지리 선 값의 잘 알려진 텍스트 표현을 제공하는 식입니다.</param>
      <param name="coordinateSystemId">지리 선 값 좌표계의 좌표계 ID(SRID)를 제공하는 식입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyMultiLineFromBinary(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>지정된 인수를 사용하여 정식 'GeographyMultiLineFromBinary' 함수를 호출하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />을 만듭니다.multiLineWellKnownBinaryValue에 이진 결과 형식이 있어야 하는 반면 coordinateSystemId에는 정수 숫자 결과 형식이 있어야 합니다.식의 결과 형식은 Edm.Geography입니다.</summary>
      <returns>지정된 값을 기반으로 새로운 지리 다중선 값을 반환하는 새 DbFunctionExpression입니다.</returns>
      <param name="multiLineWellKnownBinaryValue">지리 다중선 값의 잘 알려진 이진 표현을 제공하는 식입니다.</param>
      <param name="coordinateSystemId">지리 다중선 값 좌표계의 좌표계 ID(SRID)를 제공하는 식입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyMultiLineFromText(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>지정된 인수를 사용하여 정식 'GeographyMultiLineFromText' 함수를 호출하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />을 만듭니다.multiLineWellKnownText에 문자열 결과 형식이 있어야 하는 반면 coordinateSystemId에는 정수 숫자 결과 형식이 있어야 합니다.식의 결과 형식은 Edm.Geography입니다.</summary>
      <returns>지정된 값을 기반으로 새로운 지리 다중선 값을 반환하는 새 DbFunctionExpression입니다.</returns>
      <param name="multiLineWellKnownText">지리 다중선 값의 잘 알려진 텍스트 표현을 제공하는 식입니다.</param>
      <param name="coordinateSystemId">지리 다중선 값 좌표계의 좌표계 ID(SRID)를 제공하는 식입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyMultiPointFromBinary(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>지정된 인수를 사용하여 정식 'GeographyMultiPointFromBinary' 함수를 호출하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />을 만듭니다.multiPointWellKnownBinaryValue에 이진 결과 형식이 있어야 하는 반면 coordinateSystemId에는 정수 숫자 결과 형식이 있어야 합니다.식의 결과 형식은 Edm.Geography입니다.</summary>
      <returns>지정된 값을 기반으로 새로운 지리 다중 지점 값을 반환하는 새 DbFunctionExpression입니다.</returns>
      <param name="multiPointWellKnownBinaryValue">지리 다중 지점 값의 잘 알려진 이진 표현을 제공하는 식입니다.</param>
      <param name="coordinateSystemId">지리 다중 지점 값 좌표계의 좌표계 ID(SRID)를 제공하는 식입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyMultiPointFromText(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>지정된 인수를 사용하여 정식 'GeographyMultiPointFromText' 함수를 호출하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />을 만듭니다.multiPointWellKnownText에 문자열 결과 형식이 있어야 하는 반면 coordinateSystemId에는 정수 숫자 결과 형식이 있어야 합니다.식의 결과 형식은 Edm.Geography입니다.</summary>
      <returns>지정된 값을 기반으로 새로운 지리 다중 지점 값을 반환하는 새 DbFunctionExpression입니다.</returns>
      <param name="multiPointWellKnownText">지리 다중 지점 값의 잘 알려진 텍스트 표현을 제공하는 식입니다.</param>
      <param name="coordinateSystemId">지리 다중 지점 값 좌표계의 좌표계 ID(SRID)를 제공하는 식입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyMultiPolygonFromBinary(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>지정된 인수를 사용하여 정식 'GeographyMultiPolygonFromBinary' 함수를 호출하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />을 만듭니다.multiPolygonWellKnownBinaryValue에 이진 결과 형식이 있어야 하는 반면 coordinateSystemId에는 정수 숫자 결과 형식이 있어야 합니다.식의 결과 형식은 Edm.Geography입니다.</summary>
      <returns>지정된 값을 기반으로 새로운 지리 다중 다각형 값을 반환하는 새 DbFunctionExpression입니다.</returns>
      <param name="multiPolygonWellKnownBinaryValue">지리 다중 다각형 값의 잘 알려진 이진 표현을 제공하는 식입니다.</param>
      <param name="coordinateSystemId">지리 다중 다각형 값 좌표계의 좌표계 ID(SRID)를 제공하는 식입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyMultiPolygonFromText(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>지정된 인수를 사용하여 정식 'GeographyMultiPolygonFromText' 함수를 호출하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />을 만듭니다.multiPolygonWellKnownText에 문자열 결과 형식이 있어야 하는 반면 coordinateSystemId에는 정수 숫자 결과 형식이 있어야 합니다.식의 결과 형식은 Edm.Geography입니다.</summary>
      <returns>지정된 값을 기반으로 새로운 지리 다중 다각형 값을 반환하는 새 DbFunctionExpression입니다.</returns>
      <param name="multiPolygonWellKnownText">지리 다중 다각형 값의 잘 알려진 텍스트 표현을 제공하는 식입니다.</param>
      <param name="coordinateSystemId">지리 다중 다각형 값 좌표계의 좌표계 ID(SRID)를 제공하는 식입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyPointFromBinary(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>지정된 인수를 사용하여 정식 'GeographyPointFromBinary' 함수를 호출하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />을 만듭니다.pointWellKnownBinaryValue에 이진 결과 형식이 있어야 하는 반면 coordinateSystemId에는 정수 숫자 결과 형식이 있어야 합니다.식의 결과 형식은 Edm.Geography입니다.</summary>
      <returns>지정된 값을 기반으로 새로운 지리 점 값을 반환하는 새 DbFunctionExpression입니다.</returns>
      <param name="pointWellKnownBinaryValue">지리 점 값의 잘 알려진 이진 표현을 제공하는 식입니다.</param>
      <param name="coordinateSystemId">지리 점 값 좌표계의 좌표계 ID(SRID)를 제공하는 식입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyPointFromText(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>지정된 인수를 사용하여 정식 'GeographyPointFromText' 함수를 호출하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />을 만듭니다.</summary>
      <returns>정식 'GeographyPointFromText' 함수입니다.</returns>
      <param name="pointWellKnownText">지리 지점 값의 잘 알려진 텍스트 표현을 제공하는 식입니다.</param>
      <param name="coordinateSystemId">지리 점 값 좌표계 systempointWellKnownTextValue의 좌표계 ID(SRID)를 제공하는 식입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyPolygonFromBinary(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>지정된 인수를 사용하여 정식 'GeographyPolygonFromBinary' 함수를 호출하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />을 만듭니다.polygonWellKnownBinaryValue에 이진 결과 형식이 있어야 하는 반면 coordinateSystemId에는 정수 숫자 결과 형식이 있어야 합니다.식의 결과 형식은 Edm.Geography입니다.</summary>
      <returns>지정된 값을 기반으로 새로운 지리 다각형 값을 반환하는 새 DbFunctionExpression입니다.</returns>
      <param name="polygonWellKnownBinaryValue">지리 다각형 값의 잘 알려진 이진 표현을 제공하는 식입니다.</param>
      <param name="coordinateSystemId">지리 다각형 값 좌표계의 좌표계 ID(SRID)를 제공하는 식입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyPolygonFromText(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>지정된 인수를 사용하여 정식 'GeographyPolygonFromText' 함수를 호출하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />을 만듭니다.polygonWellKnownText에 문자열 결과 형식이 있어야 하는 반면 coordinateSystemId에는 정수 숫자 결과 형식이 있어야 합니다.식의 결과 형식은 Edm.Geography입니다.</summary>
      <returns>지정된 값을 기반으로 새로운 지리 다각형 값을 반환하는 새 DbFunctionExpression입니다.</returns>
      <param name="polygonWellKnownText">지리 다각형 값의 잘 알려진 텍스트 표현을 제공하는 식입니다.</param>
      <param name="coordinateSystemId">지리 다각형 값 좌표계의 좌표계 ID(SRID)를 제공하는 식입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryCollectionFromBinary(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>지정된 인수를 사용하여 정식 'GeometryCollectionFromBinary' 함수를 호출하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />을 만듭니다.geometryCollectionWellKnownBinaryValue에 이진 결과 형식이 있어야 하는 반면 coordinateSystemId에는 정수 숫자 결과 형식이 있어야 합니다.식의 결과 형식은 Edm.Geometry입니다.</summary>
      <returns>지정된 값을 기반으로 새로운 기하 도형 컬렉션 값을 반환하는 새 DbFunctionExpression입니다.</returns>
      <param name="geometryCollectionWellKnownBinaryValue">기하 도형 컬렉션 값의 잘 알려진 이진 표현을 제공하는 식입니다.</param>
      <param name="coordinateSystemId">기하 도형 컬렉션 값 좌표계의 좌표계 ID(SRID)를 제공하는 식입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryCollectionFromText(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>지정된 인수를 사용하여 정식 'GeometryCollectionFromText' 함수를 호출하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />을 만듭니다.geometryCollectionWellKnownText에 문자열 결과 형식이 있어야 하는 반면 coordinateSystemId에는 정수 숫자 결과 형식이 있어야 합니다.식의 결과 형식은 Edm.Geometry입니다.</summary>
      <returns>지정된 값을 기반으로 새로운 기하 도형 컬렉션 값을 반환하는 새 DbFunctionExpression입니다.</returns>
      <param name="geometryCollectionWellKnownText">기하 도형 컬렉션 값의 잘 알려진 텍스트 표현을 제공하는 식입니다.</param>
      <param name="coordinateSystemId">기하 도형 컬렉션 값 좌표계의 좌표계 ID(SRID)를 제공하는 식입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryFromBinary(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>결과 형식이 이진이어야 하는 지정된 인수를 사용하여 정식 'GeometryFromBinary' 함수를 호출하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />을 만듭니다.식의 결과 형식은 Edm.Geometry입니다.</summary>
      <returns>지정된 이진 값을 기반으로 새로운 기하 도형 값을 반환하는 새 DbFunctionExpression입니다.</returns>
      <param name="wellKnownBinaryValue">기하 도형 값의 잘 알려진 이진 표현을 제공하는 식입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryFromBinary(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>지정된 인수를 사용하여 정식 'GeometryFromBinary' 함수를 호출하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />을 만듭니다.wellKnownBinaryValue에 이진 결과 형식이 있어야 하는 반면 coordinateSystemId에는 정수 숫자 결과 형식이 있어야 합니다.식의 결과 형식은 Edm.Geometry입니다.</summary>
      <returns>지정된 값을 기반으로 새로운 기하 도형 값을 반환하는 새 DbFunctionExpression입니다.</returns>
      <param name="wellKnownBinaryValue">기하 도형 값의 잘 알려진 이진 표현을 제공하는 식입니다.</param>
      <param name="coordinateSystemId">기하 도형 값 좌표계의 좌표계 ID(SRID)를 제공하는 식입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryFromGml(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>결과 형식이 문자열이어야 하는 지정된 인수를 사용하여 정식 'GeometryFromGml' 함수를 호출하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />을 만듭니다.식의 결과 형식은 Edm.Geometry입니다.</summary>
      <returns>기본 공급자의 기본 SRID(좌표계 ID)와 함께 지정된 값을 기반으로 새 기하 도형 값을 반환하는 새 DbFunctionExpression입니다.</returns>
      <param name="geometryMarkup">기하 도형 값의 GML(Geography Markup Language) 표현을 제공하는 식입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryFromGml(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>지정된 인수를 사용하여 정식 'GeometryFromGml' 함수를 호출하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />을 만듭니다.geometryMarkup에 문자열 결과 형식이 있어야 하는 반면 coordinateSystemId에는 정수 숫자 결과 형식이 있어야 합니다.식의 결과 형식은 Edm.Geometry입니다.</summary>
      <returns>지정된 값을 기반으로 새로운 기하 도형 값을 반환하는 새 DbFunctionExpression입니다.</returns>
      <param name="geometryMarkup">기하 도형 값의 GML(Geography Markup Language) 표현을 제공하는 식입니다.</param>
      <param name="coordinateSystemId">기하 도형 값 좌표계의 좌표계 ID(SRID)를 제공하는 식입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryFromText(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>결과 형식이 문자열이어야 하는 지정된 인수를 사용하여 정식 'GeometryFromText' 함수를 호출하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />을 만듭니다.식의 결과 형식은 Edm.Geometry입니다.해당 값에는 기본 공급자의 기본 좌표계 ID(SRID)가 있습니다.</summary>
      <returns>지정된 값을 기반으로 새로운 기하 도형 값을 반환하는 새 DbFunctionExpression입니다.</returns>
      <param name="wellKnownText">기하 도형 값의 잘 알려진 텍스트 표현을 제공하는 식입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryFromText(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>지정된 인수를 사용하여 정식 'GeometryFromText' 함수를 호출하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />을 만듭니다.wellKnownText에 문자열 결과 형식이 있어야 하는 반면 coordinateSystemId에는 정수 숫자 결과 형식이 있어야 합니다.식의 결과 형식은 Edm.Geometry입니다.</summary>
      <returns>지정된 값을 기반으로 새로운 기하 도형 값을 반환하는 새 DbFunctionExpression입니다.</returns>
      <param name="wellKnownText">기하 도형 값의 잘 알려진 텍스트 표현을 제공하는 식입니다.</param>
      <param name="coordinateSystemId">기하 도형 값 좌표계의 좌표계 ID(SRID)를 제공하는 식입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryLineFromBinary(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>지정된 인수를 사용하여 정식 'GeometryLineFromBinary' 함수를 호출하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />을 만듭니다.lineWellKnownBinaryValue에 이진 결과 형식이 있어야 하는 반면 coordinateSystemId에는 정수 숫자 결과 형식이 있어야 합니다.식의 결과 형식은 Edm.Geometry입니다.</summary>
      <returns>지정된 값을 기반으로 새로운 기하 도형 선 값을 반환하는 새 DbFunctionExpression입니다.</returns>
      <param name="lineWellKnownBinaryValue">기하 도형 선 값의 잘 알려진 이진 표현을 제공하는 식입니다.</param>
      <param name="coordinateSystemId">기하 도형 선 값 좌표계의 좌표계 ID(SRID)를 제공하는 식입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryLineFromText(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>지정된 인수를 사용하여 정식 'GeometryLineFromText' 함수를 호출하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />을 만듭니다.lineWellKnownText에 문자열 결과 형식이 있어야 하는 반면 coordinateSystemId에는 정수 숫자 결과 형식이 있어야 합니다.식의 결과 형식은 Edm.Geometry입니다.</summary>
      <returns>지정된 값을 기반으로 새로운 기하 도형 선 값을 반환하는 새 DbFunctionExpression입니다.</returns>
      <param name="lineWellKnownText">기하 도형 선 값의 잘 알려진 텍스트 표현을 제공하는 식입니다.</param>
      <param name="coordinateSystemId">기하 도형 선 값 좌표계의 좌표계 ID(SRID)를 제공하는 식입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryMultiLineFromBinary(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>지정된 인수를 사용하여 정식 'GeometryMultiLineFromBinary' 함수를 호출하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />을 만듭니다.multiLineWellKnownBinaryValue에 이진 결과 형식이 있어야 하는 반면 coordinateSystemId에는 정수 숫자 결과 형식이 있어야 합니다.식의 결과 형식은 Edm.Geometry입니다.</summary>
      <returns>지정된 값을 기반으로 새로운 기하 도형 다중선 값을 반환하는 새 DbFunctionExpression입니다.</returns>
      <param name="multiLineWellKnownBinaryValue">기하 도형 다중선 값의 잘 알려진 이진 표현을 제공하는 식입니다.</param>
      <param name="coordinateSystemId">기하 도형 다중선 값 좌표계의 좌표계 ID(SRID)를 제공하는 식입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryMultiLineFromText(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>지정된 인수를 사용하여 정식 'GeometryMultiLineFromText' 함수를 호출하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />을 만듭니다.multiLineWellKnownText에 문자열 결과 형식이 있어야 하는 반면 coordinateSystemId에는 정수 숫자 결과 형식이 있어야 합니다.식의 결과 형식은 Edm.Geometry입니다.</summary>
      <returns>지정된 값을 기반으로 새로운 기하 도형 다중선 값을 반환하는 새 DbFunctionExpression입니다.</returns>
      <param name="multiLineWellKnownText">기하 도형 다중선 값의 잘 알려진 텍스트 표현을 제공하는 식입니다.</param>
      <param name="coordinateSystemId">기하 도형 다중선 값 좌표계의 좌표계 ID(SRID)를 제공하는 식입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryMultiPointFromBinary(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>지정된 인수를 사용하여 정식 'GeometryMultiPointFromBinary' 함수를 호출하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />을 만듭니다.multiPointWellKnownBinaryValue에 이진 결과 형식이 있어야 하는 반면 coordinateSystemId에는 정수 숫자 결과 형식이 있어야 합니다.식의 결과 형식은 Edm.Geometry입니다.</summary>
      <returns>지정된 값을 기반으로 새로운 기하 도형 다중 지점 값을 반환하는 새 DbFunctionExpression입니다.</returns>
      <param name="multiPointWellKnownBinaryValue">기하 도형 다중 지점 값의 잘 알려진 이진 표현을 제공하는 식입니다.</param>
      <param name="coordinateSystemId">기하 도형 다중 지점 값 좌표계의 좌표계 ID(SRID)를 제공하는 식입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryMultiPointFromText(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>지정된 인수를 사용하여 정식 'GeometryMultiPointFromText' 함수를 호출하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />을 만듭니다.multiPointWellKnownText에 문자열 결과 형식이 있어야 하는 반면 coordinateSystemId에는 정수 숫자 결과 형식이 있어야 합니다.식의 결과 형식은 Edm.Geometry입니다.</summary>
      <returns>지정된 값을 기반으로 새로운 기하 도형 다중 지점 값을 반환하는 새 DbFunctionExpression입니다.</returns>
      <param name="multiPointWellKnownText">기하 도형 다중 지점 값의 잘 알려진 텍스트 표현을 제공하는 식입니다.</param>
      <param name="coordinateSystemId">기하 도형 다중 지점 값 좌표계의 좌표계 ID(SRID)를 제공하는 식입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryMultiPolygonFromBinary(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>지정된 인수를 사용하여 정식 'GeometryMultiPolygonFromBinary' 함수를 호출하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />을 만듭니다.multiPolygonWellKnownBinaryValue에 이진 결과 형식이 있어야 하는 반면 coordinateSystemId에는 정수 숫자 결과 형식이 있어야 합니다.식의 결과 형식은 Edm.Geometry입니다.</summary>
      <returns>지정된 값을 기반으로 새로운 기하 도형 다중 다각형 값을 반환하는 새 DbFunctionExpression입니다.</returns>
      <param name="multiPolygonWellKnownBinaryValue">기하 도형 다중 다각형 값의 잘 알려진 이진 표현을 제공하는 식입니다.</param>
      <param name="coordinateSystemId">기하 도형 다중 다각형 값 좌표계의 좌표계 ID(SRID)를 제공하는 식입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryMultiPolygonFromText(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>지정된 인수를 사용하여 정식 'GeometryMultiPolygonFromText' 함수를 호출하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />을 만듭니다.multiPolygonWellKnownText에 문자열 결과 형식이 있어야 하는 반면 coordinateSystemId에는 정수 숫자 결과 형식이 있어야 합니다.식의 결과 형식은 Edm.Geometry입니다.</summary>
      <returns>지정된 값을 기반으로 새로운 기하 도형 다중 다각형 값을 반환하는 새 DbFunctionExpression입니다.</returns>
      <param name="multiPolygonWellKnownText">기하 도형 다중 다각형 값의 잘 알려진 텍스트 표현을 제공하는 식입니다.</param>
      <param name="coordinateSystemId">기하 도형 다중 다각형 값 좌표계의 좌표계 ID(SRID)를 제공하는 식입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryPointFromBinary(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>지정된 인수를 사용하여 정식 'GeometryPointFromBinary' 함수를 호출하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />을 만듭니다.pointWellKnownBinaryValue에 이진 결과 형식이 있어야 하는 반면 coordinateSystemId에는 정수 숫자 결과 형식이 있어야 합니다.식의 결과 형식은 Edm.Geometry입니다.</summary>
      <returns>지정된 값을 기반으로 새로운 기하 도형 점 값을 반환하는 새 DbFunctionExpression입니다.</returns>
      <param name="pointWellKnownBinaryValue">기하 도형 점 값의 잘 알려진 이진 표현을 제공하는 식입니다.</param>
      <param name="coordinateSystemId">기하 도형 점 값 좌표계의 좌표계 ID(SRID)를 제공하는 식입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryPointFromText(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>지정된 인수를 사용하여 정식 'GeometryPointFromText' 함수를 호출하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />을 만듭니다.pointWellKnownText에 문자열 결과 형식이 있어야 하는 반면 coordinateSystemId에는 정수 숫자 결과 형식이 있어야 합니다.식의 결과 형식은 Edm.Geometry입니다.</summary>
      <returns>지정된 값을 기반으로 새로운 기하 도형 점 값을 반환하는 새 DbFunctionExpression입니다.</returns>
      <param name="pointWellKnownText">기하 도형 점 값의 잘 알려진 텍스트 표현을 제공하는 식입니다.</param>
      <param name="coordinateSystemId">기하 도형 점 값 좌표계의 좌표계 ID(SRID)를 제공하는 식입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryPolygonFromBinary(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>지정된 인수를 사용하여 정식 'GeometryPolygonFromBinary' 함수를 호출하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />을 만듭니다.polygonWellKnownBinaryValue에 이진 결과 형식이 있어야 하는 반면 coordinateSystemId에는 정수 숫자 결과 형식이 있어야 합니다.식의 결과 형식은 Edm.Geometry입니다.</summary>
      <returns>지정된 값을 기반으로 새로운 기하 도형 다각형 값을 반환하는 새 DbFunctionExpression입니다.</returns>
      <param name="polygonWellKnownBinaryValue">기하 도형 다각형 값의 잘 알려진 이진 표현을 제공하는 식입니다.</param>
      <param name="coordinateSystemId">기하 도형 다각형 값 좌표계의 좌표계 ID(SRID)를 제공하는 식입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryPolygonFromText(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>지정된 인수를 사용하여 정식 'GeometryPolygonFromText' 함수를 호출하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />을 만듭니다.polygonWellKnownText에 문자열 결과 형식이 있어야 하는 반면 coordinateSystemId에는 정수 숫자 결과 형식이 있어야 합니다.식의 결과 형식은 Edm.Geometry입니다.</summary>
      <returns>지정된 값을 기반으로 새로운 기하 도형 다각형 값을 반환하는 새 DbFunctionExpression입니다.</returns>
      <param name="polygonWellKnownText">기하 도형 다각형 값의 잘 알려진 텍스트 표현을 제공하는 식입니다.</param>
      <param name="coordinateSystemId">기하 도형 다각형 값 좌표계의 좌표계 ID(SRID)를 제공하는 식입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.InteriorRingAt(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>지정된 인수를 사용하여 정식 'InteriorRingAt' 함수를 호출하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />을 만듭니다.첫 번째 인수에는 Edm.Geometry 결과 형식을 사용해야 합니다.두 번째 인수에는 정수 결과 형식을 사용해야 합니다.식의 결과 형식은 Edm.Geometry입니다.</summary>
      <returns>geometryValue의 indexValue 위치에 있는 내부 링을 반환하거나 geometryValue가 다각형이 아닌 경우 null을 반환하는 새 DbFunctionExpression입니다.</returns>
      <param name="geometryValue">기하 도형 값입니다.</param>
      <param name="indexValue">다각형 내에서 검색할 내부 링의 위치를 지정하는 식입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.InteriorRingCount(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>결과 형식이 Edm.Geometry 형식이어야 하는 지정된 인수를 사용하여 정식 'InteriorRingCount' 함수를 호출하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />을 만듭니다.식의 결과 형식은 Edm.Int32입니다.</summary>
      <returns>다각형 geometryValue의 내부 링 수를 반환하거나 geometryValue가 다각형이 아닌 경우 null을 반환하는 새 DbFunctionExpression입니다.</returns>
      <param name="geometryValue">기하 도형 값입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.IsClosedSpatial(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>결과 형식이 Edm.Geography 또는 Edm.Geometry 형식이어야 하는 지정된 인수를 사용하여 정식 'IsClosedSpatial' 함수를 호출하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />을 만듭니다.결과 형식은 Edm.Boolean입니다.</summary>
      <returns>spatialValue가 닫혀 있는지 여부를 나타내는 부울 값을 반환하거나 spatialValue가 곡선이 아닌 경우 null을 반환하는 새 DbFunctionExpression입니다.</returns>
      <param name="spatialValue">IsClosedSpatial 값을 검색할 공간 곡선 값을 지정하는 식입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.IsEmptySpatial(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>결과 형식이 Edm.Geography 또는 Edm.Geometry 형식이어야 하는 지정된 인수를 사용하여 정식 'IsEmptySpatial' 함수를 호출하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />을 만듭니다.식의 결과 형식은 Edm.Boolean입니다.</summary>
      <returns>spatialValue가 비어 있는지 여부를 나타내는 부울 값을 반환하는 새 DbFunctionExpression입니다.</returns>
      <param name="spatialValue">IsEmptySptiaal 값을 검색할 공간 값을 지정하는 식입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.IsRing(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>결과 형식이 Edm.Geometry 형식이어야 하는 지정된 인수를 사용하여 정식 'IsRing' 함수를 호출하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />을 만듭니다.결과 형식은 Edm.Boolean입니다.</summary>
      <returns>geometryValue가 닫힌 단순 링인지 여부를 나타내는 부울 값을 반환하거나 geometryValue가 곡선이 아닌 경우 null을 반환하는 새 DbFunctionExpression입니다.</returns>
      <param name="geometryValue">IsRing 값을 검색할 기하학 곡선 값을 지정하는 식입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.IsSimpleGeometry(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>결과 형식이 Edm.Geometry 형식이어야 하는 지정된 인수를 사용하여 정식 'IsSimpleGeometry' 함수를 호출하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />을 만듭니다.식의 결과 형식은 Edm.Boolean입니다.</summary>
      <returns>geometryValue가 단순한 기하 도형인지 여부를 나타내는 부울 값을 반환하는 새 DbFunctionExpression입니다.</returns>
      <param name="geometryValue">기하 도형 값입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.IsValidGeometry(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>결과 형식이 Edm.Geometry 형식이어야 하는 지정된 인수를 사용하여 정식 'IsValidGeometry' 함수를 호출하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />을 만듭니다.식의 결과 형식은 Edm.Boolean입니다.</summary>
      <returns>geometryValue가 유효한지 여부를 나타내는 부울 값을 반환하는 새 DbFunctionExpression입니다.</returns>
      <param name="geometryValue">공간 유효성 검사를 테스트할 기하 도형 값을 지정하는 식입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.Latitude(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>결과 형식이 Edm.Geography 형식이어야 하는 지정된 인수를 사용하여 정식 'Latitude' 함수를 호출하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />을 만듭니다.식의 결과 형식은 Edm.Double입니다.</summary>
      <returns>geographyValue의 위도 값을 반환하거나 geographyValue가 점이 아닌 경우 null을 반환하는 새 DbFunctionExpression입니다.</returns>
      <param name="geographyValue">위도 값을 검색할 지리 점 값을 지정하는 식입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.Longitude(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>결과 형식이 Edm.Geography 형식이어야 하는 지정된 인수를 사용하여 정식 'Longitude' 함수를 호출하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />을 만듭니다.식의 결과 형식은 Edm.Double입니다.</summary>
      <returns>geographyValue의 경도 값을 반환하거나 geographyValue가 점이 아닌 경우 null을 반환하는 새 DbFunctionExpression입니다.</returns>
      <param name="geographyValue">경도 값을 검색할 지리 점 값을 지정하는 식입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.Measure(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>결과 형식이 Edm.Geography 또는 Edm.Geometry 형식이어야 하는 지정된 인수를 사용하여 정식 'Measure' 함수를 호출하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />을 만듭니다.식의 결과 형식은 Edm.Double입니다.</summary>
      <returns>spatialValue의 측정값을 반환하거나 spatialValue가 점이 아닌 경우 null을 반환하는 새 DbFunctionExpression입니다.</returns>
      <param name="spatialValue">측정값(M) 좌표 값을 검색할 공간 점 값을 지정하는 식입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.PointAt(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>지정된 인수를 사용하여 정식 'PointAt' 함수를 호출하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />을 만듭니다.첫 번째 인수에는 Edm.Geography 또는 Edm.Geometry 결과 형식을 사용해야 합니다.두 번째 인수에는 정수 결과 형식을 사용해야 합니다.식의 결과 형식은 spatialValue의 결과 형식과 같습니다.</summary>
      <returns>spatialValue의 indexValue 위치에 있는 점을 반환하거나 spatialValue가 선 문자열이 아닌 경우 null을 반환하는 새 DbFunctionExpression입니다.</returns>
      <param name="spatialValue">공간 선 문자열 값을 지정하는 식입니다.</param>
      <param name="indexValue">선 문자열 내에서 검색할 점의 위치를 지정하는 식입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.PointCount(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>결과 형식이 Edm.Geography 또는 Edm.Geometry 형식이어야 하는 지정된 인수를 사용하여 정식 'PointCount' 함수를 호출하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />을 만듭니다.식의 결과 형식은 Edm.Int32입니다.</summary>
      <returns>spatialValue의 점 수를 반환하거나 spatialValue가 선 문자열이 아닌 경우 null을 반환하는 새 DbFunctionExpression입니다.</returns>
      <param name="spatialValue">해당 개수의 점을 검색할 공간 선 문자열 값을 지정하는 식입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.PointOnSurface(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>결과 형식이 Edm.Geometry 형식이어야 하는 지정된 인수를 사용하여 정식 'PointOnSurface' 함수를 호출하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />을 만듭니다.식의 결과 형식은 Edm.Geometry입니다.</summary>
      <returns>표면 geometryValue에 있도록 보장된 점을 반환하거나 geometryValue가 표면이 아닌 경우 null을 반환하는 새 DbFunctionExpression입니다.</returns>
      <param name="geometryValue">점을 검색할 기하 도형 표면 값을 지정하는 식입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialBoundary(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>결과 형식이 Edm.Geometry 형식이어야 하는 지정된 인수를 사용하여 정식 'SpatialBoundary' 함수를 호출하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />을 만듭니다.식의 결과 형식은 Edm.Geometry입니다.</summary>
      <returns>geometryValue의 경계를 반환하는 새 DbFunctionExpression입니다.</returns>
      <param name="geometryValue">SpatialBoundary 값을 검색할 기하 도형 값을 지정하는 식입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialBuffer(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>결과 형식이 Edm.Geography 또는 Edm.Geometry와 Edm.Double이어야 하는 지정된 인수를 사용하여 정식 'SpatialBuffer' 함수를 호출하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />을 만듭니다.식의 결과 형식은 Edm.Geometry입니다.</summary>
      <returns>spatialValue에서 distance보다 작거나 같은 거리에 있는 모든 점을 나타내는 기하 도형 값을 반환하는 새 DbFunctionExpression입니다.</returns>
      <param name="spatialValue">공간 값을 지정하는 식입니다.</param>
      <param name="distance">버퍼 거리를 지정하는 식입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialContains(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>결과 형식이 Edm.Geometry 형식이어야 하는 지정된 인수를 사용하여 정식 'SpatialContains' 함수를 호출하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />을 만듭니다.식의 결과 형식은 Edm.Boolean입니다.</summary>
      <returns>geometryValue1이 geometryValue2를 포함하는지 여부를 나타내는 부울 값을 반환하는 새 DbFunctionExpression입니다.</returns>
      <param name="geometryValue1">첫 번째 기하 도형 값을 지정하는 식입니다.</param>
      <param name="geometryValue2">geometryValue1과 비교해야 하는 기하 도형 값을 지정하는 식입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialConvexHull(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>결과 형식이 Edm.Geometry 형식이어야 하는 지정된 인수를 사용하여 정식 'SpatialConvexHull' 함수를 호출하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />을 만듭니다.식의 결과 형식은 Edm.Geometry입니다.</summary>
      <returns>geometryValue의 볼록 다각형을 반환하는 새 DbFunctionExpression입니다.</returns>
      <param name="geometryValue">볼록 다각형 값을 검색할 기하 도형 값을 지정하는 식입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialCrosses(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>결과 형식이 Edm.Geometry 형식이어야 하는 지정된 인수를 사용하여 정식 'SpatialCrosses' 함수를 호출하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />을 만듭니다.식의 결과 형식은 Edm.Boolean입니다.</summary>
      <returns>geometryValue1이 geometryValue2와 교차하는지 여부를 나타내는 부울 값을 반환하는 새 DbFunctionExpression입니다.</returns>
      <param name="geometryValue1">첫 번째 기하 도형 값을 지정하는 식입니다.</param>
      <param name="geometryValue2">geometryValue1과 비교해야 하는 기하 도형 값을 지정하는 식입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialDifference(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>결과 형식이 각각 Edm.Geography 또는 Edm.Geometry 형식이어야 하는 지정된 인수를 사용하여 정식 'SpatialDifference' 함수를 호출하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />을 만듭니다.spatialValue1의 결과 형식은 spatialValue2 결과 형식과 일치해야 합니다.식의 결과 형식은 spatialValue1 및 spatialValue2의 결과 형식과 같습니다.</summary>
      <returns>spatialValue1과 spatialValue2의 차이를 나타내는 기하 도형 값을 반환하는 새 DbFunctionExpression입니다.</returns>
      <param name="spatialValue1">첫 번째 공간 값을 지정하는 식입니다.</param>
      <param name="spatialValue2">spatialValue1과의 차이를 계산할 공간 값을 지정하는 식입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialDimension(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>결과 형식이 Edm.Geography 또는 Edm.Geometry 형식이어야 하는 지정된 인수를 사용하여 정식 'SpatialDimension' 함수를 호출하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />을 만듭니다.식의 결과 형식은 Edm.Int32입니다.</summary>
      <returns>spatialValue에서 차원 값을 반환하는 새 DbFunctionExpression입니다.</returns>
      <param name="spatialValue">차원 값을 검색할 값을 지정하는 식입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialDisjoint(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>결과 형식이 각각 Edm.Geography 또는 Edm.Geometry 형식이어야 하는 지정된 인수를 사용하여 정식 'SpatialDisjoint' 함수를 호출하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />을 만듭니다.spatialValue1의 결과 형식은 spatialValue2 결과 형식과 일치해야 합니다.식의 결과 형식은 Edm.Boolean입니다.</summary>
      <returns>spatialValue1이 spatialValue2와 분리되어 있는지 여부를 나타내는 부울 값을 반환하는 새 DbFunctionExpression입니다.</returns>
      <param name="spatialValue1">첫 번째 공간 값을 지정하는 식입니다.</param>
      <param name="spatialValue2">spatialValue1과 연결되어 있지 않은지 비교할 공간 값을 지정하는 식입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialElementAt(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>지정된 인수를 사용하여 정식 'SpatialElementAt' 함수를 호출하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />을 만듭니다.첫 번째 인수에는 Edm.Geography 또는 Edm.Geometry 결과 형식을 사용해야 합니다.두 번째 인수에는 정수 결과 형식을 사용해야 합니다.식의 결과 형식은 spatialValue의 결과 형식과 같습니다.</summary>
      <returns>spatialValue의 indexValue 위치에 있는 컬렉션 요소를 반환하거나 spatialValue가 컬렉션이 아닌 경우 null을 반환하는 새 DbFunctionExpression입니다.</returns>
      <param name="spatialValue">지리 또는 기하 도형 컬렉션 값을 지정하는 식입니다.</param>
      <param name="indexValue">기하 도형 또는 지리 컬렉션 내에서 검색할 요소의 위치를 지정하는 식입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialElementCount(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>결과 형식이 Edm.Geography 또는 Edm.Geometry 형식이어야 하는 지정된 인수를 사용하여 정식 'SpatialElementCount' 함수를 호출하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />을 만듭니다.식의 결과 형식은 Edm.Int32입니다.</summary>
      <returns>spatialValue의 요소 수를 반환하거나 spatialValue가 컬렉션이 아닌 경우 null을 반환하는 새 DbFunctionExpression입니다.</returns>
      <param name="spatialValue">해당 개수의 요소를 검색할 지리 또는 기하 도형 컬렉션 값을 지정하는 식입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialEnvelope(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>결과 형식이 Edm.Geometry 형식이어야 하는 지정된 인수를 사용하여 정식 'SpatialEnvelope' 함수를 호출하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />을 만듭니다.식의 결과 형식은 Edm.Geometry입니다.</summary>
      <returns>geometryValue의 최소 경계 상자를 반환하는 새 DbFunctionExpression입니다.</returns>
      <param name="geometryValue">봉투 값을 검색할 값을 지정하는 식입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialEquals(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>결과 형식이 각각 Edm.Geography 또는 Edm.Geometry 형식이어야 하는 지정된 인수를 사용하여 정식 'SpatialEquals' 함수를 호출하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />을 만듭니다.spatialValue1의 결과 형식은 spatialValue2 결과 형식과 일치해야 합니다.식의 결과 형식은 Edm.Boolean입니다.</summary>
      <returns>spatialValue1이 spatialValue2와 같은지 여부를 나타내는 부울 값을 반환하는 새 DbFunctionExpression입니다.</returns>
      <param name="spatialValue1">첫 번째 공간 값을 지정하는 식입니다.</param>
      <param name="spatialValue2">spatialValue1과 같은지 비교할 공간 값을 지정하는 식입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialIntersection(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>결과 형식이 각각 Edm.Geography 또는 Edm.Geometry 형식이어야 하는 지정된 인수를 사용하여 정식 'SpatialIntersection' 함수를 호출하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />을 만듭니다.spatialValue1의 결과 형식은 spatialValue2 결과 형식과 일치해야 합니다.식의 결과 형식은 spatialValue1 및 spatialValue2의 결과 형식과 같습니다.</summary>
      <returns>spatialValue1 및 spatialValue2의 교집합을 나타내는 공간 값을 반환하는 새 DbFunctionExpression입니다.</returns>
      <param name="spatialValue1">첫 번째 공간 값을 지정하는 식입니다.</param>
      <param name="spatialValue2">spatialValue1과의 교집합 부분을 계산할 공간 값을 지정하는 식입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialIntersects(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>결과 형식이 각각 Edm.Geography 또는 Edm.Geometry 형식이어야 하는 지정된 인수를 사용하여 정식 'SpatialIntersects' 함수를 호출하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />을 만듭니다.spatialValue1의 결과 형식은 spatialValue2 결과 형식과 일치해야 합니다.식의 결과 형식은 Edm.Boolean입니다.</summary>
      <returns>spatialValue1이 spatialValue2와 교차하는지 여부를 나타내는 부울 값을 반환하는 새 DbFunctionExpression입니다.</returns>
      <param name="spatialValue1">첫 번째 공간 값을 지정하는 식입니다.</param>
      <param name="spatialValue2">spatialValue1과 교차하는지 비교할 공간 값을 지정하는 식입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialLength(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>결과 형식이 Edm.Geography 또는 Edm.Geometry 형식이어야 하는 지정된 인수를 사용하여 정식 'SpatialLength' 함수를 호출하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />을 만듭니다.식의 결과 형식은 Edm.Double입니다.</summary>
      <returns>spatialValue의 길이를 반환하거나 spatialValue가 곡선이 아닌 경우 null을 반환하는 새 DbFunctionExpression입니다.</returns>
      <param name="spatialValue">길이를 검색할 공간 곡선 값을 지정하는 식입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialOverlaps(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>결과 형식이 Edm.Geometry 형식이어야 하는 지정된 인수를 사용하여 정식 'SpatialOverlaps' 함수를 호출하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />을 만듭니다.식의 결과 형식은 Edm.Boolean입니다.</summary>
      <returns>geometryValue1이 geometryValue2와 공간적으로 겹치는지 여부를 나타내는 부울 값을 반환하는 새 DbFunctionExpression입니다.</returns>
      <param name="geometryValue1">첫 번째 기하 도형 값을 지정하는 식입니다.</param>
      <param name="geometryValue2">geometryValue1과 비교해야 하는 기하 도형 값을 지정하는 식입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialRelate(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>결과 형식이 Edm.Geometry 및 문자열이어야 하는 지정된 인수를 사용하여 정식 'SpatialRelate' 함수를 호출하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />을 만듭니다.식의 결과 형식은 Edm.Boolean입니다.</summary>
      <returns>intersectionPatternMatrix로 지정된 공간 관계에 따라 geometryValue1이 geometryValue2와 공간적으로 관련되어 있는지 여부를 나타내는 부울 값을 반환하는 새 DbFunctionExpression입니다.</returns>
      <param name="geometryValue1">첫 번째 기하 도형 값을 지정하는 식입니다.</param>
      <param name="geometryValue2">geometryValue1과 비교해야 하는 기하 도형 값을 지정하는 식입니다.</param>
      <param name="intersectionPatternMatrix">geometryValue1 및 geometryValue2를 비교하는 데 사용되는 DE-9IM(Dimensionally Extended Nine-Intersection Model) 교차 패턴의 텍스트 표현을 지정하는 식입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialSymmetricDifference(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>결과 형식이 각각 Edm.Geography 또는 Edm.Geometry 형식이어야 하는 지정된 인수를 사용하여 정식 'SpatialSymmetricDifference' 함수를 호출하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />을 만듭니다.spatialValue1의 결과 형식은 spatialValue2 결과 형식과 일치해야 합니다.식의 결과 형식은 spatialValue1 및 spatialValue2의 결과 형식과 같습니다.</summary>
      <returns>spatialValue1과 spatialValue2의 대칭차를 나타내는 기하 도형 값을 반환하는 새 DbFunctionExpression입니다.</returns>
      <param name="spatialValue1">첫 번째 공간 값을 지정하는 식입니다.</param>
      <param name="spatialValue2">spatialValue1과의 대칭차를 계산할 공간 값을 지정하는 식입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialTouches(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>결과 형식이 Edm.Geometry 형식이어야 하는 지정된 인수를 사용하여 정식 'SpatialTouches' 함수를 호출하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />을 만듭니다.식의 결과 형식은 Edm.Boolean입니다.</summary>
      <returns>geometryValue1이 geometryValue2와 접하는지 여부를 나타내는 부울 값을 반환하는 새 DbFunctionExpression입니다.</returns>
      <param name="geometryValue1">첫 번째 기하 도형 값을 지정하는 식입니다.</param>
      <param name="geometryValue2">geometryValue1과 비교해야 하는 기하 도형 값을 지정하는 식입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialTypeName(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>결과 형식이 Edm.Geography 또는 Edm.Geometry 형식이어야 하는 지정된 인수를 사용하여 정식 'SpatialTypeName' 함수를 호출하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />을 만듭니다.식의 결과 형식은 Edm.String입니다.</summary>
      <returns>spatialValue에서 기하 도형 형식 이름 문자열을 반환하는 새 DbFunctionExpression입니다.</returns>
      <param name="spatialValue">기하 도형 형식 이름을 검색할 값을 지정하는 식입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialUnion(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>결과 형식이 각각 Edm.Geography 또는 Edm.Geometry 형식이어야 하는 지정된 인수를 사용하여 정식 'SpatialUnion' 함수를 호출하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />을 만듭니다.spatialValue1의 결과 형식은 spatialValue2 결과 형식과 일치해야 합니다.식의 결과 형식은 spatialValue1 및 spatialValue2의 결과 형식과 같습니다.</summary>
      <returns>spatialValue1 및 spatialValue2의 합집합을 나타내는 공간 값을 반환하는 새 DbFunctionExpression입니다.</returns>
      <param name="spatialValue1">첫 번째 공간 값을 지정하는 식입니다.</param>
      <param name="spatialValue2">spatialValue1과의 합집합 부분을 계산할 공간 값을 지정하는 식입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialWithin(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>결과 형식이 Edm.Geometry 형식이어야 하는 지정된 인수를 사용하여 정식 'SpatialWithin' 함수를 호출하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />을 만듭니다.식의 결과 형식은 Edm.Boolean입니다.</summary>
      <returns>geometryValue1이 geometryValue2 안에 있는지 여부를 나타내는 부울 값을 반환하는 새 DbFunctionExpression입니다.</returns>
      <param name="geometryValue1">첫 번째 기하 도형 값을 지정하는 식입니다.</param>
      <param name="geometryValue2">geometryValue1과 비교해야 하는 기하 도형 값을 지정하는 식입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.StartPoint(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>결과 형식이 Edm.Geography 또는 Edm.Geometry 형식이어야 하는 지정된 인수를 사용하여 정식 'StartPoint' 함수를 호출하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />을 만듭니다.결과 형식은 spatialValue의 결과 형식과 같습니다.</summary>
      <returns>spatialValue의 시작 점을 반환하거나 spatialValue가 곡선이 아닌 경우 null을 반환하는 새 DbFunctionExpression입니다.</returns>
      <param name="spatialValue">시작점을 검색할 공간 곡선 값을 지정하는 식입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.XCoordinate(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>결과 형식이 Edm.Geometry 형식이어야 하는 지정된 인수를 사용하여 정식 'XCoordinate' 함수를 호출하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />을 만듭니다.식의 결과 형식은 Edm.Double입니다.</summary>
      <returns>geometryValue의 X 좌표 값을 반환하거나 geometryValue가 점이 아닌 경우 null을 반환하는 새 DbFunctionExpression입니다.</returns>
      <param name="geometryValue">X 좌표 값을 검색할 기하 도형 점 값을 지정하는 식입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.YCoordinate(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>결과 형식이 Edm.Geometry 형식이어야 하는 지정된 인수를 사용하여 정식 'YCoordinate' 함수를 호출하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />을 만듭니다.식의 결과 형식은 Edm.Double입니다.</summary>
      <returns>geometryValue의 Y 좌표 값을 반환하거나 geometryValue가 점이 아닌 경우 null을 반환하는 새 DbFunctionExpression입니다.</returns>
      <param name="geometryValue">Y 좌표 값을 검색할 기하 도형 점 값을 지정하는 식입니다.</param>
    </member>
    <member name="T:System.Data.Entity.Core.Common.EntitySql.EntitySqlParser">
      <summary>공용 Entity SQL 파서 클래스입니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.EntitySql.EntitySqlParser.Parse(System.String,System.Data.Entity.Core.Common.CommandTrees.DbParameterReferenceExpression[])">
      <summary>지정된 매개 변수가 있는 지정된 쿼리를 구문 분석합니다.</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbCommandTree" />를 포함하는 <see cref="T:System.Data.Entity.Core.Common.EntitySql.ParseResult" /> 및 인라인 함수 정의가 있을 경우 이를 설명하는 정보입니다.</returns>
      <param name="query">구문 분석할 EntitySQL 쿼리입니다.</param>
      <param name="parameters">선택적인 쿼리 매개 변수입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.EntitySql.EntitySqlParser.ParseLambda(System.String,System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression[])">
      <summary>특정 집합 변수가 있는 특정 쿼리를 구문 분석하고 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLambda" />를 생성합니다.</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbCommandTree" />를 포함하는 <see cref="T:System.Data.Entity.Core.Common.EntitySql.ParseResult" /> 및 인라인 함수 정의가 있을 경우 이를 설명하는 정보입니다.</returns>
      <param name="query">구문 분석될 쿼리입니다.</param>
      <param name="variables">선택적인 쿼리 변수입니다.</param>
    </member>
    <member name="T:System.Data.Entity.Core.Common.EntitySql.FunctionDefinition">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.EntitySql.ParseResult" />의 일부로 반환되는 Entity SQL 쿼리 인라인 함수 정의입니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.EntitySql.FunctionDefinition.EndPosition">
      <summary>eSQL 쿼리 텍스트에 있는 함수 정의의 종료 위치입니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.EntitySql.FunctionDefinition.Lambda">
      <summary>함수 본문 및 매개 변수입니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.EntitySql.FunctionDefinition.Name">
      <summary>함수 이름입니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.EntitySql.FunctionDefinition.StartPosition">
      <summary>eSQL 쿼리 텍스트에 있는 함수 정의의 시작 위치입니다.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.EntitySql.ParseResult">
      <summary>Entity SQL 파서 결과 정보입니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.EntitySql.ParseResult.CommandTree">
      <summary>구문 분석 중에 생성된 명령 트리입니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.EntitySql.ParseResult.FunctionDefinitions">
      <summary>쿼리 인라인 함수 정의를 설명하는 <see cref="T:System.Data.Entity.Core.Common.EntitySql.FunctionDefinition" /> 개체의 목록입니다.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.EntityClient.EntityCommand">
      <summary>개념적 계층에 대한 명령을 나타내는 클래스입니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityCommand.#ctor">
      <summary>지정된 값을 사용하여 <see cref="T:System.Data.Entity.Core.EntityClient.EntityCommand" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityCommand.#ctor(System.String)">
      <summary>지정된 문을 사용하여 <see cref="T:System.Data.Entity.Core.EntityClient.EntityCommand" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="statement">명령 텍스트입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityCommand.#ctor(System.String,System.Data.Entity.Core.EntityClient.EntityConnection)">
      <summary>지정된 문 및 연결을 사용하여 <see cref="T:System.Data.Entity.Core.EntityClient.EntityCommand" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="statement">명령 텍스트입니다.</param>
      <param name="connection">데이터 원본에 대한 연결입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityCommand.#ctor(System.String,System.Data.Entity.Core.EntityClient.EntityConnection,System.Data.Entity.Core.EntityClient.EntityTransaction)">
      <summary>지정된 문, 연결 및 트랜잭션을 사용하여 <see cref="T:System.Data.Entity.Core.EntityClient.EntityCommand" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="statement">명령 텍스트입니다.</param>
      <param name="connection">데이터 원본에 대한 연결입니다.</param>
      <param name="transaction">명령이 실행되는 트랜잭션입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityCommand.#ctor(System.String,System.Data.Entity.Core.EntityClient.EntityConnection,System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver)">
      <summary>지정된 eSQL 문과 사용할 연결 개체가 있는 EntityCommand 개체를 생성합니다.</summary>
      <param name="statement">실행할 eSQL 명령 텍스트입니다.</param>
      <param name="connection">연결 개체입니다.</param>
      <param name="resolver">DbProviderServices를 확인하는 데 사용되는 확인자입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityCommand.Cancel">
      <summary>
        <see cref="T:System.Data.Entity.Core.EntityClient.EntityCommand" /> 실행을 취소합니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityCommand.CommandText">
      <summary>명령을 지정하는 Entity SQL 문 또는 실행할 저장 프로시저를 가져오거나 설정합니다.</summary>
      <returns>명령을 지정하는 Entity SQL 문 또는 실행할 저장 프로시저입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityCommand.CommandTimeout">
      <summary>제한 시간이 초과되기 전까지 대기하는 시간을 가져오거나 설정합니다.</summary>
      <returns>명령이 실행될 때까지 대기하는 시간(초)입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityCommand.CommandTree">
      <summary>실행할 명령 트리를 가져오거나 설정합니다. 명령 트리와 명령 텍스트 중 하나만 설정할 수 있으며 둘 다 설정할 수는 없습니다.</summary>
      <returns>실행할 명령 트리입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityCommand.CommandType">
      <summary>
        <see cref="P:System.Data.Entity.Core.EntityClient.EntityCommand.CommandText" /> 속성의 해석 방법을 나타내는 값을 가져오거나 설정합니다.</summary>
      <returns>
        <see cref="T:System.Data.CommandType" /> 열거형 값 중 하나입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityCommand.Connection">
      <summary>이 <see cref="T:System.Data.Entity.Core.EntityClient.EntityCommand" />에서 사용하는 <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" />을 가져오거나 설정합니다.</summary>
      <returns>엔터티 명령에 사용된 연결입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityCommand.CreateDbParameter">
      <summary>eSQL 문에서 매개 변수를 나타내는 새 매개 변수 개체를 만들고 반환합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityCommand.CreateParameter">
      <summary>
        <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> 개체의 새 인스턴스를 만듭니다.</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> 개체의 새 인스턴스입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityCommand.DbConnection">
      <summary>명령을 실행하는 데 사용되는 연결 개체입니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityCommand.DbParameterCollection">
      <summary>이 명령에 대한 매개 변수의 컬렉션입니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityCommand.DbTransaction">
      <summary>이 명령이 실행되는 트랜잭션입니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityCommand.DesignTimeVisible">
      <summary>명령 개체를 Windows Form 디자이너 컨트롤에 표시할지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
      <returns>명령 개체를 Windows Form 디자이너 컨트롤에 표시해야 하면 true이고, 그렇지 않으면 false입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityCommand.EnablePlanCaching">
      <summary>쿼리 계획 캐싱이 사용되는지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
      <returns>쿼리 계획 캐싱이 사용되면 true이고, 그렇지 않으면 false입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityCommand.ExecuteDbDataReader(System.Data.CommandBehavior)">
      <summary>명령을 실행하고 결과를 읽을 데이터 판독기를 반환합니다.</summary>
      <returns>DbDataReader 개체</returns>
      <param name="behavior">명령을 실행할 때 사용할 동작입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityCommand.ExecuteDbDataReaderAsync(System.Data.CommandBehavior,System.Threading.CancellationToken)">
      <summary>비동기적으로 명령을 실행하고 결과를 읽을 데이터 판독기를 반환합니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.작업 결과에는 DbDataReader 개체가 포함됩니다.</returns>
      <param name="behavior">명령을 실행할 때 사용할 동작입니다.</param>
      <param name="cancellationToken">취소 요청을 모니터링할 토큰입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityCommand.ExecuteNonQuery">
      <summary>현재 명령을 실행합니다.</summary>
      <returns>영향을 받은 행 수입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityCommand.ExecuteNonQueryAsync(System.Threading.CancellationToken)">
      <summary>비동기적으로 명령을 실행하고 명령에서 반환된 모든 결과를 취소합니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.작업 결과에는 영향을 받는 행 수가 포함됩니다.</returns>
      <param name="cancellationToken">작업이 완료되기를 기다리는 동안 관찰할 <see cref="T:System.Threading.CancellationToken" />입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityCommand.ExecuteReader">
      <summary>명령을 실행하고 데이터 판독기를 반환합니다.</summary>
      <returns>결과가 포함된 <see cref="T:System.Data.Entity.Core.EntityClient.EntityDataReader" />입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityCommand.ExecuteReader(System.Data.CommandBehavior)">
      <summary>
        <see cref="P:System.Data.Entity.Core.EntityClient.EntityCommand.CommandText" />를 명령 트리로 컴파일하고 실행을 위해 기본 저장소 공급자에 전달한 다음 지정된 <see cref="T:System.Data.CommandBehavior" />를 사용하여 생성된 결과 집합으로부터 <see cref="T:System.Data.Entity.Core.EntityClient.EntityDataReader" />를 빌드합니다.</summary>
      <returns>결과가 포함된 <see cref="T:System.Data.Entity.Core.EntityClient.EntityDataReader" />입니다.</returns>
      <param name="behavior">
        <see cref="T:System.Data.CommandBehavior" /> 값 중 하나입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityCommand.ExecuteReaderAsync">
      <summary>비동기적으로 명령을 실행하고 결과를 읽을 데이터 판독기를 반환합니다.CommandType.CommandText에서만 호출할 수 있습니다(그렇지 않은 경우 표준 Execute* 메서드 사용).</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.작업 결과에는 EntityDataReader 개체가 포함됩니다.</returns>
      <exception cref="T:System.InvalidOperationException">저장 프로시저 명령에서 엔터티 컬렉션 결과 이외의 항목에 대해 호출된 경우</exception>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityCommand.ExecuteReaderAsync(System.Data.CommandBehavior)">
      <summary>비동기적으로 명령을 실행하고 결과를 읽을 데이터 판독기를 반환합니다.CommandType.CommandText에서만 호출할 수 있습니다(그렇지 않은 경우 표준 Execute* 메서드 사용).</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.작업 결과에는 EntityDataReader 개체가 포함됩니다.</returns>
      <param name="behavior">명령을 실행할 때 사용할 동작입니다.</param>
      <exception cref="T:System.InvalidOperationException">저장 프로시저 명령에서 엔터티 컬렉션 결과 이외의 항목에 대해 호출된 경우</exception>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityCommand.ExecuteReaderAsync(System.Data.CommandBehavior,System.Threading.CancellationToken)">
      <summary>비동기적으로 명령을 실행하고 결과를 읽을 데이터 판독기를 반환합니다.CommandType.CommandText에서만 호출할 수 있습니다(그렇지 않은 경우 표준 Execute* 메서드 사용).</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.작업 결과에는 EntityDataReader 개체가 포함됩니다.</returns>
      <param name="behavior">명령을 실행할 때 사용할 동작입니다.</param>
      <param name="cancellationToken">작업이 완료되기를 기다리는 동안 관찰할 <see cref="T:System.Threading.CancellationToken" />입니다.</param>
      <exception cref="T:System.InvalidOperationException">저장 프로시저 명령에서 엔터티 컬렉션 결과 이외의 항목에 대해 호출된 경우</exception>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityCommand.ExecuteReaderAsync(System.Threading.CancellationToken)">
      <summary>비동기적으로 명령을 실행하고 결과를 읽을 데이터 판독기를 반환합니다.CommandType.CommandText에서만 호출할 수 있습니다(그렇지 않은 경우 표준 Execute* 메서드 사용).</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.작업 결과에는 EntityDataReader 개체가 포함됩니다.</returns>
      <param name="cancellationToken">작업이 완료되기를 기다리는 동안 관찰할 <see cref="T:System.Threading.CancellationToken" />입니다.</param>
      <exception cref="T:System.InvalidOperationException">저장 프로시저 명령에서 엔터티 컬렉션 결과 이외의 항목에 대해 호출된 경우</exception>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityCommand.ExecuteScalar">
      <summary>명령을 실행하고 결과 집합에서 첫째 행의 첫째 열을 반환합니다.다른 열이나 행은 무시됩니다.</summary>
      <returns>결과 집합에 있는 첫째 행의 첫째 열이거나, 결과 집합이 비어 있는 경우 null 참조(Visual Basic에서는 Nothing)입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityCommand.Parameters">
      <summary>Entity SQL 문 또는 저장 프로시저의 매개 변수를 가져옵니다.</summary>
      <returns>Entity SQL 문 또는 저장 프로시저의 매개 변수입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityCommand.Prepare">
      <summary>엔터티 수준 명령을 컴파일하고 명령의 준비된 버전을 만듭니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityCommand.ToTraceString">
      <summary>엔터티 수준 명령을 컴파일하고 저장 명령 텍스트를 반환합니다.</summary>
      <returns>저장소 명령 텍스트입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityCommand.Transaction">
      <summary>
        <see cref="T:System.Data.SqlClient.SqlCommand" />가 실행되는 트랜잭션을 가져오거나 설정합니다.</summary>
      <returns>
        <see cref="T:System.Data.SqlClient.SqlCommand" />가 실행되는 트랜잭션입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityCommand.UpdatedRowSource">
      <summary>명령 결과가 업데이트 중인 행에 적용되는 방법을 가져오거나 설정합니다.</summary>
      <returns>
        <see cref="T:System.Data.UpdateRowSource" /> 값 중 하나입니다.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.EntityClient.EntityConnection">
      <summary>개념적 계층에 대한 연결을 나타내는 클래스입니다.엔터티 연결은 연결을 열어 한 번만 초기화할 수 있습니다.이후에는 연결 문자열을 변경하거나, 새 저장소에 연결하거나, 저장소 연결 문자열을 변경할 수 없습니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityConnection.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityConnection.#ctor(System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace,System.Data.Common.DbConnection)">
      <summary>지정된 <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace" />와 <see cref="T:System.Data.Common.DbConnection" />을 사용하여 <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="workspace">이 <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" />과 연결할 <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace" />입니다.</param>
      <param name="connection">이 <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" /> 개체에 대한 기본 데이터 원본 연결입니다.</param>
      <exception cref="T:System.ArgumentNullException">workspace 또는 connection 매개 변수가 null인 경우</exception>
      <exception cref="T:System.ArgumentException">workspace에서 개념적 모델이 누락된 경우, 또는 workspace에서 매핑 파일이 누락된 경우, 또는 workspace에서 저장소 모델이 누락된 경우, 또는 connection이 닫힘 상태가 아닌 경우</exception>
      <exception cref="T:System.Data.Entity.Core.ProviderIncompatibleException">connection을 ADO.NET Entity Framework 호환 공급자가 제공하지 않은 경우</exception>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityConnection.#ctor(System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace,System.Data.Common.DbConnection,System.Boolean)">
      <summary>메모리에 로드된 메타데이터에서 EntityConnection을 생성합니다.</summary>
      <param name="workspace">메타데이터 정보가 포함된 작업 영역입니다.</param>
      <param name="connection">저장소 연결입니다.</param>
      <param name="entityConnectionOwnsStoreConnection">True로 설정하면 엔터티 연결이 삭제될 때 저장소 연결이 삭제되고, 그렇지 않으면 호출자가 저장소 연결을 삭제해야 합니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityConnection.#ctor(System.String)">
      <summary>연결 문자열을 기반으로 <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="connectionString">공급자별 연결 문자열입니다.</param>
      <exception cref="T:System.ArgumentException">잘못된 연결 문자열 키워드를 제공했거나 필요한 연결 문자열 키워드를 제공하지 않은 경우</exception>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityConnection.BeginDbTransaction(System.Data.IsolationLevel)">
      <summary>데이터베이스 트랜잭션을 시작합니다.</summary>
      <returns>새 트랜잭션을 나타내는 개체입니다.</returns>
      <param name="isolationLevel">트랜잭션의 격리 수준입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityConnection.BeginTransaction">
      <summary>기본 공급자를 사용하여 트랜잭션을 시작합니다.</summary>
      <returns>새 <see cref="T:System.Data.Entity.Core.EntityClient.EntityTransaction" />입니다.반환된 <see cref="T:System.Data.Entity.Core.EntityClient.EntityTransaction" /> 인스턴스는 나중에 <see cref="T:System.Data.Entity.Core.EntityClient.EntityCommand" />와 연결되어 해당 트랜잭션에서 명령을 실행할 수 있습니다.</returns>
      <exception cref="T:System.InvalidOperationException">기본 공급자를 알 수 없는 경우, 또는 현재 트랜잭션이 이미 있는 <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" />에 대해 <see cref="M:System.Data.Entity.Core.EntityClient.EntityConnection.BeginTransaction" />을 호출한 경우, 또는 <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" />의 상태가 <see cref="F:System.Data.ConnectionState.Open" />이 아닌 경우</exception>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityConnection.BeginTransaction(System.Data.IsolationLevel)">
      <summary>기본 공급자를 사용하여 지정된 격리 수준의 트랜잭션을 시작합니다.</summary>
      <returns>새 <see cref="T:System.Data.Entity.Core.EntityClient.EntityTransaction" />입니다.반환된 <see cref="T:System.Data.Entity.Core.EntityClient.EntityTransaction" /> 인스턴스는 나중에 <see cref="T:System.Data.Entity.Core.EntityClient.EntityCommand" />와 연결되어 해당 트랜잭션에서 명령을 실행할 수 있습니다.</returns>
      <param name="isolationLevel">트랜잭션의 격리 수준입니다.</param>
      <exception cref="T:System.InvalidOperationException">기본 공급자를 알 수 없는 경우, 또는 현재 트랜잭션이 이미 있는 <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" />에 대해 <see cref="M:System.Data.Entity.Core.EntityClient.EntityConnection.BeginTransaction" />을 호출한 경우, 또는 <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" />의 상태가 <see cref="F:System.Data.ConnectionState.Open" />이 아닌 경우</exception>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityConnection.ChangeDatabase(System.String)">
      <summary>지원되지 않습니다.</summary>
      <param name="databaseName">지원되지 않습니다.</param>
      <exception cref="T:System.NotSupportedException">이 메서드가 호출된 경우</exception>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityConnection.Close">
      <summary>데이터베이스에 대한 연결을 닫습니다.</summary>
      <exception cref="T:System.InvalidOperationException">연결을 닫을 때 오류가 발생한 경우</exception>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityConnection.ConnectionString">
      <summary>
        <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" /> 연결 문자열을 가져오거나 설정합니다.</summary>
      <returns>데이터 원본에 대한 초기 연결을 설정하는 데 필요한 연결 문자열입니다.기본값은 빈 문자열입니다.연결이 닫힌 경우에는 현재 설정된 값이 반환되고,값을 지정하지 않은 경우에는 빈 문자열이 반환됩니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityConnection.ConnectionTimeout">
      <summary>연결을 설정할 때 연결 시도를 끝내고 오류를 생성하기 전까지 대기할 시간(초)을 가져옵니다.</summary>
      <returns>연결이 열리기 전까지 대기할 시간(초)입니다.기본값은 기본 데이터 공급자의 기본 제한 시간입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityConnection.CreateCommand">
      <summary>
        <see cref="T:System.Data.Entity.Core.EntityClient.EntityCommand" />의 새 인스턴스를 만들고 <see cref="P:System.Data.Entity.Core.EntityClient.EntityCommand.Connection" />을 이 <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" />으로 설정합니다.</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.EntityClient.EntityCommand" /> 개체입니다.</returns>
      <exception cref="T:System.InvalidOperationException">기본 데이터 공급자의 이름을 알 수 없는 경우</exception>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityConnection.CreateDbCommand">
      <summary>이 연결 개체를 사용하는 새 명령 개체를 만듭니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityConnection.Database">
      <summary>현재 데이터베이스의 이름 또는 연결이 열린 후에 사용될 데이터베이스의 이름을 가져옵니다.</summary>
      <returns>기본 데이터 공급자의 Database 속성 값입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityConnection.DataSource">
      <summary>연결할 데이터 소스의 이름이나 네트워크 주소를 가져옵니다.</summary>
      <returns>데이터 원본의 이름입니다.기본값은 빈 문자열입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityConnection.DbProviderFactory">
      <summary>EntityConnection와 연결된 공급자 팩터리를 가져옵니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityConnection.Dispose(System.Boolean)">
      <summary>이 연결 개체를 정리합니다.</summary>
      <param name="disposing">관리되는 리소스와 관리되지 않는 리소스를 모두 해제하려면 true이고, 관리되지 않는 리소스만 해제하려면 false입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityConnection.EnlistTransaction(System.Transactions.Transaction)">
      <summary>지정된 트랜잭션에 이 <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" />을 인리스트먼트합니다.</summary>
      <param name="transaction">연결을 인리스트먼트할 트랜잭션 개체입니다.</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" />의 상태가 <see cref="F:System.Data.ConnectionState.Open" />이 아닌 경우</exception>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityConnection.GetMetadataWorkspace">
      <summary>이 <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" />과 연결된 <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace" />를 반환합니다.</summary>
      <returns>이 <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" />과 연결된 <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace" />입니다.</returns>
      <exception cref="T:System.Data.Entity.Core.MetadataException">인라인 연결 문자열에 잘못된 Metadata 키워드 값이 포함된 경우</exception>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityConnection.Open">
      <summary>기본 데이터 공급자의 Open 메서드를 호출하여 데이터 원본에 대한 연결을 설정합니다.</summary>
      <exception cref="T:System.InvalidOperationException">연결을 열 때 오류가 발생하거나 기본 데이터 공급자의 이름을 알 수 없는 경우</exception>
      <exception cref="T:System.Data.Entity.Core.MetadataException">인라인 연결 문자열에 잘못된 Metadata 키워드 값이 포함된 경우</exception>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityConnection.OpenAsync(System.Threading.CancellationToken)">
      <summary>기본 데이터 공급자에서 Open 메서드를 호출하여 데이터 저장소에 대한 연결을 비동기적으로 설정합니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.</returns>
      <param name="cancellationToken">작업이 완료되기를 기다리는 동안 관찰할 <see cref="T:System.Threading.CancellationToken" />입니다.</param>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityConnection.ServerVersion">
      <summary>클라이언트가 연결된 데이터 원본의 버전이 포함된 문자열을 가져옵니다.</summary>
      <returns>공급자 연결 문자열에 포함된 데이터 원본의 버전입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityConnection.State">
      <summary>
        <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" />이 열려 있으면 기본 공급자의 <see cref="T:System.Data.ConnectionState" /> 속성을 가져오고,그렇지 않으면 <see cref="F:System.Data.ConnectionState.Closed" />를 반환합니다.</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" />의 내부 상태와 기본 공급자의 <see cref="T:System.Data.ConnectionState" />가 모두 open일 경우에만 <see cref="F:System.Data.ConnectionState.Open" />을 반환하고,<see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" />의 상태는 open이지만 공급자의 <see cref="T:System.Data.ConnectionState" />가 closed일 경우 이 속성은 <see cref="F:System.Data.ConnectionState.Broken" />을 반환합니다.그 밖의 경우에는 <see cref="F:System.Data.ConnectionState.Closed" />가 반환됩니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityConnection.StoreConnection">
      <summary>
        <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" /> 개체에서 사용하는 기본 데이터 원본 연결에 액세스할 수 있도록 합니다.</summary>
      <returns>데이터 원본 연결의 경우 <see cref="T:System.Data.Common.DbConnection" />입니다.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder">
      <summary>엔터티 클라이언트 공급자의 연결 문자열 작성기를 나타내는 클래스입니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder.#ctor(System.String)">
      <summary>제공된 연결 문자열을 사용하여 <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="connectionString">기본 데이터 원본에 대한 공급자별 연결 문자열입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder.Clear">
      <summary>
        <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder" /> 인스턴스의 내용을 지웁니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder.ContainsKey(System.String)">
      <summary>
        <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder" />에 특정 키가 들어 있는지 여부를 확인합니다.</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder" />에 지정된 키가 있는 요소가 포함되어 있으면 true를 반환하고, 그렇지 않으면 false를 반환합니다.</returns>
      <param name="keyword">
        <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder" />에서 찾을 키입니다.</param>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder.IsFixedSize">
      <summary>
        <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder" />의 크기가 고정 크기인지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder" />에서는 고정 크기의 키워드/값 쌍 컬렉션을 제공하므로 항상 true를 반환합니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder.Item(System.String)">
      <summary>지정된 키에 연결된 값을 가져오거나 설정합니다.C#에서는 이 속성이 인덱서입니다.</summary>
      <returns>지정된 키와 연결된 값입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder.Keys">
      <summary>
        <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder" />의 키를 포함하는 <see cref="T:System.Collections.ICollection" />을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder" />의 키를 포함하는 <see cref="T:System.Collections.ICollection" />입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder.Metadata">
      <summary>연결 문자열의 메타데이터 위치를 가져오거나 설정합니다.</summary>
      <returns>연결 문자열의 메타데이터 위치를 가져오거나 설정합니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder.Name">
      <summary>구성 파일에 정의되어 있는 섹션의 이름을 가져오거나 설정합니다.</summary>
      <returns>구성 파일의 섹션 이름입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder.Provider">
      <summary>연결 문자열에서 기본 .NET Framework 데이터 공급자의 이름을 가져오거나 설정합니다.</summary>
      <returns>기본 .NET Framework 데이터 공급자의 고정 이름입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder.ProviderConnectionString">
      <summary>공급자별 내부 연결 문자열을 가져오거나 설정합니다.</summary>
      <returns>공급자별 내부 연결 문자열입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder.Remove(System.String)">
      <summary>지정된 키를 가진 항목을 <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder" /> 인스턴스에서 제거합니다.</summary>
      <returns>연결 문자열에 키가 존재하여 이를 제거했으면 true이고, 키가 존재하지 않으면 false입니다.</returns>
      <param name="keyword">이 <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder" />의 연결 문자열에서 제거할 키워드/값 쌍의 키입니다.</param>
      <exception cref="T:System.ArgumentNullException">키워드가 null(Visual Basic의 경우 Nothing)입니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder.TryGetValue(System.String,System.Object@)">
      <summary>이 <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder" />에서 제공된 키에 해당하는 값을 검색합니다.</summary>
      <returns>연결 문자열에 keyword가 있으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="keyword">검색할 항목의 키입니다.</param>
      <param name="value">keyword에 해당하는 값입니다.</param>
      <exception cref="T:System.ArgumentNullException">keyword에 null 값(Visual Basic에서는 Nothing)이 포함된 경우</exception>
    </member>
    <member name="T:System.Data.Entity.Core.EntityClient.EntityDataReader">
      <summary>엔터티 클라이언트 공급자의 데이터 판독기 클래스입니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.Close">
      <summary>
        <see cref="T:System.Data.Entity.Core.EntityClient.EntityDataReader" /> 개체를 닫습니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityDataReader.DataRecordInfo">
      <summary>이 <see cref="T:System.Data.Entity.Core.IExtendedDataRecord" />의 <see cref="T:System.Data.Entity.Core.Common.DataRecordInfo" />를 가져옵니다.</summary>
      <returns>데이터 레코드의 정보입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityDataReader.Depth">
      <summary>현재 행의 중첩 수준을 나타내는 값을 가져옵니다.</summary>
      <returns>현재 행의 중첩 수준입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.Dispose(System.Boolean)">
      <summary>이 <see cref="T:System.Data.Entity.Core.EntityClient.EntityDataReader" />에서 이용하는 리소스를 해제하고 <see cref="M:System.Data.Entity.Core.EntityClient.EntityDataReader.Close" />를 호출합니다.</summary>
      <param name="disposing">관리되는 리소스와 관리되지 않는 리소스를 모두 해제하려면 true이고, 관리되지 않는 리소스만 해제하려면 false입니다.</param>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityDataReader.FieldCount">
      <summary>현재 행의 열 수를 가져옵니다.</summary>
      <returns>현재 행의 열 수입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetBoolean(System.Int32)">
      <summary>지정된 열의 값에 해당하는 Boolean 값을 가져옵니다.</summary>
      <returns>지정된 열의 값입니다.</returns>
      <param name="ordinal">열 서수(0부터 시작)입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetByte(System.Int32)">
      <summary>지정된 열의 값에 해당하는 바이트 값을 가져옵니다.</summary>
      <returns>지정된 열의 값입니다.</returns>
      <param name="ordinal">열 서수(0부터 시작)입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)">
      <summary>dataIndex가 나타내는 위치에서 시작하여 지정된 열의 바이트 스트림을 bufferIndex가 나타내는 위치에서 시작하는 버퍼로 읽어들입니다.</summary>
      <returns>읽은 실제 바이트 수입니다.</returns>
      <param name="ordinal">열 서수(0부터 시작)입니다.</param>
      <param name="dataOffset">읽기 작업을 시작할 행 내의 인덱스입니다.</param>
      <param name="buffer">데이터를 복사해 올 버퍼입니다.</param>
      <param name="bufferOffset">데이터를 복사해 올 버퍼의 인덱스입니다.</param>
      <param name="length">읽을 최대 문자 수입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetChar(System.Int32)">
      <summary>지정된 열의 값에 해당하는 단일 문자를 가져옵니다.</summary>
      <returns>지정된 열의 값입니다.</returns>
      <param name="ordinal">열 서수(0부터 시작)입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)">
      <summary>dataIndex가 나타내는 위치에서 시작하여 지정된 열의 문자 스트림을 bufferIndex가 나타내는 위치에서 시작하는 버퍼로 읽어들입니다.</summary>
      <returns>읽은 실제 문자 수입니다.</returns>
      <param name="ordinal">열 서수(0부터 시작)입니다.</param>
      <param name="dataOffset">읽기 작업을 시작할 행 내의 인덱스입니다.</param>
      <param name="buffer">데이터를 복사해 올 버퍼입니다.</param>
      <param name="bufferOffset">데이터를 복사해 올 버퍼의 인덱스입니다.</param>
      <param name="length">읽을 최대 문자 수입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetDataReader(System.Int32)">
      <summary>중첩된 판독기를 <see cref="T:System.Data.Common.DbDataReader" /> 개체로 반환합니다.</summary>
      <returns>
        <see cref="T:System.Data.Common.DbDataReader" /> 개체인 중첩된 판독기입니다.</returns>
      <param name="i">열 서수입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetDataRecord(System.Int32)">
      <summary>중첩된 <see cref="T:System.Data.Common.DbDataRecord" />를 반환합니다.</summary>
      <returns>중첩된 데이터 레코드입니다.</returns>
      <param name="i">반환할 DbDataRecord 수입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetDataTypeName(System.Int32)">
      <summary>지정된 열의 데이터 형식 이름을 가져옵니다.</summary>
      <returns>데이터 형식의 이름입니다.</returns>
      <param name="ordinal">열 서수(0부터 시작)입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetDateTime(System.Int32)">
      <summary>지정된 열의 값에 해당하는 <see cref="T:System.DateTime" /> 개체를 가져옵니다.</summary>
      <returns>지정된 열의 값입니다.</returns>
      <param name="ordinal">열 서수(0부터 시작)입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetDbDataReader(System.Int32)">
      <summary>요청된 열 서수에 대한 <see cref="T:System.Data.Common.DbDataReader" /> 개체를 반환합니다. 이 개체는 공급자별 구현으로 재정의할 수 있습니다.</summary>
      <returns>데이터 판독기입니다.</returns>
      <param name="ordinal">열 서수(0부터 시작)입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetDecimal(System.Int32)">
      <summary>지정된 열의 값에 해당하는 <see cref="T:System.Decimal" /> 개체를 가져옵니다.</summary>
      <returns>지정된 열의 값입니다.</returns>
      <param name="ordinal">열 서수(0부터 시작)입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetDouble(System.Int32)">
      <summary>지정된 열의 값에 해당하는 배정밀도 부동 소수점 숫자를 가져옵니다.</summary>
      <returns>지정된 열의 값입니다.</returns>
      <param name="ordinal">열 서수(0부터 시작)입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetEnumerator">
      <summary>데이터 판독기의 행을 반복하는 데 사용할 수 있는 <see cref="T:System.Collections.IEnumerator" />를 반환합니다.</summary>
      <returns>데이터 판독기의 행을 반복하는 데 사용할 수 있는 <see cref="T:System.Collections.IEnumerator" />입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetFieldType(System.Int32)">
      <summary>지정된 열의 데이터 형식을 가져옵니다.</summary>
      <returns>지정된 열의 데이터 형식입니다.</returns>
      <param name="ordinal">열 서수(0부터 시작)입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetFloat(System.Int32)">
      <summary>지정된 열의 값에 해당하는 단정밀도 부동 소수점 숫자를 가져옵니다.</summary>
      <returns>지정된 열의 값입니다.</returns>
      <param name="ordinal">열 서수(0부터 시작)입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetGuid(System.Int32)">
      <summary>지정된 열의 값에 해당하는 GUID(Globally Unique ID)를 가져옵니다.</summary>
      <returns>지정된 열의 값입니다.</returns>
      <param name="ordinal">열 서수(0부터 시작)입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetInt16(System.Int32)">
      <summary>지정된 열의 값에 해당하는 16비트 부호 있는 정수를 가져옵니다.</summary>
      <returns>지정된 열의 값입니다.</returns>
      <param name="ordinal">열 서수(0부터 시작)입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetInt32(System.Int32)">
      <summary>지정된 열의 값에 해당하는 32비트 부호 있는 정수를 가져옵니다.</summary>
      <returns>지정된 열의 값입니다.</returns>
      <param name="ordinal">열 서수(0부터 시작)입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetInt64(System.Int32)">
      <summary>지정된 열의 값에 해당하는 64비트 부호 있는 정수를 가져옵니다.</summary>
      <returns>지정된 열의 값입니다.</returns>
      <param name="ordinal">열 서수(0부터 시작)입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetName(System.Int32)">
      <summary>열 서수(0부터 시작)를 사용하여 열의 이름을 가져옵니다.</summary>
      <returns>지정된 열의 이름입니다.</returns>
      <param name="ordinal">열 서수(0부터 시작)입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetOrdinal(System.String)">
      <summary>열 이름을 사용하여 열 서수(0부터 시작)를 가져옵니다.</summary>
      <returns>열 서수(0부터 시작)입니다.</returns>
      <param name="name">열 이름입니다.</param>
      <exception cref="T:System.IndexOutOfRangeException">지정된 이름이 올바른 열 이름이 아닌 경우</exception>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetProviderSpecificFieldType(System.Int32)">
      <summary>지정된 열의 공급자별 필드 형식을 반환합니다.</summary>
      <returns>지정된 열의 데이터 형식을 정의하는 <see cref="T:System.Type" /> 개체입니다.</returns>
      <param name="ordinal">열 서수(0부터 시작)입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetProviderSpecificValue(System.Int32)">
      <summary>지정된 열의 값에 해당하는 <see cref="T:System.Object" />의 인스턴스를 가져옵니다.</summary>
      <returns>지정된 열의 값입니다.</returns>
      <param name="ordinal">열 서수(0부터 시작)입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetProviderSpecificValues(System.Object[])">
      <summary>현재 행에 대해 컬렉션의 모든 공급자별 특성 열을 가져옵니다.</summary>
      <returns>배열에 포함된 <see cref="T:System.Object" /> 인스턴스의 수입니다.</returns>
      <param name="values">특성 열을 복사할 <see cref="T:System.Object" />의 배열입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetSchemaTable">
      <summary>
        <see cref="T:System.Data.Common.DbDataReader" />의 열 메타데이터를 설명하는 <see cref="T:System.Data.DataTable" />을 반환합니다.</summary>
      <returns>열 메타데이터를 정의하는 <see cref="T:System.Data.DataTable" />입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetString(System.Int32)">
      <summary>지정된 열의 값에 해당하는 <see cref="T:System.String" />의 인스턴스를 가져옵니다.</summary>
      <returns>지정된 열의 값입니다.</returns>
      <param name="ordinal">열 서수(0부터 시작)입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetValue(System.Int32)">
      <summary>지정된 열의 값에 해당하는 <see cref="T:System.Object" />의 인스턴스를 가져옵니다.</summary>
      <returns>지정된 열의 값입니다.</returns>
      <param name="ordinal">열 서수(0부터 시작)입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetValues(System.Object[])">
      <summary>현재 행의 열 값으로 개체 배열을 채웁니다.</summary>
      <returns>배열에 포함된 <see cref="T:System.Object" /> 인스턴스의 수입니다.</returns>
      <param name="values">특성 열을 복사할 <see cref="T:System.Object" />의 배열입니다.</param>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityDataReader.HasRows">
      <summary>이 <see cref="T:System.Data.Entity.Core.EntityClient.EntityDataReader" />에 행이 하나 이상 포함되었는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.EntityClient.EntityDataReader" />에 행이 하나 이상 있으면 true이고, 그렇지 않으면 false입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityDataReader.IsClosed">
      <summary>
        <see cref="T:System.Data.Entity.Core.EntityClient.EntityDataReader" />가 닫혔는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.EntityClient.EntityDataReader" />가 닫혔으면 true이고, 그렇지 않으면 false입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.IsDBNull(System.Int32)">
      <summary>존재하지 않거나 누락된 값이 열에 포함되었는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>지정된 열이 <see cref="T:System.DBNull" />과 같으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="ordinal">열 서수(0부터 시작)입니다.</param>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityDataReader.Item(System.Int32)">
      <summary>지정된 열의 값에 해당하는 <see cref="T:System.Object" />의 인스턴스를 가져옵니다.</summary>
      <returns>지정된 열의 값입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityDataReader.Item(System.String)">
      <summary>지정된 열의 값에 해당하는 <see cref="T:System.Object" />의 인스턴스를 가져옵니다.</summary>
      <returns>지정된 열의 값입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.NextResult">
      <summary>일괄 처리 문의 결과를 읽을 때 판독기에서 다음 결과로 진행하도록 합니다.</summary>
      <returns>결과 집합이 더 있으면 true이고, 그렇지 않으면 false입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.NextResultAsync(System.Threading.CancellationToken)">
      <summary>일괄 처리 문을 읽을 때 판독기를 다음 결과 집합으로 비동기적으로 이동합니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.결과 집합이 더 있으면 작업 결과에 true가 포함되고, 그렇지 않으면 false가 포함됩니다.</returns>
      <param name="cancellationToken">작업이 완료되기를 기다리는 동안 관찰할 <see cref="T:System.Threading.CancellationToken" />입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.Read">
      <summary>판독기에서 결과 집합의 다음 레코드로 진행하도록 합니다.</summary>
      <returns>행이 더 있으면 true이고, 그렇지 않으면 false입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.ReadAsync(System.Threading.CancellationToken)">
      <summary>현재 결과 집합의 다음 행으로 판독기를 비동기적으로 이동합니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.행이 더 있으면 작업 결과에 true가 포함되고, 그렇지 않으면 false가 포함됩니다.</returns>
      <param name="cancellationToken">작업이 완료되기를 기다리는 동안 관찰할 <see cref="T:System.Threading.CancellationToken" />입니다.</param>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityDataReader.RecordsAffected">
      <summary>SQL 문을 실행하여 변경, 삽입 또는 삭제된 행 수를 가져옵니다.</summary>
      <returns>변경, 삽입 또는 삭제된 행 수입니다.SELECT 문에 대해서는 -1이 반환되고, 영향을 받은 행이 없거나 문을 실행하지 못한 경우에는 0이 반환됩니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityDataReader.VisibleFieldCount">
      <summary>
        <see cref="T:System.Data.Entity.Core.EntityClient.EntityDataReader" /> 중에서 숨김 상태가 아닌 필드 수를 가져옵니다.</summary>
      <returns>숨김 상태가 아닌 필드 수입니다.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.EntityClient.EntityParameter">
      <summary>EntityCommand에 사용되는 매개 변수를 나타내는 클래스입니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameter.#ctor">
      <summary>기본값을 사용하여 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameter.#ctor(System.String,System.Data.DbType)">
      <summary>지정된 매개 변수 이름 및 데이터 형식을 사용하여 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="parameterName">매개 변수의 이름입니다.</param>
      <param name="dbType">
        <see cref="T:System.Data.DbType" /> 값 중 하나입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameter.#ctor(System.String,System.Data.DbType,System.Int32)">
      <summary>지정된 매개 변수 이름, 데이터 형식 및 크기를 사용하여 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="parameterName">매개 변수의 이름입니다.</param>
      <param name="dbType">
        <see cref="T:System.Data.DbType" /> 값 중 하나입니다.</param>
      <param name="size">매개 변수의 크기입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameter.#ctor(System.String,System.Data.DbType,System.Int32,System.Data.ParameterDirection,System.Boolean,System.Byte,System.Byte,System.String,System.Data.DataRowVersion,System.Object)">
      <summary>지정된 속성을 사용하여 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="parameterName">매개 변수의 이름입니다.</param>
      <param name="dbType">
        <see cref="T:System.Data.DbType" /> 값 중 하나입니다.</param>
      <param name="size">매개 변수의 크기입니다.</param>
      <param name="direction">
        <see cref="T:System.Data.ParameterDirection" /> 값 중 하나입니다.</param>
      <param name="isNullable">매개 변수에 null 값이 허용됨을 나타내려면 true이고, 그렇지 않으면 false입니다.</param>
      <param name="precision">값을 나타내는 데 사용되는 자릿수입니다.</param>
      <param name="scale">값이 확인되는 소수 자릿수입니다.</param>
      <param name="sourceColumn">소스 열의 이름입니다.</param>
      <param name="sourceVersion">
        <see cref="T:System.Data.DataRowVersion" /> 값 중 하나입니다.</param>
      <param name="value">매개 변수의 값입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameter.#ctor(System.String,System.Data.DbType,System.Int32,System.String)">
      <summary>지정된 속성을 사용하여 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="parameterName">매개 변수의 이름입니다.</param>
      <param name="dbType">
        <see cref="T:System.Data.DbType" /> 값 중 하나입니다.</param>
      <param name="size">매개 변수의 크기입니다.</param>
      <param name="sourceColumn">소스 열의 이름입니다.</param>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityParameter.DbType">
      <summary>매개 변수의 <see cref="T:System.Data.DbType" />을 가져오거나 설정합니다.</summary>
      <returns>
        <see cref="T:System.Data.DbType" /> 값 중 하나입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityParameter.Direction">
      <summary>매개 변수의 방향을 가져오거나 설정합니다.</summary>
      <returns>
        <see cref="T:System.Data.ParameterDirection" /> 값 중 하나입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityParameter.EdmType">
      <summary>EdmType으로 표현된 매개 변수의 형식을 가져오거나 설정합니다.</summary>
      <returns>EdmType으로 표현한 매개 변수 형식입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityParameter.IsNullable">
      <summary>매개 변수에 null 값이 허용되는지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
      <returns>null 값이 허용되면 true이고, 그렇지 않으면 false입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityParameter.ParameterName">
      <summary>엔터티 매개 변수의 이름을 가져오거나 설정합니다.</summary>
      <returns>엔터티 매개 변수의 이름입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityParameter.Precision">
      <summary>
        <see cref="P:System.Data.Entity.Core.EntityClient.EntityParameter.Value" /> 속성을 나타내는 데 사용되는 자릿수를 가져오거나 설정합니다.</summary>
      <returns>값을 나타내는 데 사용되는 자릿수입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameter.ResetDbType">
      <summary>
        <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" />와 연결된 형식을 다시 설정합니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityParameter.Scale">
      <summary>
        <see cref="P:System.Data.Entity.Core.EntityClient.EntityParameter.Value" />가 확인되는 소수점 이하 자릿수를 가져오거나 설정합니다.</summary>
      <returns>값이 확인되는 소수 자릿수입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityParameter.Size">
      <summary>열 내부에 있는 데이터의 최대 크기를 가져오거나 설정합니다.</summary>
      <returns>열 내부에 있는 데이터의 최대 크기입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityParameter.SourceColumn">
      <summary>
        <see cref="T:System.Data.DataSet" />에 매핑되어 <see cref="P:System.Data.Entity.Core.EntityClient.EntityParameter.Value" />를 로드하거나 반환하기 위해 사용된 원본 열의 이름을 가져오거나 설정합니다.</summary>
      <returns>데이터 집합에 매핑되어 값을 로드하거나 반환하는 데 사용된 원본 열의 이름입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityParameter.SourceColumnNullMapping">
      <summary>원본 열이 null을 허용하는지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
      <returns>원본 열이 null을 허용하면 true이고, 그렇지 않으면 false입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityParameter.SourceVersion">
      <summary>값을 로드할 때 사용할 <see cref="T:System.Data.DataRowVersion" />을 가져오거나 설정합니다.</summary>
      <returns>
        <see cref="T:System.Data.DataRowVersion" /> 값 중 하나입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameter.ToString">
      <summary>매개 변수의 문자열 표현을 반환합니다.</summary>
      <returns>매개 변수의 문자열 표현입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityParameter.Value">
      <summary>매개 변수의 값을 가져오거나 설정합니다.</summary>
      <returns>매개 변수의 값입니다.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection">
      <summary>EntityCommand에 사용되는 매개 변수 컬렉션을 나타내는 클래스입니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameterCollection.Add(System.Data.Entity.Core.EntityClient.EntityParameter)">
      <summary>지정된 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> 개체를 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" />에 추가합니다.</summary>
      <returns>새 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> 개체입니다.</returns>
      <param name="value">컬렉션에 추가할 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" />입니다.</param>
      <exception cref="T:System.ArgumentException">value 매개 변수에 지정된 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" />가 이미 현재 또는 다른 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> 에 추가되어 있는 경우</exception>
      <exception cref="T:System.InvalidCastException">전달된 매개 변수가 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" />가 아닌 경우</exception>
      <exception cref="T:System.ArgumentNullException">value 매개 변수가 null인 경우</exception>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameterCollection.Add(System.Object)">
      <summary>지정된 개체를 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" />에 추가합니다.</summary>
      <returns>새 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> 개체의 인덱스입니다.</returns>
      <param name="value">
        <see cref="T:System.Object" />입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameterCollection.Add(System.String,System.Data.DbType)">
      <summary>매개 변수 이름과 데이터 형식을 사용하여 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" />에 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" />를 추가합니다.</summary>
      <returns>새 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> 개체입니다.</returns>
      <param name="parameterName">매개 변수의 이름입니다.</param>
      <param name="dbType">
        <see cref="T:System.Data.DbType" /> 값 중 하나입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameterCollection.Add(System.String,System.Data.DbType,System.Int32)">
      <summary>매개 변수 이름, 데이터 형식 및 열 길이를 사용하여 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" />에 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" />를 추가합니다.</summary>
      <returns>새 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> 개체입니다.</returns>
      <param name="parameterName">매개 변수의 이름입니다.</param>
      <param name="dbType">
        <see cref="T:System.Data.DbType" /> 값 중 하나입니다.</param>
      <param name="size">열 길이입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameterCollection.AddRange(System.Array)">
      <summary>
        <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> 끝에 값의 배열을 추가합니다.</summary>
      <param name="values">추가할 <see cref="T:System.Array" /> 값입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameterCollection.AddRange(System.Data.Entity.Core.EntityClient.EntityParameter[])">
      <summary>
        <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> 끝에 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> 값의 배열을 추가합니다.</summary>
      <param name="values">추가할 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> 값입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameterCollection.AddWithValue(System.String,System.Object)">
      <summary>
        <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> 끝에 값을 추가합니다.</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> 개체입니다.</returns>
      <param name="parameterName">매개 변수의 이름입니다.</param>
      <param name="value">추가할 값입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameterCollection.Clear">
      <summary>
        <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" />에서 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> 개체를 모두 제거합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameterCollection.Contains(System.Object)">
      <summary>지정된 <see cref="T:System.Object" />가 이 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" />에 포함되는지 여부를 확인합니다.</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" />에 값이 포함되면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="value">
        <see cref="T:System.Object" /> 값입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameterCollection.Contains(System.String)">
      <summary>지정된 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" />가 이 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" />에 포함되는지 여부를 확인합니다.</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" />에 값이 포함되면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="parameterName">
        <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> 값입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameterCollection.CopyTo(System.Array,System.Int32)">
      <summary>현재 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" />의 모든 요소를 지정된 대상 <see cref="T:System.Array" /> 인덱스부터 지정된 1차원 <see cref="T:System.Array" />에 복사합니다.</summary>
      <param name="array">현재 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" />의 요소를 복사할 1차원 <see cref="T:System.Array" />입니다.</param>
      <param name="index">복사를 시작할 <see cref="T:System.Array" /> 내의 인덱스를 나타내는 32비트 정수입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameterCollection.CopyTo(System.Data.Entity.Core.EntityClient.EntityParameter[],System.Int32)">
      <summary>현재 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" />의 모든 요소를 지정된 대상 인덱스부터 지정된 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" />에 복사합니다.</summary>
      <param name="array">현재 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" />의 요소를 복사할 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" />입니다.</param>
      <param name="index">복사를 시작할 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> 내의 인덱스를 나타내는 32비트 정수입니다.</param>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityParameterCollection.Count">
      <summary>
        <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" />의 요소 수가 포함된 정수를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" />의 요소 수를 나타내는 정수입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameterCollection.GetEnumerator">
      <summary>
        <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> 전체에 걸쳐 반복하는 열거자를 반환합니다.</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" />에 대한 <see cref="T:System.Collections.IEnumerator" />입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameterCollection.IndexOf(System.Data.Entity.Core.EntityClient.EntityParameter)">
      <summary>컬렉션에서 지정된 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" />의 위치를 가져옵니다.</summary>
      <returns>컬렉션의 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" />인 지정된 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" />의 위치(0부터 시작)입니다.개체가 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" />에 없으면 -1이 반환됩니다.</returns>
      <param name="value">찾을 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" />입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameterCollection.IndexOf(System.Object)">
      <summary>컬렉션에서 지정된 <see cref="T:System.Object" />의 위치를 가져옵니다.</summary>
      <returns>컬렉션의 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" />인 지정된 <see cref="T:System.Object" />의 위치(0부터 시작)입니다.개체가 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" />에 없으면 -1이 반환됩니다.</returns>
      <param name="value">찾을 <see cref="T:System.Object" />입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameterCollection.IndexOf(System.String)">
      <summary>지정된 이름을 가진 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" />의 위치를 가져옵니다.</summary>
      <returns>대/소문자를 구분하는 지정된 이름을 가진 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" />의 위치(0부터 시작)입니다.개체가 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" />에 없으면 -1이 반환됩니다.</returns>
      <param name="parameterName">찾을 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" />의 이름이며 대/소문자를 구분합니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameterCollection.Insert(System.Int32,System.Data.Entity.Core.EntityClient.EntityParameter)">
      <summary>
        <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" />의 지정된 인덱스에 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> 개체를 삽입합니다.</summary>
      <param name="index">값을 삽입할 인덱스(0부터 시작)입니다.</param>
      <param name="value">
        <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" />에 삽입할 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> 개체입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameterCollection.Insert(System.Int32,System.Object)">
      <summary>
        <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" />의 지정된 인덱스에 <see cref="T:System.Object" />를 삽입합니다.</summary>
      <param name="index">값을 삽입할 인덱스(0부터 시작)입니다.</param>
      <param name="value">
        <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" />에 삽입할 <see cref="T:System.Object" />입니다.</param>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityParameterCollection.IsFixedSize">
      <summary>
        <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" />의 크기가 고정 크기인지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" />이 고정 크기이면 true를 반환하고, 그렇지 않으면 false를 반환합니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityParameterCollection.IsReadOnly">
      <summary>
        <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" />가 읽기 전용인지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" />이 읽기 전용이면 true를 반환하고, 그렇지 않으면 false를 반환합니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityParameterCollection.IsSynchronized">
      <summary>
        <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" />이 동기화되었는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" />이 동기화되었으면 true를 반환하고, 그렇지 않으면 false를 반환합니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityParameterCollection.Item(System.Int32)">
      <summary>지정된 인덱스의 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" />를 가져옵니다.</summary>
      <returns>지정된 인덱스에 있는 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" />입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityParameterCollection.Item(System.String)">
      <summary>지정된 이름을 가진 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" />를 가져옵니다.</summary>
      <returns>지정된 이름을 가진 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" />입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameterCollection.Remove(System.Data.Entity.Core.EntityClient.EntityParameter)">
      <summary>지정된 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" />를 컬렉션에서 제거합니다.</summary>
      <param name="value">컬렉션에서 제거할 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> 개체입니다.</param>
      <exception cref="T:System.InvalidCastException">매개 변수가 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" />가 아닌 경우</exception>
      <exception cref="T:System.SystemException">매개 변수가 컬렉션에 없는 경우</exception>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameterCollection.Remove(System.Object)">
      <summary>지정된 매개 변수를 컬렉션에서 제거합니다.</summary>
      <param name="value">컬렉션에서 제거할 <see cref="T:System.Object" /> 개체입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameterCollection.RemoveAt(System.Int32)">
      <summary>
        <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" />의 지정된 인덱스에서 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" />를 제거합니다.</summary>
      <param name="index">제거할 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> 개체의 인덱스(0부터 시작)입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameterCollection.RemoveAt(System.String)">
      <summary>지정된 이름을 가진 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" />를 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" />에서 제거합니다.</summary>
      <param name="parameterName">제거할 <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" />의 이름입니다.</param>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityParameterCollection.SyncRoot">
      <summary>
        <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" />에 대한 액세스를 동기화하는 데 사용할 수 있는 개체를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" />에 대한 액세스를 동기화하는 데 사용할 수 있는 개체입니다.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.EntityClient.EntityProviderFactory">
      <summary>엔터티 클라이언트 공급자에 대한 공급자 팩터리를 나타내는 클래스입니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityProviderFactory.CreateCommand">
      <summary>
        <see cref="T:System.Data.Entity.Core.EntityClient.EntityCommand" /> 클래스를 구현하는 공급자 클래스의 새 인스턴스를 반환합니다.</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.EntityClient.EntityCommand" />의 새 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityProviderFactory.CreateCommandBuilder">
      <summary>
        <see cref="T:System.NotSupportedException" />을 throw합니다.이 메서드는 현재 지원되지 않습니다.</summary>
      <returns>이 메서드는 현재 지원되지 않습니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityProviderFactory.CreateConnection">
      <summary>
        <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" /> 클래스를 구현하는 공급자 클래스의 새 인스턴스를 반환합니다.</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" />의 새 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityProviderFactory.CreateConnectionStringBuilder">
      <summary>
        <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder" /> 클래스를 구현하는 공급자 클래스의 새 인스턴스를 반환합니다.</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder" />의 새 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityProviderFactory.CreateDataAdapter">
      <summary>
        <see cref="T:System.NotSupportedException" />을 throw합니다.이 메서드는 현재 지원되지 않습니다.</summary>
      <returns>이 메서드는 현재 지원되지 않습니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityProviderFactory.CreateParameter">
      <summary>
        <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> 클래스를 구현하는 공급자 클래스의 새 인스턴스를 반환합니다.</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" />의 새 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityProviderFactory.CreatePermission(System.Security.Permissions.PermissionState)">
      <summary>
        <see cref="T:System.NotSupportedException" />을 throw합니다.이 메서드는 현재 지원되지 않습니다.</summary>
      <returns>이 메서드는 현재 지원되지 않습니다.</returns>
    </member>
    <member name="F:System.Data.Entity.Core.EntityClient.EntityProviderFactory.Instance">
      <summary>엔터티 클라이언트 공급자 팩터리 개체에 대한 singleton 개체입니다.이 개체는 DbProviderFactory에 필드가 필요하기 때문에 속성이 아닌 public 필드로 남아 있습니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityProviderFactory.System#IServiceProvider#GetService(System.Type)">
      <summary>요청된 <see cref="T:System.IServiceProvider" /> 클래스를 반환합니다.</summary>
      <returns>
        <see cref="T:System.IServiceProvider" />의 새 인스턴스입니다.지원되는 형식은 <see cref="T:System.Data.Entity.Core.Common.DbProviderServices" />, <see cref="T:System.Data.Entity.Core.Common.DbCommandDefinitionBuilder" /> 및 <see cref="T:System.Data.IEntityAdapter" />이며,다른 모든 형식에 대해서는 null(Visual Basic의 경우 Nothing)을 반환합니다.</returns>
      <param name="serviceType">반환할 <see cref="T:System.Type" />입니다.</param>
    </member>
    <member name="T:System.Data.Entity.Core.EntityClient.EntityTransaction">
      <summary>개념적 계층에 대한 트랜잭션을 나타내는 클래스입니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityTransaction.Commit">
      <summary>기본 트랜잭션을 커밋합니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityTransaction.Connection">
      <summary>이 <see cref="T:System.Data.Entity.Core.EntityClient.EntityTransaction" />의 <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" />을 가져옵니다.</summary>
      <returns>기본 데이터 소스에 대한 <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" />입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityTransaction.DbConnection">
      <summary>이 트랜잭션 개체를 소유하는 연결 개체입니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityTransaction.Dispose(System.Boolean)">
      <summary>이 트랜잭션 개체를 정리합니다.</summary>
      <param name="disposing">관리되는 리소스와 관리되지 않는 리소스를 모두 해제하려면 true이고, 관리되지 않는 리소스만 해제하려면 false입니다.</param>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityTransaction.IsolationLevel">
      <summary>이 <see cref="T:System.Data.Entity.Core.EntityClient.EntityTransaction" />의 격리 수준을 가져옵니다.</summary>
      <returns>기본 트랜잭션의 격리 수준을 나타내는 <see cref="T:System.Data.IsolationLevel" /> 열거형 값입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityTransaction.Rollback">
      <summary>기본 트랜잭션을 롤백합니다.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.EntityViewContainer">
      <summary>생성된 뷰를 저장하기 위해 디자인 타임에 생성되는 형식의 기본 클래스입니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.EntityViewContainer.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.Core.Mapping.EntityViewContainer" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EntityViewContainer.EdmEntityContainerName">
      <summary>
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" />의 이름을 가져오거나 설정합니다.</summary>
      <returns>컨테이너 이름입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.EntityViewContainer.GetViewAt(System.Int32)">
      <summary>뷰와 해당 키가 포함된 키/값 쌍을 지정된 인덱스에 반환합니다.</summary>
      <returns>뷰와 해당 키가 포함된, 인덱스의 키/값 쌍입니다.</returns>
      <param name="index">뷰의 인덱스입니다.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EntityViewContainer.HashOverAllExtentViews">
      <summary>뷰에 대한 해시 값입니다.</summary>
      <returns>해시 값</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EntityViewContainer.HashOverMappingClosure">
      <summary>해시 값</summary>
      <returns>해시 값</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EntityViewContainer.StoreEntityContainerName">
      <summary>저장소 스키마에서 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" />를 가져오거나 설정합니다.</summary>
      <returns>컨테이너 이름</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EntityViewContainer.ViewCount">
      <summary>뷰 개수를 가져오거나 설정합니다.</summary>
      <returns>뷰 개수</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.EntityViewGenerationAttribute">
      <summary>생성된 뷰 형식이 포함된 어셈블리를 표시하는 특성입니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.EntityViewGenerationAttribute.#ctor(System.Type)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Mapping.EntityViewGenerationAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="viewGenerationType">뷰 유형입니다.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EntityViewGenerationAttribute.ViewGenerationType">
      <summary>뷰에 대한 T:System.Type을 가져옵니다.</summary>
      <returns>뷰에 대한 T:System.Type입니다.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.MappingItemCollection">
      <summary>Edm 공간의 매핑 항목 컬렉션을 나타내는 클래스입니다.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.StorageMappingItemCollection">
      <summary>저장소 매핑(CS 매핑) 공간에 있는 항목의 컬렉션을 나타냅니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.StorageMappingItemCollection.#ctor(System.Data.Entity.Core.Metadata.Edm.EdmItemCollection,System.Data.Entity.Core.Metadata.Edm.StoreItemCollection,System.Collections.Generic.IEnumerable{System.Xml.XmlReader})">
      <summary>지정된 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmItemCollection" />, <see cref="T:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection" /> 및 XML 판독기를 사용하여 <see cref="T:System.Data.Entity.Core.Mapping.StorageMappingItemCollection" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="edmCollection">이 매핑에 사용할 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmItemCollection" />입니다.</param>
      <param name="storeCollection">이 매핑에 사용할 <see cref="T:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection" />입니다.</param>
      <param name="xmlReaders">이 매핑에 사용할 XML 판독기입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.StorageMappingItemCollection.#ctor(System.Data.Entity.Core.Metadata.Edm.EdmItemCollection,System.Data.Entity.Core.Metadata.Edm.StoreItemCollection,System.String[])">
      <summary>지정된 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmItemCollection" />, <see cref="T:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection" /> 및 메타데이터 파일 경로를 나타내는 문자열 컬렉션을 사용하여 <see cref="T:System.Data.Entity.Core.Mapping.StorageMappingItemCollection" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="edmCollection">이 매핑에 사용할 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmItemCollection" />입니다.</param>
      <param name="storeCollection">이 매핑에 사용할 <see cref="T:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection" />입니다.</param>
      <param name="filePaths">이 매핑에 사용할 파일 경로입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.StorageMappingItemCollection.ComputeMappingHashValue">
      <summary>컬렉션에서 단일 컨테이너 매핑에 대한 해시 값을 계산합니다.</summary>
      <returns>계산된 해시 값을 지정하는 문자열입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.StorageMappingItemCollection.ComputeMappingHashValue(System.String,System.String)">
      <summary>매핑된 컨테이너의 이름으로 지정된 컨테이너 매핑에 대한 해시 값을 계산합니다.</summary>
      <returns>계산된 해시 값을 지정하는 문자열입니다.</returns>
      <param name="conceptualModelContainerName">개념적 모델에서 컨테이너의 이름입니다.</param>
      <param name="storeModelContainerName">저장소 모델에서 컨테이너의 이름입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.StorageMappingItemCollection.Create(System.Data.Entity.Core.Metadata.Edm.EdmItemCollection,System.Data.Entity.Core.Metadata.Edm.StoreItemCollection,System.Collections.Generic.IEnumerable{System.Xml.XmlReader},System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{System.Data.Entity.Core.Metadata.Edm.EdmSchemaError}@)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Mapping.StorageMappingItemCollection" />을 만드는 팩터리 메서드입니다.</summary>
      <returns>오류가 발생하지 않은 경우 <see cref="P:System.Data.Entity.Core.Mapping.StorageMappingItemCollection.EdmItemCollection" /> 인스턴스이고,그렇지 않으면 null입니다.</returns>
      <param name="edmItemCollection">매핑할 edm 메타데이터 컬렉션입니다.null이 아니어야 합니다.</param>
      <param name="storeItemCollection">매핑할 저장소 메타데이터 컬렉션입니다.null이 아니어야 합니다.</param>
      <param name="xmlReaders">로드할 MSL 아티팩트입니다.null이 아니어야 합니다.</param>
      <param name="filePaths">MSL 아티팩트에 대한 경로입니다.오류 메시지에 사용됩니다.XmlReader의 기본 URI가 경로로 사용되는 경우 null일 수 있습니다.</param>
      <param name="errors">로딩하는 동안 발생한 오류의 컬렉션입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.StorageMappingItemCollection.GenerateViews(System.Collections.Generic.IList{System.Data.Entity.Core.Metadata.Edm.EdmSchemaError})">
      <summary>컬렉션에서 단일 컨테이너 매핑에 대한 사전(익스텐트, 생성된 뷰)을 만듭니다.</summary>
      <returns>생성된 뷰를 지정하는 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySetBase" />, <see cref="T:System.Data.Entity.Infrastructure.MappingViews.DbMappingView" />의 사전입니다.</returns>
      <param name="errors">잠재적 오류를 누적하는 목록입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.StorageMappingItemCollection.GenerateViews(System.String,System.String,System.Collections.Generic.IList{System.Data.Entity.Core.Metadata.Edm.EdmSchemaError})">
      <summary>매핑된 컨테이너의 이름으로 지정된 컨테이너 매핑에 대한 사전(익스텐트, 생성된 뷰)을 만듭니다.</summary>
      <returns>생성된 뷰를 지정하는 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySetBase" />, <see cref="T:System.Data.Entity.Infrastructure.MappingViews.DbMappingView" />의 사전입니다.</returns>
      <param name="conceptualModelContainerName">개념적 모델에서 컨테이너의 이름입니다.</param>
      <param name="storeModelContainerName">저장소 모델에서 컨테이너의 이름입니다.</param>
      <param name="errors">잠재적 오류를 누적하는 목록입니다.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.StorageMappingItemCollection.MappingVersion">
      <summary>이 <see cref="T:System.Data.Entity.Core.Mapping.StorageMappingItemCollection" />이 나타내는 버전을 가져옵니다.</summary>
      <returns>이 <see cref="T:System.Data.Entity.Core.Mapping.StorageMappingItemCollection" />이 나타내는 버전입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.StorageMappingItemCollection.MappingViewCacheFactory">
      <summary>미리 생성된 매핑 뷰를 가져오는 데 사용되는 <see cref="T:System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCache" /> 인스턴스를 만들기 위한 <see cref="T:System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCacheFactory" />를 가져오거나 설정합니다.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.AssociationEndMember">
      <summary>연결 형식의 end를 나타냅니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.AssociationEndMember.BuiltInTypeKind">
      <summary>이 <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationEndMember" />의 기본 제공 형식 유형을 가져옵니다.</summary>
      <returns>이 <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationEndMember" />의 기본 제공 형식 유형을 나타내는 <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" /> 개체입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.AssociationEndMember.Create(System.String,System.Data.Entity.Core.Metadata.Edm.RefType,System.Data.Entity.Core.Metadata.Edm.RelationshipMultiplicity,System.Data.Entity.Core.Metadata.Edm.OperationAction,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.MetadataProperty})">
      <summary>읽기 전용 AssociationEndMember 인스턴스를 만듭니다.</summary>
      <returns>새로 만든 AssociationEndMember 인스턴스</returns>
      <param name="name">연결 end 멤버의 이름입니다.</param>
      <param name="endRefType">end의 참조 형식입니다.</param>
      <param name="multiplicity">end의 복합성입니다.</param>
      <param name="deleteAction">end의 삭제 동작을 나타내는 플래그입니다.</param>
      <param name="metadataProperties">인스턴스와 연결할 메타데이터 속성입니다.</param>
      <exception cref="T:System.ArgumentException">지정된 이름이 null이거나 비어 있습니다.</exception>
      <exception cref="T:System.ArgumentNullException">지정된 참조 형식이 null입니다.</exception>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.AssociationSet">
      <summary>연결 집합을 나타내는 클래스입니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.AssociationSet.AssociationSetEnds">
      <summary>이 <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationSet" />의 끝을 가져옵니다.</summary>
      <returns>이 <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationSet" />의 끝이 포함된 <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1" /> 형식의 컬렉션입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.AssociationSet.BuiltInTypeKind">
      <summary>이 <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationSet" />의 기본 제공 형식 유형을 가져옵니다.</summary>
      <returns>이 <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationSet" />의 기본 제공 형식 유형을 나타내는 <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" /> 개체입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.AssociationSet.Create(System.String,System.Data.Entity.Core.Metadata.Edm.AssociationType,System.Data.Entity.Core.Metadata.Edm.EntitySet,System.Data.Entity.Core.Metadata.Edm.EntitySet,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.MetadataProperty})">
      <summary>지정된 매개 변수에서 읽기 전용 AssociationSet 인스턴스를 만듭니다.</summary>
      <returns>새로 만든 AssociationSet 인스턴스</returns>
      <param name="name">연결 집합의 이름입니다.</param>
      <param name="type">연결 집합에 있는 요소의 연결 형식입니다.</param>
      <param name="sourceSet">원본 연결 집합 end에 대한 엔터티 집합입니다.</param>
      <param name="targetSet">대상 연결 집합 end에 대한 엔터티 집합입니다.</param>
      <param name="metadataProperties">인스턴스와 연결할 메타데이터 속성입니다.</param>
      <exception cref="T:System.ArgumentException">지정된 이름이 null이거나 비어 있습니다.</exception>
      <exception cref="T:System.ArgumentNullException">지정된 연결 형식이 null입니다.</exception>
      <exception cref="T:System.ArgumentException">지정된 연결 형식의 end 중 하나에 대한 엔터티 형식이 해당 엔터티 집합 end의 엔터티 형식과 일치하지 않는 경우</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.AssociationSet.ElementType">
      <summary>이 <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationSet" />과 관련된 연결을 가져옵니다.</summary>
      <returns>이 <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationSet" />과 관련된 연결을 나타내는 <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationType" /> 개체입니다.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.AssociationSetEnd">
      <summary>AssociationSet End를 나타내는 클래스입니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.AssociationSetEnd.BuiltInTypeKind">
      <summary>이 <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationSetEnd" />의 기본 제공 형식 유형을 가져옵니다.</summary>
      <returns>이 <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationSetEnd" />의 기본 제공 형식 유형을 나타내는 <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" /> 개체입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.AssociationSetEnd.CorrespondingAssociationEndMember">
      <summary>이 <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationSetEnd" /> 개체에 해당되는 End 멤버를 가져옵니다.</summary>
      <returns>이 <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationSetEnd" /> 개체에 해당되는 End 멤버를 나타내는 <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationEndMember" /> 개체입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.AssociationSetEnd.EntitySet">
      <summary>이 End 역할에서 참조하는 엔터티 집합을 가져옵니다.</summary>
      <returns>이 End 역할에서 참조하는 엔터티 집합을 나타내는 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" /> 개체입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.AssociationSetEnd.Name">
      <summary>이 <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationSetEnd" />의 End 이름을 가져옵니다.</summary>
      <returns>이 <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationSetEnd" />의 End 이름입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.AssociationSetEnd.ParentAssociationSet">
      <summary>이 <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationSetEnd" />의 부모 연결 집합을 가져옵니다.</summary>
      <returns>이 <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationSetEnd" />의 부모 연결 집합을 나타내는 <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationSet" /> 개체입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.AssociationSetEnd.Role">
      <summary>이 <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationSetEnd" />의 End 역할 이름을 가져옵니다.</summary>
      <returns>이 <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationSetEnd" />의 End 역할 이름입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.AssociationSetEnd.ToString">
      <summary>이 <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationSetEnd" />의 End 역할 이름을 반환합니다.</summary>
      <returns>이 <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationSetEnd" />의 End 역할 이름입니다.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.AssociationType">
      <summary>개념적 모델의 두 엔터티 간 연결/관계 또는 저장소 모델의 두 테이블 간 외래 키 관계에 대해 설명합니다.개념적 모델에서는 종속 클래스가 외래 키 속성을 정의하거나 정의하지 못할 수 있습니다.외래 키가 정의되면 <see cref="P:System.Data.Entity.Core.Metadata.Edm.AssociationType.IsForeignKey" /> 속성이 true로 설정되고 <see cref="P:System.Data.Entity.Core.Metadata.Edm.AssociationType.Constraint" /> 속성에 외래 키의 세부 정보가 포함됩니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.AssociationType.AssociationEndMembers">
      <summary>이 <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationType" />의 End 목록을 가져옵니다.</summary>
      <returns>이 <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationType" />의 End 목록이 포함된 <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1" /> 형식의 컬렉션입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.AssociationType.BuiltInTypeKind">
      <summary>이 <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationType" />의 기본 제공 형식 유형을 가져옵니다.</summary>
      <returns>이 <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationType" />의 기본 제공 형식 유형을 나타내는 <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" /> 개체입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.AssociationType.Constraint">
      <summary>참조 제약 조건을 가져오거나 설정합니다.</summary>
      <returns>참조 제약 조건입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.AssociationType.Create(System.String,System.String,System.Boolean,System.Data.Entity.Core.Metadata.Edm.DataSpace,System.Data.Entity.Core.Metadata.Edm.AssociationEndMember,System.Data.Entity.Core.Metadata.Edm.AssociationEndMember,System.Data.Entity.Core.Metadata.Edm.ReferentialConstraint,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.MetadataProperty})">
      <summary>지정된 매개 변수에서 읽기 전용 AssociationType 인스턴스를 만듭니다.</summary>
      <returns>새로 만든 AssociationType 인스턴스</returns>
      <param name="name">연결 형식의 이름입니다.</param>
      <param name="namespaceName">연결 형식의 네임스페이스입니다.</param>
      <param name="foreignKey">외래 키(FK) 관계를 나타내는 플래그입니다.</param>
      <param name="dataSpace">연결 형식의 데이터 공간입니다.</param>
      <param name="sourceEnd">원본 연결 end 멤버입니다.</param>
      <param name="targetEnd">대상 연결 end 멤버입니다.</param>
      <param name="constraint">참조 제약 조건입니다.</param>
      <param name="metadataProperties">인스턴스와 연결할 메타데이터 속성입니다.</param>
      <exception cref="T:System.ArgumentException">지정된 이름이 null이거나 비어 있습니다.</exception>
      <exception cref="T:System.ArgumentException">지정된 네임스페이스가 null이거나 비어 있는 경우</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.AssociationType.IsForeignKey">
      <summary>열이 외래 키인지 여부를 지정하는 부울 속성 값을 가져옵니다.</summary>
      <returns>열이 외래 키인지 여부를 지정하는 부울 값입니다.true이면 열이 외래 키이고,false(기본값)이면 열이 외래 키가 아닙니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.AssociationType.ReferentialConstraints">
      <summary>이 <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationType" />에 대한 제약 조건 목록을 가져옵니다.</summary>
      <returns>이 <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationType" />에 대한 제약 조건 목록이 포함된 <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1" /> 형식의 컬렉션입니다.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind">
      <summary>모든 기본 제공 형식의 목록입니다.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.AssociationEndMember">
      <summary>연결 형식 유형입니다.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.AssociationSet">
      <summary>AssociationSet 유형입니다.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.AssociationSetEnd">
      <summary>AssociationSetEnd 유형입니다.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.AssociationType">
      <summary>연결 형식 유형입니다.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.CollectionKind">
      <summary>컬렉션 유형입니다.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.CollectionType">
      <summary>컬렉션 형식 유형입니다.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.ComplexType">
      <summary>복합 형식 유형입니다.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.Documentation">
      <summary>설명서 유형입니다.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.EdmFunction">
      <summary>EdmFunction 유형입니다.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.EdmMember">
      <summary>EdmMember 형식 유형입니다.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.EdmProperty">
      <summary>EdmProperty 형식 유형입니다.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.EdmType">
      <summary>Edm 형식 유형입니다.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.EntityContainer">
      <summary>엔터티 컨테이너 유형입니다.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.EntitySet">
      <summary>엔터티 집합 유형입니다.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.EntitySetBase">
      <summary>EntitySetBase 유형입니다.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.EntityType">
      <summary>엔터티 형식 유형입니다.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.EntityTypeBase">
      <summary>엔터티 형식 기본 유형입니다.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.EnumMember">
      <summary>열거형 멤버 유형입니다.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.EnumType">
      <summary>열거형 형식 유형입니다.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.Facet">
      <summary>패싯 유형입니다.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.FunctionParameter">
      <summary>함수 매개 변수 유형입니다.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.GlobalItem">
      <summary>전역 항목 형식 유형입니다.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.MetadataItem">
      <summary>메타데이터 항목 형식 유형입니다.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.MetadataProperty">
      <summary>메타데이터 속성 유형입니다.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.NavigationProperty">
      <summary>탐색 속성 유형입니다.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.OperationAction">
      <summary>DeleteAction 형식 유형입니다.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.ParameterMode">
      <summary>매개 변수 모드 유형입니다.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.PrimitiveType">
      <summary>기본 형식 유형입니다.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.PrimitiveTypeKind">
      <summary>기본 형식 유형입니다.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.ProviderManifest">
      <summary>ProviderManifest 형식 유형입니다.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.ReferentialConstraint">
      <summary>참조 제약 조건 형식 유형입니다.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.RefType">
      <summary>참조 형식 유형입니다.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.RelationshipEndMember">
      <summary>RelationshipEnd 형식 유형입니다.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.RelationshipMultiplicity">
      <summary>관계 복합성 형식 유형입니다.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.RelationshipSet">
      <summary>관계 집합 형식 유형입니다.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.RelationshipType">
      <summary>관계 형식입니다.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.RowType">
      <summary>행 형식 유형입니다.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.SimpleType">
      <summary>단순 형식 유형입니다.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.StructuralType">
      <summary>구조 형식 유형입니다.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.TypeUsage">
      <summary>형식 정보 유형입니다.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.CollectionKind">
      <summary>컬렉션(속성에 적용)의 종류입니다.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.CollectionKind.Bag">
      <summary>컬렉션에 모음 의미 체계(정렬되지 않으며 중복 항목이 허용됨)가 있습니다.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.CollectionKind.List">
      <summary>컬렉션에 목록 의미 체계(순서가 명확하고 중복 항목이 허용됨)가 있습니다.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.CollectionKind.None">
      <summary>속성이 컬렉션이 아닙니다.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.CollectionType">
      <summary>Edm 컬렉션 형식을 나타냅니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.CollectionType.BuiltInTypeKind">
      <summary>이 <see cref="T:System.Data.Entity.Core.Metadata.Edm.CollectionType" />의 기본 제공 형식 유형을 가져옵니다.</summary>
      <returns>이 <see cref="T:System.Data.Entity.Core.Metadata.Edm.CollectionType" />의 기본 제공 형식 유형을 나타내는 <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" /> 개체입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.CollectionType.TypeUsage">
      <summary>현재 <see cref="T:System.Data.Entity.Core.Metadata.Edm.CollectionType" /> 개체에 포함된 요소의 형식과 해당 형식의 패싯이 포함된 <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> 클래스의 인스턴스를 가져옵니다.</summary>
      <returns>현재 <see cref="T:System.Data.Entity.Core.Metadata.Edm.CollectionType" /> 개체에 포함된 요소의 형식과 해당 형식의 패싯이 포함된 <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> 클래스의 인스턴스입니다.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.ComplexType">
      <summary>Edm 복합 형식을 나타냅니다.이를 사용하여 개념적 공간 모델 기반 규칙에서 복합 형식을 구성할 수 있습니다.저장소 모델에서는 복합 형식이 지원되지 않습니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.ComplexType.BuiltInTypeKind">
      <summary>이 <see cref="T:System.Data.Entity.Core.Metadata.Edm.ComplexType" />의 기본 제공 형식 유형을 가져옵니다.</summary>
      <returns>이 <see cref="T:System.Data.Entity.Core.Metadata.Edm.ComplexType" />의 기본 제공 형식 유형을 나타내는 <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" /> 개체입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ComplexType.Create(System.String,System.String,System.Data.Entity.Core.Metadata.Edm.DataSpace,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.EdmMember},System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.MetadataProperty})">
      <summary>
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.ComplexType" /> 형식의 새 인스턴스를 만듭니다.</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.ComplexType" /> 형식의 새 인스턴스</returns>
      <param name="name">복합 형식의 이름입니다.</param>
      <param name="namespaceName">복합 형식의 네임스페이스입니다.</param>
      <param name="dataSpace">복합 형식이 속한 dataspace입니다.</param>
      <param name="members">복합 형식의 멤버입니다.</param>
      <param name="metadataProperties">인스턴스와 연결할 메타데이터 속성입니다.</param>
      <exception cref="T:System.ArgumentNullException">이름, 네임스페이스 또는 멤버 인수가 null인 경우에 throw됩니다.</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.ComplexType.Properties">
      <summary>이 <see cref="T:System.Data.Entity.Core.Metadata.Edm.ComplexType" />의 속성 목록을 가져옵니다.</summary>
      <returns>이 <see cref="T:System.Data.Entity.Core.Metadata.Edm.ComplexType" />의 속성 목록이 포함된 <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1" /> 형식의 컬렉션입니다.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.ConcurrencyMode">
      <summary>속성의 동시성 모드입니다.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.ConcurrencyMode.Fixed">
      <summary>고정 동시성 모드: 작성할 때 항상 속성의 유효성을 검사합니다.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.ConcurrencyMode.None">
      <summary>기본 동시성 모드: 작성할 때 속성의 유효성을 검사하지 않습니다.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.CsdlSerializer">
      <summary>단일 CSDL 스키마 파일의 제한을 따르는 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmModel" />을 XML 작성기에 serialize합니다.serialize할 모델에는 단일 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" />가 포함되어야 합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.CsdlSerializer.#ctor"></member>
    <member name="E:System.Data.Entity.Core.Metadata.Edm.CsdlSerializer.OnError">
      <summary>모델을 serialize하는 중 오류가 발견될 때 발생합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.CsdlSerializer.Serialize(System.Data.Entity.Core.Metadata.Edm.EdmModel,System.Xml.XmlWriter,System.String)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmModel" />을 XmlWriter로 serialize합니다.</summary>
      <returns>모델이 유효하면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="model">serialize할 원본인 EdmModel입니다.</param>
      <param name="xmlWriter">serialize할 대상인 XmlWriter입니다.</param>
      <param name="modelNamespace">serialize된 모델의 네임스페이스입니다.</param>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.DataModelErrorEventArgs">
      <summary>Entity Framework 모델을 처리할 때 발생한 오류에 대한 정보입니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.DataModelErrorEventArgs.#ctor"></member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.DataModelErrorEventArgs.ErrorMessage">
      <summary>발생하는 오류를 설명하는 선택적 설명 메시지를 가져옵니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.DataModelErrorEventArgs.Item">
      <summary>이벤트를 발생시킨 <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataItem" />을 나타내는 값을 가져옵니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.DataModelErrorEventArgs.PropertyName">
      <summary>이벤트를 발생시킨 원본 항목의 속성을 나타내는 선택적 값을 가져옵니다.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.DataSpace">
      <summary>DataSpace입니다.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.DataSpace.CSpace">
      <summary>CSpace는 CSpace에 있는 항목을 나타냅니다(edm 기본 형식 + csdl에 정의된 형식).</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.DataSpace.CSSpace">
      <summary>CSpace와 SSpace 간의 매핑입니다.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.DataSpace.OCSpace">
      <summary>OSpace와 CSpace 간의 매핑입니다.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.DataSpace.OSpace">
      <summary>OSpace는 clr 공간에 있는 항목을 나타냅니다.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.DataSpace.SSpace">
      <summary>SSpace는 SSpace에 있는 항목을 나타냅니다.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.DbModelExtensions">
      <summary>
        <see cref="T:System.Data.Entity.Infrastructure.DbModel" />의 확장 메서드입니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.DbModelExtensions.GetConceptualModel(System.Data.Entity.Core.Metadata.Edm.IEdmModelAdapter)">
      <summary>지정된 DbModel에서 개념적 모델을 가져옵니다.</summary>
      <returns>개념적 모델을 나타내는 EdmModel의 인스턴스입니다.</returns>
      <param name="model">IEdmModelAdapter(예:DbModel)를 구현하는 클래스의 인스턴스입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.DbModelExtensions.GetStoreModel(System.Data.Entity.Core.Metadata.Edm.IEdmModelAdapter)">
      <summary>지정된 DbModel에서 저장소 모델을 가져옵니다.</summary>
      <returns>저장소 모델을 나타내는 EdmModel의 인스턴스입니다.</returns>
      <param name="model">IEdmModelAdapter(예:DbModel)를 구현하는 클래스의 인스턴스입니다.</param>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.Documentation">
      <summary>항목과 연결된 설명서를 나타내는 클래스입니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.Documentation.BuiltInTypeKind">
      <summary>이 <see cref="T:System.Data.Entity.Core.Metadata.Edm.Documentation" />의 기본 제공 형식 유형을 가져옵니다.</summary>
      <returns>이 <see cref="T:System.Data.Entity.Core.Metadata.Edm.Documentation" />의 기본 제공 형식 유형을 나타내는 <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" /> 개체입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.Documentation.IsEmpty">
      <summary>이 <see cref="T:System.Data.Entity.Core.Metadata.Edm.Documentation" /> 개체에 null만 포함되었는지 아니면 빈 <see cref="P:System.Data.Entity.Core.Metadata.Edm.Documentation.Summary" />와 <see cref="P:System.Data.Entity.Core.Metadata.Edm.Documentation.Longdescription" />이 포함되었는지 나타내는 값을 가져옵니다.</summary>
      <returns>이 <see cref="T:System.Data.Entity.Core.Metadata.Edm.Documentation" /> 개체에 null만 포함되었거나 빈 <see cref="P:System.Data.Entity.Core.Metadata.Edm.Documentation.Summary" />와 <see cref="P:System.Data.Entity.Core.Metadata.Edm.Documentation.LongDescription" />이 포함되었으면 true이고, 그렇지 않으면
false입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.Documentation.LongDescription">
      <summary>이 <see cref="T:System.Data.Entity.Core.Metadata.Edm.Documentation" />에 대한 자세한 설명을 가져옵니다.</summary>
      <returns>이 <see cref="T:System.Data.Entity.Core.Metadata.Edm.Documentation" />에 대한 자세한 설명입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.Documentation.Summary">
      <summary>이 <see cref="T:System.Data.Entity.Core.Metadata.Edm.Documentation" />에 대한 요약을 가져옵니다.</summary>
      <returns>이 <see cref="T:System.Data.Entity.Core.Metadata.Edm.Documentation" />에 대한 요약입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.Documentation.ToString">
      <summary>이 <see cref="T:System.Data.Entity.Core.Metadata.Edm.Documentation" />에 대한 요약을 반환합니다.</summary>
      <returns>이 <see cref="T:System.Data.Entity.Core.Metadata.Edm.Documentation" />에 대한 요약입니다.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.EdmError">
      <summary>이 클래스는 제네릭 EDM 오류에 대한 오류 정보를 캡슐화합니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmError.Message">
      <summary>오류 메시지를 가져옵니다.</summary>
      <returns>오류 메시지입니다.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.EdmFunction">
      <summary>함수를 나타내는 클래스입니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmFunction.AddParameter(System.Data.Entity.Core.Metadata.Edm.FunctionParameter)">
      <summary>이 함수에 매개 변수를 추가합니다.</summary>
      <param name="functionParameter">추가할 매개 변수입니다.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunction.AggregateAttribute">
      <summary>이 함수의 집계 특성을 가져옵니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunction.BuiltInAttribute">
      <summary>이 함수에 대한 기본 제공 특성이 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>특성이 있으면 true이고 그렇지 않으면 false입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunction.BuiltInTypeKind">
      <summary>이 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmFunction" />의 기본 제공 형식 유형을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" /> 열거형의 열거형 값 중 하나입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunction.CommandTextAttribute">
      <summary>데이터베이스 관리 시스템이나 저장소 모델에서 사용하는 언어의 쿼리를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmFunction" />의 쿼리 또는 업데이트 문이 포함된 데이터베이스 관리 시스템이나 저장소 모델에서 사용하는 구문의 문자열 값입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmFunction.Create(System.String,System.String,System.Data.Entity.Core.Metadata.Edm.DataSpace,System.Data.Entity.Core.Metadata.Edm.EdmFunctionPayload,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.MetadataProperty})">
      <summary>
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmFunction" /> 개체를 생성하기 위한 팩터리 메서드입니다.</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmFunction" /> 형식의 새로운 읽기 전용 인스턴스입니다.</returns>
      <param name="name">함수 이름입니다.</param>
      <param name="namespaceName">함수의 네임스페이스입니다.</param>
      <param name="dataSpace">함수가 속해 있는 네임스페이스입니다.</param>
      <param name="payload">추가 함수 특성 및 속성입니다.</param>
      <param name="metadataProperties">함수에 추가할 메타데이터 속성입니다.null일 수 있습니다.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunction.FullName">
      <summary>이 형식의 전체 이름(네임스페이스와 이름)을 반환합니다.</summary>
      <returns>형식의 전체 이름입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunction.IsComposableAttribute">
      <summary>이 인스턴스가 함수로 매핑되는지 아니면 저장 프로시저로 매핑되는지를 가져옵니다.</summary>
      <returns>이 인스턴스가 함수로 매핑되면 true이고, 이 인스턴스가 저장 프로시저로 매핑되면 false입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunction.IsFromProviderManifest">
      <summary>이 인스턴스가 공급자 매니페스트로부터 온 것인지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>이 인스턴스가 공급자 매니페스트로부터 온 것이면 true이고, 그렇지 않으면 false입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunction.NiladicFunctionAttribute">
      <summary>niladic 함수(인수를 받지 않는 함수)인지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>함수가 niladic이면 true이고, 그렇지 않으면 false입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunction.Parameters">
      <summary>이 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmFunction" />의 매개 변수를 가져옵니다.</summary>
      <returns>이 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmFunction" />의 매개 변수가 포함된 <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1" /> 형식의 컬렉션입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunction.ParameterTypeSemanticsAttribute">
      <summary>이 함수의 매개 변수 형식 의미 체계 특성을 가져옵니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunction.ReturnParameter">
      <summary>이 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmFunction" />의 반환 매개 변수를 가져옵니다.</summary>
      <returns>이 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmFunction" />의 반환 매개 변수를 나타내는 <see cref="T:System.Data.Entity.Core.Metadata.Edm.FunctionParameter" /> 개체입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunction.ReturnParameters">
      <summary>이 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmFunction" />의 반환 매개 변수를 가져옵니다.</summary>
      <returns>이 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmFunction" />의 반환 매개 변수를 나타내는 <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1" /> 형식의 컬렉션입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunction.Schema">
      <summary>함수에 연결된 스키마를 가져오거나 설정합니다.</summary>
      <returns>함수에 연결된 스키마입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunction.StoreFunctionNameAttribute">
      <summary>이 함수의 저장소 함수 이름 특성을 가져옵니다.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.EdmFunctionPayload">
      <summary>
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmFunction" />의 추가 특성 및 속성을 포함합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmFunctionPayload.#ctor"></member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunctionPayload.CommandText">
      <summary>함수에 연결된 명령 텍스트를 가져오거나 설정합니다.</summary>
      <returns>함수에 연결된 명령 텍스트입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunctionPayload.EntitySets">
      <summary>함수의 엔터티 집합을 가져오거나 설정합니다.</summary>
      <returns>함수의 엔터티 집합입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunctionPayload.IsAggregate">
      <summary>집계 함수인지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>집계 함수이면 true이고, 그렇지 않으면 false입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunctionPayload.IsBuiltIn">
      <summary>이 함수가 기본 제공 함수인지 여부를 가져오거나 설정합니다.</summary>
      <returns>이 함수가 기본 제공 함수이면 true이고, 그렇지 않으면 false입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunctionPayload.IsCachedStoreFunction">
      <summary>이 함수가 캐시된 저장소 함수인지 여부를 가져오거나 설정합니다.</summary>
      <returns>이 함수가 캐시된 저장소 함수이면 true이고, 그렇지 않으면 false입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunctionPayload.IsComposable">
      <summary>이 함수를 구성할 수 있는지 여부를 가져오거나 설정합니다.</summary>
      <returns>이 함수를 구성할 수 있으면 true이고, 그렇지 않으면 false입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunctionPayload.IsFromProviderManifest">
      <summary>이 함수가 공급자 매니페스트에서 제공되었는지 여부를 가져오거나 설정합니다.</summary>
      <returns>이 함수가 공급자 매니페스트에서 제공되었으면 true이고, 그렇지 않으면 false입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunctionPayload.IsFunctionImport">
      <summary>이 함수가 함수 가져오기인지 여부를 가져오거나 설정합니다.</summary>
      <returns>이 함수가 함수 가져오기이면 true이고, 그렇지 않으면 false입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunctionPayload.IsNiladic">
      <summary>함수에 인수가 포함되어 있지 않은지 여부를 가져오거나 설정합니다.</summary>
      <returns>함수에 인수가 포함되어 있지 않으면 true이고, 그렇지 않으면 false입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunctionPayload.Parameters">
      <summary>함수 매개 변수를 가져오거나 설정합니다.</summary>
      <returns>함수 매개 변수입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunctionPayload.ParameterTypeSemantics">
      <summary>매개 변수 형식 의미 체계를 가져오거나 설정합니다.</summary>
      <returns>매개 변수 형식 의미 체계입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunctionPayload.ReturnParameters">
      <summary>반환 매개 변수를 가져오거나 설정합니다.</summary>
      <returns>반환 매개 변수입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunctionPayload.Schema">
      <summary>함수 스키마를 가져오거나 설정합니다.</summary>
      <returns>함수 스키마입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunctionPayload.StoreFunctionName">
      <summary>저장소 함수 이름을 가져오거나 설정합니다.</summary>
      <returns>저장소 함수 이름입니다.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.EdmItemCollection">
      <summary>Edm 공간의 항목 컬렉션을 나타내는 클래스입니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmItemCollection.#ctor(System.Collections.Generic.IEnumerable{System.Xml.XmlReader})">
      <summary>CSDL(개념 스키마 정의 언어) 파일이 있는 XMLReader 개체의 컬렉션을 사용하여 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmItemCollection" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="xmlReaders">CSDL(개념 스키마 정의 언어) 파일이 있는 XMLReader 개체의 컬렉션입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmItemCollection.#ctor(System.Data.Entity.Core.Metadata.Edm.EdmModel)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmItemCollection" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="model">엔터티 데이터 모델입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmItemCollection.#ctor(System.String[])">
      <summary>CSDL(개념 스키마 정의 언어) 파일의 경로를 사용하여 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmItemCollection" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="filePaths">CSDL(개념 스키마 정의 언어) 파일의 경로입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmItemCollection.Create(System.Collections.Generic.IEnumerable{System.Xml.XmlReader},System.Collections.ObjectModel.ReadOnlyCollection{System.String},System.Collections.Generic.IList{System.Data.Entity.Core.Metadata.Edm.EdmSchemaError}@)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmItemCollection" />을 만드는 팩터리 메서드입니다.</summary>
      <returns>오류가 발생하지 않은 경우 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmItemCollection" /> 인스턴스이고,그렇지 않으면 null입니다.</returns>
      <param name="xmlReaders">로드할 CSDL 아티팩트입니다.null이 아니어야 합니다.</param>
      <param name="filePaths">CSDL 아티팩트에 대한 경로입니다.오류 메시지에 사용됩니다.XmlReader의 기본 URI가 경로로 사용되는 경우 null일 수 있습니다.</param>
      <param name="errors">로딩하는 동안 발생한 오류의 컬렉션입니다.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmItemCollection.EdmVersion">
      <summary>이 컬렉션에 대한 개념적 모델 버전을 가져옵니다.</summary>
      <returns>이 컬렉션에 대한 개념적 모델 버전입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmItemCollection.GetPrimitiveTypes">
      <summary>
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" /> 개체의 컬렉션을 반환합니다.</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" /> 개체의 컬렉션을 나타내는 ReadOnlyCollection 개체입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmItemCollection.GetPrimitiveTypes(System.Double)">
      <summary>지정된 개념적 모델 버전을 사용하는 <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" /> 개체의 컬렉션을 반환합니다.</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" /> 개체의 컬렉션을 나타내는 ReadOnlyCollection 개체입니다.</returns>
      <param name="edmVersion">개념적 모델 버전입니다.</param>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.EdmMember">
      <summary>Edm 멤버 클래스를 나타냅니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmMember.DeclaringType">
      <summary>이 멤버가 선언된 형식을 가져옵니다.</summary>
      <returns>이 멤버가 선언된 형식을 나타내는 <see cref="T:System.Data.Entity.Core.Metadata.Edm.StructuralType" /> 개체입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmMember.IsStoreGeneratedComputed">
      <summary>이 멤버가 EDM 정의에서 계산된 멤버로 표시되는지 여부를 나타냅니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmMember.IsStoreGeneratedIdentity">
      <summary>이 멤버의 저장소 생성 패턴이 EDM 정의에서 ID로 표시되는지 여부를 나타냅니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmMember.Name">
      <summary>속성 이름을 가져오거나 설정합니다.이를 설정하면 저장소 공간 모델 규칙을 통해 이 속성에 대한 데이터베이스 열의 이름이 변경됩니다.개념적 모델에서는 이것이 엔터티 클래스의 해당 속성과 맞아야 하며 변경되어서는 안 됩니다.</summary>
      <returns>이 멤버의 이름입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmMember.ToString">
      <summary>이 멤버의 이름을 반환합니다.</summary>
      <returns>이 멤버의 이름입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmMember.TypeUsage">
      <summary>멤버 형식 및 해당 형식의 패싯이 모두 포함된 <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> 클래스의 인스턴스를 가져옵니다.</summary>
      <returns>멤버 형식 및 해당 형식의 패싯이 모두 포함된 <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> 개체입니다.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.EdmModel">
      <summary>개념적 모델 또는 저장소 모델을 나타냅니다.이 클래스를 사용하여 모델의 모양과 모델이 구성된 방법에 대한 정보에 액세스할 수 있습니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmModel.AddItem(System.Data.Entity.Core.Metadata.Edm.AssociationType)">
      <summary>연결 형식을 모델에 추가합니다.</summary>
      <param name="item">추가할 AssociationType 인스턴스입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmModel.AddItem(System.Data.Entity.Core.Metadata.Edm.ComplexType)">
      <summary>복합 형식을 모델에 추가합니다.</summary>
      <param name="item">추가할 ComplexType 인스턴스입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmModel.AddItem(System.Data.Entity.Core.Metadata.Edm.EdmFunction)">
      <summary>함수를 모델에 추가합니다.</summary>
      <param name="item">추가할 EdmFunction 인스턴스입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmModel.AddItem(System.Data.Entity.Core.Metadata.Edm.EntityType)">
      <summary>엔터티 형식을 모델에 추가합니다.</summary>
      <param name="item">추가할 EntityType 인스턴스입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmModel.AddItem(System.Data.Entity.Core.Metadata.Edm.EnumType)">
      <summary>열거형 형식을 모델에 추가합니다.</summary>
      <param name="item">추가할 EnumType 인스턴스입니다.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmModel.AssociationTypes">
      <summary>모델에서 연결 형식을 가져옵니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmModel.BuiltInTypeKind">
      <summary>이 형식의 기본 제공 형식 유형을 가져옵니다.</summary>
      <returns>이 형식의 기본 제공 형식 유형을 나타내는 <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" /> 개체입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmModel.ComplexTypes">
      <summary>모델에서 복합 형식을 가져옵니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmModel.Container">
      <summary>엔터티, 연결 집합 및 함수 가져오기를 저장하는 컨테이너를 가져옵니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmModel.DataSpace">
      <summary>모델이 개념적 모델(DataSpace.CSpace) 또는 저장소 모델(DataSpace.SSpace)인지 여부를 나타내는 모델에 연결된 데이터 공간을 가져옵니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmModel.EntityTypes">
      <summary>모델에서 엔터티 형식을 가져옵니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmModel.EnumTypes">
      <summary>모델에서 열거형 형식을 가져옵니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmModel.Functions">
      <summary>모델에서 함수를 가져옵니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmModel.GlobalItems">
      <summary>모델에 연결된 전역 항목을 가져옵니다.</summary>
      <returns>모델에 연결된 전역 항목입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmModel.RemoveItem(System.Data.Entity.Core.Metadata.Edm.AssociationType)">
      <summary>연결 형식을 모델에서 제거합니다.</summary>
      <param name="item">제거할 AssociationType 인스턴스입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmModel.RemoveItem(System.Data.Entity.Core.Metadata.Edm.ComplexType)">
      <summary>복합 형식을 모델에서 제거합니다.</summary>
      <param name="item">제거할 ComplexType 인스턴스입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmModel.RemoveItem(System.Data.Entity.Core.Metadata.Edm.EdmFunction)">
      <summary>함수를 모델에서 제거합니다.</summary>
      <param name="item">제거할 EdmFunction 인스턴스입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmModel.RemoveItem(System.Data.Entity.Core.Metadata.Edm.EntityType)">
      <summary>엔터티 형식을 모델에서 제거합니다.</summary>
      <param name="item">제거할 EntityType 인스턴스입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmModel.RemoveItem(System.Data.Entity.Core.Metadata.Edm.EnumType)">
      <summary>열거형 형식을 모델에서 제거합니다.</summary>
      <param name="item">제거할 EnumType 인스턴스입니다.</param>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.EdmProperty">
      <summary>개념적 공간에서 EdmProperty는 엔터티에 대한 속성을 나타냅니다.저장소 공간에서 EdmProperty는 테이블의 열을 나타냅니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.BuiltInTypeKind">
      <summary>이 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmProperty" />의 기본 제공 형식 유형을 가져옵니다.</summary>
      <returns>이 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmProperty" />의 기본 제공 형식 유형을 나타내는 <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" /> 개체입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.CollectionKind">
      <summary>이 모델의 컬렉션 종류를 가져오거나 설정합니다.</summary>
      <returns>이 모델의 컬렉션 종류입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.ComplexType">
      <summary>이 속성의 복합 형식 정보를 가져옵니다.</summary>
      <returns>이 속성의 복합 형식 정보입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.ConcurrencyMode">
      <summary>속성의 동시성 모드를 가져오거나 설정합니다.</summary>
      <returns>속성의 동시성 모드입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmProperty.Create(System.String,System.Data.Entity.Core.Metadata.Edm.TypeUsage)">
      <summary>EdmProperty 형식의 새 인스턴스를 만듭니다.</summary>
      <returns>EdmProperty 형식의 새 인스턴스</returns>
      <param name="name">속성의 이름입니다.</param>
      <param name="typeUsage">
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> 속성입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmProperty.CreateComplex(System.String,System.Data.Entity.Core.Metadata.Edm.ComplexType)">
      <summary>새 복합 속성을 만듭니다.</summary>
      <returns>새로 만든 속성입니다.</returns>
      <param name="name">속성의 이름입니다.</param>
      <param name="complexType">속성의 형식입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmProperty.CreateEnum(System.String,System.Data.Entity.Core.Metadata.Edm.EnumType)">
      <summary>새 열거형 속성을 만듭니다.</summary>
      <returns>새로 만든 속성입니다.</returns>
      <param name="name">속성의 이름입니다.</param>
      <param name="enumType">속성의 형식입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmProperty.CreatePrimitive(System.String,System.Data.Entity.Core.Metadata.Edm.PrimitiveType)">
      <summary>새 기본 속성을 만듭니다.</summary>
      <returns>새로 만든 속성입니다.</returns>
      <param name="name">속성의 이름입니다.</param>
      <param name="primitiveType">속성의 형식입니다.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.DefaultValue">
      <summary>이 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmProperty" />의 기본값을 가져옵니다.</summary>
      <returns>이 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmProperty" />의 기본값입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.EnumType">
      <summary>이 속성의 열거형 형식 정보를 가져옵니다.</summary>
      <returns>이 속성의 열거형 형식 정보입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.IsCollectionType">
      <summary>속성이 컬렉션 형식 속성인지 여부를 가져옵니다.</summary>
      <returns>속성이 컬렉션 형식 속성이면 true이고, 그렇지 않으면 false입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.IsComplexType">
      <summary>이 속성이 복합 형식 속성인지 여부를 가져옵니다.</summary>
      <returns>이 속성이 복합 형식 속성이면 true이고, 그렇지 않으면 false입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.IsEnumType">
      <summary>이 속성이 열거형 형식 속성인지 여부를 가져옵니다.</summary>
      <returns>이 속성이 열거형 형식 속성이면 true이고, 그렇지 않으면 false입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.IsFixedLength">
      <summary>이 속성의 길이가 고정되어 있는지 여부를 가져오거나 설정합니다.</summary>
      <returns>이 속성의 길이가 고정되어 있으면 true이고, 그렇지 않으면 false입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.IsFixedLengthConstant">
      <summary>고정 길이 패싯이 데이터베이스 공급자에 대한 상수인지 여부를 가져옵니다.</summary>
      <returns>패싯이 상수이면 true이고, 그렇지 않으면 false입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.IsMaxLength">
      <summary>이 속성에서 공급자가 지원하는 최대 길이를 사용하는지 여부를 가져오거나 설정합니다.</summary>
      <returns>이 속성에서 공급자가 지원하는 최대 길이를 사용하면 true이고, 그렇지 않으면 false입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.IsMaxLengthConstant">
      <summary>최대 길이 패싯이 데이터베이스 공급자에 대한 상수인지 여부를 가져옵니다.</summary>
      <returns>패싯이 상수이면 true이고, 그렇지 않으면 false입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.IsPrecisionConstant">
      <summary>전체 자릿수 패싯이 데이터베이스 공급자에 대한 상수인지 여부를 가져옵니다.</summary>
      <returns>패싯이 상수이면 true이고, 그렇지 않으면 false입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.IsPrimitiveType">
      <summary>이 속성이 기본 형식인지 여부를 가져옵니다.</summary>
      <returns>이 속성이 기본 형식이면 true이고, 그렇지 않으면 false입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.IsScaleConstant">
      <summary>소수 자릿수 패싯이 데이터베이스 공급자에 대한 상수인지 여부를 가져옵니다.</summary>
      <returns>패싯이 상수이면 true이고, 그렇지 않으면 false입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.IsUnderlyingPrimitiveType">
      <summary>이 속성이 내부 기본 형식인지 여부를 가져옵니다.</summary>
      <returns>이 속성이 내부 기본 형식이면 true이고, 그렇지 않으면 false입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.IsUnicode">
      <summary>이 속성이 유니코드 속성인지 여부를 가져오거나 설정합니다.</summary>
      <returns>이 속성이 유니코드 속성이면 true이고, 그렇지 않으면 false입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.IsUnicodeConstant">
      <summary>유니코드 패싯이 데이터베이스 공급자에 대한 상수인지 여부를 가져옵니다.</summary>
      <returns>패싯이 상수이면 true이고, 그렇지 않으면 false입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.MaxLength">
      <summary>속성의 최대 길이를 가져오거나 설정합니다.</summary>
      <returns>속성의 최대 길이입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.Nullable">
      <summary>이 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmProperty" />에 null 값이 허용되는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>이 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmProperty" />에 null 값이 허용되면 true이고, 그렇지 않으면 false입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.Precision">
      <summary>이 속성의 전체 자릿수를 가져오거나 설정합니다.</summary>
      <returns>이 속성의 전체 자릿수입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.PrimitiveType">
      <summary>이 속성의 기본 형식 정보를 가져옵니다.</summary>
      <returns>이 속성의 기본 형식 정보입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.Scale">
      <summary>이 속성의 소수 자릿수를 가져오거나 설정합니다.</summary>
      <returns>이 속성의 소수 자릿수입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmProperty.SetMetadataProperties(System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.MetadataProperty})">
      <summary>메타데이터 속성을 설정합니다.</summary>
      <param name="metadataProperties">설정할 메타데이터 속성입니다.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.StoreGeneratedPattern">
      <summary>이 속성과 연결된 데이터베이스 열의 데이터베이스 생성 메서드를 가져오거나 설정합니다.</summary>
      <returns>속성의 저장소 생성 패턴입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.TypeName">
      <summary>속성의 형식 이름을 가져옵니다.</summary>
      <returns>속성의 형식 이름입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.UnderlyingPrimitiveType">
      <summary>이 속성의 내부 기본 형식 정보를 가져옵니다.</summary>
      <returns>이 속성의 내부 기본 형식 정보입니다.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.EdmSchemaError">
      <summary>이 클래스는 발생한 스키마 오류에 대한 오류 정보를 캡슐화 합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmSchemaError.#ctor(System.String,System.Int32,System.Data.Entity.Core.Metadata.Edm.EdmSchemaErrorSeverity)">
      <summary>EdmSchemaError 개체를 생성합니다.</summary>
      <param name="message">오류에 대한 설명입니다.</param>
      <param name="errorCode">이 오류와 연결된 코드입니다.</param>
      <param name="severity">오류의 심각도입니다.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmSchemaError.Column">
      <summary>오류가 발생한 열을 가져옵니다.</summary>
      <returns>오류가 발생한 열입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmSchemaError.ErrorCode">
      <summary>오류 코드를 가져옵니다.</summary>
      <returns>오류 코드입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmSchemaError.Line">
      <summary>오류가 발생한 줄 번호를 가져옵니다.</summary>
      <returns>오류가 발생한 줄 번호입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmSchemaError.SchemaLocation">
      <summary>오류가 포함된 스키마의 위치를 가져옵니다.이 문자열 끝에는 스키마 이름도 포함됩니다.</summary>
      <returns>오류가 있는 스키마의 위치입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmSchemaError.SchemaName">
      <summary>오류가 있는 스키마의 이름을 가져옵니다.</summary>
      <returns>오류가 있는 스키마의 이름입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmSchemaError.Severity">
      <summary>오류의 심각도 수준을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmSchemaErrorSeverity" /> 값 중 하나입니다.기본값은 <see cref="F:System.Data.Entity.Core.Metadata.Edm.EdmSchemaErrorSeverity.Warning" />입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmSchemaError.StackTrace">
      <summary>오류가 발생한 시점의 스택 추적 결과를 나타내는 문자열을 가져옵니다.</summary>
      <returns>오류가 발생한 시점의 스택 추적 결과를 나타내는 문자열입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmSchemaError.ToString">
      <summary>오류 메시지를 반환합니다.</summary>
      <returns>오류 메시지입니다.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.EdmSchemaErrorSeverity">
      <summary>Entity Framework 모델의 유효성을 검사하는 동안 발생할 수 있는 오류의 여러 심각도를 정의합니다.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.EdmSchemaErrorSeverity.Error">
      <summary>모델이 사용되는 것을 방지하는 오류입니다.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.EdmSchemaErrorSeverity.Warning">
      <summary>모델이 사용되는 것을 방지하지 않는 경고입니다.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.EdmType">
      <summary>모든 모델 형식의 기본 EdmType 클래스입니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmType.Abstract">
      <summary>이 형식이 추상 형식인지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>이 형식이 추상 형식이면 true이고, 그렇지 않으면 false입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmType.BaseType">
      <summary>이 형식의 기본 형식을 가져옵니다.</summary>
      <returns>이 형식의 기본 형식입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmType.FullName">
      <summary>이 형식의 전체 이름을 가져옵니다.</summary>
      <returns>이 형식의 전체 이름입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmType.GetCollectionType">
      <summary>이 형식의 요소를 가진 <see cref="T:System.Data.Entity.Core.Metadata.Edm.CollectionType" />의 인스턴스를 반환합니다.</summary>
      <returns>이 형식의 요소를 가진 <see cref="T:System.Data.Entity.Core.Metadata.Edm.CollectionType" /> 개체입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmType.Name">
      <summary>이 형식의 이름을 가져옵니다.</summary>
      <returns>이 형식의 이름입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmType.NamespaceName">
      <summary>이 형식의 네임스페이스를 가져옵니다.</summary>
      <returns>이 형식의 네임스페이스입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmType.ToString">
      <summary>이 형식의 전체 이름을 반환합니다.</summary>
      <returns>이 형식의 전체 이름입니다.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer">
      <summary>엔터티 컨테이너를 나타내는 클래스입니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EntityContainer.AssociationSets">
      <summary>이 엔터티 컨테이너에 대한 연결 집합을 가져옵니다.</summary>
      <returns>이 엔터티 컨테이너에 대한 연결 집합입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EntityContainer.BaseEntitySets">
      <summary>이 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" />에 포함된 엔터티 집합과 연결 집합의 목록을 가져옵니다.</summary>
      <returns>이 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" />에 포함된 엔터티 집합과 연결 집합의 목록을 포함하는 <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1" /> 개체입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EntityContainer.BuiltInTypeKind">
      <summary>이 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" />의 기본 제공 형식 유형을 가져옵니다.</summary>
      <returns>이 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" />의 기본 제공 형식 유형을 나타내는 <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" /> 개체입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EntityContainer.Create(System.String,System.Data.Entity.Core.Metadata.Edm.DataSpace,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.EntitySetBase},System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.EdmFunction},System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.MetadataProperty})">
      <summary>EntityContainer 개체를 생성하기 위한 팩터리 메서드입니다.</summary>
      <param name="name">만들 엔터티 컨테이너의 이름입니다.</param>
      <param name="dataSpace">이 엔터티 컨테이너가 속한 DataSpace입니다.</param>
      <param name="entitySets">새 컨테이너에 포함될 엔터티 집합입니다.null일 수 있습니다.</param>
      <param name="functionImports">새 컨테이너에 포함될 함수입니다.null일 수 있습니다.</param>
      <param name="metadataProperties">인스턴스와 연결할 메타데이터 속성입니다.</param>
      <exception cref="T:System.ArgumentException">이름 인수가 null이가 빈 문자열인 경우에 발생합니다.</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EntityContainer.EntitySets">
      <summary>이 엔터티 컨테이너에 대한 엔터티 집합을 가져옵니다.</summary>
      <returns>이 엔터티 컨테이너에 대한 엔터티 집합입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EntityContainer.FunctionImports">
      <summary>
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmFunction" /> 요소의 컬렉션을 지정합니다.각 함수에는 데이터베이스에 있는 저장 프로시저나 엔터티와 그 속성에 매핑되는 해당 CommandText에 대한 정보가 포함됩니다.</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmFunction" /> 요소가 포함된 <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1" />입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EntityContainer.GetEntitySetByName(System.String,System.Boolean)">
      <summary>지정된 엔터티 집합 이름을 사용하여 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" /> 개체를 반환합니다.</summary>
      <returns>지정된 이름을 가진 엔터티 집합을 나타내는 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" /> 개체입니다.</returns>
      <param name="name">검색할 엔터티 집합의 이름입니다.</param>
      <param name="ignoreCase">검색할 때 대/소문자를 구분하지 않는 경우 true이고, 그렇지 않으면 false입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EntityContainer.GetRelationshipSetByName(System.String,System.Boolean)">
      <summary>지정된 관계 집합 이름을 사용하여 <see cref="T:System.Data.Entity.Core.Metadata.Edm.RelationshipSet" /> 개체를 반환합니다.</summary>
      <returns>지정된 이름을 가진 관계 집합을 나타내는 <see cref="T:System.Data.Entity.Core.Metadata.Edm.RelationshipSet" /> 개체입니다.</returns>
      <param name="name">검색할 관계 집합의 이름입니다.</param>
      <param name="ignoreCase">검색할 때 대/소문자를 구분하지 않는 경우 true이고, 그렇지 않으면 false입니다.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EntityContainer.Name">
      <summary>이 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" />의 이름을 가져옵니다.</summary>
      <returns>이 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" />의 이름입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EntityContainer.RemoveEntitySetBase(System.Data.Entity.Core.Metadata.Edm.EntitySetBase)">
      <summary>컨테이너에서 특정 엔터티 집합을 제거합니다.</summary>
      <param name="entitySetBase">제거할 엔터티 집합입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EntityContainer.ToString">
      <summary>이 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" />의 이름을 반환합니다.</summary>
      <returns>이 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" />의 이름입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EntityContainer.TryGetEntitySetByName(System.String,System.Boolean,System.Data.Entity.Core.Metadata.Edm.EntitySet@)">
      <summary>지정된 엔터티 집합 이름을 사용하여 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" /> 개체를 반환합니다.</summary>
      <returns>검색 조건과 일치하는 엔터티 집합이 있으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="name">검색할 엔터티 집합의 이름입니다.</param>
      <param name="ignoreCase">검색할 때 대/소문자를 구분하지 않는 경우 true이고, 그렇지 않으면 false입니다.</param>
      <param name="entitySet">이 메서드의 반환 값에는 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" /> 개체가 포함됩니다.엔터티 집합이 없으면 이 출력 매개 변수에 null이 포함됩니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EntityContainer.TryGetRelationshipSetByName(System.String,System.Boolean,System.Data.Entity.Core.Metadata.Edm.RelationshipSet@)">
      <summary>지정된 관계 집합 이름을 사용하여 <see cref="T:System.Data.Entity.Core.Metadata.Edm.RelationshipSet" /> 개체를 반환합니다.</summary>
      <returns>검색 조건과 일치하는 관계 집합이 있으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="name">검색할 관계 집합의 이름입니다.</param>
      <param name="ignoreCase">검색할 때 대/소문자를 구분하지 않는 경우 true이고, 그렇지 않으면 false입니다.</param>
      <param name="relationshipSet">이 메서드의 반환 값에는 <see cref="T:System.Data.Entity.Core.Metadata.Edm.RelationshipSet" /> 개체가 포함됩니다.</param>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.EntitySet">
      <summary>EntityType.에 정의된 구조의 특정 용도를 나타냅니다.개념적 모델에서는 엔터티를 쿼리 및 유지할 수 있는 집합을 나타냅니다.저장소 모델에서는 테이블을 나타냅니다.저장소 공간 모델 규칙에서 이를 사용하여 <see cref="P:System.Data.Entity.Core.Metadata.Edm.EntitySetBase.Table" /> 속성이 있는 테이블 이름과 <see cref="P:System.Data.Entity.Core.Metadata.Edm.EntitySetBase.Schema" /> 속성이 있는 테이블 스키마를 구성할 수 있습니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EntitySet.BuiltInTypeKind">
      <summary>이 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" />의 기본 제공 형식 유형을 가져옵니다.</summary>
      <returns>이 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" />의 기본 제공 형식 유형을 나타내는 <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" /> 개체입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EntitySet.Create(System.String,System.String,System.String,System.String,System.Data.Entity.Core.Metadata.Edm.EntityType,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.MetadataProperty})">
      <summary>EntitySet 개체를 생성하기 위한 팩터리 메서드입니다.</summary>
      <param name="name">EntitySet의 이름입니다.</param>
      <param name="schema">db 스키마입니다.null일 수 있습니다.</param>
      <param name="table">db 테이블입니다.null일 수 있습니다.</param>
      <param name="definingQuery">이 EntitySet에 대한 데이터를 검색하는 데 사용해야 하는 공급자별 쿼리입니다.null일 수 있습니다.</param>
      <param name="entityType">이 엔터티 집합 형식에 포함된 엔터티의 엔터티 형식입니다.</param>
      <param name="metadataProperties">새로 만든 EntitySet에 추가할 메타데이터 속성입니다.null일 수 있습니다.</param>
      <exception cref="T:System.ArgumentException">이름 인수가 null이가 빈 문자열인 경우에 발생합니다.</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EntitySet.ElementType">
      <summary>이 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" />의 엔터티 형식을 가져옵니다.</summary>
      <returns>이 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityType" />의 엔터티 형식을 나타내는 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" /> 개체입니다.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.EntitySetBase">
      <summary>엔터티 집합을 나타내는 클래스입니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EntitySetBase.BuiltInTypeKind">
      <summary>이 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySetBase" />의 기본 제공 형식 유형을 가져옵니다.</summary>
      <returns>이 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySetBase" />의 기본 제공 형식 유형을 나타내는 <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" /> 개체입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EntitySetBase.DefiningQuery">
      <summary>이 엔터티 집합을 설명하는 이스케이프된 공급자별 SQL을 가져옵니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EntitySetBase.ElementType">
      <summary>이 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityTypeBase" />의 엔터티 형식을 가져옵니다.</summary>
      <returns>이 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityTypeBase" />의 엔터티 형식을 나타내는 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityTypeBase" /> 개체입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EntitySetBase.EntityContainer">
      <summary>현재 엔터티 또는 관계 집합의 엔터티 컨테이너를 가져옵니다.</summary>
      <returns>현재 엔터티 또는 관계 집합의 엔터티 컨테이너를 나타내는 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" /> 개체입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EntitySetBase.Name">
      <summary>현재 엔터티 또는 관계 집합의 이름을 가져오거나 설정합니다.이 속성이 저장소 공간에서 변경되면 매핑 계층도 새 이름을 반영하도록 업데이트되어야 합니다.저장소 공간 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" />의 테이블 이름을 변경하려면 Table 속성을 사용합니다.</summary>
      <returns>현재 엔터티 또는 관계 집합의 이름입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EntitySetBase.Schema">
      <summary>이 엔터티 집합의 데이터베이스 스키마를 가져오거나 설정합니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EntitySetBase.Table">
      <summary>이 엔터티 집합의 데이터베이스 테이블 이름을 가져오거나 설정합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EntitySetBase.ToString">
      <summary>현재 엔터티 또는 관계 집합의 이름을 반환합니다.</summary>
      <returns>현재 엔터티 또는 관계 집합의 이름입니다.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.EntityType">
      <summary>
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" />의 구조를 나타냅니다.개념적 모델에서는 엔터티의 모양과 구조를 나타냅니다.저장소 모델에서는 테이블의 모양과 구조를 나타냅니다.스키마 및 테이블 이름을 변경하려면 EntitySet을 사용합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EntityType.AddNavigationProperty(System.Data.Entity.Core.Metadata.Edm.NavigationProperty)">
      <summary>이 형식의 멤버에 지정된 탐색 속성을 추가합니다.탐색 속성은 읽기 전용 플래그에 관계없이 추가됩니다.</summary>
      <param name="property">추가할 탐색 속성입니다.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EntityType.BuiltInTypeKind">
      <summary>이 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityType" />의 기본 제공 형식 유형을 가져옵니다.</summary>
      <returns>이 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityType" />의 기본 제공 형식 유형을 나타내는 <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" /> 개체입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EntityType.Create(System.String,System.String,System.Data.Entity.Core.Metadata.Edm.DataSpace,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.EdmMember},System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.MetadataProperty})">
      <summary>EntityType 개체를 생성하기 위한 팩터리 메서드입니다.</summary>
      <param name="name">엔터티 형식의 이름입니다.</param>
      <param name="namespaceName">이 엔터티 형식의 네임스페이스입니다.</param>
      <param name="dataSpace">EntityType이 속한 dataspace입니다.</param>
      <param name="keyMemberNames">형식의 키 멤버 이름입니다.</param>
      <param name="members">엔터티 형식(기본 및 탐색 속성)의 멤버입니다.</param>
      <param name="metadataProperties">인스턴스와 연결할 메타데이터 속성입니다.</param>
      <exception cref="T:System.ArgumentException">이름 또는 네임스페이스 인수가 null인 경우에 throw됩니다.</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EntityType.DeclaredMembers">
      <summary>엔터티 형식에 대한 선언된 멤버의 컬렉션을 가져옵니다.</summary>
      <returns>엔터티 형식에 대한 선언된 멤버의 컬렉션입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EntityType.DeclaredNavigationProperties">
      <summary>엔터티 형식에 연결된 선언된 탐색 속성을 가져옵니다.</summary>
      <returns>엔터티 형식에 연결된 선언된 탐색 속성입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EntityType.DeclaredProperties">
      <summary>엔터티 형식에 대해 선언된 속성의 목록을 가져옵니다.</summary>
      <returns>엔터티 형식에 대한 선언된 속성입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EntityType.GetReferenceType">
      <summary>이 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityType" />을 참조하는 <see cref="T:System.Data.Entity.Core.Metadata.Edm.RefType" /> 개체를 반환합니다.</summary>
      <returns>이 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityType" />을 참조하는 <see cref="T:System.Data.Entity.Core.Metadata.Edm.RefType" /> 개체입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EntityType.NavigationProperties">
      <summary>이 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityType" />의 탐색 속성을 가져옵니다.</summary>
      <returns>이 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityType" />의 탐색 속성 목록이 포함된 <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1" /> 형식의 컬렉션입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EntityType.Properties">
      <summary>이 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityType" />의 속성 목록을 가져옵니다.</summary>
      <returns>이 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityType" />의 속성 목록이 포함된 <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1" /> 형식의 컬렉션입니다.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.EntityTypeBase">
      <summary>엔터티 형식을 나타냅니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EntityTypeBase.AddKeyMember(System.Data.Entity.Core.Metadata.Edm.EdmMember)">
      <summary>현재 엔터티에 대한 키의 목록에 지정된 속성을 추가합니다.</summary>
      <exception cref="T:System.ArgumentNullException">멤버 인수가 null인 경우</exception>
      <exception cref="T:System.InvalidOperationException">EntityType이 다른 EntityTypeBase의 기본 형식인 경우에 throw됩니다.이 경우 기본 형식에 KeyMembers를 추가해야 합니다.</exception>
      <exception cref="T:System.InvalidOperationException">EntityType 인스턴스가 ReadOnly 상태인 경우</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EntityTypeBase.KeyMembers">
      <summary>현재 엔터티 또는 관계 형식의 모든 키 멤버 목록을 가져옵니다.</summary>
      <returns>현재 엔터티 또는 관계 형식에 대한 키 멤버 목록을 나타내는 <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1" /> 개체입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EntityTypeBase.KeyProperties">
      <summary>이 엔터티 형식의 모든 키 속성 목록을 가져옵니다.</summary>
      <returns>이 엔터티 형식의 모든 키 속성 목록입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EntityTypeBase.RemoveMember(System.Data.Entity.Core.Metadata.Edm.EdmMember)">
      <summary>컬렉션에서 지정된 키 멤버를 제거합니다.</summary>
      <param name="member">제거할 키 멤버입니다.</param>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.EnumMember">
      <summary>열거형 멤버를 나타냅니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EnumMember.BuiltInTypeKind">
      <summary>이 형식의 종류를 가져옵니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EnumMember.Name">
      <summary>이 열거형 멤버의 이름을 가져옵니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EnumMember.ToString">
      <summary>이 형식에 대한 더 나은 문자열 표현을 제공하도록 System.Object.ToString을 재정의합니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EnumMember.Value">
      <summary>이 열거형 멤버의 값을 가져옵니다.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.EnumType">
      <summary>열거형 형식을 나타냅니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EnumType.BuiltInTypeKind">
      <summary>형식 유형을 반환합니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EnumType.IsFlags">
      <summary>열거형 형식이 플래그로 정의되었는지(비트 필드로 처리될 수 있는지)여부를 나타내는 값을 가져옵니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EnumType.Members">
      <summary>이 열거형 형식에 대한 열거형 멤버의 컬렉션을 가져옵니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EnumType.UnderlyingType">
      <summary>이 열거형 형식의 기본 형식을 가져옵니다.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.Facet">
      <summary>패싯 개체를 나타내는 클래스입니다. 이 개체는 읽기 전용으로 설정될 뿐 아니라 변경할 수 없으며 시스템의 일부는 이 동작에 종속됩니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.Facet.BuiltInTypeKind">
      <summary>이 <see cref="T:System.Data.Entity.Core.Metadata.Edm.Facet" />의 기본 제공 형식 유형을 가져옵니다.</summary>
      <returns>이 <see cref="T:System.Data.Entity.Core.Metadata.Edm.Facet" />의 기본 제공 형식 유형을 나타내는 <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" /> 개체입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.Facet.Description">
      <summary>이 <see cref="T:System.Data.Entity.Core.Metadata.Edm.Facet" />에 대한 설명을 가져옵니다.</summary>
      <returns>이 <see cref="T:System.Data.Entity.Core.Metadata.Edm.Facet" />에 대한 설명을 나타내는 <see cref="T:System.Data.Entity.Core.Metadata.Edm.FacetDescription" /> 개체입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.Facet.FacetType">
      <summary>이 <see cref="T:System.Data.Entity.Core.Metadata.Edm.Facet" />의 형식을 가져옵니다.</summary>
      <returns>이 <see cref="T:System.Data.Entity.Core.Metadata.Edm.Facet" />의 형식을 나타내는 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> 개체입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.Facet.IsUnbounded">
      <summary>패싯 값이 제한되었는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>패싯 값에 제한이 없으면 true이고, 그렇지 않으면 false입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.Facet.Name">
      <summary>이 <see cref="T:System.Data.Entity.Core.Metadata.Edm.Facet" />의 이름을 가져옵니다.</summary>
      <returns>이 <see cref="T:System.Data.Entity.Core.Metadata.Edm.Facet" />의 이름입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.Facet.ToString">
      <summary>이 <see cref="T:System.Data.Entity.Core.Metadata.Edm.Facet" />의 이름을 반환합니다.</summary>
      <returns>이 <see cref="T:System.Data.Entity.Core.Metadata.Edm.Facet" />의 이름입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.Facet.Value">
      <summary>이 <see cref="T:System.Data.Entity.Core.Metadata.Edm.Facet" />의 값을 가져옵니다.</summary>
      <returns>이 <see cref="T:System.Data.Entity.Core.Metadata.Edm.Facet" />의 값입니다.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.FacetDescription">
      <summary>FacetDescription 개체를 나타내는 클래스입니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.FacetDescription.DefaultValue">
      <summary>이 패싯 설명에 해당하는 패싯의 기본값을 가져옵니다.</summary>
      <returns>이 패싯 설명에 해당하는 패싯의 기본값입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.FacetDescription.FacetName">
      <summary>이 패싯의 이름을 가져옵니다.</summary>
      <returns>이 패싯의 이름입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.FacetDescription.FacetType">
      <summary>이 패싯의 형식을 가져옵니다.</summary>
      <returns>이 패싯의 형식을 나타내는 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> 개체입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.FacetDescription.IsConstant">
      <summary>이 패싯의 값이 상수인지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>이 패싯이 상수이면 true이고, 그렇지 않으면 false입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.FacetDescription.IsRequired">
      <summary>이 패싯이 필수 패싯인지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>이 패싯이 필수 패싯이면 true이고, 그렇지 않으면 false입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.FacetDescription.MaxValue">
      <summary>이 패싯의 최대값을 가져옵니다.</summary>
      <returns>이 패싯의 최대값입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.FacetDescription.MinValue">
      <summary>이 패싯의 최소값을 가져옵니다.</summary>
      <returns>이 패싯의 최소값입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.FacetDescription.ToString">
      <summary>이 패싯의 이름을 반환합니다.</summary>
      <returns>이 패싯의 이름입니다.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.FunctionParameter">
      <summary>함수 매개 변수를 나타내는 클래스입니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.FunctionParameter.BuiltInTypeKind">
      <summary>이 <see cref="T:System.Data.Entity.Core.Metadata.Edm.FunctionParameter" />의 기본 제공 형식 유형을 가져옵니다.</summary>
      <returns>이 <see cref="T:System.Data.Entity.Core.Metadata.Edm.FunctionParameter" />의 기본 제공 형식 유형을 나타내는 <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" /> 개체입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.FunctionParameter.Create(System.String,System.Data.Entity.Core.Metadata.Edm.EdmType,System.Data.Entity.Core.Metadata.Edm.ParameterMode)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.FunctionParameter" /> 개체를 생성하기 위한 팩터리 메서드입니다.</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmFunction" /> 형식의 새로운 읽기 전용 인스턴스입니다.</returns>
      <param name="name">매개 변수의 이름입니다.</param>
      <param name="edmType">매개 변수의 EdmType입니다.</param>
      <param name="parameterMode">매개 변수의 <see cref="T:System.Data.Entity.Core.Metadata.Edm.ParameterMode" />입니다.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.FunctionParameter.DeclaringFunction">
      <summary>이 매개 변수가 선언된 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmFunction" />을 가져옵니다.</summary>
      <returns>이 매개 변수가 선언된 함수를 나타내는 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmFunction" /> 개체입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.FunctionParameter.IsMaxLength">
      <summary>매개 변수에서 데이터베이스 공급자가 지원하는 최대 길이를 사용하는지 여부를 가져옵니다.</summary>
      <returns>매개 변수에서 데이터베이스 공급자가 지원하는 최대 길이를 사용하면 true이고, 그렇지 않으면 false입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.FunctionParameter.IsMaxLengthConstant">
      <summary>최대 길이 패싯이 데이터베이스 공급자에 대한 상수인지 여부를 가져옵니다.</summary>
      <returns>패싯이 상수이면 true이고, 그렇지 않으면 false입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.FunctionParameter.IsPrecisionConstant">
      <summary>전체 자릿수 패싯이 데이터베이스 공급자에 대한 상수인지 여부를 가져옵니다.</summary>
      <returns>패싯이 상수이면 true이고, 그렇지 않으면 false입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.FunctionParameter.IsScaleConstant">
      <summary>소수 자릿수 패싯이 데이터베이스 공급자에 대한 상수인지 여부를 가져옵니다.</summary>
      <returns>패싯이 상수이면 true이고, 그렇지 않으면 false입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.FunctionParameter.MaxLength">
      <summary>매개 변수의 최대 길이를 가져옵니다.</summary>
      <returns>매개 변수의 최대 길이입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.FunctionParameter.Mode">
      <summary>이 <see cref="T:System.Data.Entity.Core.Metadata.Edm.FunctionParameter" />의 모드를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.ParameterMode" /> 값 중 하나입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.FunctionParameter.Name">
      <summary>이 <see cref="T:System.Data.Entity.Core.Metadata.Edm.FunctionParameter" />의 이름을 가져옵니다.</summary>
      <returns>이 <see cref="T:System.Data.Entity.Core.Metadata.Edm.FunctionParameter" />의 이름입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.FunctionParameter.Precision">
      <summary>매개 변수의 전체 자릿수 값을 가져옵니다.</summary>
      <returns>매개 변수의 전체 자릿수 값입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.FunctionParameter.Scale">
      <summary>매개 변수의 소수 자릿수 값을 가져옵니다.</summary>
      <returns>매개 변수의 소수 자릿수 값입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.FunctionParameter.ToString">
      <summary>이 <see cref="T:System.Data.Entity.Core.Metadata.Edm.FunctionParameter" />의 이름을 반환합니다.</summary>
      <returns>이 <see cref="T:System.Data.Entity.Core.Metadata.Edm.FunctionParameter" />의 이름입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.FunctionParameter.TypeName">
      <summary>이 매개 변수의 형식 이름을 가져옵니다.</summary>
      <returns>이 매개 변수의 형식 이름입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.FunctionParameter.TypeUsage">
      <summary>매개 변수의 형식 및 해당 형식의 패싯이 모두 포함된 <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> 클래스의 인스턴스를 가져옵니다.</summary>
      <returns>매개 변수의 형식 및 해당 형식의 패싯이 모두 포함된 <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> 개체입니다.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.GlobalItem">
      <summary>모든 메타데이터의 기본 클래스를 나타냅니다.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.IEdmModelAdapter">
      <summary>
        <see cref="T:System.Data.Entity.Infrastructure.DbModel" />의 기본 저장소 및 개념적 모델을 가져오기 위한 인터페이스입니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.IEdmModelAdapter.ConceptualModel">
      <summary>개념적 모델을 가져옵니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.IEdmModelAdapter.StoreModel">
      <summary>저장소 모델을 가져옵니다.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.ItemCollection">
      <summary>항목 컬렉션을 나타내는 클래스입니다.컬렉션의 실제 유지 보수는 대부분 MetadataCollection에 의해 구현됩니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.ItemCollection.DataSpace">
      <summary>이 항목 컬렉션과 연결된 데이터 모델을 가져옵니다.</summary>
      <returns>이 항목 컬렉션과 연결된 데이터 모델입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ItemCollection.GetEntityContainer(System.String)">
      <summary>지정된 엔터티 컨테이너 이름을 사용하여 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" /> 개체를 반환합니다.</summary>
      <returns>엔터티 컨테이너가 없으면 이 메서드는 null을 반환하고, 그렇지 않으면 첫 번째 엔터티 컨테이너를 반환합니다.</returns>
      <param name="name">엔터티 컨테이너의 이름입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ItemCollection.GetEntityContainer(System.String,System.Boolean)">
      <summary>지정된 엔터티 컨테이너 이름을 사용하여 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" /> 개체를 반환합니다.</summary>
      <returns>엔터티 컨테이너가 없으면 이 메서드는 null을 반환하고, 그렇지 않으면 첫 번째 엔터티 컨테이너를 반환합니다.</returns>
      <param name="name">엔터티 컨테이너의 이름입니다.</param>
      <param name="ignoreCase">검색할 때 대/소문자를 구분하지 않는 경우 true이고, 그렇지 않으면 false입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ItemCollection.GetFunctions(System.Collections.Generic.Dictionary{System.String,System.Collections.ObjectModel.ReadOnlyCollection{System.Data.Entity.Core.Metadata.Edm.EdmFunction}},System.String,System.Boolean)">
      <summary>지정된 이름을 사용하여 이 항목 컬렉션에서 함수의 모든 오버로드를 반환합니다.</summary>
      <returns>지정된 이름을 가진 모든 함수가 포함된 ReadOnlyCollection 형식의 컬렉션입니다.</returns>
      <param name="functionCollection">함수 사전입니다.</param>
      <param name="functionName">함수의 전체 이름입니다.</param>
      <param name="ignoreCase">검색할 때 대/소문자를 구분하지 않는 경우 true이고, 그렇지 않으면 false입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ItemCollection.GetFunctions(System.String)">
      <summary>지정된 이름을 사용하여 이 항목 컬렉션에서 함수의 모든 오버로드를 반환합니다.</summary>
      <returns>지정된 이름을 가진 모든 함수가 포함된 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 형식의 컬렉션입니다.</returns>
      <param name="functionName">함수의 전체 이름입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ItemCollection.GetFunctions(System.String,System.Boolean)">
      <summary>지정된 이름을 사용하여 이 항목 컬렉션에서 함수의 모든 오버로드를 반환합니다.</summary>
      <returns>지정된 이름을 가진 모든 함수가 포함된 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 형식의 컬렉션입니다.</returns>
      <param name="functionName">함수의 전체 이름입니다.</param>
      <param name="ignoreCase">검색할 때 대/소문자를 구분하지 않는 경우 true이고, 그렇지 않으면 false입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ItemCollection.GetItem``1(System.String)">
      <summary>지정된 ID를 사용하여 강력한 형식의 <see cref="T:System.Data.Entity.Core.Metadata.Edm.GlobalItem" /> 개체를 반환합니다.</summary>
      <returns>ID로 지정된 항목입니다.</returns>
      <param name="identity">항목의 ID입니다.</param>
      <typeparam name="T">메서드에서 반환하는 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ItemCollection.GetItem``1(System.String,System.Boolean)">
      <summary>대/소문자를 구분하는 검색 또는 대/소문자를 구분하지 않는 검색 방식으로 지정된 ID를 사용하여 강력한 형식의 <see cref="T:System.Data.Entity.Core.Metadata.Edm.GlobalItem" /> 개체를 반환합니다.</summary>
      <returns>ID로 지정된 항목입니다.</returns>
      <param name="identity">항목의 ID입니다.</param>
      <param name="ignoreCase">검색할 때 대/소문자를 구분하지 않는 경우 true이고, 그렇지 않으면 false입니다.</param>
      <typeparam name="T">메서드에서 반환하는 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ItemCollection.GetItems``1">
      <summary>이 항목 컬렉션에서 지정된 형식의 모든 항목을 반환합니다.</summary>
      <returns>지정된 형식의 모든 항목이 포함된 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 형식의 컬렉션입니다.</returns>
      <typeparam name="T">메서드에서 반환하는 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ItemCollection.GetType(System.String,System.String)">
      <summary>이 항목 컬렉션에서 지정된 형식 이름과 네임스페이스 이름을 사용하여 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> 개체를 반환합니다.</summary>
      <returns>이 항목 컬렉션에서 지정된 형식 이름 및 네임스페이스 이름과 일치하는 형식을 나타내는 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> 개체입니다.일치하는 형식이 없으면 null이 반환됩니다.</returns>
      <param name="name">형식의 이름입니다.</param>
      <param name="namespaceName">형식의 네임스페이스입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ItemCollection.GetType(System.String,System.String,System.Boolean)">
      <summary>이 항목 컬렉션에서 지정된 형식 이름과 네임스페이스 이름을 사용하여 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> 개체를 반환합니다.</summary>
      <returns>이 항목 컬렉션에서 지정된 형식 이름 및 네임스페이스 이름과 일치하는 형식을 나타내는 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> 개체입니다.일치하는 형식이 없으면 null이 반환됩니다.</returns>
      <param name="name">형식의 이름입니다.</param>
      <param name="namespaceName">형식의 네임스페이스입니다.</param>
      <param name="ignoreCase">검색할 때 대/소문자를 구분하지 않는 경우 true이고, 그렇지 않으면 false입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ItemCollection.TryGetEntityContainer(System.String,System.Boolean,System.Data.Entity.Core.Metadata.Edm.EntityContainer@)">
      <summary>지정된 엔터티 컨테이너 이름을 사용하여 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" /> 개체를 반환합니다.엔터티 컨테이너가 없으면 이 출력 매개 변수에 null이 포함되고, 그렇지 않으면 첫 번째 엔터티 컨테이너가 포함됩니다.</summary>
      <returns>검색 조건과 일치하는 엔터티 컨테이너가 있으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="name">엔터티 컨테이너의 이름입니다.</param>
      <param name="ignoreCase">검색할 때 대/소문자를 구분하지 않는 경우 true이고, 그렇지 않으면 false입니다.</param>
      <param name="entityContainer">이 메서드의 반환 값에는 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" /> 개체가 포함됩니다.엔터티 컨테이너가 없으면 이 출력 매개 변수에 null이 포함되고, 그렇지 않으면 첫 번째 엔터티 컨테이너가 포함됩니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ItemCollection.TryGetEntityContainer(System.String,System.Data.Entity.Core.Metadata.Edm.EntityContainer@)">
      <summary>지정된 엔터티 컨테이너 이름을 사용하여 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" /> 개체를 반환합니다.엔터티 컨테이너가 없으면 출력 매개 변수에 null이 포함되고, 그렇지 않으면 첫 번째 엔터티 컨테이너가 포함됩니다.</summary>
      <returns>검색 조건과 일치하는 엔터티 컨테이너가 있으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="name">엔터티 컨테이너의 이름입니다.</param>
      <param name="entityContainer">이 메서드의 반환 값에는 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" /> 개체가 포함됩니다.엔터티 컨테이너가 없으면 이 출력 매개 변수에 null이 포함되고, 그렇지 않으면 첫 번째 엔터티 컨테이너가 포함됩니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ItemCollection.TryGetItem``1(System.String,System.Boolean,``0@)">
      <summary>이 항목 컬렉션에서 지정된 ID를 사용하여 강력한 형식의 <see cref="T:System.Data.Entity.Core.Metadata.Edm.GlobalItem" /> 개체를 반환합니다.</summary>
      <returns>검색 조건과 일치하는 항목이 있으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="identity">항목의 ID입니다.</param>
      <param name="ignoreCase">검색할 때 대/소문자를 구분하지 않는 경우 true이고, 그렇지 않으면 false입니다.</param>
      <param name="item">이 메서드가 반환될 때 출력 매개 변수에 <see cref="T:System.Data.Entity.Core.Metadata.Edm.GlobalItem" /> 개체가 포함됩니다.항목 컬렉션에 지정된 ID를 가진 전역 항목이 없으면 출력 매개 변수에 null이 포함됩니다.</param>
      <typeparam name="T">메서드에서 반환하는 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ItemCollection.TryGetItem``1(System.String,``0@)">
      <summary>이 항목 컬렉션에서 지정된 ID를 사용하여 강력한 형식의 <see cref="T:System.Data.Entity.Core.Metadata.Edm.GlobalItem" /> 개체를 반환합니다.</summary>
      <returns>검색 조건과 일치하는 항목이 있으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="identity">항목의 ID입니다.</param>
      <param name="item">이 메서드가 반환될 때 출력 매개 변수에 <see cref="T:System.Data.Entity.Core.Metadata.Edm.GlobalItem" /> 개체가 포함됩니다.항목 컬렉션에 지정된 ID를 가진 전역 항목이 없으면 출력 매개 변수에 null이 포함됩니다.</param>
      <typeparam name="T">메서드에서 반환하는 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ItemCollection.TryGetType(System.String,System.String,System.Boolean,System.Data.Entity.Core.Metadata.Edm.EdmType@)">
      <summary>이 항목 컬렉션에서 지정된 형식 이름과 네임스페이스 이름을 사용하여 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> 개체를 반환합니다.</summary>
      <returns>검색 조건과 일치하는 형식이 있으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="name">형식의 이름입니다.</param>
      <param name="namespaceName">형식의 네임스페이스입니다.</param>
      <param name="ignoreCase">검색할 때 대/소문자를 구분하지 않는 경우 true이고, 그렇지 않으면 false입니다.</param>
      <param name="type">이 메서드가 반환될 때 이 출력 매개 변수에 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> 개체가 포함됩니다.이 항목 컬렉션에 지정된 이름과 네임스페이스 이름을 가진 형식이 없으면 이 출력 매개 변수에 null이 포함됩니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ItemCollection.TryGetType(System.String,System.String,System.Data.Entity.Core.Metadata.Edm.EdmType@)">
      <summary>이 항목 컬렉션에서 지정된 형식 이름과 네임스페이스 이름을 사용하여 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> 개체를 반환합니다.</summary>
      <returns>검색 조건과 일치하는 형식이 있으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="name">형식의 이름입니다.</param>
      <param name="namespaceName">형식의 네임스페이스입니다.</param>
      <param name="type">이 메서드가 반환될 때 이 출력 매개 변수에 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> 개체가 포함됩니다.이 항목 컬렉션에 지정된 이름과 네임스페이스 이름을 가진 형식이 없으면 이 출력 매개 변수에 null이 포함됩니다.</param>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.MetadataItem">
      <summary>모든 메타데이터의 기본 클래스를 나타냅니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataItem.AddAnnotation(System.String,System.Object)">
      <summary>지정된 이름과 값을 포함하는 주석을 추가합니다.</summary>
      <param name="name">주석 속성의 이름입니다.</param>
      <param name="value">주석 속성의 값입니다.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.MetadataItem.BuiltInTypeKind">
      <summary>이 형식의 기본 제공 형식 유형을 가져옵니다.</summary>
      <returns>이 형식의 기본 제공 형식 유형을 나타내는 <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" /> 개체입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.MetadataItem.Documentation">
      <summary>이 형식과 관련된 설명서를 가져오거나 설정합니다.</summary>
      <returns>이 형식에 대한 설명서를 나타내는 <see cref="T:System.Data.Entity.Core.Metadata.Edm.Documentation" /> 개체입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataItem.GetBuiltInType(System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" /> 값 중 하나와 일치하는 개념적 모델 기본 제공 형식을 반환합니다.</summary>
      <returns>EDM의 기본 제공 형식을 나타내는 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> 개체입니다.</returns>
      <param name="builtInTypeKind">
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" /> 값 중 하나입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataItem.GetGeneralFacetDescriptions">
      <summary>지정된 형식에 대한 일반적인 패싯 설명 목록을 반환합니다.</summary>
      <returns>지정된 형식에 대한 일반적인 패싯 설명 목록을 나타내는 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 개체입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.MetadataItem.MetadataProperties">
      <summary>현재 형식의 속성 목록을 가져옵니다.</summary>
      <returns>현재 형식의 속성 목록이 포함된 <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1" /> 형식의 컬렉션입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataItem.RemoveAnnotation(System.String)">
      <summary>지정된 이름을 포함하는 주석을 제거합니다.</summary>
      <param name="name">주석 속성의 이름입니다.</param>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.MetadataProperty">
      <summary>항목의 메타데이터 특성을 나타내는 클래스입니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.MetadataProperty.BuiltInTypeKind">
      <summary>이 <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataProperty" />의 기본 제공 형식 유형을 가져옵니다.</summary>
      <returns>이 <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataProperty" />의 기본 제공 형식 유형을 나타내는 <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" /> 개체입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataProperty.Create(System.String,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Object)">
      <summary>MetadataProperty 개체를 생성하기 위한 팩터리 메서드입니다.</summary>
      <param name="name">메타데이터 속성의 이름입니다.</param>
      <param name="typeUsage">메타데이터 속성의 형식 사용법입니다.</param>
      <param name="value">메타데이터 속성의 값입니다.</param>
      <exception cref="T:System.NullReferenceException">
        <paramref name="typeUsage" />가 null인 경우에 발생합니다.</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.MetadataProperty.Name">
      <summary>이 <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataProperty" />의 이름을 가져옵니다.</summary>
      <returns>이 <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataProperty" />의 이름입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.MetadataProperty.PropertyKind">
      <summary>이 <see cref="T:System.Data.Entity.Core.Metadata.Edm.PropertyKind" />의 값을 가져옵니다.</summary>
      <returns>이 <see cref="T:System.Data.Entity.Core.Metadata.Edm.PropertyKind" />의 값입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.MetadataProperty.TypeUsage">
      <summary>이 <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataProperty" />의 형식 및 해당 형식의 패싯을 모두 포함하는 <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> 클래스의 인스턴스를 가져옵니다.</summary>
      <returns>이 <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataProperty" />의 형식 및 해당 형식의 패싯을 모두 포함하는 <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> 개체입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.MetadataProperty.Value">
      <summary>이 <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataProperty" />의 값을 가져옵니다.</summary>
      <returns>이 <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataProperty" />의 값입니다.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace">
      <summary>런타임 메타데이터 작업 영역</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.#ctor(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
      <summary>지정된 경로 및 어셈블리를 사용하여 <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="paths">작업 영역 메타데이터에 대한 경로입니다.</param>
      <param name="assembliesToConsider">작업 영역을 생성하는 데 사용되는 어셈블리의 이름입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.#ctor(System.Func{System.Data.Entity.Core.Metadata.Edm.EdmItemCollection},System.Func{System.Data.Entity.Core.Metadata.Edm.StoreItemCollection},System.Func{System.Data.Entity.Core.Mapping.StorageMappingItemCollection})">
      <summary>기존 EDMX 매핑에서 만들어진 모든 항목 컬렉션(<see cref="T:System.Data.Entity.Core.Metadata.Edm.ItemCollection" />)에 대한 로더가 있는 <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace" />를 생성합니다.기본 O 공간 및 O/C 매핑 컬렉션이 사용됩니다.항목 컬렉션 대리자는 지정된 컬렉션이 처음으로 사용될 때 지연 실행됩니다.컬렉션이 사용되지 않는 경우 null을 반환하는 대리자를 전달할 수는 있지만, 이 방법은 드물게 사용되며 그러한 경우 EF에서 해당 컬렉션을 사용하려고 하면 예외가 발생합니다.</summary>
      <param name="cSpaceLoader">C 공간(CSDL) 항목 컬렉션을 반환할 대리자입니다.</param>
      <param name="sSpaceLoader">S 공간(SSDL) 항목 컬렉션을 반환할 대리자입니다.</param>
      <param name="csMappingLoader">C/S 매핑(MSL) 항목 컬렉션을 반환할 대리자입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.#ctor(System.Func{System.Data.Entity.Core.Metadata.Edm.EdmItemCollection},System.Func{System.Data.Entity.Core.Metadata.Edm.StoreItemCollection},System.Func{System.Data.Entity.Core.Mapping.StorageMappingItemCollection},System.Func{System.Data.Entity.Core.Metadata.Edm.ObjectItemCollection})">
      <summary>지정된 O 공간 및 C 공간 로더에 따라 자동으로 만들어지는 O/C 매핑을 제외하고 EF에 필요한 모든 항목 컬렉션(<see cref="T:System.Data.Entity.Core.Metadata.Edm.ItemCollection" />)에 대한 로더가 있는 <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace" />를 생성합니다.항목 컬렉션 대리자는 지정된 컬렉션이 처음으로 사용될 때 지연 실행됩니다.컬렉션이 사용되지 않는 경우 null을 반환하는 대리자를 전달할 수는 있지만, 이 방법은 드물게 사용되며 그러한 경우 EF에서 해당 컬렉션을 사용하려고 하면 예외가 발생합니다.</summary>
      <param name="cSpaceLoader">C 공간(CSDL) 항목 컬렉션을 반환할 대리자입니다.</param>
      <param name="sSpaceLoader">S 공간(SSDL) 항목 컬렉션을 반환할 대리자입니다.</param>
      <param name="csMappingLoader">C/S 매핑(MSL) 항목 컬렉션을 반환할 대리자입니다.</param>
      <param name="oSpaceLoader">O 공간 항목 컬렉션을 반환할 대리자입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.ClearCache">
      <summary>메타데이터 캐시 항목을 모두 지웁니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.CreateEntitySqlParser">
      <summary>
        <see cref="F:System.Data.Entity.Core.Metadata.Edm.DataSpace.CSpace" /> 데이터 공간을 사용하도록 구성된 <see cref="T:System.Data.Entity.Core.Common.EntitySql.EntitySqlParser" />를 만듭니다.</summary>
      <returns>만들어진 파서 개체입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.CreateQueryCommandTree(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>지정된 쿼리 식을 기반으로 이 메타데이터 작업 영역에 바인딩되는 새 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbQueryCommandTree" />를 만듭니다.</summary>
      <returns>지정된 식을 <see cref="P:System.Data.Entity.Core.Common.CommandTrees.DbQueryCommandTree.Query" /> 속성으로 사용하는 새 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbQueryCommandTree" />입니다.</returns>
      <param name="query">쿼리를 정의하는 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="query" />가 null인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="query" />에 이 메타데이터 작업 영역에서 확인할 수 없는 메타데이터를 포함하는 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="query" />에 확인할 수 없는 변수 참조가 포함되어 구조적으로 유효하지 않은 경우</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.GetEdmSpaceType(System.Data.Entity.Core.Metadata.Edm.EnumType)">
      <summary>objectSpaceType 매개 변수에서 제공하는 형식과 일치하는 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" />을 나타내는 <see cref="T:System.Data.Entity.Core.Metadata.Edm.StructuralType" /> 개체를 반환합니다.</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" />을 나타내는 <see cref="T:System.Data.Entity.Core.Metadata.Edm.StructuralType" /> 개체입니다.일치하는 형식이 없으면 null이 반환됩니다.</returns>
      <param name="objectSpaceType">개체 공간의 형식을 제공하는 <see cref="T:System.Data.Metadata.Edm.EnumlType" />입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.GetEdmSpaceType(System.Data.Entity.Core.Metadata.Edm.StructuralType)">
      <summary>objectSpaceType 매개 변수에서 제공하는 형식과 일치하는 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" />을 나타내는 <see cref="T:System.Data.Entity.Core.Metadata.Edm.StructuralType" /> 개체를 반환합니다.</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" />을 나타내는 <see cref="T:System.Data.Entity.Core.Metadata.Edm.StructuralType" /> 개체입니다.일치하는 형식이 없으면 null이 반환됩니다.</returns>
      <param name="objectSpaceType">개체 공간의 형식을 제공하는 <see cref="T:System.Data.Entity.Core.Metadata.Edm.StructuralType" />입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.GetEntityContainer(System.String,System.Boolean,System.Data.Entity.Core.Metadata.Edm.DataSpace)">
      <summary>지정된 엔터티 컨테이너 이름과 데이터 모델을 사용하여 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" /> 개체를 반환합니다.</summary>
      <returns>엔터티 컨테이너가 없으면 이 메서드는 null을 반환하고, 그렇지 않으면 첫 번째 엔터티 컨테이너를 반환합니다.</returns>
      <param name="name">엔터티 컨테이너의 이름입니다.</param>
      <param name="ignoreCase">검색할 때 대/소문자를 구분하지 않는 경우 true이고, 그렇지 않으면 false입니다.</param>
      <param name="dataSpace">엔터티 컨테이너를 검색할 개념적 모델입니다.</param>
      <exception cref="T:System.ArgumentException">공간이 유효한 공간이 아닌 경우 throw됩니다.유효한 공간은 C, O, CS 또는 OCSpace입니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.GetEntityContainer(System.String,System.Data.Entity.Core.Metadata.Edm.DataSpace)">
      <summary>지정된 엔터티 컨테이너 이름과 데이터 모델을 사용하여 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" /> 개체를 반환합니다.</summary>
      <returns>엔터티 컨테이너가 없으면 이 메서드는 null을 반환하고, 그렇지 않으면 첫 번째 엔터티 컨테이너를 반환합니다.</returns>
      <param name="name">엔터티 컨테이너의 이름입니다.</param>
      <param name="dataSpace">엔터티 컨테이너를 검색할 개념적 모델입니다.</param>
      <exception cref="T:System.ArgumentException">공간이 유효한 공간이 아닌 경우 throw됩니다.유효한 공간은 C, O, CS 또는 OCSpace입니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.GetFunctions(System.String,System.String,System.Data.Entity.Core.Metadata.Edm.DataSpace)">
      <summary>지정된 이름, 네임스페이스 이름 및 데이터 모델을 사용하여 이 항목 컬렉션에서 함수의 모든 오버로드를 반환합니다.</summary>
      <returns>지정된 네임스페이스와 데이터 모델에서 지정된 이름과 일치하는 모든 함수가 포함된 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 형식의 컬렉션입니다.</returns>
      <param name="name">함수 이름입니다.</param>
      <param name="namespaceName">함수의 네임스페이스입니다.</param>
      <param name="dataSpace">함수를 검색할 개념적 모델입니다.</param>
      <exception cref="T:System.ArgumentException">공간이 유효한 공간이 아닌 경우 throw됩니다.유효한 공간은 C, O, CS 또는 OCSpace입니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.GetFunctions(System.String,System.String,System.Data.Entity.Core.Metadata.Edm.DataSpace,System.Boolean)">
      <summary>지정된 이름, 네임스페이스 이름 및 데이터 모델을 사용하여 이 항목 컬렉션에서 함수의 모든 오버로드를 반환합니다.</summary>
      <returns>지정된 네임스페이스와 데이터 모델에서 지정된 이름과 일치하는 모든 함수가 포함된 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 형식의 컬렉션입니다.</returns>
      <param name="name">함수 이름입니다.</param>
      <param name="namespaceName">함수의 네임스페이스입니다.</param>
      <param name="dataSpace">함수를 검색할 개념적 모델입니다.</param>
      <param name="ignoreCase">검색할 때 대/소문자를 구분하지 않는 경우 true이고, 그렇지 않으면 false입니다.</param>
      <exception cref="T:System.ArgumentException">공간이 유효한 공간이 아닌 경우 throw됩니다.유효한 공간은 C, O, CS 또는 OCSpace입니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.GetItem``1(System.String,System.Boolean,System.Data.Entity.Core.Metadata.Edm.DataSpace)">
      <summary>지정된 ID와 데이터 모델을 사용하여 항목을 반환합니다.</summary>
      <returns>지정된 데이터 모델에서 지정된 ID와 일치하는 항목입니다.</returns>
      <param name="identity">항목의 ID입니다.</param>
      <param name="ignoreCase">검색할 때 대/소문자를 구분하지 않는 경우 true이고, 그렇지 않으면 false입니다.</param>
      <param name="dataSpace">항목을 검색할 개념적 모델입니다.</param>
      <typeparam name="T">메서드에서 반환하는 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentException">공간이 유효한 공간이 아닌 경우 throw됩니다.유효한 공간은 C, O, CS 또는 OCSpace입니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.GetItem``1(System.String,System.Data.Entity.Core.Metadata.Edm.DataSpace)">
      <summary>지정된 ID와 데이터 모델을 사용하여 항목을 반환합니다.</summary>
      <returns>지정된 데이터 모델에서 지정된 ID와 일치하는 항목입니다.</returns>
      <param name="identity">항목의 ID입니다.</param>
      <param name="dataSpace">항목을 검색할 개념적 모델입니다.</param>
      <typeparam name="T">메서드에서 반환하는 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentException">공간이 유효한 공간이 아닌 경우 throw됩니다.유효한 공간은 C, O, CS 또는 OCSpace입니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.GetItemCollection(System.Data.Entity.Core.Metadata.Edm.DataSpace)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace" /> 항목을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace" /> 항목입니다.</returns>
      <param name="dataSpace">항목을 검색할 <see cref="T:System.Data.Entity.Core.Metadata.Edm.DataSpace" />입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.GetItems(System.Data.Entity.Core.Metadata.Edm.DataSpace)">
      <summary>지정된 데이터 모델의 모든 항목을 가져옵니다.</summary>
      <returns>지정된 데이터 모델의 모든 항목이 포함된 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 형식의 컬렉션입니다.</returns>
      <param name="dataSpace">항목의 목록이 필요한 개념적 모델입니다.</param>
      <exception cref="T:System.ArgumentException">공간이 유효한 공간이 아닌 경우 throw됩니다.유효한 공간은 C, O, CS 또는 OCSpace입니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.GetItems``1(System.Data.Entity.Core.Metadata.Edm.DataSpace)">
      <summary>지정된 데이터 모델의 모든 항목을 가져옵니다.</summary>
      <returns>지정된 데이터 모델의 모든 항목이 포함된 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 형식의 컬렉션입니다.</returns>
      <param name="dataSpace">항목의 목록이 필요한 개념적 모델입니다.</param>
      <typeparam name="T">메서드에서 반환하는 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentException">공간이 유효한 공간이 아닌 경우 throw됩니다.유효한 공간은 C, O, CS 또는 OCSpace입니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.GetObjectSpaceType(System.Data.Entity.Core.Metadata.Edm.EnumType)">
      <summary>edmSpaceType 매개 변수에서 제공하는 형식과 일치하는 개체 공간 형식을 나타내는 <see cref="T:System.Data.Entity.Core.Metadata.Edm.StructuralType" /> 개체를 반환합니다.</summary>
      <returns>개체 공간 형식을 나타내는 <see cref="T:System.Data.Entity.Core.Metadata.Edm.StructuralType" /> 개체입니다.일치하는 형식이 없으면 null이 반환됩니다.</returns>
      <param name="edmSpaceType">
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" />을 나타내는 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EnumType" /> 개체입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.GetObjectSpaceType(System.Data.Entity.Core.Metadata.Edm.StructuralType)">
      <summary>edmSpaceType 매개 변수에서 제공하는 형식과 일치하는 개체 공간 형식을 나타내는 <see cref="T:System.Data.Entity.Core.Metadata.Edm.StructuralType" /> 개체를 반환합니다.</summary>
      <returns>개체 공간 형식을 나타내는 <see cref="T:System.Data.Entity.Core.Metadata.Edm.StructuralType" /> 개체입니다.일치하는 형식이 없으면 null이 반환됩니다.</returns>
      <param name="edmSpaceType">
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" />을 나타내는 <see cref="T:System.Data.Entity.Core.Metadata.Edm.StructuralType" /> 개체입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.GetPrimitiveTypes(System.Data.Entity.Core.Metadata.Edm.DataSpace)">
      <summary>지정된 데이터 모델의 기본 형식 목록을 반환합니다.</summary>
      <returns>지정된 데이터 모델의 모든 기본 형식이 포함된 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 형식의 컬렉션입니다.</returns>
      <param name="dataSpace">기본 형식 목록이 필요한 데이터 모델입니다.</param>
      <exception cref="T:System.ArgumentException">공간이 유효한 공간이 아닌 경우 throw됩니다.유효한 공간은 C, O, CS 또는 OCSpace입니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.GetRelevantMembersForUpdate(System.Data.Entity.Core.Metadata.Edm.EntitySetBase,System.Data.Entity.Core.Metadata.Edm.EntityTypeBase,System.Boolean)">
      <summary>엔터티를 수정할 때 필요한 원래 값에 대한 지정된 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" /> / <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityType" />의 멤버를 반환합니다.</summary>
      <returns>원래 값이 필요한 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmMember" />입니다.</returns>
      <param name="entitySet">C 공간에 속하는 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" />입니다.</param>
      <param name="entityType">지정된 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" />에 참여하는 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityType" />입니다.</param>
      <param name="partialUpdateSupported">엔터티가 부분적으로 업데이트될 수 있으면 true이고, 그렇지 않으면 false입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.GetRequiredOriginalValueMembers(System.Data.Entity.Core.Metadata.Edm.EntitySetBase,System.Data.Entity.Core.Metadata.Edm.EntityTypeBase)">
      <summary>엔터티 집합 및 엔터티 형식에서 원래 값 멤버를 가져옵니다.</summary>
      <returns>엔터티 집합 및 엔터티 형식의 원래 값 멤버입니다.</returns>
      <param name="entitySet">원래 값을 검색할 엔터티 집합입니다.</param>
      <param name="entityType">원래 값을 검색할 엔터티 형식입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.GetType(System.String,System.String,System.Boolean,System.Data.Entity.Core.Metadata.Edm.DataSpace)">
      <summary>지정된 형식 이름, 네임스페이스 이름 및 데이터 모델을 사용하여 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> 개체를 반환합니다.</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> 개체입니다.</returns>
      <param name="name">형식의 이름입니다.</param>
      <param name="namespaceName">형식의 네임스페이스입니다.</param>
      <param name="ignoreCase">검색할 때 대/소문자를 구분하지 않는 경우 true이고, 그렇지 않으면 false입니다.</param>
      <param name="dataSpace">형식을 검색할 개념적 모델입니다.</param>
      <exception cref="T:System.ArgumentException">공간이 유효한 공간이 아닌 경우 throw됩니다.유효한 공간은 C, O, CS 또는 OCSpace입니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.GetType(System.String,System.String,System.Data.Entity.Core.Metadata.Edm.DataSpace)">
      <summary>지정된 형식 이름, 네임스페이스 이름 및 데이터 모델을 사용하여 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> 개체를 반환합니다.</summary>
      <returns>지정된 데이터 모델에서 지정된 형식 이름 및 네임스페이스 이름과 일치하는 형식을 나타내는 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> 개체입니다.일치하는 형식이 없으면 null이 반환됩니다.</returns>
      <param name="name">형식의 이름입니다.</param>
      <param name="namespaceName">형식의 네임스페이스입니다.</param>
      <param name="dataSpace">형식을 검색할 개념적 모델입니다.</param>
      <exception cref="T:System.ArgumentException">공간이 유효한 공간이 아닌 경우 throw됩니다.유효한 공간은 C, O, CS 또는 OCSpace입니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.LoadFromAssembly(System.Reflection.Assembly)">
      <summary>지정된 어셈블리에서 메타데이터를 로드합니다.</summary>
      <param name="assembly">메타데이터를 로드할 어셈블리입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.LoadFromAssembly(System.Reflection.Assembly,System.Action{System.String})">
      <summary>지정된 어셈블리에서 메타데이터를 로드합니다.</summary>
      <param name="assembly">메타데이터를 로드할 어셈블리입니다.</param>
      <param name="logLoadMessage">로드 메시지를 로깅하는 대리자입니다.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.MaximumEdmVersionSupported">
      <summary>런타임에서 지원할 최대 EDM 버전입니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.RegisterItemCollection(System.Data.Entity.Core.Metadata.Edm.ItemCollection)">
      <summary>연결된 각 데이터 모델에 항목 컬렉션을 등록합니다.</summary>
      <param name="collection">채워야 할 출력 매개 변수 컬렉션입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.TryGetEdmSpaceType(System.Data.Entity.Core.Metadata.Edm.EnumType,System.Data.Entity.Core.Metadata.Edm.EnumType@)">
      <summary>objectSpaceType 매개 변수에서 제공하는 형식과 일치하는 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" />을 나타내는 edmSpaceType 출력 매개 변수를 통해 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EnumType" /> 개체를 반환합니다.</summary>
      <returns>성공하면 true이고, 실패하면 false입니다.</returns>
      <param name="objectSpaceType">개체 공간 형식을 나타내는 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EnumType" /> 개체입니다.</param>
      <param name="edmSpaceType">이 메서드가 반환될 때 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" />을 나타내는 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EnumType" /> 개체가 포함됩니다.이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.TryGetEdmSpaceType(System.Data.Entity.Core.Metadata.Edm.StructuralType,System.Data.Entity.Core.Metadata.Edm.StructuralType@)">
      <summary>objectSpaceType 매개 변수에서 제공하는 형식과 일치하는 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" />을 나타내는 edmSpaceType 출력 매개 변수를 통해 <see cref="T:System.Data.Entity.Core.Metadata.Edm.StructuralType" /> 개체를 반환합니다.</summary>
      <returns>검색 조건과 일치하는 형식이 있으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="objectSpaceType">개체 공간 형식을 나타내는 <see cref="T:System.Data.Entity.Core.Metadata.Edm.StructuralType" /> 개체입니다.</param>
      <param name="edmSpaceType">이 메서드가 반환될 때 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" />을 나타내는 <see cref="T:System.Data.Entity.Core.Metadata.Edm.StructuralType" /> 개체가 포함됩니다.이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.TryGetEntityContainer(System.String,System.Boolean,System.Data.Entity.Core.Metadata.Edm.DataSpace,System.Data.Entity.Core.Metadata.Edm.EntityContainer@)">
      <summary>지정된 엔터티 컨테이너 이름과 데이터 모델을 사용하여 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" /> 개체를 반환합니다.</summary>
      <returns>검색 조건과 일치하는 엔터티 컨테이너가 있으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="name">엔터티 컨테이너의 이름입니다.</param>
      <param name="ignoreCase">검색할 때 대/소문자를 구분하지 않는 경우 true이고, 그렇지 않으면 false입니다.</param>
      <param name="dataSpace">엔터티 컨테이너를 검색할 개념적 모델입니다.</param>
      <param name="entityContainer">이 메서드의 반환 값에는 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" /> 개체가 포함됩니다.엔터티 컨테이너가 없으면 이 출력 매개 변수에 null이 포함되고, 그렇지 않으면 첫 번째 엔터티 컨테이너가 반환됩니다.이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.TryGetEntityContainer(System.String,System.Data.Entity.Core.Metadata.Edm.DataSpace,System.Data.Entity.Core.Metadata.Edm.EntityContainer@)">
      <summary>지정된 엔터티 컨테이너 이름과 데이터 모델을 사용하여 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" /> 개체를 반환합니다.</summary>
      <returns>검색 조건과 일치하는 엔터티 컨테이너가 있으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="name">엔터티 컨테이너의 이름입니다.</param>
      <param name="dataSpace">엔터티 컨테이너를 검색할 개념적 모델입니다.</param>
      <param name="entityContainer">이 메서드의 반환 값에는 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" /> 개체가 포함됩니다.엔터티 컨테이너가 없으면 이 출력 매개 변수에 null이 포함되고, 그렇지 않으면 첫 번째 엔터티 컨테이너가 반환됩니다.이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.TryGetItem``1(System.String,System.Boolean,System.Data.Entity.Core.Metadata.Edm.DataSpace,``0@)">
      <summary>지정된 ID와 데이터 모델을 사용하여 항목을 반환합니다.</summary>
      <returns>검색 조건과 일치하는 항목이 있으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="identity">항목을 검색할 개념적 모델입니다.</param>
      <param name="ignoreCase">검색할 때 대/소문자를 구분하지 않는 경우 true이고, 그렇지 않으면 false입니다.</param>
      <param name="dataSpace">항목을 검색할 개념적 모델입니다.</param>
      <param name="item">이 메서드의 반환 값에는 <see cref="T:System.Data.Metadata.Edm.GlobalIem" /> 개체가 포함됩니다.이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
      <typeparam name="T">메서드에서 반환하는 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.TryGetItem``1(System.String,System.Data.Entity.Core.Metadata.Edm.DataSpace,``0@)">
      <summary>지정된 ID와 데이터 모델을 사용하여 항목을 반환합니다.</summary>
      <returns>검색 조건과 일치하는 항목이 있으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="identity">항목을 검색할 개념적 모델입니다.</param>
      <param name="space">항목을 검색할 개념적 모델입니다.</param>
      <param name="item">이 메서드의 반환 값에는 <see cref="T:System.Data.Metadata.Edm.GlobalIem" /> 개체가 포함됩니다.이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
      <typeparam name="T">메서드에서 반환하는 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.TryGetItemCollection(System.Data.Entity.Core.Metadata.Edm.DataSpace,System.Data.Entity.Core.Metadata.Edm.ItemCollection@)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace" /> 검색을 테스트합니다.</summary>
      <returns>검색이 성공했으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="dataSpace">
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace" /> 검색을 시도할 <see cref="T:System.Data.Entity.Core.Metadata.Edm.DataSpace" />입니다.</param>
      <param name="collection">이 메서드는 반환될 때 항목 컬렉션을 포함합니다.이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.TryGetObjectSpaceType(System.Data.Entity.Core.Metadata.Edm.EnumType,System.Data.Entity.Core.Metadata.Edm.EnumType@)">
      <summary>edmSpaceType 매개 변수에서 제공하는 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" />과 일치하는 형식을 나타내는 objectSpaceType 출력 매개 변수를 통해 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EnumType" /> 개체를 반환합니다.</summary>
      <returns>검색 조건과 일치하는 형식이 있으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="edmSpaceType">
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" />을 나타내는 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EnumType" /> 개체입니다.</param>
      <param name="objectSpaceType">이 메서드가 반환될 때 개체 공간 형식을 나타내는 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EnumType" /> 개체가 포함됩니다.이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.TryGetObjectSpaceType(System.Data.Entity.Core.Metadata.Edm.StructuralType,System.Data.Entity.Core.Metadata.Edm.StructuralType@)">
      <summary>edmSpaceType 매개 변수에서 제공하는 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" />과 일치하는 형식을 나타내는 objectSpaceType 출력 매개 변수를 통해 <see cref="T:System.Data.Entity.Core.Metadata.Edm.StructuralType" /> 개체를 반환합니다.</summary>
      <returns>검색 조건과 일치하는 형식이 있으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="edmSpaceType">
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" />을 나타내는 <see cref="T:System.Data.Entity.Core.Metadata.Edm.StructuralType" /> 개체입니다.</param>
      <param name="objectSpaceType">이 메서드가 반환될 때 개체 공간 형식을 나타내는 <see cref="T:System.Data.Entity.Core.Metadata.Edm.StructuralType" /> 개체가 포함됩니다.이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.TryGetType(System.String,System.String,System.Boolean,System.Data.Entity.Core.Metadata.Edm.DataSpace,System.Data.Entity.Core.Metadata.Edm.EdmType@)">
      <summary>지정된 형식 이름, 네임스페이스 이름 및 데이터 모델을 사용하여 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> 개체를 반환합니다.</summary>
      <returns>검색 조건과 일치하는 형식이 있으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="name">형식의 이름입니다.</param>
      <param name="namespaceName">형식의 네임스페이스입니다.</param>
      <param name="ignoreCase">검색할 때 대/소문자를 구분하지 않는 경우 true이고, 그렇지 않으면 false입니다.</param>
      <param name="dataSpace">형식을 검색할 개념적 모델입니다.</param>
      <param name="type">이 메서드의 반환 값에는 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> 개체가 포함됩니다.이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.TryGetType(System.String,System.String,System.Data.Entity.Core.Metadata.Edm.DataSpace,System.Data.Entity.Core.Metadata.Edm.EdmType@)">
      <summary>지정된 형식 이름, 네임스페이스 이름 및 데이터 모델을 사용하여 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> 개체를 반환합니다.</summary>
      <returns>검색 조건과 일치하는 형식이 있으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="name">형식의 이름입니다.</param>
      <param name="namespaceName">형식의 네임스페이스입니다.</param>
      <param name="dataSpace">형식을 검색할 개념적 모델입니다.</param>
      <param name="type">이 메서드의 반환 값에는 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> 개체가 포함됩니다.이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.NavigationProperty">
      <summary>Edm 탐색 속성 클래스를 나타냅니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.NavigationProperty.BuiltInTypeKind">
      <summary>이 <see cref="T:System.Data.Entity.Core.Metadata.Edm.NavigationProperty" />의 기본 제공 형식 유형을 가져옵니다.</summary>
      <returns>이 <see cref="T:System.Data.Entity.Core.Metadata.Edm.NavigationProperty" />의 기본 제공 형식 유형을 나타내는 <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" /> 개체입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.NavigationProperty.Create(System.String,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.RelationshipType,System.Data.Entity.Core.Metadata.Edm.RelationshipEndMember,System.Data.Entity.Core.Metadata.Edm.RelationshipEndMember,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.MetadataProperty})">
      <summary>지정된 매개 변수에서 NavigationProperty 인스턴스를 만듭니다.</summary>
      <returns>새로 만든 NavigationProperty 인스턴스</returns>
      <param name="name">탐색 속성의 이름입니다.</param>
      <param name="typeUsage">탐색 속성 형식과 해당 패싯을 지정합니다.</param>
      <param name="relationshipType">탐색에 대한 관계 형식입니다.</param>
      <param name="from">탐색의 원본 end 멤버입니다.</param>
      <param name="to">탐색의 대상 end 멤버입니다.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.NavigationProperty.FromEndMember">
      <summary>이 탐색의 "원본" 관계 End 멤버를 가져옵니다.</summary>
      <returns>이 탐색의 "원본" 관계 End 멤버입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.NavigationProperty.GetDependentProperties">
      <summary>지정된 탐색 속성이 참조 제약 조건의 종속 end에 있는 경우 외래 키 속성을 반환합니다.그렇지 않으면 빈 집합을 반환합니다.주 end 키 속성 순으로 멤버를 반환합니다.</summary>
      <returns>외래 키 속성의 컬렉션입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.NavigationProperty.RelationshipType">
      <summary>이 탐색 속성이 사용되는 관계 형식을 가져옵니다.</summary>
      <returns>이 탐색 속성이 사용되는 관계 형식입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.NavigationProperty.ToEndMember">
      <summary>이 탐색의 "대상" 관계 End 멤버를 가져옵니다.</summary>
      <returns>이 탐색의 "대상" 관계 End 멤버입니다.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.ObjectItemCollection">
      <summary>개체 계층에 대한 항목의 컬렉션을 나타내는 클래스입니다.컬렉션의 실제 유지 보수는 대부분 ItemCollection에 의해 구현됩니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ObjectItemCollection.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.ObjectItemCollection" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ObjectItemCollection.GetClrType(System.Data.Entity.Core.Metadata.Edm.EnumType)">
      <summary>메서드는 지정된 OSpace 형식 인수에 대한 내부 CLR 형식을 반환합니다.매개 변수의 DataSpace가 OSpace가 아닌 경우 ArgumentException이 발생합니다.</summary>
      <returns>OSpace 인수의 CLR 형식입니다.</returns>
      <param name="objectSpaceType">조회할 OSpace 형식입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ObjectItemCollection.GetClrType(System.Data.Entity.Core.Metadata.Edm.StructuralType)">
      <summary>objectSpaceType 매개 변수에 지정된 <see cref="T:System.Data.Entity.Core.Metadata.Edm.StructuralType" />에 해당하는 CLR 형식을 반환합니다.</summary>
      <returns>OSpace 인수의 CLR 형식입니다.</returns>
      <param name="objectSpaceType">개체 공간 형식을 나타내는 <see cref="T:System.Data.Entity.Core.Metadata.Edm.StructuralType" />입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ObjectItemCollection.GetItems``1">
      <summary>이 항목 컬렉션에서 지정된 형식의 모든 항목을 반환합니다.</summary>
      <returns>지정된 형식의 모든 항목이 포함된 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 형식의 컬렉션입니다.</returns>
      <typeparam name="T">메서드에서 반환하는 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ObjectItemCollection.GetPrimitiveTypes">
      <summary>기본 형식 개체의 컬렉션을 반환합니다.</summary>
      <returns>기본 형식 개체의 컬렉션입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ObjectItemCollection.LoadFromAssembly(System.Reflection.Assembly)">
      <summary>지정된 어셈블리에서 메타데이터를 로드합니다.</summary>
      <param name="assembly">메타데이터를 로드할 어셈블리입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ObjectItemCollection.LoadFromAssembly(System.Reflection.Assembly,System.Data.Entity.Core.Metadata.Edm.EdmItemCollection)">
      <summary>지정된 어셈블리에서 메타데이터를 로드합니다.</summary>
      <param name="assembly">메타데이터를 로드할 어셈블리입니다.</param>
      <param name="edmItemCollection">O 공간 메타데이터에 대한 EDM 메타데이터 소스입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ObjectItemCollection.LoadFromAssembly(System.Reflection.Assembly,System.Data.Entity.Core.Metadata.Edm.EdmItemCollection,System.Action{System.String})">
      <summary>지정된 어셈블리에서 메타데이터를 로드합니다.</summary>
      <param name="assembly">메타데이터를 로드할 어셈블리입니다.</param>
      <param name="edmItemCollection">O 공간 메타데이터에 대한 EDM 메타데이터 소스입니다.</param>
      <param name="logLoadMessage">로그 메시지가 전송되는 대리자입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ObjectItemCollection.TryGetClrType(System.Data.Entity.Core.Metadata.Edm.EnumType,System.Type@)">
      <summary>지정된 OSpace 열거형 형식 인수에 대한 기본 CLR 형식을 반환합니다.매개 변수의 DataSpace가 OSpace가 아닌 경우 메서드에서 false를 반환하고 out 매개 변수를 null로 설정합니다.</summary>
      <returns>성공하면 true이고, 실패하면 false입니다.</returns>
      <param name="objectSpaceType">조회할 OSpace 열거형 형식입니다.</param>
      <param name="clrType">OSpace 인수의 CLR 열거형 형식입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ObjectItemCollection.TryGetClrType(System.Data.Entity.Core.Metadata.Edm.StructuralType,System.Type@)">
      <summary>objectSpaceType 매개 변수에서 제공하는 <see cref="T:System.Data.Entity.Core.Metadata.Edm.StructuralType" />에 해당하는 CLR 형식을 반환합니다.</summary>
      <returns>검색 조건과 일치하는 형식이 있으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="objectSpaceType">개체 공간 형식을 나타내는 <see cref="T:System.Data.Entity.Core.Metadata.Edm.StructuralType" />입니다.</param>
      <param name="clrType">CLR 형식입니다.</param>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.OperationAction">
      <summary>삭제 작업에 대한 가능한 동작 목록을 나타냅니다.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.OperationAction.Cascade">
      <summary>다른 end에 계단식으로 배열합니다.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.OperationAction.None">
      <summary>동작이 없습니다.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.ParameterMode">
      <summary>매개 변수의 모드를 설명하는 열거형입니다.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.ParameterMode.In">
      <summary>In 매개 변수입니다.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.ParameterMode.InOut">
      <summary>In 및 Out 매개 변수입니다.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.ParameterMode.Out">
      <summary>Out 매개 변수입니다.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.ParameterMode.ReturnValue">
      <summary>매개 변수를 반환합니다.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.ParameterTypeSemantics">
      <summary>함수 오버로드를 확인하는 데 사용되는 형식 의미 체계를 정의하는 열거형입니다.이러한 플래그는 함수 정의별로 공급자 매니페스트에 정의됩니다.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.ParameterTypeSemantics.AllowImplicitConversion">
      <summary>지정된 인수 형식과 공식 인수 형식(기본값) 사이의 암시적 변환을 허용합니다.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.ParameterTypeSemantics.AllowImplicitPromotion">
      <summary>지정된 인수 형식과 공식 인수 형식(기본값) 사이의 형식 승격을 허용합니다.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.ParameterTypeSemantics.ExactMatchOnly">
      <summary>엄격한 동등성만 사용 합니다.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType">
      <summary>기본 형식을 나타내는 클래스입니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.PrimitiveType.BuiltInTypeKind">
      <summary>이 <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" />의 기본 제공 형식 유형을 가져옵니다.</summary>
      <returns>이 <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" />의 기본 제공 형식 유형을 나타내는 <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" /> 개체입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.PrimitiveType.ClrEquivalentType">
      <summary>이 <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" />에 해당하는 CLR(공용 언어 런타임) 형식을 반환합니다.<see cref="P:System.Data.Entity.Core.Metadata.Edm.PrimitiveType.ClrEquivalentType" /> 속성은 항상 null을 허용하지 않는 형식 값을 반환합니다.</summary>
      <returns>이 <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" />에 해당하는 CLR(공용 언어 런타임) 형식을 나타내는 <see cref="T:System.Type" /> 개체입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.PrimitiveType.FacetDescriptions">
      <summary>이 <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" />에 대한 패싯 설명 목록을 가져옵니다.</summary>
      <returns>이 <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" />에 대한 패싯 설명 목록이 포함된 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 형식의 컬렉션입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.PrimitiveType.GetEdmPrimitiveType">
      <summary>이 <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" />에 해당하는 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" />을 반환합니다.</summary>
      <returns>이 <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" />에 해당하는 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" />입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.PrimitiveType.GetEdmPrimitiveType(System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" />에 해당하는 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" />을 반환합니다.</summary>
      <returns>지정된 <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" />에 해당하는 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> 개체입니다.</returns>
      <param name="primitiveTypeKind">
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" /> 형식의 값입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.PrimitiveType.GetEdmPrimitiveTypes">
      <summary>기본 형식의 목록을 반환합니다.</summary>
      <returns>기본 형식의 목록이 포함된 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 형식의 컬렉션입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.PrimitiveType.PrimitiveTypeKind">
      <summary>이 <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" />의 기본 형식을 나타내는 <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind" /> 열거형 값을 가져옵니다.</summary>
      <returns>이 <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" />의 기본 형식을 나타내는 <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind" /> 열거형 값입니다.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind">
      <summary>EDM으로 정의된 기본 형식입니다.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.Binary">
      <summary>이진 형식 유형입니다.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.Boolean">
      <summary>부울 형식 유형입니다.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.Byte">
      <summary>바이트 형식 유형입니다.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.DateTime">
      <summary>DateTime 형식 유형입니다.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.DateTimeOffset">
      <summary>DateTimeOffset 형식 유형입니다.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.Decimal">
      <summary>10진수 형식 유형입니다.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.Double">
      <summary>Double 형식 유형입니다.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.Geography">
      <summary>지리적 형식 유형입니다.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.GeographyCollection">
      <summary>지리적 컬렉션 형식 유형입니다.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.GeographyLineString">
      <summary>지리적 선 문자열 형식 유형입니다.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.GeographyMultiLineString">
      <summary>지리적 다중 선 문자열 형식 유형입니다.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.GeographyMultiPoint">
      <summary>지리적 다중 지점 형식 유형입니다.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.GeographyMultiPolygon">
      <summary>지리적 다중 다각형 형식 유형입니다.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.GeographyPoint">
      <summary>지리적 지점 형식 유형입니다.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.GeographyPolygon">
      <summary>지리적 다각형 형식 유형입니다.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.Geometry">
      <summary>기하학 형식 유형입니다.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.GeometryCollection">
      <summary>기하학적 컬렉션 형식 유형입니다.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.GeometryLineString">
      <summary>기하학적 선 문자열 형식 유형입니다.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.GeometryMultiLineString">
      <summary>기하학적 다중 선 문자열 형식 유형입니다.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.GeometryMultiPoint">
      <summary>기하학적 다중 지점 형식 유형입니다.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.GeometryMultiPolygon">
      <summary>기하학적 다중 다각형 형식 유형입니다.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.GeometryPoint">
      <summary>기하학적 지점 형식 유형입니다.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.GeometryPolygon">
      <summary>기하학적 다각형 형식 유형입니다.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.Guid">
      <summary>Guid 형식 유형입니다.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.Int16">
      <summary>Int16 형식 유형입니다.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.Int32">
      <summary>Int32 형식 유형입니다.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.Int64">
      <summary>Int64 형식 유형입니다.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.SByte">
      <summary>SByte 형식 유형입니다.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.Single">
      <summary>Single 형식 유형입니다.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.String">
      <summary>문자열 형식 유형입니다.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.Time">
      <summary>시간 형식 유형입니다.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.PropertyKind">
      <summary>개념적 모델의 항목 특성 종류를 지정합니다.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PropertyKind.Extended">
      <summary>항목 특성이 Extended임을 나타내는 열거형 멤버입니다.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PropertyKind.System">
      <summary>항목 특성이 System임을 나타내는 열거형 멤버입니다.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1">
      <summary>MetadataCollection 주위의 읽기 전용 래퍼를 나타내는 클래스입니다.</summary>
      <typeparam name="T">이 컬렉션의 항목 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1.Contains(System.String)">
      <summary>지정된 ID를 가진 항목이 컬렉션에 있는지 여부를 확인합니다.</summary>
      <returns>검색할 항목이 컬렉션에 포함되어 있으면 true이고, 그렇지 않으면 false입니다.기본값은 false입니다.</returns>
      <param name="identity">항목의 ID입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1.GetEnumerator">
      <summary>이 컬렉션을 반복할 수 있는 열거자를 반환합니다.</summary>
      <returns>이 <see cref="T:System.Data.Metadata.Edm.ReadOnlyMetadataCollection" />을 반복하는 데 사용할 수 있는 <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1.Enumerator" />입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1.GetValue(System.String,System.Boolean)">
      <summary>지정된 ID를 사용하여 이 컬렉션에서 항목을 검색합니다.</summary>
      <returns>이 컬렉션의 항목입니다.</returns>
      <param name="identity">검색할 항목의 ID입니다.</param>
      <param name="ignoreCase">검색할 때 대/소문자를 구분하지 않는 경우 true이고, 그렇지 않으면 false입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1.IndexOf(`0)">
      <summary>이 컬렉션의 지정된 값에 해당하는 인덱스를 반환합니다.</summary>
      <returns>이 컬렉션의 지정된 값에 해당하는 인덱스입니다.</returns>
      <param name="value">검색할 값입니다.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1.IsReadOnly">
      <summary>이 컬렉션이 읽기 전용인지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>이 컬렉션이 읽기 전용이면 true이고, 그렇지 않으면 false입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1.Item(System.String)">
      <summary>지정된 ID를 사용하여 이 컬렉션에서 항목을 가져옵니다.</summary>
      <returns>이 컬렉션의 항목입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1.TryGetValue(System.String,System.Boolean,`0@)">
      <summary>지정된 ID를 사용하여 이 컬렉션에서 항목을 검색합니다.</summary>
      <returns>검색 조건과 일치하는 항목이 있으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="identity">검색할 항목의 ID입니다.</param>
      <param name="ignoreCase">검색할 때 대/소문자를 구분하지 않는 경우 true이고, 그렇지 않으면 false입니다.</param>
      <param name="item">이 메서드가 반환될 때 이 출력 매개 변수에 컬렉션의 항목이 포함됩니다.일치하는 항목이 없으면 이 출력 매개 변수에 null이 포함됩니다.</param>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1.Enumerator">
      <summary>MetadataCollection에 대한 열거자입니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1.Enumerator.Current">
      <summary>현재 위치에 있는 멤버를 가져옵니다.</summary>
      <returns>현재 위치에 있는 멤버입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1.Enumerator.Dispose">
      <summary>이 열거자를 삭제합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1.Enumerator.MoveNext">
      <summary>
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1.Enumerator" /> 형식의 컬렉션 내에서 다음 멤버로 이동합니다.</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1.EnumeratortaCollection" /> 형식의 컬렉션에서 열거자가 이동하면 true이고, 그렇지 않으면 false입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1.Enumerator.Reset">
      <summary>
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1" /> 형식의 컬렉션에서 첫 번째 위치 앞에 열거자를 놓습니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1.Enumerator.System#Collections#IEnumerator#Current">
      <summary>현재 위치에 있는 멤버를 가져옵니다.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.ReferentialConstraint">
      <summary>이 클래스는 관계의 "시작" 끝과 "종료" 끝을 지정하는 두 엔터티 간 참조 제약 조건을 나타냅니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ReferentialConstraint.#ctor(System.Data.Entity.Core.Metadata.Edm.RelationshipEndMember,System.Data.Entity.Core.Metadata.Edm.RelationshipEndMember,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.EdmProperty},System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.EdmProperty})">
      <summary>관계에 대한 새 제약 조건을 생성합니다.</summary>
      <param name="fromRole">관계가 시작되는 역할입니다.</param>
      <param name="toRole">관계가 연결된 역할, 즉 관계의 대상 역할입니다.</param>
      <param name="fromProperties">제약 조건에 참여하는 대상 역할의 엔터티 형식에 대한 속성입니다.</param>
      <param name="toProperties">제약 조건에 참여하는 원본 역할의 엔터티 형식에 대한 속성입니다.</param>
      <exception cref="T:System.ArgumentNullException">인수가 null인 경우 Argument Null 예외</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.ReferentialConstraint.BuiltInTypeKind">
      <summary>이 <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReferentialConstraint" />의 기본 제공 형식 유형을 가져옵니다.</summary>
      <returns>이 <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReferentialConstraint" />의 기본 제공 형식 유형을 나타내는 <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" /> 개체입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.ReferentialConstraint.FromProperties">
      <summary>이 <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReferentialConstraint" />가 정의된 "원본 역할"의 속성 목록을 가져옵니다.</summary>
      <returns>이 <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReferentialConstraint" />가 정의된 "원본 역할"의 속성 목록이 포함된 <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1" /> 형식의 컬렉션입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.ReferentialConstraint.FromRole">
      <summary>이 <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReferentialConstraint" />의 "원본 역할"을 가져옵니다.</summary>
      <returns>이 <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReferentialConstraint" />의 "원본 역할"을 나타내는 <see cref="T:System.Data.Entity.Core.Metadata.Edm.RelationshipEndMember" /> 개체입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.ReferentialConstraint.ToProperties">
      <summary>이 <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReferentialConstraint" />가 정의된 "대상 역할"의 속성 목록을 가져옵니다.</summary>
      <returns>이 <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReferentialConstraint" />가 정의된 "대상 역할"의 속성 목록이 포함된 <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1" /> 형식의 컬렉션입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.ReferentialConstraint.ToRole">
      <summary>이 <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReferentialConstraint" />의 "대상 역할"을 가져옵니다.</summary>
      <returns>이 <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReferentialConstraint" />의 "대상 역할"을 나타내는 <see cref="T:System.Data.Entity.Core.Metadata.Edm.RelationshipEndMember" /> 개체입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ReferentialConstraint.ToString">
      <summary>
        <see cref="P:System.Data.Entity.Core.Metadata.Edm.ReferentialConstraint.FromRole" />과 <see cref="P:System.Data.Entity.Core.Metadata.Edm.ReferentialConstraint.ToRole" />의 이름 조합을 반환합니다.</summary>
      <returns>
        <see cref="P:System.Data.Entity.Core.Metadata.Edm.ReferentialConstraint.FromRole" /> 및 <see cref="P:System.Data.Entity.Core.Metadata.Edm.ReferentialConstraint.ToRole" />의 이름 조합입니다.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.RefType">
      <summary>참조 형식을 나타내는 클래스입니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.RefType.BuiltInTypeKind">
      <summary>이 <see cref="T:System.Data.Entity.Core.Metadata.Edm.RefType" />의 기본 제공 형식 유형을 가져옵니다.</summary>
      <returns>이 <see cref="T:System.Data.Entity.Core.Metadata.Edm.RefType" />의 기본 제공 형식 유형을 나타내는 <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" /> 개체입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.RefType.ElementType">
      <summary>이 <see cref="T:System.Data.Entity.Core.Metadata.Edm.RefType" />에서 참조하는 엔터티 형식을 가져옵니다.</summary>
      <returns>이 <see cref="T:System.Data.Entity.Core.Metadata.Edm.RefType" />에서 참조하는 엔터티 형식을 나타내는 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityTypeBase" /> 개체입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.RefType.Equals(System.Object)"></member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.RefType.GetHashCode"></member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.RelationshipEndMember">
      <summary>RelationshipEndMember 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.RelationshipEndMember.DeleteBehavior">
      <summary>이 관계에서 End 멤버의 동작을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.OperationAction" /> 값 중 하나입니다.기본값은 <see cref="P:System.Data.Entity.Core.Metadata.Edm.OperationAction.None" />입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.RelationshipEndMember.GetEntityType">
      <summary>연결에서 EndMember의 EntityType에 액세스합니다.</summary>
      <returns>연결에서 EndMember의 EntityType입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.RelationshipEndMember.RelationshipMultiplicity">
      <summary>이 관계에서 End 멤버의 다중성을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.RelationshipMultiplicity" /> 값 중 하나입니다.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.RelationshipMultiplicity">
      <summary>관계 형식의 end에 대한 복합성 정보를 나타냅니다.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.RelationshipMultiplicity.Many">
      <summary>하한은 0이고 상한은 null입니다.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.RelationshipMultiplicity.One">
      <summary>하한과 상한 모두 1입니다.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne">
      <summary>하한은 0이고 상한은 1입니다.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.RelationshipSet">
      <summary>관계 집합을 나타내는 클래스입니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.RelationshipSet.BuiltInTypeKind">
      <summary>이 <see cref="T:System.Data.Entity.Core.Metadata.Edm.RelationshipSet" />의 기본 제공 형식 유형을 가져옵니다.</summary>
      <returns>이 <see cref="T:System.Data.Entity.Core.Metadata.Edm.RelationshipSet" />의 기본 제공 형식 유형을 나타내는 <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" /> 개체입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.RelationshipSet.ElementType">
      <summary>이 <see cref="T:System.Data.Entity.Core.Metadata.Edm.RelationshipSet" />의 관계 형식을 가져옵니다.</summary>
      <returns>이 <see cref="T:System.Data.Entity.Core.Metadata.Edm.RelationshipSet" />의 관계 형식을 나타내는 <see cref="T:System.Data.Entity.Core.Metadata.Edm.RelationshipType" /> 개체입니다.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.RelationshipType">
      <summary>관계 형식을 나타냅니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.RelationshipType.RelationshipEndMembers">
      <summary>이 관계 형식의 End 목록을 가져옵니다.</summary>
      <returns>이 관계 형식의 End 목록이 포함된 <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1" /> 형식의 컬렉션입니다.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.RowType">
      <summary>Edm 행 형식을 나타냅니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.RowType.BuiltInTypeKind">
      <summary>이 <see cref="T:System.Data.Entity.Core.Metadata.Edm.RowType" />의 기본 제공 형식 유형을 가져옵니다.</summary>
      <returns>이 <see cref="T:System.Data.Entity.Core.Metadata.Edm.RowType" />의 기본 제공 형식 유형을 나타내는 <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" /> 개체입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.RowType.Create(System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.EdmProperty},System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.MetadataProperty})">
      <summary>
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.RowType" /> 개체를 생성하기 위한 팩터리 메서드입니다.</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.RowType" /> 개체의 새로운 읽기 전용 인스턴스입니다.</returns>
      <param name="properties">행 형식 개체의 속성입니다.</param>
      <param name="metadataProperties">함수에 추가할 메타데이터 속성입니다.null일 수 있습니다.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.RowType.DeclaredProperties">
      <summary>현재 형식이 정의하는 속성의 컬렉션을 가져옵니다.</summary>
      <returns>현재 형식이 정의하는 속성의 컬렉션입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.RowType.Properties">
      <summary>이 <see cref="T:System.Data.Entity.Core.Metadata.Edm.RowType" />의 속성 목록을 가져옵니다.</summary>
      <returns>이 <see cref="T:System.Data.Entity.Core.Metadata.Edm.RowType" />의 속성 목록이 포함된 <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1" /> 형식의 컬렉션입니다.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.SimpleType">
      <summary>단순 형식을 나타내는 클래스입니다.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.SsdlSerializer">
      <summary>
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmModel" />의 저장소(데이터베이스) 섹션을 XML로 serialize합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.SsdlSerializer.#ctor"></member>
    <member name="E:System.Data.Entity.Core.Metadata.Edm.SsdlSerializer.OnError">
      <summary>모델을 serialize하는 중 오류가 발견될 때 발생합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.SsdlSerializer.Serialize(System.Data.Entity.Core.Metadata.Edm.EdmModel,System.String,System.String,System.String,System.Xml.XmlWriter,System.Boolean)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmModel" />을 <see cref="T:System.Xml.XmlWriter" />로 serialize합니다.</summary>
      <returns>모델을 serialize할 수 있으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="dbDatabase">serialize할 원본인 EdmModel입니다.</param>
      <param name="namespaceName">Schema 요소에 대한 네임스페이스 이름입니다.</param>
      <param name="provider">Schema 요소에 대한 공급자 정보입니다.</param>
      <param name="providerManifestToken">Schema 요소에 대한 ProviderManifestToken 정보입니다.</param>
      <param name="xmlWriter">serialize할 대상인 XmlWriter입니다.</param>
      <param name="serializeDefaultNullability">Nullable 특성이 기본값으로 설정될 때 해당 특성을 serialize할지 여부를 나타내는 값입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.SsdlSerializer.Serialize(System.Data.Entity.Core.Metadata.Edm.EdmModel,System.String,System.String,System.Xml.XmlWriter,System.Boolean)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmModel" />을 <see cref="T:System.Xml.XmlWriter" />로 serialize합니다.</summary>
      <returns>모델을 serialize할 수 있으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="dbDatabase">serialize할 원본인 EdmModel입니다.</param>
      <param name="provider">Schema 요소에 대한 공급자 정보입니다.</param>
      <param name="providerManifestToken">Schema 요소에 대한 ProviderManifestToken 정보입니다.</param>
      <param name="xmlWriter">serialize할 대상인 XmlWriter입니다.</param>
      <param name="serializeDefaultNullability">Nullable 특성이 기본값으로 설정될 때 해당 특성을 serialize할지 여부를 나타내는 값입니다.</param>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.StoreGeneratedPattern">
      <summary>서버에서 생성된 속성의 패턴입니다.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.StoreGeneratedPattern.Computed">
      <summary>삽입 및 업데이트 모두에 대해 값을 생성합니다.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.StoreGeneratedPattern.Identity">
      <summary>삽입할 때 값을 생성하고 업데이트할 때는 값을 변경하지 않습니다.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.StoreGeneratedPattern.None">
      <summary>서버에서 생성된 속성이 아닙니다.이 값이 기본값입니다.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection">
      <summary>저장소 공간의 항목 컬렉션을 나타내는 클래스입니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection.#ctor(System.Collections.Generic.IEnumerable{System.Xml.XmlReader})">
      <summary>지정된 XMLReader를 사용하여 <see cref="T:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="xmlReaders">메타데이터를 만드는 데 사용되는 XML 판독기입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection.#ctor(System.Data.Entity.Core.Metadata.Edm.EdmModel)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="model">
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection" />의 모델입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection.#ctor(System.String[])">
      <summary>지정한 파일 경로를 사용하여 <see cref="T:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="filePaths">메타데이터를 만드는 데 사용되는 파일 경로입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection.Create(System.Collections.Generic.IEnumerable{System.Xml.XmlReader},System.Collections.ObjectModel.ReadOnlyCollection{System.String},System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver,System.Collections.Generic.IList{System.Data.Entity.Core.Metadata.Edm.EdmSchemaError}@)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection" />을 만드는 팩터리 메서드입니다.</summary>
      <returns>오류가 발생하지 않은 경우 <see cref="T:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection" /> 인스턴스이고,그렇지 않으면 null입니다.</returns>
      <param name="xmlReaders">로드할 SSDL 아티팩트입니다.null이 아니어야 합니다.</param>
      <param name="filePaths">SSDL 아티팩트에 대한 경로입니다.오류 메시지에 사용됩니다.XmlReader의 기본 URI가 경로로 사용되는 경우 null일 수 있습니다.</param>
      <param name="resolver">사용자 지정 확인자입니다.현재 DbProviderServices 구현을 확인하는 데 사용됩니다.null인 경우 기본 확인자가 사용됩니다.</param>
      <param name="errors">로딩하는 동안 발생한 오류의 컬렉션입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection.GetPrimitiveTypes">
      <summary>
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" /> 개체의 컬렉션을 반환합니다.</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" /> 개체의 컬렉션을 나타내는 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 개체입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection.ProviderFactory">
      <summary>StoreItemCollection의 공급자 팩터리를 가져옵니다.</summary>
      <returns>StoreItemCollection의 공급자 팩터리입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection.ProviderInvariantName">
      <summary>StoreItemCollection의 고정 이름을 가져옵니다.</summary>
      <returns>StoreItemCollection의 고정 이름입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection.ProviderManifest">
      <summary>StoreItemCollection의 공급자 매니페스트를 가져옵니다.</summary>
      <returns>StoreItemCollection의 공급자 매니페스트입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection.ProviderManifestToken">
      <summary>StoreItemCollection의 매니페스트 토큰을 가져옵니다.</summary>
      <returns>StoreItemCollection의 매니페스트 토큰입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection.StoreSchemaVersion">
      <summary>이 컬렉션에 대한 저장 스키마의 버전을 가져옵니다.</summary>
      <returns>이 컬렉션에 대한 저장 스키마의 버전입니다.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.StructuralType">
      <summary>구조 형식을 나타냅니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.StructuralType.AddMember(System.Data.Entity.Core.Metadata.Edm.EdmMember)">
      <summary>이 형식에 멤버를 추가합니다.</summary>
      <param name="member">추가할 멤버입니다.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.StructuralType.Members">
      <summary>이 형식의 멤버 목록을 가져옵니다.</summary>
      <returns>이 형식의 멤버 집합이 포함된 <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1" /> 형식의 컬렉션입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.StructuralType.RemoveMember(System.Data.Entity.Core.Metadata.Edm.EdmMember)">
      <summary>이 형식에서 멤버를 제거합니다.</summary>
      <param name="member">제거할 멤버입니다.</param>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage">
      <summary>항목에 대한 형식 정보를 나타내는 클래스입니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.TypeUsage.BuiltInTypeKind">
      <summary>이 <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" />의 기본 제공 형식 유형을 가져옵니다.</summary>
      <returns>이 <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" />의 기본 제공 형식 유형을 나타내는 <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" /> 개체입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.TypeUsage.Create(System.Data.Entity.Core.Metadata.Edm.EdmType,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.Facet})">
      <summary>지정된 EdmType 및 패싯의 TypeUsage를 만드는 패싯 메서드입니다.</summary>
      <returns>새 TypeUsage 인스턴스</returns>
      <param name="edmType">TypeUsage를 만들 EdmType입니다.</param>
      <param name="facets">새 TypeUsage에 복사할 패싯입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.TypeUsage.CreateBinaryTypeUsage(System.Data.Entity.Core.Metadata.Edm.PrimitiveType,System.Boolean)">
      <summary>지정된 패싯 값을 사용하여 이진 형식을 정의하는 <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> 개체를 만듭니다.</summary>
      <returns>지정된 패싯 값을 사용하여 이진 형식을 정의하는 <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> 개체입니다.</returns>
      <param name="primitiveType">
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> 개체를 만들 대상 <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" />입니다.</param>
      <param name="isFixedLength">이진 형식을 고정 길이로 설정하려면 true이고, 그렇지 않으면 false입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.TypeUsage.CreateBinaryTypeUsage(System.Data.Entity.Core.Metadata.Edm.PrimitiveType,System.Boolean,System.Int32)">
      <summary>지정된 패싯 값을 사용하여 이진 형식을 정의하는 <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> 개체를 만듭니다.</summary>
      <returns>지정된 패싯 값을 사용하여 이진 형식을 정의하는 <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> 개체입니다.</returns>
      <param name="primitiveType">
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> 개체를 만들 대상 <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" />입니다.</param>
      <param name="isFixedLength">이진 형식을 고정 길이로 설정하려면 true이고, 그렇지 않으면 false입니다.</param>
      <param name="maxLength">이진 형식의 최대 길이입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.TypeUsage.CreateDateTimeOffsetTypeUsage(System.Data.Entity.Core.Metadata.Edm.PrimitiveType,System.Nullable{System.Byte})">
      <summary>매개 변수가 설명하는 형식의 <see cref="T:System.Data.Metadata.Edm.DateTimeOffsetTypeUsage" /> 개체를 만듭니다.</summary>
      <returns>
        <see cref="T:System.Data.Metadata.Edm.DateTimeOffsetTypeUsage" /> 개체입니다.</returns>
      <param name="primitiveType">오프셋의 측정 단위를 정의하는 단순 형식입니다.</param>
      <param name="precision">지원되는 소수 자릿수에 따라 초의 소수부로 표시되는 <see cref="T:System." />DateTimeOffset의 세분성 정도입니다.예를 들어 정밀도가 3인 경우 지원되는 세분성은 밀리초입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.TypeUsage.CreateDateTimeTypeUsage(System.Data.Entity.Core.Metadata.Edm.PrimitiveType,System.Nullable{System.Byte})">
      <summary>매개 변수가 설명하는 형식의 <see cref="T:System.Data.Metadata.Edm.DateTimeTypeUsage" /> 개체를 만듭니다.</summary>
      <returns>
        <see cref="T:System.Data.Metadata.Edm.DateTimeTypeUsage" /> 개체입니다.</returns>
      <param name="primitiveType">
        <see cref="T:System." /> DateTime 개체의 측정 단위를 정의하는 단순 형식입니다.</param>
      <param name="precision">지원되는 소수 자릿수에 따라 초의 소수부로 표시되는 <see cref="T:System." />DateTimeOffset의 세분성 정도입니다.예를 들어 정밀도가 3인 경우 지원되는 세분성은 밀리초입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.TypeUsage.CreateDecimalTypeUsage(System.Data.Entity.Core.Metadata.Edm.PrimitiveType)">
      <summary>제한되지 않는 전체 자릿수 및 소수 자릿수 패싯 값을 사용하는 10진수 형식을 정의하는 <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> 개체를 만듭니다.</summary>
      <returns>제한되지 않는 전체 자릿수 및 소수 자릿수 패싯 값을 사용하는 10진수 형식을 정의하는 <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> 개체입니다.</returns>
      <param name="primitiveType">
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> 개체를 만들 대상 <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" />입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.TypeUsage.CreateDecimalTypeUsage(System.Data.Entity.Core.Metadata.Edm.PrimitiveType,System.Byte,System.Byte)">
      <summary>지정된 패싯 값을 사용하여 10진수 형식을 정의하는 <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> 개체를 만듭니다.</summary>
      <returns>지정된 패싯 값을 사용하여 10진수 형식을 정의하는 <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> 개체입니다.</returns>
      <param name="primitiveType">
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> 개체를 만들 대상 <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" />입니다.</param>
      <param name="precision">10진수 형식의 전체 자릿수인 <see cref="T:System.Byte" /> 형식입니다.</param>
      <param name="scale">10진수 형식의 소수 자릿수인 <see cref="T:System.Byte" /> 형식입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.TypeUsage.CreateDefaultTypeUsage(System.Data.Entity.Core.Metadata.Edm.EdmType)">
      <summary>지정된 개념적 모델 형식을 사용하여 <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> 개체를 만듭니다.</summary>
      <returns>지정된 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" />의 기본 패싯 값을 사용하는 <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> 개체입니다.</returns>
      <param name="edmType">
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> 개체를 만들 대상 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" />입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.TypeUsage.CreateStringTypeUsage(System.Data.Entity.Core.Metadata.Edm.PrimitiveType,System.Boolean,System.Boolean)">
      <summary>지정된 패싯 값과 제한 없는 MaxLength를 사용하여 문자열 형식을 정의하는 <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> 개체를 만듭니다.</summary>
      <returns>지정된 패싯 값과 제한 없는 MaxLength를 사용하여 문자열 형식을 정의하는 <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> 개체입니다.</returns>
      <param name="primitiveType">
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> 개체를 만들 대상 <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" />입니다.</param>
      <param name="isUnicode">문자열 형식의 문자 인코딩 표준을 유니코드로 설정하려면 true이고, 그렇지 않으면 false입니다.</param>
      <param name="isFixedLength">문자열 형식을 고정 길이로 설정하려면 true이고, 그렇지 않으면 false입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.TypeUsage.CreateStringTypeUsage(System.Data.Entity.Core.Metadata.Edm.PrimitiveType,System.Boolean,System.Boolean,System.Int32)">
      <summary>지정된 패싯 값을 사용하여 문자열 형식을 정의하는 <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> 개체를 만듭니다.</summary>
      <returns>지정된 패싯 값을 사용하여 문자열 형식을 정의하는 <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> 개체입니다.</returns>
      <param name="primitiveType">
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> 개체를 만들 대상 <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" />입니다.</param>
      <param name="isUnicode">문자열 형식의 문자 인코딩 표준을 유니코드로 설정하려면 true이고, 그렇지 않으면 false입니다.</param>
      <param name="isFixedLength">문자열 형식의 문자 인코딩 표준을 유니코드로 설정하려면 true이고, 그렇지 않으면 false입니다.</param>
      <param name="maxLength">문자열 형식을 고정 길이로 설정하려면 true이고, 그렇지 않으면 false입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.TypeUsage.CreateTimeTypeUsage(System.Data.Entity.Core.Metadata.Edm.PrimitiveType,System.Nullable{System.Byte})">
      <summary>매개 변수가 설명하는 형식의 <see cref="T:System.Data.Metadata.Edm.TimeTypeUsage" /> 개체를 만듭니다.</summary>
      <returns>
        <see cref="T:System.Data.Metadata.Edm.TimeTypeUsage" /> 개체입니다.</returns>
      <param name="primitiveType">
        <see cref="T:System." /> DateTime 개체의 측정 단위를 정의하는 단순 형식입니다.</param>
      <param name="precision">지원되는 소수 자릿수에 따라 초의 소수부로 표시되는 <see cref="T:System." />DateTimeOffset의 세분성 정도입니다.예를 들어 정밀도가 3인 경우 지원되는 세분성은 밀리초입니다.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.TypeUsage.EdmType">
      <summary>이 <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" />에서 정의하는 형식 정보를 가져옵니다.</summary>
      <returns>이 <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" />에서 정의하는 형식 정보를 나타내는 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> 개체입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.TypeUsage.Facets">
      <summary>이 <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" />에서 정의하는 형식의 패싯 목록을 가져옵니다.</summary>
      <returns>이 <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" />에서 정의하는 형식의 패싯 목록이 포함된 <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1" /> 형식의 컬렉션입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.TypeUsage.IsSubtypeOf(System.Data.Entity.Core.Metadata.Edm.TypeUsage)">
      <summary>이 <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" />가 지정된 <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" />의 하위 형식인지 여부를 확인합니다.</summary>
      <returns>이 <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" />가 지정된 <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" />의 하위 형식이면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="typeUsage">확인할 <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> 개체입니다.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.TypeUsage.ModelTypeUsage">
      <summary>공급자 형식에 대한 TypeUsage를 반환합니다.</summary>
      <returns>모델(CSpace) 형식 사용법입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.TypeUsage.ToString">
      <summary>이 <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" />에서 설명하는 형식의 전체 이름을 반환합니다.</summary>
      <returns>이 <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" />에서 설명하는 형식의 전체 이름인 문자열입니다.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.CompiledQuery">
      <summary>ELinq 쿼리를 캐시합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``10(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9}})">
      <summary>컴파일된 LINQ to Entities 쿼리를 나타내는 새 대리자를 만듭니다.</summary>
      <returns>컴파일된 LINQ to Entities 쿼리를 나타내는 제네릭 대리자인 <see cref="T:System.Func`10" />입니다.</returns>
      <param name="query">컴파일할 람다 식입니다.</param>
      <typeparam name="TArg0">
        <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" />에서 파생된 형식입니다.</typeparam>
      <typeparam name="TArg1">이 메서드에서 반환한 대리자를 실행할 때 전달해야 하는 매개 변수의 형식을 나타냅니다.TArg1은 기본 형식이어야 합니다.</typeparam>
      <typeparam name="TArg2">이 메서드에서 반환한 대리자를 실행할 때 전달해야 하는 매개 변수의 형식을 나타냅니다.TArg2는 기본 형식이어야 합니다.</typeparam>
      <typeparam name="TArg3">이 메서드에서 반환한 대리자를 실행할 때 전달해야 하는 매개 변수의 형식을 나타냅니다.TArg3은 기본 형식이어야 합니다.</typeparam>
      <typeparam name="TArg4">이 메서드에서 반환한 대리자를 실행할 때 전달해야 하는 매개 변수의 형식을 나타냅니다.TArg4는 기본 형식이어야 합니다.</typeparam>
      <typeparam name="TArg5">이 메서드에서 반환한 대리자를 실행할 때 전달해야 하는 매개 변수의 형식을 나타냅니다.TArg5는 기본 형식이어야 합니다.</typeparam>
      <typeparam name="TArg6">이 메서드에서 반환한 대리자를 실행할 때 전달해야 하는 매개 변수의 형식을 나타냅니다.TArg6은 기본 형식이어야 합니다.</typeparam>
      <typeparam name="TArg7">이 메서드에서 반환한 대리자를 실행할 때 전달해야 하는 매개 변수의 형식을 나타냅니다.TArg7은 기본 형식이어야 합니다.</typeparam>
      <typeparam name="TArg8">이 메서드에서 반환한 대리자를 실행할 때 전달해야 하는 매개 변수의 형식을 나타냅니다.TArg8은 기본 형식이어야 합니다.</typeparam>
      <typeparam name="TResult">
        <see cref="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``10(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9}})" /> 메서드에서 반환한 대리자를 실행하여 반환된 쿼리 결과의 T 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``11(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10}})">
      <summary>컴파일된 LINQ to Entities 쿼리를 나타내는 새 대리자를 만듭니다.</summary>
      <returns>컴파일된 LINQ to Entities 쿼리를 나타내는 제네릭 대리자인 <see cref="T:System.Func`11" />입니다.</returns>
      <param name="query">컴파일할 람다 식입니다.</param>
      <typeparam name="TArg0">
        <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" />에서 파생된 형식입니다.</typeparam>
      <typeparam name="TArg1">이 메서드에서 반환한 대리자를 실행할 때 전달해야 하는 매개 변수의 형식을 나타냅니다.TArg1은 기본 형식이어야 합니다.</typeparam>
      <typeparam name="TArg2">이 메서드에서 반환한 대리자를 실행할 때 전달해야 하는 매개 변수의 형식을 나타냅니다.TArg2는 기본 형식이어야 합니다.</typeparam>
      <typeparam name="TArg3">이 메서드에서 반환한 대리자를 실행할 때 전달해야 하는 매개 변수의 형식을 나타냅니다.TArg3은 기본 형식이어야 합니다.</typeparam>
      <typeparam name="TArg4">이 메서드에서 반환한 대리자를 실행할 때 전달해야 하는 매개 변수의 형식을 나타냅니다.TArg4는 기본 형식이어야 합니다.</typeparam>
      <typeparam name="TArg5">이 메서드에서 반환한 대리자를 실행할 때 전달해야 하는 매개 변수의 형식을 나타냅니다.TArg5는 기본 형식이어야 합니다.</typeparam>
      <typeparam name="TArg6">이 메서드에서 반환한 대리자를 실행할 때 전달해야 하는 매개 변수의 형식을 나타냅니다.TArg6은 기본 형식이어야 합니다.</typeparam>
      <typeparam name="TArg7">이 메서드에서 반환한 대리자를 실행할 때 전달해야 하는 매개 변수의 형식을 나타냅니다.TArg7은 기본 형식이어야 합니다.</typeparam>
      <typeparam name="TArg8">이 메서드에서 반환한 대리자를 실행할 때 전달해야 하는 매개 변수의 형식을 나타냅니다.TArg8은 기본 형식이어야 합니다.</typeparam>
      <typeparam name="TArg9">이 메서드에서 반환한 대리자를 실행할 때 전달해야 하는 매개 변수의 형식을 나타냅니다.TArg9는 기본 형식이어야 합니다.</typeparam>
      <typeparam name="TResult">
        <see cref="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``11(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10}})" /> 메서드에서 반환한 대리자를 실행하여 반환된 쿼리 결과의 T 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``12(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11}})">
      <summary>컴파일된 LINQ to Entities 쿼리를 나타내는 새 대리자를 만듭니다.</summary>
      <returns>컴파일된 LINQ to Entities 쿼리를 나타내는 제네릭 대리자인 <see cref="T:System.Func`12" />입니다.</returns>
      <param name="query">컴파일할 람다 식입니다.</param>
      <typeparam name="TArg0">
        <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" />에서 파생된 형식입니다.</typeparam>
      <typeparam name="TArg1">이 메서드에서 반환한 대리자를 실행할 때 전달해야 하는 매개 변수의 형식을 나타냅니다.TArg1은 기본 형식이어야 합니다.</typeparam>
      <typeparam name="TArg2">이 메서드에서 반환한 대리자를 실행할 때 전달해야 하는 매개 변수의 형식을 나타냅니다.TArg2는 기본 형식이어야 합니다.</typeparam>
      <typeparam name="TArg3">이 메서드에서 반환한 대리자를 실행할 때 전달해야 하는 매개 변수의 형식을 나타냅니다.TArg3은 기본 형식이어야 합니다.</typeparam>
      <typeparam name="TArg4">이 메서드에서 반환한 대리자를 실행할 때 전달해야 하는 매개 변수의 형식을 나타냅니다.TArg4는 기본 형식이어야 합니다.</typeparam>
      <typeparam name="TArg5">이 메서드에서 반환한 대리자를 실행할 때 전달해야 하는 매개 변수의 형식을 나타냅니다.TArg5는 기본 형식이어야 합니다.</typeparam>
      <typeparam name="TArg6">이 메서드에서 반환한 대리자를 실행할 때 전달해야 하는 매개 변수의 형식을 나타냅니다.TArg6은 기본 형식이어야 합니다.</typeparam>
      <typeparam name="TArg7">이 메서드에서 반환한 대리자를 실행할 때 전달해야 하는 매개 변수의 형식을 나타냅니다.TArg7은 기본 형식이어야 합니다.</typeparam>
      <typeparam name="TArg8">이 메서드에서 반환한 대리자를 실행할 때 전달해야 하는 매개 변수의 형식을 나타냅니다.TArg8은 기본 형식이어야 합니다.</typeparam>
      <typeparam name="TArg9">이 메서드에서 반환한 대리자를 실행할 때 전달해야 하는 매개 변수의 형식을 나타냅니다.TArg9는 기본 형식이어야 합니다.</typeparam>
      <typeparam name="TArg10">이 메서드에서 반환한 대리자를 실행할 때 전달해야 하는 매개 변수의 형식을 나타냅니다.TArg10은 기본 형식이어야 합니다.</typeparam>
      <typeparam name="TResult">
        <see cref="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``12(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11}})" /> 메서드에서 반환한 대리자를 실행하여 반환된 쿼리 결과의 T 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``13(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12}})">
      <summary>컴파일된 LINQ to Entities 쿼리를 나타내는 새 대리자를 만듭니다.</summary>
      <returns>컴파일된 LINQ to Entities 쿼리를 나타내는 제네릭 대리자인 <see cref="T:System.Func`13" />입니다.</returns>
      <param name="query">컴파일할 람다 식입니다.</param>
      <typeparam name="TArg0">
        <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" />에서 파생된 형식입니다.</typeparam>
      <typeparam name="TArg1">이 메서드에서 반환한 대리자를 실행할 때 전달해야 하는 매개 변수의 형식을 나타냅니다.TArg1은 기본 형식이어야 합니다.</typeparam>
      <typeparam name="TArg2">이 메서드에서 반환한 대리자를 실행할 때 전달해야 하는 매개 변수의 형식을 나타냅니다.TArg2는 기본 형식이어야 합니다.</typeparam>
      <typeparam name="TArg3">이 메서드에서 반환한 대리자를 실행할 때 전달해야 하는 매개 변수의 형식을 나타냅니다.TArg3은 기본 형식이어야 합니다.</typeparam>
      <typeparam name="TArg4">이 메서드에서 반환한 대리자를 실행할 때 전달해야 하는 매개 변수의 형식을 나타냅니다.TArg4는 기본 형식이어야 합니다.</typeparam>
      <typeparam name="TArg5">이 메서드에서 반환한 대리자를 실행할 때 전달해야 하는 매개 변수의 형식을 나타냅니다.TArg5는 기본 형식이어야 합니다.</typeparam>
      <typeparam name="TArg6">이 메서드에서 반환한 대리자를 실행할 때 전달해야 하는 매개 변수의 형식을 나타냅니다.TArg6은 기본 형식이어야 합니다.</typeparam>
      <typeparam name="TArg7">이 메서드에서 반환한 대리자를 실행할 때 전달해야 하는 매개 변수의 형식을 나타냅니다.TArg7은 기본 형식이어야 합니다.</typeparam>
      <typeparam name="TArg8">이 메서드에서 반환한 대리자를 실행할 때 전달해야 하는 매개 변수의 형식을 나타냅니다.TArg8은 기본 형식이어야 합니다.</typeparam>
      <typeparam name="TArg9">이 메서드에서 반환한 대리자를 실행할 때 전달해야 하는 매개 변수의 형식을 나타냅니다.TArg9는 기본 형식이어야 합니다.</typeparam>
      <typeparam name="TArg10">이 메서드에서 반환한 대리자를 실행할 때 전달해야 하는 매개 변수의 형식을 나타냅니다.TArg10은 기본 형식이어야 합니다.</typeparam>
      <typeparam name="TArg11">이 메서드에서 반환한 대리자를 실행할 때 전달해야 하는 매개 변수의 형식을 나타냅니다.TArg11은 기본 형식이어야 합니다.</typeparam>
      <typeparam name="TResult">
        <see cref="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``13(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12}})" /> 메서드에서 반환한 대리자를 실행하여 반환된 쿼리 결과의 T 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``14(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13}})">
      <summary>컴파일된 LINQ to Entities 쿼리를 나타내는 새 대리자를 만듭니다.</summary>
      <returns>컴파일된 LINQ to Entities 쿼리를 나타내는 제네릭 대리자인 <see cref="T:System.Func`14" />입니다.</returns>
      <param name="query">컴파일할 람다 식입니다.</param>
      <typeparam name="TArg0">
        <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" />에서 파생된 형식입니다.</typeparam>
      <typeparam name="TArg1">이 메서드에서 반환한 대리자를 실행할 때 전달해야 하는 매개 변수의 형식을 나타냅니다.TArg1은 기본 형식이어야 합니다.</typeparam>
      <typeparam name="TArg2">이 메서드에서 반환한 대리자를 실행할 때 전달해야 하는 매개 변수의 형식을 나타냅니다.TArg2는 기본 형식이어야 합니다.</typeparam>
      <typeparam name="TArg3">이 메서드에서 반환한 대리자를 실행할 때 전달해야 하는 매개 변수의 형식을 나타냅니다.TArg3은 기본 형식이어야 합니다.</typeparam>
      <typeparam name="TArg4">이 메서드에서 반환한 대리자를 실행할 때 전달해야 하는 매개 변수의 형식을 나타냅니다.TArg4는 기본 형식이어야 합니다.</typeparam>
      <typeparam name="TArg5">이 메서드에서 반환한 대리자를 실행할 때 전달해야 하는 매개 변수의 형식을 나타냅니다.TArg5는 기본 형식이어야 합니다.</typeparam>
      <typeparam name="TArg6">이 메서드에서 반환한 대리자를 실행할 때 전달해야 하는 매개 변수의 형식을 나타냅니다.TArg6은 기본 형식이어야 합니다.</typeparam>
      <typeparam name="TArg7">이 메서드에서 반환한 대리자를 실행할 때 전달해야 하는 매개 변수의 형식을 나타냅니다.TArg7은 기본 형식이어야 합니다.</typeparam>
      <typeparam name="TArg8">이 메서드에서 반환한 대리자를 실행할 때 전달해야 하는 매개 변수의 형식을 나타냅니다.TArg8은 기본 형식이어야 합니다.</typeparam>
      <typeparam name="TArg9">이 메서드에서 반환한 대리자를 실행할 때 전달해야 하는 매개 변수의 형식을 나타냅니다.TArg9는 기본 형식이어야 합니다.</typeparam>
      <typeparam name="TArg10">이 메서드에서 반환한 대리자를 실행할 때 전달해야 하는 매개 변수의 형식을 나타냅니다.TArg10은 기본 형식이어야 합니다.</typeparam>
      <typeparam name="TArg11">이 메서드에서 반환한 대리자를 실행할 때 전달해야 하는 매개 변수의 형식을 나타냅니다.TArg11은 기본 형식이어야 합니다.</typeparam>
      <typeparam name="TArg12">이 메서드에서 반환한 대리자를 실행할 때 전달해야 하는 매개 변수의 형식을 나타냅니다.TArg12는 기본 형식이어야 합니다.</typeparam>
      <typeparam name="TResult">
        <see cref="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``14(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13}})" /> 메서드에서 반환한 대리자를 실행하여 반환된 쿼리 결과의 T 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``15(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14}})">
      <summary>컴파일된 LINQ to Entities 쿼리를 나타내는 새 대리자를 만듭니다.</summary>
      <returns>컴파일된 LINQ to Entities 쿼리를 나타내는 제네릭 대리자인 <see cref="T:System.Func`15" />입니다.</returns>
      <param name="query">컴파일할 람다 식입니다.</param>
      <typeparam name="TArg0">
        <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" />에서 파생된 형식입니다.</typeparam>
      <typeparam name="TArg1">이 메서드에서 반환한 대리자를 실행할 때 전달해야 하는 매개 변수의 형식을 나타냅니다.TArg1은 기본 형식이어야 합니다.</typeparam>
      <typeparam name="TArg2">이 메서드에서 반환한 대리자를 실행할 때 전달해야 하는 매개 변수의 형식을 나타냅니다.TArg2는 기본 형식이어야 합니다.</typeparam>
      <typeparam name="TArg3">이 메서드에서 반환한 대리자를 실행할 때 전달해야 하는 매개 변수의 형식을 나타냅니다.TArg3은 기본 형식이어야 합니다.</typeparam>
      <typeparam name="TArg4">이 메서드에서 반환한 대리자를 실행할 때 전달해야 하는 매개 변수의 형식을 나타냅니다.TArg4는 기본 형식이어야 합니다.</typeparam>
      <typeparam name="TArg5">이 메서드에서 반환한 대리자를 실행할 때 전달해야 하는 매개 변수의 형식을 나타냅니다.TArg5는 기본 형식이어야 합니다.</typeparam>
      <typeparam name="TArg6">이 메서드에서 반환한 대리자를 실행할 때 전달해야 하는 매개 변수의 형식을 나타냅니다.TArg6은 기본 형식이어야 합니다.</typeparam>
      <typeparam name="TArg7">이 메서드에서 반환한 대리자를 실행할 때 전달해야 하는 매개 변수의 형식을 나타냅니다.TArg7은 기본 형식이어야 합니다.</typeparam>
      <typeparam name="TArg8">이 메서드에서 반환한 대리자를 실행할 때 전달해야 하는 매개 변수의 형식을 나타냅니다.TArg8은 기본 형식이어야 합니다.</typeparam>
      <typeparam name="TArg9">이 메서드에서 반환한 대리자를 실행할 때 전달해야 하는 매개 변수의 형식을 나타냅니다.TArg9는 기본 형식이어야 합니다.</typeparam>
      <typeparam name="TArg10">이 메서드에서 반환한 대리자를 실행할 때 전달해야 하는 매개 변수의 형식을 나타냅니다.TArg10은 기본 형식이어야 합니다.</typeparam>
      <typeparam name="TArg11">이 메서드에서 반환한 대리자를 실행할 때 전달해야 하는 매개 변수의 형식을 나타냅니다.TArg11은 기본 형식이어야 합니다.</typeparam>
      <typeparam name="TArg12">이 메서드에서 반환한 대리자를 실행할 때 전달해야 하는 매개 변수의 형식을 나타냅니다.TArg12는 기본 형식이어야 합니다.</typeparam>
      <typeparam name="TArg13">이 메서드에서 반환한 대리자를 실행할 때 전달해야 하는 매개 변수의 형식을 나타냅니다.TArg13은 기본 형식이어야 합니다.</typeparam>
      <typeparam name="TResult">
        <see cref="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``15(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14}})" /> 메서드에서 반환한 대리자를 실행하여 반환된 쿼리 결과의 T 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``16(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15}})">
      <summary>컴파일된 LINQ to Entities 쿼리를 나타내는 새 대리자를 만듭니다.</summary>
      <returns>컴파일된 LINQ to Entities 쿼리를 나타내는 제네릭 대리자인 <see cref="T:System.Func`16" />입니다.</returns>
      <param name="query">컴파일할 람다 식입니다.</param>
      <typeparam name="TArg0">
        <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" />에서 파생된 형식입니다.</typeparam>
      <typeparam name="TArg1">이 메서드에서 반환한 대리자를 실행할 때 전달해야 하는 매개 변수의 형식을 나타냅니다.TArg1은 기본 형식이어야 합니다.</typeparam>
      <typeparam name="TArg2">이 메서드에서 반환한 대리자를 실행할 때 전달해야 하는 매개 변수의 형식을 나타냅니다.TArg2는 기본 형식이어야 합니다.</typeparam>
      <typeparam name="TArg3">이 메서드에서 반환한 대리자를 실행할 때 전달해야 하는 매개 변수의 형식을 나타냅니다.TArg3은 기본 형식이어야 합니다.</typeparam>
      <typeparam name="TArg4">이 메서드에서 반환한 대리자를 실행할 때 전달해야 하는 매개 변수의 형식을 나타냅니다.TArg4는 기본 형식이어야 합니다.</typeparam>
      <typeparam name="TArg5">이 메서드에서 반환한 대리자를 실행할 때 전달해야 하는 매개 변수의 형식을 나타냅니다.TArg5는 기본 형식이어야 합니다.</typeparam>
      <typeparam name="TArg6">이 메서드에서 반환한 대리자를 실행할 때 전달해야 하는 매개 변수의 형식을 나타냅니다.TArg6은 기본 형식이어야 합니다.</typeparam>
      <typeparam name="TArg7">이 메서드에서 반환한 대리자를 실행할 때 전달해야 하는 매개 변수의 형식을 나타냅니다.TArg7은 기본 형식이어야 합니다.</typeparam>
      <typeparam name="TArg8">이 메서드에서 반환한 대리자를 실행할 때 전달해야 하는 매개 변수의 형식을 나타냅니다.TArg8은 기본 형식이어야 합니다.</typeparam>
      <typeparam name="TArg9">이 메서드에서 반환한 대리자를 실행할 때 전달해야 하는 매개 변수의 형식을 나타냅니다.TArg9는 기본 형식이어야 합니다.</typeparam>
      <typeparam name="TArg10">이 메서드에서 반환한 대리자를 실행할 때 전달해야 하는 매개 변수의 형식을 나타냅니다.TArg10은 기본 형식이어야 합니다.</typeparam>
      <typeparam name="TArg11">이 메서드에서 반환한 대리자를 실행할 때 전달해야 하는 매개 변수의 형식을 나타냅니다.TArg11은 기본 형식이어야 합니다.</typeparam>
      <typeparam name="TArg12">이 메서드에서 반환한 대리자를 실행할 때 전달해야 하는 매개 변수의 형식을 나타냅니다.TArg12는 기본 형식이어야 합니다.</typeparam>
      <typeparam name="TArg13">이 메서드에서 반환한 대리자를 실행할 때 전달해야 하는 매개 변수의 형식을 나타냅니다.TArg13은 기본 형식이어야 합니다.</typeparam>
      <typeparam name="TArg14">이 메서드에서 반환한 대리자를 실행할 때 전달해야 하는 매개 변수의 형식을 나타냅니다.TArg14는 기본 형식이어야 합니다.</typeparam>
      <typeparam name="TResult">
        <see cref="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``16(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15}})" /> 메서드에서 반환한 대리자를 실행하여 반환된 쿼리 결과의 T 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``17(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16}})">
      <summary>컴파일된 LINQ to Entities 쿼리를 나타내는 새 대리자를 만듭니다.</summary>
      <returns>컴파일된 LINQ to Entities 쿼리를 나타내는 제네릭 대리자인 <see cref="T:System.Func`17" />입니다.</returns>
      <param name="query">컴파일할 람다 식입니다.</param>
      <typeparam name="TArg0">
        <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" />에서 파생된 형식입니다.</typeparam>
      <typeparam name="TArg1">이 메서드에서 반환한 대리자를 실행할 때 전달해야 하는 매개 변수의 형식을 나타냅니다.TArg1은 기본 형식이어야 합니다.</typeparam>
      <typeparam name="TArg2">이 메서드에서 반환한 대리자를 실행할 때 전달해야 하는 매개 변수의 형식을 나타냅니다.TArg2는 기본 형식이어야 합니다.</typeparam>
      <typeparam name="TArg3">이 메서드에서 반환한 대리자를 실행할 때 전달해야 하는 매개 변수의 형식을 나타냅니다.TArg3은 기본 형식이어야 합니다.</typeparam>
      <typeparam name="TArg4">이 메서드에서 반환한 대리자를 실행할 때 전달해야 하는 매개 변수의 형식을 나타냅니다.TArg4는 기본 형식이어야 합니다.</typeparam>
      <typeparam name="TArg5">이 메서드에서 반환한 대리자를 실행할 때 전달해야 하는 매개 변수의 형식을 나타냅니다.TArg5는 기본 형식이어야 합니다.</typeparam>
      <typeparam name="TArg6">이 메서드에서 반환한 대리자를 실행할 때 전달해야 하는 매개 변수의 형식을 나타냅니다.TArg6은 기본 형식이어야 합니다.</typeparam>
      <typeparam name="TArg7">이 메서드에서 반환한 대리자를 실행할 때 전달해야 하는 매개 변수의 형식을 나타냅니다.TArg7은 기본 형식이어야 합니다.</typeparam>
      <typeparam name="TArg8">이 메서드에서 반환한 대리자를 실행할 때 전달해야 하는 매개 변수의 형식을 나타냅니다.TArg8은 기본 형식이어야 합니다.</typeparam>
      <typeparam name="TArg9">이 메서드에서 반환한 대리자를 실행할 때 전달해야 하는 매개 변수의 형식을 나타냅니다.TArg9는 기본 형식이어야 합니다.</typeparam>
      <typeparam name="TArg10">이 메서드에서 반환한 대리자를 실행할 때 전달해야 하는 매개 변수의 형식을 나타냅니다.TArg10은 기본 형식이어야 합니다.</typeparam>
      <typeparam name="TArg11">이 메서드에서 반환한 대리자를 실행할 때 전달해야 하는 매개 변수의 형식을 나타냅니다.TArg11은 기본 형식이어야 합니다.</typeparam>
      <typeparam name="TArg12">이 메서드에서 반환한 대리자를 실행할 때 전달해야 하는 매개 변수의 형식을 나타냅니다.TArg12는 기본 형식이어야 합니다.</typeparam>
      <typeparam name="TArg13">이 메서드에서 반환한 대리자를 실행할 때 전달해야 하는 매개 변수의 형식을 나타냅니다.TArg13은 기본 형식이어야 합니다.</typeparam>
      <typeparam name="TArg14">이 메서드에서 반환한 대리자를 실행할 때 전달해야 하는 매개 변수의 형식을 나타냅니다.TArg14는 기본 형식이어야 합니다.</typeparam>
      <typeparam name="TArg15">이 메서드에서 반환한 대리자를 실행할 때 전달해야 하는 매개 변수의 형식을 나타냅니다.TArg15는 기본 형식이어야 합니다.</typeparam>
      <typeparam name="TResult">
        <see cref="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``17(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16}})" /> 메서드에서 반환한 대리자를 실행하여 반환된 쿼리 결과의 T 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>컴파일된 LINQ to Entities 쿼리를 나타내는 새 대리자를 만듭니다.</summary>
      <returns>컴파일된 LINQ to Entities 쿼리를 나타내는 제네릭 대리자인 <see cref="T:System.Func`2" />입니다.</returns>
      <param name="query">컴파일할 람다 식입니다.</param>
      <typeparam name="TArg0">
        <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" />에서 파생된 형식입니다.</typeparam>
      <typeparam name="TResult">
        <see cref="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> 메서드에서 반환한 대리자를 실행하여 반환된 쿼리 결과의 T 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``3(System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
      <summary>컴파일된 LINQ to Entities 쿼리를 나타내는 새 대리자를 만듭니다.</summary>
      <returns>컴파일된 LINQ to Entities 쿼리를 나타내는 제네릭 대리자인 <see cref="T:System.Func`3" />입니다.</returns>
      <param name="query">컴파일할 람다 식입니다.</param>
      <typeparam name="TArg0">
        <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" />에서 파생된 형식입니다.</typeparam>
      <typeparam name="TArg1">이 메서드에서 반환한 대리자를 실행할 때 전달해야 하는 매개 변수의 형식을 나타냅니다.TArg1은 기본 형식이어야 합니다.</typeparam>
      <typeparam name="TResult">
        <see cref="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``3(System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})" /> 메서드에서 반환한 대리자를 실행하여 반환된 쿼리 결과의 T 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``4(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3}})">
      <summary>컴파일된 LINQ to Entities 쿼리를 나타내는 새 대리자를 만듭니다.</summary>
      <returns>컴파일된 LINQ to Entities 쿼리를 나타내는 제네릭 대리자인 <see cref="T:System.Func`4" />입니다.</returns>
      <param name="query">컴파일할 람다 식입니다.</param>
      <typeparam name="TArg0">
        <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" />에서 파생된 형식입니다.</typeparam>
      <typeparam name="TArg1">이 메서드에서 반환한 대리자를 실행할 때 전달해야 하는 매개 변수의 형식을 나타냅니다.TArg1은 기본 형식이어야 합니다.</typeparam>
      <typeparam name="TArg2">이 메서드에서 반환한 대리자를 실행할 때 전달해야 하는 매개 변수의 형식을 나타냅니다.TArg2는 기본 형식이어야 합니다.</typeparam>
      <typeparam name="TResult">
        <see cref="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``4(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3}})" /> 메서드에서 반환한 대리자를 실행하여 반환된 쿼리 결과의 T 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``5(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4}})">
      <summary>컴파일된 LINQ to Entities 쿼리를 나타내는 새 대리자를 만듭니다.</summary>
      <returns>컴파일된 LINQ to Entities 쿼리를 나타내는 제네릭 대리자인 <see cref="T:System.Func`5" />입니다.</returns>
      <param name="query">컴파일할 람다 식입니다.</param>
      <typeparam name="TArg0">
        <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" />에서 파생된 형식입니다.</typeparam>
      <typeparam name="TArg1">이 메서드에서 반환한 대리자를 실행할 때 전달해야 하는 매개 변수의 형식을 나타냅니다.TArg1은 기본 형식이어야 합니다.</typeparam>
      <typeparam name="TArg2">이 메서드에서 반환한 대리자를 실행할 때 전달해야 하는 매개 변수의 형식을 나타냅니다.TArg2는 기본 형식이어야 합니다.</typeparam>
      <typeparam name="TArg3">이 메서드에서 반환한 대리자를 실행할 때 전달해야 하는 매개 변수의 형식을 나타냅니다.TArg3은 기본 형식이어야 합니다.</typeparam>
      <typeparam name="TResult">
        <see cref="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``5(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4}})" /> 메서드에서 반환한 대리자를 실행하여 반환된 쿼리 결과의 T 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``6(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5}})">
      <summary>컴파일된 LINQ to Entities 쿼리를 나타내는 새 대리자를 만듭니다.</summary>
      <returns>컴파일된 LINQ to Entities 쿼리를 나타내는 제네릭 대리자인 <see cref="T:System.Func`6" />입니다.</returns>
      <param name="query">컴파일할 람다 식입니다.</param>
      <typeparam name="TArg0">
        <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" />에서 파생된 형식입니다.</typeparam>
      <typeparam name="TArg1">이 메서드에서 반환한 대리자를 실행할 때 전달해야 하는 매개 변수의 형식을 나타냅니다.TArg1은 기본 형식이어야 합니다.</typeparam>
      <typeparam name="TArg2">이 메서드에서 반환한 대리자를 실행할 때 전달해야 하는 매개 변수의 형식을 나타냅니다.TArg2는 기본 형식이어야 합니다.</typeparam>
      <typeparam name="TArg3">이 메서드에서 반환한 대리자를 실행할 때 전달해야 하는 매개 변수의 형식을 나타냅니다.TArg3은 기본 형식이어야 합니다.</typeparam>
      <typeparam name="TArg4">이 메서드에서 반환한 대리자를 실행할 때 전달해야 하는 매개 변수의 형식을 나타냅니다.TArg4는 기본 형식이어야 합니다.</typeparam>
      <typeparam name="TResult">
        <see cref="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``6(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5}})" /> 메서드에서 반환한 대리자를 실행하여 반환된 쿼리 결과의 T 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``7(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6}})">
      <summary>컴파일된 LINQ to Entities 쿼리를 나타내는 새 대리자를 만듭니다.</summary>
      <returns>컴파일된 LINQ to Entities 쿼리를 나타내는 제네릭 대리자인 <see cref="T:System.Func`7" />입니다.</returns>
      <param name="query">컴파일할 람다 식입니다.</param>
      <typeparam name="TArg0">
        <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" />에서 파생된 형식입니다.</typeparam>
      <typeparam name="TArg1">이 메서드에서 반환한 대리자를 실행할 때 전달해야 하는 매개 변수의 형식을 나타냅니다.TArg1은 기본 형식이어야 합니다.</typeparam>
      <typeparam name="TArg2">이 메서드에서 반환한 대리자를 실행할 때 전달해야 하는 매개 변수의 형식을 나타냅니다.TArg2는 기본 형식이어야 합니다.</typeparam>
      <typeparam name="TArg3">이 메서드에서 반환한 대리자를 실행할 때 전달해야 하는 매개 변수의 형식을 나타냅니다.TArg3은 기본 형식이어야 합니다.</typeparam>
      <typeparam name="TArg4">이 메서드에서 반환한 대리자를 실행할 때 전달해야 하는 매개 변수의 형식을 나타냅니다.TArg4는 기본 형식이어야 합니다.</typeparam>
      <typeparam name="TArg5">이 메서드에서 반환한 대리자를 실행할 때 전달해야 하는 매개 변수의 형식을 나타냅니다.TArg5는 기본 형식이어야 합니다.</typeparam>
      <typeparam name="TResult">
        <see cref="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``7(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6}})" /> 메서드에서 반환한 대리자를 실행하여 반환된 쿼리 결과의 T 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``8(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7}})">
      <summary>컴파일된 LINQ to Entities 쿼리를 나타내는 새 대리자를 만듭니다.</summary>
      <returns>컴파일된 LINQ to Entities 쿼리를 나타내는 제네릭 대리자인 <see cref="T:System.Func`8" />입니다.</returns>
      <param name="query">컴파일할 람다 식입니다.</param>
      <typeparam name="TArg0">
        <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" />에서 파생된 형식입니다.</typeparam>
      <typeparam name="TArg1">이 메서드에서 반환한 대리자를 실행할 때 전달해야 하는 매개 변수의 형식을 나타냅니다.TArg1은 기본 형식이어야 합니다.</typeparam>
      <typeparam name="TArg2">이 메서드에서 반환한 대리자를 실행할 때 전달해야 하는 매개 변수의 형식을 나타냅니다.TArg2는 기본 형식이어야 합니다.</typeparam>
      <typeparam name="TArg3">이 메서드에서 반환한 대리자를 실행할 때 전달해야 하는 매개 변수의 형식을 나타냅니다.TArg3은 기본 형식이어야 합니다.</typeparam>
      <typeparam name="TArg4">이 메서드에서 반환한 대리자를 실행할 때 전달해야 하는 매개 변수의 형식을 나타냅니다.TArg4는 기본 형식이어야 합니다.</typeparam>
      <typeparam name="TArg5">이 메서드에서 반환한 대리자를 실행할 때 전달해야 하는 매개 변수의 형식을 나타냅니다.TArg5는 기본 형식이어야 합니다.</typeparam>
      <typeparam name="TArg6">이 메서드에서 반환한 대리자를 실행할 때 전달해야 하는 매개 변수의 형식을 나타냅니다.TArg6은 기본 형식이어야 합니다.</typeparam>
      <typeparam name="TResult">
        <see cref="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``8(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7}})" /> 메서드에서 반환한 대리자를 실행하여 반환된 쿼리 결과의 T 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``9(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8}})">
      <summary>컴파일된 LINQ to Entities 쿼리를 나타내는 새 대리자를 만듭니다.</summary>
      <returns>컴파일된 LINQ to Entities 쿼리를 나타내는 제네릭 대리자인 <see cref="T:System.Func`9" />입니다.</returns>
      <param name="query">컴파일할 람다 식입니다.</param>
      <typeparam name="TArg0">
        <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" />에서 파생된 형식입니다.</typeparam>
      <typeparam name="TArg1">이 메서드에서 반환한 대리자를 실행할 때 전달해야 하는 매개 변수의 형식을 나타냅니다.TArg1은 기본 형식이어야 합니다.</typeparam>
      <typeparam name="TArg2">이 메서드에서 반환한 대리자를 실행할 때 전달해야 하는 매개 변수의 형식을 나타냅니다.TArg2는 기본 형식이어야 합니다.</typeparam>
      <typeparam name="TArg3">이 메서드에서 반환한 대리자를 실행할 때 전달해야 하는 매개 변수의 형식을 나타냅니다.TArg3은 기본 형식이어야 합니다.</typeparam>
      <typeparam name="TArg4">이 메서드에서 반환한 대리자를 실행할 때 전달해야 하는 매개 변수의 형식을 나타냅니다.TArg4는 기본 형식이어야 합니다.</typeparam>
      <typeparam name="TArg5">이 메서드에서 반환한 대리자를 실행할 때 전달해야 하는 매개 변수의 형식을 나타냅니다.TArg5는 기본 형식이어야 합니다.</typeparam>
      <typeparam name="TArg6">이 메서드에서 반환한 대리자를 실행할 때 전달해야 하는 매개 변수의 형식을 나타냅니다.TArg6은 기본 형식이어야 합니다.</typeparam>
      <typeparam name="TArg7">이 메서드에서 반환한 대리자를 실행할 때 전달해야 하는 매개 변수의 형식을 나타냅니다.TArg7은 기본 형식이어야 합니다.</typeparam>
      <typeparam name="TResult">
        <see cref="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``9(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8}})" /> 메서드에서 반환한 대리자를 실행하여 반환된 쿼리 결과의 T 형식입니다.</typeparam>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.CurrentValueRecord">
      <summary>엔터티의 속성에 현재 할당된 값입니다.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.DbUpdatableDataRecord">
      <summary>개체 데이터의 원래 값에 액세스할 수 있도록 합니다.DbUpdatableDataRecord는 개체의 원래 값을 업데이트할 수 있는 메서드를 구현합니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.DataRecordInfo">
      <summary>데이터 레코드 정보를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Common.DataRecordInfo" /> 개체입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.FieldCount">
      <summary>레코드의 필드 수를 가져옵니다.</summary>
      <returns>필드 수인 정수 값입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetBoolean(System.Int32)">
      <summary>필드 값을 Boolean로 검색합니다.</summary>
      <returns>Boolean로 필드 값입니다.</returns>
      <param name="i">@FSHO2@필드 서수입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetByte(System.Int32)">
      <summary>필드 값을 byte로 검색합니다.</summary>
      <returns>byte로 필드 값입니다.</returns>
      <param name="i">@FSHO2@필드 서수입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)">
      <summary>필드 값을 바이트 배열로 검색합니다.</summary>
      <returns>복사한 바이트 수입니다.</returns>
      <param name="i">@FSHO2@필드 서수입니다.</param>
      <param name="dataIndex">데이터 복사를 시작할 인덱스입니다.</param>
      <param name="buffer">데이터를 복사할 대상 버퍼입니다.</param>
      <param name="bufferIndex">복사를 시작할 대상 버퍼의 인덱스입니다.</param>
      <param name="length">복사할 바이트 수입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetChar(System.Int32)">
      <summary>필드 값을 char로 검색합니다.</summary>
      <returns>char로 필드 값입니다.</returns>
      <param name="i">@FSHO2@필드 서수입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)">
      <summary>필드 값을 char 배열로 검색합니다.</summary>
      <returns>복사한 문자 수입니다.</returns>
      <param name="i">@FSHO2@필드 서수입니다.</param>
      <param name="dataIndex">데이터 복사를 시작할 인덱스입니다.</param>
      <param name="buffer">데이터를 복사할 대상 버퍼입니다.</param>
      <param name="bufferIndex">복사를 시작할 대상 버퍼의 인덱스입니다.</param>
      <param name="length">복사할 문자 수입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetDataReader(System.Int32)">
      <summary>필드 값을 <see cref="T:System.Common.DbDataReader" />으로 검색합니다.</summary>
      <returns>
        <see cref="T:System.Data.Common.DbDataReader" />로 필드 값입니다.</returns>
      <param name="i">@FSHO2@필드 서수입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetDataRecord(System.Int32)">
      <summary>필드 값을 <see cref="T:System.Data.Common.DbDataRecord" />로 검색합니다.</summary>
      <returns>
        <see cref="T:System.Data.Common.DbDataRecord" />로 필드 값입니다.</returns>
      <param name="i">@FSHO2@필드 서수입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetDataTypeName(System.Int32)">
      <summary>필드 데이터 형식의 이름을 검색합니다.</summary>
      <returns>필드 데이터 형식의 이름입니다.</returns>
      <param name="i">@FSHO2@필드 서수입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetDateTime(System.Int32)">
      <summary>필드 값을 <see cref="T:System.DateTime" />으로 검색합니다.</summary>
      <returns>
        <see cref="T:System.DateTime" />로 필드 값입니다.</returns>
      <param name="i">@FSHO2@필드 서수입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetDbDataReader(System.Int32)">
      <summary>필드 값을 <see cref="T:System.Common.DbDataReader" />으로 검색합니다.</summary>
      <returns>
        <see cref="T:System.Data.Common.DbDataReader" />로 필드 값입니다.</returns>
      <param name="i">@FSHO2@필드 서수입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetDecimal(System.Int32)">
      <summary>필드 값을 decimal로 검색합니다.</summary>
      <returns>decimal로 필드 값입니다.</returns>
      <param name="i">@FSHO2@필드 서수입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetDouble(System.Int32)">
      <summary>필드 값을 double로 검색합니다.</summary>
      <returns>double로 필드 값입니다.</returns>
      <param name="i">@FSHO2@필드 서수입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetFieldType(System.Int32)">
      <summary>필드 형식을 검색합니다.</summary>
      <returns>필드 형식입니다.</returns>
      <param name="i">@FSHO2@필드 서수입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetFloat(System.Int32)">
      <summary>필드 값을 float으로 검색합니다.</summary>
      <returns>float으로 필드 값입니다.</returns>
      <param name="i">@FSHO2@필드 서수입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetGuid(System.Int32)">
      <summary>필드 값을 <see cref="T:System.Guid" />으로 검색합니다.</summary>
      <returns>
        <see cref="T:System.Guid" />로 필드 값입니다.</returns>
      <param name="i">@FSHO2@필드 서수입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetInt16(System.Int32)">
      <summary>필드 값을 <see cref="T:System.Int16" />로 검색합니다.</summary>
      <returns>
        <see cref="T:System.Int16" />로 필드 값입니다.</returns>
      <param name="i">@FSHO2@필드 서수입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetInt32(System.Int32)">
      <summary>필드 값을 <see cref="T:System.Int32" />로 검색합니다.</summary>
      <returns>
        <see cref="T:System.Int32" />로 필드 값입니다.</returns>
      <param name="i">@FSHO2@필드 서수입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetInt64(System.Int32)">
      <summary>필드 값을 <see cref="T:System.Int64" />로 검색합니다.</summary>
      <returns>
        <see cref="T:System.Int64" />로 필드 값입니다.</returns>
      <param name="i">@FSHO2@필드 서수입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetName(System.Int32)">
      <summary>필드 이름을 검색합니다.</summary>
      <returns>필드의 이름입니다.</returns>
      <param name="i">@FSHO2@필드 서수입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetOrdinal(System.String)">
      <summary>필드 이름을 사용하여 필드 서수를 검색합니다.</summary>
      <returns>@FSHO2@필드 서수입니다.</returns>
      <param name="name">필드의 이름입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetRecordValue(System.Int32)">
      <summary>필드 값을 검색합니다.</summary>
      <returns>필드 값입니다.</returns>
      <param name="ordinal">@FSHO2@필드 서수입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetString(System.Int32)">
      <summary>필드 값을 문자열로 검색합니다.</summary>
      <returns>필드 값입니다.</returns>
      <param name="i">@FSHO2@필드 서수입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetValue(System.Int32)">
      <summary>필드 값을 검색합니다.</summary>
      <returns>필드 값입니다.</returns>
      <param name="i">@FSHO2@필드 서수입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetValues(System.Object[])">
      <summary>현재 레코드의 필드 값으로 개체 배열을 채웁니다.</summary>
      <returns>반환된 필드 값의 수입니다.</returns>
      <param name="values">필드 값을 저장할 개체 배열입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.IsDBNull(System.Int32)">
      <summary>지정된 필드가 <see cref="T:System.DBNull" />로 설정되었는지 여부를 반환합니다.</summary>
      <returns>필드가 <see cref="T:System.DBNull" />로 설정되어 있으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="i">@FSHO2@필드 서수입니다.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.Item(System.Int32)">
      <summary>지정된 필드 서수를 가진 값을 반환합니다.</summary>
      <returns>지정된 필드 서수를 가진 값입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.Item(System.String)">
      <summary>지정된 필드 이름을 가진 값을 가져옵니다.</summary>
      <returns>필드 값입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.SetBoolean(System.Int32,System.Boolean)">
      <summary>@FSHO2@레코드에 필드의 값을 설정합니다.</summary>
      <param name="ordinal">@FSHO2@필드 서수입니다.</param>
      <param name="value">필드의 값입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.SetByte(System.Int32,System.Byte)">
      <summary>@FSHO2@레코드에 필드의 값을 설정합니다.</summary>
      <param name="ordinal">@FSHO2@필드 서수입니다.</param>
      <param name="value">필드의 값입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.SetChar(System.Int32,System.Char)">
      <summary>@FSHO2@레코드에 필드의 값을 설정합니다.</summary>
      <param name="ordinal">@FSHO2@필드 서수입니다.</param>
      <param name="value">필드의 값입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.SetDataRecord(System.Int32,System.Data.IDataRecord)">
      <summary>@FSHO2@레코드에 필드의 값을 설정합니다.</summary>
      <param name="ordinal">@FSHO2@필드 서수입니다.</param>
      <param name="value">필드의 값입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.SetDateTime(System.Int32,System.DateTime)">
      <summary>@FSHO2@레코드에 필드의 값을 설정합니다.</summary>
      <param name="ordinal">@FSHO2@필드 서수입니다.</param>
      <param name="value">필드의 값입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.SetDBNull(System.Int32)">
      <summary>필드를 <see cref="T:System.DBNull" /> 값으로 설정합니다.</summary>
      <param name="ordinal">@FSHO2@필드 서수입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.SetDecimal(System.Int32,System.Decimal)">
      <summary>@FSHO2@레코드에 필드의 값을 설정합니다.</summary>
      <param name="ordinal">@FSHO2@필드 서수입니다.</param>
      <param name="value">필드의 값입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.SetDouble(System.Int32,System.Double)">
      <summary>@FSHO2@레코드에 필드의 값을 설정합니다.</summary>
      <param name="ordinal">@FSHO2@필드 서수입니다.</param>
      <param name="value">필드의 값입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.SetFloat(System.Int32,System.Single)">
      <summary>@FSHO2@레코드에 필드의 값을 설정합니다.</summary>
      <param name="ordinal">@FSHO2@필드 서수입니다.</param>
      <param name="value">필드의 값입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.SetGuid(System.Int32,System.Guid)">
      <summary>@FSHO2@레코드에 필드의 값을 설정합니다.</summary>
      <param name="ordinal">@FSHO2@필드 서수입니다.</param>
      <param name="value">필드의 값입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.SetInt16(System.Int32,System.Int16)">
      <summary>@FSHO2@레코드에 필드의 값을 설정합니다.</summary>
      <param name="ordinal">@FSHO2@필드 서수입니다.</param>
      <param name="value">필드의 값입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.SetInt32(System.Int32,System.Int32)">
      <summary>@FSHO2@레코드에 필드의 값을 설정합니다.</summary>
      <param name="ordinal">@FSHO2@필드 서수입니다.</param>
      <param name="value">필드의 값입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.SetInt64(System.Int32,System.Int64)">
      <summary>@FSHO2@레코드에 필드의 값을 설정합니다.</summary>
      <param name="ordinal">@FSHO2@필드 서수입니다.</param>
      <param name="value">필드의 값입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.SetRecordValue(System.Int32,System.Object)">
      <summary>@FSHO2@레코드에 필드의 값을 설정합니다.</summary>
      <param name="ordinal">@FSHO2@필드 서수입니다.</param>
      <param name="value">필드의 값입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.SetString(System.Int32,System.String)">
      <summary>@FSHO2@레코드에 필드의 값을 설정합니다.</summary>
      <param name="ordinal">@FSHO2@필드 서수입니다.</param>
      <param name="value">필드의 값입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.SetValue(System.Int32,System.Object)">
      <summary>@FSHO2@레코드에 필드의 값을 설정합니다.</summary>
      <param name="ordinal">@FSHO2@필드 서수입니다.</param>
      <param name="value">필드의 값입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.SetValues(System.Object[])">
      <summary>레코드에 필드의 값을 설정합니다.</summary>
      <returns>설정된 필드 수입니다.</returns>
      <param name="values">필드의 값입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.System#Data#IDataRecord#GetData(System.Int32)">
      <summary>필드 값을 <see cref="T:System.Data.IDataReader" />로 검색합니다.</summary>
      <returns>
        <see cref="T:System.Data.IDataReader" />로 필드 값입니다.</returns>
      <param name="ordinal">@FSHO2@필드 서수입니다.</param>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.EntityFunctions">
      <summary>
        <see cref="T:System.Data.Entity.DbContext" /> 또는 <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> LINQ to Entities 쿼리에서 사용하기 위한 EDM 정식 함수를 노출하는 CLR(공용 언어 런타임) 메서드를 제공합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddDays(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
      <summary>이 메서드는 LINQ to Entities 쿼리의 일부로 사용되는 경우 AddDays EDM 정식 함수를 호출하여 지정된 일 수를 날짜/시간에 더합니다.</summary>
      <returns>결과 날짜/시간입니다.</returns>
      <param name="dateValue">입력 날짜/시간입니다.</param>
      <param name="addValue">더할 일수입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddDays(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
      <summary>이 메서드는 LINQ to Entities 쿼리의 일부로 사용되는 경우 AddDays EDM 정식 함수를 호출하여 지정된 일 수를 날짜/시간에 더합니다.</summary>
      <returns>결과 날짜/시간입니다.</returns>
      <param name="dateValue">입력 날짜/시간입니다.</param>
      <param name="addValue">더할 일수입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddHours(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
      <summary>이 메서드는 LINQ to Entities 쿼리의 일부로 사용되는 경우 AddHours EDM 정식 함수를 호출하여 지정된 시간을 날짜/시간에 더합니다.</summary>
      <returns>결과 날짜/시간입니다.</returns>
      <param name="timeValue">입력 날짜/시간입니다.</param>
      <param name="addValue">더할 시간입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddHours(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
      <summary>이 메서드는 LINQ to Entities 쿼리의 일부로 사용되는 경우 AddHours EDM 정식 함수를 호출하여 지정된 시간을 날짜/시간에 더합니다.</summary>
      <returns>결과 날짜/시간입니다.</returns>
      <param name="timeValue">입력 날짜/시간입니다.</param>
      <param name="addValue">더할 시간입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddHours(System.Nullable{System.TimeSpan},System.Nullable{System.Int32})">
      <summary>이 메서드는 LINQ to Entities 쿼리의 일부로 사용되는 경우 AddHours EDM 정식 함수를 호출하여 지정된 시간을 시간 범위에 더합니다.</summary>
      <returns>결과 시간 범위입니다.</returns>
      <param name="timeValue">입력 날짜/시간입니다.</param>
      <param name="addValue">더할 시간입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddMicroseconds(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
      <summary>이 메서드는 LINQ to Entities 쿼리의 일부로 사용되는 경우 AddMicroseconds EDM 정식 함수를 호출하여 지정된 마이크로초를 날짜/시간에 더합니다.</summary>
      <returns>결과 날짜/시간입니다.</returns>
      <param name="timeValue">입력 날짜/시간입니다.</param>
      <param name="addValue">더할 마이크로초입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddMicroseconds(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
      <summary>이 메서드는 LINQ to Entities 쿼리의 일부로 사용되는 경우 AddMicroseconds EDM 정식 함수를 호출하여 지정된 마이크로초를 날짜/시간에 더합니다.</summary>
      <returns>결과 날짜/시간입니다.</returns>
      <param name="timeValue">입력 날짜/시간입니다.</param>
      <param name="addValue">더할 마이크로초입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddMicroseconds(System.Nullable{System.TimeSpan},System.Nullable{System.Int32})">
      <summary>이 메서드는 LINQ to Entities 쿼리의 일부로 사용되는 경우 AddMicroseconds EDM 정식 함수를 호출하여 지정된 마이크로초를 시간 범위에 더합니다.</summary>
      <returns>결과 시간 범위입니다.</returns>
      <param name="timeValue">입력 날짜/시간입니다.</param>
      <param name="addValue">더할 마이크로초입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddMilliseconds(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
      <summary>이 메서드는 LINQ to Entities 쿼리의 일부로 사용되는 경우 AddMilliseconds EDM 정식 함수를 호출하여 지정된 밀리초를 날짜/시간에 더합니다.</summary>
      <returns>결과 날짜/시간입니다.</returns>
      <param name="timeValue">입력 날짜/시간입니다.</param>
      <param name="addValue">더할 밀리초입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddMilliseconds(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
      <summary>이 메서드는 LINQ to Entities 쿼리의 일부로 사용되는 경우 AddMilliseconds EDM 정식 함수를 호출하여 지정된 밀리초를 날짜/시간에 더합니다.</summary>
      <returns>결과 날짜/시간입니다.</returns>
      <param name="timeValue">입력 날짜/시간입니다.</param>
      <param name="addValue">더할 밀리초입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddMilliseconds(System.Nullable{System.TimeSpan},System.Nullable{System.Int32})">
      <summary>이 메서드는 LINQ to Entities 쿼리의 일부로 사용되는 경우 AddMilliseconds EDM 정식 함수를 호출하여 지정된 밀리초를 시간 범위에 더합니다.</summary>
      <returns>결과 시간 범위입니다.</returns>
      <param name="timeValue">입력 날짜/시간입니다.</param>
      <param name="addValue">더할 밀리초입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddMinutes(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
      <summary>이 메서드는 LINQ to Entities 쿼리의 일부로 사용되는 경우 AddMinutes EDM 정식 함수를 호출하여 지정된 분을 날짜/시간에 더합니다.</summary>
      <returns>결과 날짜/시간입니다.</returns>
      <param name="timeValue">입력 날짜/시간입니다.</param>
      <param name="addValue">더할 분입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddMinutes(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
      <summary>이 메서드는 LINQ to Entities 쿼리의 일부로 사용되는 경우 AddMinutes EDM 정식 함수를 호출하여 지정된 분을 날짜/시간에 더합니다.</summary>
      <returns>결과 날짜/시간입니다.</returns>
      <param name="timeValue">입력 날짜/시간입니다.</param>
      <param name="addValue">더할 분입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddMinutes(System.Nullable{System.TimeSpan},System.Nullable{System.Int32})">
      <summary>이 메서드는 LINQ to Entities 쿼리의 일부로 사용되는 경우 AddMinutes EDM 정식 함수를 호출하여 지정된 분을 시간 범위에 더합니다.</summary>
      <returns>결과 시간 범위입니다.</returns>
      <param name="timeValue">입력 날짜/시간입니다.</param>
      <param name="addValue">더할 분입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddMonths(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
      <summary>이 메서드는 LINQ to Entities 쿼리의 일부로 사용되는 경우 AddMonths EDM 정식 함수를 호출하여 지정된 개월 수를 날짜/시간에 더합니다.</summary>
      <returns>결과 날짜/시간입니다.</returns>
      <param name="dateValue">입력 날짜/시간입니다.</param>
      <param name="addValue">더할 개월 수입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddMonths(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
      <summary>이 메서드는 LINQ to Entities 쿼리의 일부로 사용되는 경우 AddMonths EDM 정식 함수를 호출하여 지정된 개월 수를 날짜/시간에 더합니다.</summary>
      <returns>결과 날짜/시간입니다.</returns>
      <param name="dateValue">입력 날짜/시간입니다.</param>
      <param name="addValue">더할 개월 수입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddNanoseconds(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
      <summary>이 메서드는 LINQ to Entities 쿼리의 일부로 사용되는 경우 AddNanoseconds EDM 정식 함수를 호출하여 지정된 나노초를 날짜/시간에 더합니다.</summary>
      <returns>결과 날짜/시간입니다.</returns>
      <param name="timeValue">입력 날짜/시간입니다.</param>
      <param name="addValue">더할 나노초입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddNanoseconds(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
      <summary>이 메서드는 LINQ to Entities 쿼리의 일부로 사용되는 경우 AddNanoseconds EDM 정식 함수를 호출하여 지정된 나노초를 날짜/시간에 더합니다.</summary>
      <returns>결과 날짜/시간입니다.</returns>
      <param name="timeValue">입력 날짜/시간입니다.</param>
      <param name="addValue">더할 나노초입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddNanoseconds(System.Nullable{System.TimeSpan},System.Nullable{System.Int32})">
      <summary>이 메서드는 LINQ to Entities 쿼리의 일부로 사용되는 경우 AddNanoseconds EDM 정식 함수를 호출하여 지정된 나노초를 시간 범위에 더합니다.</summary>
      <returns>결과 시간 범위입니다.</returns>
      <param name="timeValue">입력 날짜/시간입니다.</param>
      <param name="addValue">더할 나노초입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddSeconds(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
      <summary>이 메서드는 LINQ to Entities 쿼리의 일부로 사용되는 경우 AddSeconds EDM 정식 함수를 호출하여 지정된 초를 날짜/시간에 더합니다.</summary>
      <returns>결과 날짜/시간입니다.</returns>
      <param name="timeValue">입력 날짜/시간입니다.</param>
      <param name="addValue">더할 초입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddSeconds(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
      <summary>이 메서드는 LINQ to Entities 쿼리의 일부로 사용되는 경우 AddSeconds EDM 정식 함수를 호출하여 지정된 초를 날짜/시간에 더합니다.</summary>
      <returns>결과 날짜/시간입니다.</returns>
      <param name="timeValue">입력 날짜/시간입니다.</param>
      <param name="addValue">더할 초입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddSeconds(System.Nullable{System.TimeSpan},System.Nullable{System.Int32})">
      <summary>이 메서드는 LINQ to Entities 쿼리의 일부로 사용되는 경우 AddSeconds EDM 정식 함수를 호출하여 지정된 초를 시간 범위에 더합니다.</summary>
      <returns>결과 시간 범위입니다.</returns>
      <param name="timeValue">입력 날짜/시간입니다.</param>
      <param name="addValue">더할 초입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddYears(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
      <summary>이 메서드는 LINQ to Entities 쿼리의 일부로 사용되는 경우 AddYears EDM 정식 함수를 호출하여 지정된 연수를 날짜/시간에 더합니다.</summary>
      <returns>결과 날짜/시간입니다.</returns>
      <param name="dateValue">입력 날짜/시간입니다.</param>
      <param name="addValue">더할 연수입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddYears(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
      <summary>이 메서드는 LINQ to Entities 쿼리의 일부로 사용되는 경우 AddYears EDM 정식 함수를 호출하여 지정된 연수를 날짜/시간에 더합니다.</summary>
      <returns>결과 날짜/시간입니다.</returns>
      <param name="dateValue">입력 날짜/시간입니다.</param>
      <param name="addValue">더할 연수입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AsNonUnicode(System.String)">
      <summary>이 메서드는 LINQ to Entities 쿼리의 일부로 사용되는 경우 입력이 유니코드가 아닌 문자열로 처리되도록 보장하는 연산자 역할을 합니다.</summary>
      <returns>유니코드가 아닌 문자열로 처리되는 입력 문자열입니다.</returns>
      <param name="value">입력 문자열입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AsUnicode(System.String)">
      <summary>이 메서드는 LINQ to Entities 쿼리의 일부로 사용되는 경우 입력이 유니코드 문자열로 처리되도록 보장하는 연산자 역할을 합니다.</summary>
      <returns>유니코드 문자열로 처리되는 입력 문자열입니다.</returns>
      <param name="value">입력 문자열입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.CreateDateTime(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Double})">
      <summary>이 메서드는 LINQ to Entities 쿼리의 일부로 사용되는 경우 CreateDateTime EDM 정식 함수를 호출하여 새 <see cref="T:System.DateTime" /> 개체를 만듭니다.</summary>
      <returns>새 날짜/시간입니다.</returns>
      <param name="year">연도입니다.</param>
      <param name="month">월입니다(1부터 시작).</param>
      <param name="day">일입니다(1부터 시작).</param>
      <param name="hour">시간입니다.</param>
      <param name="minute">분입니다.</param>
      <param name="second">초입니다. 필요한 경우 초의 소수 부분이 포함됩니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.CreateDateTimeOffset(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Double},System.Nullable{System.Int32})">
      <summary>이 메서드는 LINQ to Entities 쿼리의 일부로 사용되는 경우 CreateDateTimeOffset EDM 정식 함수를 호출하여 새 <see cref="T:System.DateTimeOffset" /> 개체를 만듭니다.</summary>
      <returns>새 날짜/시간입니다.</returns>
      <param name="year">연도입니다.</param>
      <param name="month">월입니다(1부터 시작).</param>
      <param name="day">일입니다(1부터 시작).</param>
      <param name="hour">시간입니다.</param>
      <param name="minute">분입니다.</param>
      <param name="second">초입니다. 필요한 경우 초의 소수 부분이 포함됩니다.</param>
      <param name="timeZoneOffset">새 날짜의 표준 시간대 오프셋 부분입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.CreateTime(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Double})">
      <summary>이 메서드는 LINQ to Entities 쿼리의 일부로 사용되는 경우 CreateTime EDM 정식 함수를 호출하여 새 <see cref="T:System.TimeSpan" /> 개체를 만듭니다.</summary>
      <returns>새 시간 범위입니다.</returns>
      <param name="hour">시간입니다.</param>
      <param name="minute">분입니다.</param>
      <param name="second">초입니다. 필요한 경우 초의 소수 부분이 포함됩니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffDays(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>이 메서드는 LINQ to Entities 쿼리의 일부로 사용되는 경우 DiffDays EDM 정식 함수를 호출하여 두 날짜/시간 간의 일수를 계산합니다.</summary>
      <returns>첫 번째 날짜/시간과 두 번째 날짜/시간 간의 일수입니다.</returns>
      <param name="dateValue1">첫 번째 날짜/시간입니다.</param>
      <param name="dateValue2">두 번째 날짜/시간입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffDays(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>이 메서드는 LINQ to Entities 쿼리의 일부로 사용되는 경우 DiffDays EDM 정식 함수를 호출하여 두 날짜/시간 간의 일수를 계산합니다.</summary>
      <returns>첫 번째 날짜/시간과 두 번째 날짜/시간 간의 일수입니다.</returns>
      <param name="dateValue1">첫 번째 날짜/시간입니다.</param>
      <param name="dateValue2">두 번째 날짜/시간입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffHours(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>이 메서드는 LINQ to Entities 쿼리의 일부로 사용되는 경우 DiffHours EDM 정식 함수를 호출하여 두 날짜/시간 간의 시간을 계산합니다.</summary>
      <returns>첫 번째 날짜/시간과 두 번째 날짜/시간 간의 시간입니다.</returns>
      <param name="timeValue1">첫 번째 날짜/시간입니다.</param>
      <param name="timeValue2">두 번째 날짜/시간입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffHours(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>이 메서드는 LINQ to Entities 쿼리의 일부로 사용되는 경우 DiffHours EDM 정식 함수를 호출하여 두 날짜/시간 간의 시간을 계산합니다.</summary>
      <returns>첫 번째 날짜/시간과 두 번째 날짜/시간 간의 시간입니다.</returns>
      <param name="timeValue1">첫 번째 날짜/시간입니다.</param>
      <param name="timeValue2">두 번째 날짜/시간입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffHours(System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
      <summary>이 메서드는 LINQ to Entities 쿼리의 일부로 사용되는 경우 DiffHours EDM 정식 함수를 호출하여 두 시간 범위 간의 시간을 계산합니다.</summary>
      <returns>첫 번째 시간 범위와 두 번째 시간 범위 간의 시간입니다.</returns>
      <param name="timeValue1">첫 번째 시간 범위입니다.</param>
      <param name="timeValue2">두 번째 시간 범위입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffMicroseconds(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>이 메서드는 LINQ to Entities 쿼리의 일부로 사용되는 경우 DiffMicroseconds EDM 정식 함수를 호출하여 두 날짜/시간 간의 마이크로초를 계산합니다.</summary>
      <returns>첫 번째 날짜/시간과 두 번째 날짜/시간 간의 마이크로초입니다.</returns>
      <param name="timeValue1">첫 번째 날짜/시간입니다.</param>
      <param name="timeValue2">두 번째 날짜/시간입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffMicroseconds(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>이 메서드는 LINQ to Entities 쿼리의 일부로 사용되는 경우 DiffMicroseconds EDM 정식 함수를 호출하여 두 날짜/시간 간의 마이크로초를 계산합니다.</summary>
      <returns>첫 번째 날짜/시간과 두 번째 날짜/시간 간의 마이크로초입니다.</returns>
      <param name="timeValue1">첫 번째 날짜/시간입니다.</param>
      <param name="timeValue2">두 번째 날짜/시간입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffMicroseconds(System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
      <summary>이 메서드는 LINQ to Entities 쿼리의 일부로 사용되는 경우 DiffMicroseconds EDM 정식 함수를 호출하여 두 시간 범위 간의 마이크로초를 계산합니다.</summary>
      <returns>첫 번째 시간 범위와 두 번째 시간 범위 간의 마이크로초입니다.</returns>
      <param name="timeValue1">첫 번째 시간 범위입니다.</param>
      <param name="timeValue2">두 번째 시간 범위입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffMilliseconds(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>이 메서드는 LINQ to Entities 쿼리의 일부로 사용되는 경우 DiffMilliseconds EDM 정식 함수를 호출하여 두 날짜/시간 간의 밀리초를 계산합니다.</summary>
      <returns>첫 번째 날짜/시간과 두 번째 날짜/시간 간의 밀리초입니다.</returns>
      <param name="timeValue1">첫 번째 날짜/시간입니다.</param>
      <param name="timeValue2">두 번째 날짜/시간입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffMilliseconds(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>이 메서드는 LINQ to Entities 쿼리의 일부로 사용되는 경우 DiffMilliseconds EDM 정식 함수를 호출하여 두 날짜/시간 간의 밀리초를 계산합니다.</summary>
      <returns>첫 번째 날짜/시간과 두 번째 날짜/시간 간의 밀리초입니다.</returns>
      <param name="timeValue1">첫 번째 날짜/시간입니다.</param>
      <param name="timeValue2">두 번째 날짜/시간입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffMilliseconds(System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
      <summary>이 메서드는 LINQ to Entities 쿼리의 일부로 사용되는 경우 DiffMilliseconds EDM 정식 함수를 호출하여 두 시간 범위 간의 밀리초를 계산합니다.</summary>
      <returns>첫 번째 시간 범위와 두 번째 시간 범위 간의 밀리초입니다.</returns>
      <param name="timeValue1">첫 번째 시간 범위입니다.</param>
      <param name="timeValue2">두 번째 시간 범위입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffMinutes(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>이 메서드는 LINQ to Entities 쿼리의 일부로 사용되는 경우 DiffMinutes EDM 정식 함수를 호출하여 두 날짜/시간 간의 분을 계산합니다.</summary>
      <returns>첫 번째 날짜/시간과 두 번째 날짜/시간 간의 분입니다.</returns>
      <param name="timeValue1">첫 번째 날짜/시간입니다.</param>
      <param name="timeValue2">두 번째 날짜/시간입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffMinutes(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>이 메서드는 LINQ to Entities 쿼리의 일부로 사용되는 경우 DiffMinutes EDM 정식 함수를 호출하여 두 날짜/시간 간의 분을 계산합니다.</summary>
      <returns>첫 번째 날짜/시간과 두 번째 날짜/시간 간의 분입니다.</returns>
      <param name="timeValue1">첫 번째 날짜/시간입니다.</param>
      <param name="timeValue2">두 번째 날짜/시간입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffMinutes(System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
      <summary>이 메서드는 LINQ to Entities 쿼리의 일부로 사용되는 경우 DiffMinutes EDM 정식 함수를 호출하여 두 시간 범위 간의 분을 계산합니다.</summary>
      <returns>첫 번째 시간 범위와 두 번째 시간 범위 간의 분입니다.</returns>
      <param name="timeValue1">첫 번째 시간 범위입니다.</param>
      <param name="timeValue2">두 번째 시간 범위입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffMonths(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>이 메서드는 LINQ to Entities 쿼리의 일부로 사용되는 경우 DiffMonths EDM 정식 함수를 호출하여 두 날짜/시간 간의 개월 수를 계산합니다.</summary>
      <returns>첫 번째 날짜/시간과 두 번째 날짜/시간 간의 개월 수입니다.</returns>
      <param name="dateValue1">첫 번째 날짜/시간입니다.</param>
      <param name="dateValue2">두 번째 날짜/시간입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffMonths(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>이 메서드는 LINQ to Entities 쿼리의 일부로 사용되는 경우 DiffMonths EDM 정식 함수를 호출하여 두 날짜/시간 간의 개월 수를 계산합니다.</summary>
      <returns>첫 번째 날짜/시간과 두 번째 날짜/시간 간의 개월 수입니다.</returns>
      <param name="dateValue1">첫 번째 날짜/시간입니다.</param>
      <param name="dateValue2">두 번째 날짜/시간입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffNanoseconds(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>이 메서드는 LINQ to Entities 쿼리의 일부로 사용되는 경우 DiffNanoseconds EDM 정식 함수를 호출하여 두 날짜/시간 간의 나노초를 계산합니다.</summary>
      <returns>첫 번째 날짜/시간과 두 번째 날짜/시간 간의 나노초입니다.</returns>
      <param name="timeValue1">첫 번째 날짜/시간입니다.</param>
      <param name="timeValue2">두 번째 날짜/시간입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffNanoseconds(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>이 메서드는 LINQ to Entities 쿼리의 일부로 사용되는 경우 DiffNanoseconds EDM 정식 함수를 호출하여 두 날짜/시간 간의 나노초를 계산합니다.</summary>
      <returns>첫 번째 날짜/시간과 두 번째 날짜/시간 간의 나노초입니다.</returns>
      <param name="timeValue1">첫 번째 날짜/시간입니다.</param>
      <param name="timeValue2">두 번째 날짜/시간입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffNanoseconds(System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
      <summary>이 메서드는 LINQ to Entities 쿼리의 일부로 사용되는 경우 DiffNanoseconds EDM 정식 함수를 호출하여 두 시간 범위 간의 나노초를 계산합니다.</summary>
      <returns>첫 번째 시간 범위와 두 번째 시간 범위 간의 나노초입니다.</returns>
      <param name="timeValue1">첫 번째 시간 범위입니다.</param>
      <param name="timeValue2">두 번째 시간 범위입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffSeconds(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>이 메서드는 LINQ to Entities 쿼리의 일부로 사용되는 경우 DiffSeconds EDM 정식 함수를 호출하여 두 날짜/시간 간의 초를 계산합니다.</summary>
      <returns>첫 번째 날짜/시간과 두 번째 날짜/시간 간의 초입니다.</returns>
      <param name="timeValue1">첫 번째 날짜/시간입니다.</param>
      <param name="timeValue2">두 번째 날짜/시간입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffSeconds(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>이 메서드는 LINQ to Entities 쿼리의 일부로 사용되는 경우 DiffSeconds EDM 정식 함수를 호출하여 두 날짜/시간 간의 초를 계산합니다.</summary>
      <returns>첫 번째 날짜/시간과 두 번째 날짜/시간 간의 초입니다.</returns>
      <param name="timeValue1">첫 번째 날짜/시간입니다.</param>
      <param name="timeValue2">두 번째 날짜/시간입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffSeconds(System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
      <summary>이 메서드는 LINQ to Entities 쿼리의 일부로 사용되는 경우 DiffSeconds EDM 정식 함수를 호출하여 두 시간 범위 간의 초를 계산합니다.</summary>
      <returns>첫 번째 시간 범위와 두 번째 시간 범위 간의 초입니다.</returns>
      <param name="timeValue1">첫 번째 시간 범위입니다.</param>
      <param name="timeValue2">두 번째 시간 범위입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffYears(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>이 메서드는 LINQ to Entities 쿼리의 일부로 사용되는 경우 DiffYears EDM 정식 함수를 호출하여 두 날짜/시간 간의 연수를 계산합니다.</summary>
      <returns>첫 번째 날짜/시간과 두 번째 날짜/시간 간의 연수입니다.</returns>
      <param name="dateValue1">첫 번째 날짜/시간입니다.</param>
      <param name="dateValue2">두 번째 날짜/시간입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffYears(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>이 메서드는 LINQ to Entities 쿼리의 일부로 사용되는 경우 DiffYears EDM 정식 함수를 호출하여 두 날짜/시간 간의 연수를 계산합니다.</summary>
      <returns>첫 번째 날짜/시간과 두 번째 날짜/시간 간의 연수입니다.</returns>
      <param name="dateValue1">첫 번째 날짜/시간입니다.</param>
      <param name="dateValue2">두 번째 날짜/시간입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.GetTotalOffsetMinutes(System.Nullable{System.DateTimeOffset})">
      <summary>이 메서드는 LINQ to Entities 쿼리의 일부로 사용되는 경우 GetTotalOffsetMinutes EDM 정식 함수를 호출하여 UTC에서의 지정된 날짜/시간의 오프셋 값인 분을 반환합니다.이 값은 일반적으로 +780에서 -780(+13시간에서 -13시간) 사이입니다.</summary>
      <returns>UTC에서의 입력의 오프셋입니다.</returns>
      <param name="dateTimeOffsetArgument">사용할 날짜/시간 값입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.Left(System.String,System.Nullable{System.Int64})">
      <summary>이 메서드는 LINQ to Entities 쿼리의 일부로 사용되는 경우 Left EDM 정식 함수를 호출하여 문자열의 왼쪽에서 지정된 수의 문자를 반환합니다.</summary>
      <returns>입력 문자열의 왼쪽에서 요청된 수의 문자를 포함하는 문자열입니다.</returns>
      <param name="stringArgument">입력 문자열입니다.</param>
      <param name="length">반환할 문자 수입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.Reverse(System.String)">
      <summary>이 메서드는 LINQ to Entities 쿼리의 일부로 사용되는 경우 Reverse EDM 정식 함수를 호출하여 문자 순서를 반대로 바꾼 지정된 문자열을 반환합니다.</summary>
      <returns>문자 순서를 반대로 바꾼 입력 문자열입니다.</returns>
      <param name="stringArgument">입력 문자열입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.Right(System.String,System.Nullable{System.Int64})">
      <summary>이 메서드는 LINQ to Entities 쿼리의 일부로 사용되는 경우 Right EDM 정식 함수를 호출하여 문자열의 오른쪽에서 지정된 수의 문자를 반환합니다.</summary>
      <returns>입력 문자열의 오른쪽에서 요청된 수의 문자를 포함하는 문자열입니다.</returns>
      <param name="stringArgument">입력 문자열입니다.</param>
      <param name="length">반환할 문자 수입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Decimal})">
      <summary>이 메서드는 LINQ to Entities 쿼리의 일부로 사용되는 경우 StDev EDM 정식 함수를 호출하여 컬렉션의 표준 편차를 계산합니다.</summary>
      <returns>표준 편차입니다.</returns>
      <param name="collection">계산을 수행할 컬렉션입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Double})">
      <summary>이 메서드는 LINQ to Entities 쿼리의 일부로 사용되는 경우 StDev EDM 정식 함수를 호출하여 컬렉션의 표준 편차를 계산합니다.</summary>
      <returns>표준 편차입니다.</returns>
      <param name="collection">계산을 수행할 컬렉션입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>이 메서드는 LINQ to Entities 쿼리의 일부로 사용되는 경우 StDev EDM 정식 함수를 호출하여 컬렉션의 표준 편차를 계산합니다.</summary>
      <returns>표준 편차입니다.</returns>
      <param name="collection">계산을 수행할 컬렉션입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Int64})">
      <summary>이 메서드는 LINQ to Entities 쿼리의 일부로 사용되는 경우 StDev EDM 정식 함수를 호출하여 컬렉션의 표준 편차를 계산합니다.</summary>
      <returns>표준 편차입니다.</returns>
      <param name="collection">계산을 수행할 컬렉션입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
      <summary>이 메서드는 LINQ to Entities 쿼리의 일부로 사용되는 경우 StDev EDM 정식 함수를 호출하여 컬렉션의 표준 편차를 계산합니다.</summary>
      <returns>표준 편차입니다.</returns>
      <param name="collection">계산을 수행할 컬렉션입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
      <summary>이 메서드는 LINQ to Entities 쿼리의 일부로 사용되는 경우 StDev EDM 정식 함수를 호출하여 컬렉션의 표준 편차를 계산합니다.</summary>
      <returns>표준 편차입니다.</returns>
      <param name="collection">계산을 수행할 컬렉션입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
      <summary>이 메서드는 LINQ to Entities 쿼리의 일부로 사용되는 경우 StDev EDM 정식 함수를 호출하여 컬렉션의 표준 편차를 계산합니다.</summary>
      <returns>표준 편차입니다.</returns>
      <param name="collection">계산을 수행할 컬렉션입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
      <summary>이 메서드는 LINQ to Entities 쿼리의 일부로 사용되는 경우 StDev EDM 정식 함수를 호출하여 컬렉션의 표준 편차를 계산합니다.</summary>
      <returns>표준 편차입니다.</returns>
      <param name="collection">계산을 수행할 컬렉션입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.StandardDeviationP(System.Collections.Generic.IEnumerable{System.Decimal})">
      <summary>이 메서드는 LINQ to Entities 쿼리의 일부로 사용되는 경우 StDevP EDM 정식 함수를 호출하여 모집단의 표준 편차를 계산합니다.</summary>
      <returns>모집단의 표준 편차입니다.</returns>
      <param name="collection">계산을 수행할 컬렉션입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.StandardDeviationP(System.Collections.Generic.IEnumerable{System.Double})">
      <summary>이 메서드는 LINQ to Entities 쿼리의 일부로 사용되는 경우 StDevP EDM 정식 함수를 호출하여 모집단의 표준 편차를 계산합니다.</summary>
      <returns>모집단의 표준 편차입니다.</returns>
      <param name="collection">계산을 수행할 컬렉션입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.StandardDeviationP(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>이 메서드는 LINQ to Entities 쿼리의 일부로 사용되는 경우 StDevP EDM 정식 함수를 호출하여 모집단의 표준 편차를 계산합니다.</summary>
      <returns>모집단의 표준 편차입니다.</returns>
      <param name="collection">계산을 수행할 컬렉션입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.StandardDeviationP(System.Collections.Generic.IEnumerable{System.Int64})">
      <summary>이 메서드는 LINQ to Entities 쿼리의 일부로 사용되는 경우 StDevP EDM 정식 함수를 호출하여 모집단의 표준 편차를 계산합니다.</summary>
      <returns>모집단의 표준 편차입니다.</returns>
      <param name="collection">계산을 수행할 컬렉션입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.StandardDeviationP(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
      <summary>이 메서드는 LINQ to Entities 쿼리의 일부로 사용되는 경우 StDevP EDM 정식 함수를 호출하여 모집단의 표준 편차를 계산합니다.</summary>
      <returns>모집단의 표준 편차입니다.</returns>
      <param name="collection">계산을 수행할 컬렉션입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.StandardDeviationP(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
      <summary>이 메서드는 LINQ to Entities 쿼리의 일부로 사용되는 경우 StDevP EDM 정식 함수를 호출하여 모집단의 표준 편차를 계산합니다.</summary>
      <returns>모집단의 표준 편차입니다.</returns>
      <param name="collection">계산을 수행할 컬렉션입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.StandardDeviationP(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
      <summary>이 메서드는 LINQ to Entities 쿼리의 일부로 사용되는 경우 StDevP EDM 정식 함수를 호출하여 모집단의 표준 편차를 계산합니다.</summary>
      <returns>모집단의 표준 편차입니다.</returns>
      <param name="collection">계산을 수행할 컬렉션입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.StandardDeviationP(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
      <summary>이 메서드는 LINQ to Entities 쿼리의 일부로 사용되는 경우 StDevP EDM 정식 함수를 호출하여 모집단의 표준 편차를 계산합니다.</summary>
      <returns>모집단의 표준 편차입니다.</returns>
      <param name="collection">계산을 수행할 컬렉션입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.Truncate(System.Nullable{System.Decimal},System.Nullable{System.Int32})">
      <summary>이 메서드는 LINQ to Entities 쿼리의 일부로 사용되는 경우 Truncate EDM 정식 함수를 호출하여 주어진 값을 지정된 자릿수가 될 때까지 자릅니다.</summary>
      <returns>잘린 값입니다.</returns>
      <param name="value">자를 값입니다.</param>
      <param name="digits">유지할 자릿수입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.Truncate(System.Nullable{System.Double},System.Nullable{System.Int32})">
      <summary>이 메서드는 LINQ to Entities 쿼리의 일부로 사용되는 경우 Truncate EDM 정식 함수를 호출하여 주어진 값을 지정된 자릿수가 될 때까지 자릅니다.</summary>
      <returns>잘린 값입니다.</returns>
      <param name="value">자를 값입니다.</param>
      <param name="digits">유지할 자릿수입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.TruncateTime(System.Nullable{System.DateTime})">
      <summary>이 메서드는 LINQ to Entities 쿼리의 일부로 사용되는 경우 TruncateTime EDM 정식 함수를 호출하여 시간 부분을 지운 지정된 날짜를 반환합니다.</summary>
      <returns>시간 부분을 지운 입력 날짜입니다.</returns>
      <param name="dateValue">사용할 날짜/시간 값입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.TruncateTime(System.Nullable{System.DateTimeOffset})">
      <summary>이 메서드는 LINQ to Entities 쿼리의 일부로 사용되는 경우 TruncateTime EDM 정식 함수를 호출하여 시간 부분을 지운 지정된 날짜를 반환합니다.</summary>
      <returns>시간 부분을 지운 입력 날짜입니다.</returns>
      <param name="dateValue">사용할 날짜/시간 값입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.Var(System.Collections.Generic.IEnumerable{System.Decimal})">
      <summary>이 메서드는 LINQ to Entities 쿼리의 일부로 사용되는 경우 Var EDM 정식 함수를 호출하여 컬렉션의 분산을 계산합니다.</summary>
      <returns>분산입니다.</returns>
      <param name="collection">계산을 수행할 컬렉션입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.Var(System.Collections.Generic.IEnumerable{System.Double})">
      <summary>이 메서드는 LINQ to Entities 쿼리의 일부로 사용되는 경우 Var EDM 정식 함수를 호출하여 컬렉션의 분산을 계산합니다.</summary>
      <returns>분산입니다.</returns>
      <param name="collection">계산을 수행할 컬렉션입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.Var(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>이 메서드는 LINQ to Entities 쿼리의 일부로 사용되는 경우 Var EDM 정식 함수를 호출하여 컬렉션의 분산을 계산합니다.</summary>
      <returns>분산입니다.</returns>
      <param name="collection">계산을 수행할 컬렉션입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.Var(System.Collections.Generic.IEnumerable{System.Int64})">
      <summary>이 메서드는 LINQ to Entities 쿼리의 일부로 사용되는 경우 Var EDM 정식 함수를 호출하여 컬렉션의 분산을 계산합니다.</summary>
      <returns>분산입니다.</returns>
      <param name="collection">계산을 수행할 컬렉션입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.Var(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
      <summary>이 메서드는 LINQ to Entities 쿼리의 일부로 사용되는 경우 Var EDM 정식 함수를 호출하여 컬렉션의 분산을 계산합니다.</summary>
      <returns>분산입니다.</returns>
      <param name="collection">계산을 수행할 컬렉션입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.Var(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
      <summary>이 메서드는 LINQ to Entities 쿼리의 일부로 사용되는 경우 Var EDM 정식 함수를 호출하여 컬렉션의 분산을 계산합니다.</summary>
      <returns>분산입니다.</returns>
      <param name="collection">계산을 수행할 컬렉션입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.Var(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
      <summary>이 메서드는 LINQ to Entities 쿼리의 일부로 사용되는 경우 Var EDM 정식 함수를 호출하여 컬렉션의 분산을 계산합니다.</summary>
      <returns>분산입니다.</returns>
      <param name="collection">계산을 수행할 컬렉션입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.Var(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
      <summary>이 메서드는 LINQ to Entities 쿼리의 일부로 사용되는 경우 Var EDM 정식 함수를 호출하여 컬렉션의 분산을 계산합니다.</summary>
      <returns>분산입니다.</returns>
      <param name="collection">계산을 수행할 컬렉션입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.VarP(System.Collections.Generic.IEnumerable{System.Decimal})">
      <summary>이 메서드는 LINQ to Entities 쿼리의 일부로 사용되는 경우 VarP EDM 정식 함수를 호출하여 모집단의 분산을 계산합니다.</summary>
      <returns>모집단의 분산입니다.</returns>
      <param name="collection">계산을 수행할 컬렉션입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.VarP(System.Collections.Generic.IEnumerable{System.Double})">
      <summary>이 메서드는 LINQ to Entities 쿼리의 일부로 사용되는 경우 VarP EDM 정식 함수를 호출하여 모집단의 분산을 계산합니다.</summary>
      <returns>모집단의 분산입니다.</returns>
      <param name="collection">계산을 수행할 컬렉션입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.VarP(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>이 메서드는 LINQ to Entities 쿼리의 일부로 사용되는 경우 VarP EDM 정식 함수를 호출하여 모집단의 분산을 계산합니다.</summary>
      <returns>모집단의 분산입니다.</returns>
      <param name="collection">계산을 수행할 컬렉션입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.VarP(System.Collections.Generic.IEnumerable{System.Int64})">
      <summary>이 메서드는 LINQ to Entities 쿼리의 일부로 사용되는 경우 VarP EDM 정식 함수를 호출하여 모집단의 분산을 계산합니다.</summary>
      <returns>모집단의 분산입니다.</returns>
      <param name="collection">계산을 수행할 컬렉션입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.VarP(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
      <summary>이 메서드는 LINQ to Entities 쿼리의 일부로 사용되는 경우 VarP EDM 정식 함수를 호출하여 모집단의 분산을 계산합니다.</summary>
      <returns>모집단의 분산입니다.</returns>
      <param name="collection">계산을 수행할 컬렉션입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.VarP(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
      <summary>이 메서드는 LINQ to Entities 쿼리의 일부로 사용되는 경우 VarP EDM 정식 함수를 호출하여 모집단의 분산을 계산합니다.</summary>
      <returns>모집단의 분산입니다.</returns>
      <param name="collection">계산을 수행할 컬렉션입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.VarP(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
      <summary>이 메서드는 LINQ to Entities 쿼리의 일부로 사용되는 경우 VarP EDM 정식 함수를 호출하여 모집단의 분산을 계산합니다.</summary>
      <returns>모집단의 분산입니다.</returns>
      <param name="collection">계산을 수행할 컬렉션입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.VarP(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
      <summary>이 메서드는 LINQ to Entities 쿼리의 일부로 사용되는 경우 VarP EDM 정식 함수를 호출하여 모집단의 분산을 계산합니다.</summary>
      <returns>모집단의 분산입니다.</returns>
      <param name="collection">계산을 수행할 컬렉션입니다.</param>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.ExecutionOptions">
      <summary>쿼리 실행을 위한 옵션입니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ExecutionOptions.#ctor(System.Data.Entity.Core.Objects.MergeOption,System.Boolean)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Objects.ExecutionOptions" />의 새 인스턴스를 만듭니다.</summary>
      <param name="mergeOption">엔터티 결과에 사용할 병합 옵션입니다.</param>
      <param name="streaming">쿼리가 스트리밍인지 또는 버퍼링인지 여부를 나타냅니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ExecutionOptions.Equals(System.Object)">
      <summary>지정한 개체와 현재 개체가 같은지 여부를 확인합니다.</summary>
      <returns>지정된 개체가 현재 개체와 동일하면 true이고 그렇지 않으면 false입니다.</returns>
      <param name="obj">현재 개체와 비교할 개체입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ExecutionOptions.GetHashCode">
      <summary>특정 형식에 대한 해시 함수 역할을 합니다.</summary>
      <returns>현재 개체에 대한 해시 코드입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ExecutionOptions.MergeOption">
      <summary>엔터티 결과에 사용할 병합 옵션입니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ExecutionOptions.op_Equality(System.Data.Entity.Core.Objects.ExecutionOptions,System.Data.Entity.Core.Objects.ExecutionOptions)">
      <summary>지정한 개체가 같은지 여부를 확인합니다.</summary>
      <returns>두 개체가 같으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="left">비교할 왼쪽 개체입니다.</param>
      <param name="right">비교할 오른쪽 개체입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ExecutionOptions.op_Inequality(System.Data.Entity.Core.Objects.ExecutionOptions,System.Data.Entity.Core.Objects.ExecutionOptions)">
      <summary>지정한 개체가 같지 않은지 여부를 확인합니다.</summary>
      <returns>두 개체가 같지 않으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="left">비교할 왼쪽 개체입니다.</param>
      <param name="right">비교할 오른쪽 개체입니다.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ExecutionOptions.Streaming">
      <summary>쿼리가 스트리밍인지 또는 버퍼링인지 여부를 나타냅니다.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.IObjectSet`1">
      <summary>결과 집합의 멤버 자격을 수정할 수 있는 IQueryable 구현의 동작을 정의합니다.</summary>
      <typeparam name="TEntity">쿼리 가능 개체에서 반환되는 엔터티 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.IObjectSet`1.AddObject(`0)">
      <summary>새 엔터티를 나타내는 개체가 집합에 추가되어야 함을 집합에 알립니다.</summary>
      <param name="entity">집합에 추가할 새 개체입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.IObjectSet`1.Attach(`0)">
      <summary>기존 엔터티를 나타내는 개체가 집합에 추가되어야 함을 집합에 알립니다.</summary>
      <param name="entity">집합에 추가할 기존 개체입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.IObjectSet`1.DeleteObject(`0)">
      <summary>기존 엔터티를 나타내는 개체가 집합에서 삭제되어야 함을 집합에 알립니다.</summary>
      <param name="entity">집합에서 삭제할 기존 개체입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.IObjectSet`1.Detach(`0)">
      <summary>기존 엔터티를 나타내는 개체가 집합에서 분리되어야 함을 집합에 알립니다.</summary>
      <param name="entity">집합에서 분리할 개체입니다.</param>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.MergeOption">
      <summary>데이터베이스에서 로드된 새 개체를 메모리에 있는 기존 개체와 병합할 수 있는 여러 가지 방법입니다.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Objects.MergeOption.AppendOnly">
      <summary>새(최상위 고유) 행만 추가합니다.이것은 기본적인 동작입니다.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Objects.MergeOption.NoTracking">
      <summary>캐시를 수정하지 않습니다.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Objects.MergeOption.OverwriteChanges">
      <summary>LoadOption.OverwriteChanges와 같은 동작입니다.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Objects.MergeOption.PreserveChanges">
      <summary>LoadOption.PreserveChanges와 같은 동작입니다.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.ObjectContext">
      <summary>ObjectContext는 CLR과 데이터베이스 사이의 연결을 캡슐화하고 만들기, 읽기, 업데이트 및 삭제 작업을 위한 게이트웨이 역할을 수행하는 최상위 개체입니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.#ctor(System.Data.Entity.Core.EntityClient.EntityConnection)">
      <summary>지정된 연결을 사용하여 <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> 클래스의 새 인스턴스를 초기화합니다.생성하는 동안 메타데이터 작업 영역이 <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" /> 개체에서 추출됩니다.</summary>
      <param name="connection">모델 및 데이터 원본 연결에 대한 참조가 포함된 <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">connection이 null인 경우</exception>
      <exception cref="T:System.ArgumentException">연결이 잘못되었거나 메타데이터 작업 영역이 잘못된 경우</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.#ctor(System.Data.Entity.Core.EntityClient.EntityConnection,System.Boolean)">
      <summary>지정된 연결 및 메타데이터 작업 영역을 사용하여 ObjectContext를 만듭니다.</summary>
      <param name="connection">저장소에 대한 연결입니다.</param>
      <param name="contextOwnsConnection">true로 설정되면 컨텍스트가 삭제될 때 연결이 삭제되고, 그렇지 않으면 호출자가 연결을 삭제해야 합니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.#ctor(System.Data.Entity.Core.EntityClient.EntityConnection,System.String)">
      <summary>지정된 연결 및 엔터티 컨테이너 이름을 사용하여 <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="connection">모델 및 데이터 원본 연결에 대한 참조가 포함된 <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" />입니다.</param>
      <param name="defaultContainerName">기본 엔터티 컨테이너의 이름입니다.이 메서드를 통해 defaultContainerName을 설정하면 속성이 읽기 전용이 됩니다.</param>
      <exception cref="T:System.ArgumentNullException">connection이 null인 경우</exception>
      <exception cref="T:System.ArgumentException">connection, defaultContainerName 또는 메타데이터 작업 영역이 잘못된 경우</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.#ctor(System.String)">
      <summary>지정된 연결 문자열 및 기본 엔터티 컨테이너 이름을 사용하여 <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="connectionString">연결 문자열로, 메타데이터 정보에 대한 액세스도 제공합니다.</param>
      <exception cref="T:System.ArgumentNullException">connectionString이 null인 경우</exception>
      <exception cref="T:System.ArgumentException">connectionString이 잘못되었거나 메타데이터 작업 영역이 잘못된 경우</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.#ctor(System.String,System.String)">
      <summary>지정된 연결 문자열 및 엔터티 컨테이너 이름을 사용하여 <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="connectionString">연결 문자열로, 메타데이터 정보에 대한 액세스도 제공합니다.</param>
      <param name="defaultContainerName">기본 엔터티 컨테이너의 이름입니다.이 메서드를 통해 defaultContainerName을 설정하면 속성이 읽기 전용이 됩니다.</param>
      <exception cref="T:System.ArgumentNullException">connectionString이 null인 경우</exception>
      <exception cref="T:System.ArgumentException">connectionString, defaultContainerName 또는 메타데이터 작업 영역이 잘못된 경우</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.AcceptAllChanges">
      <summary>개체 컨텍스트에서 개체에 대한 변경 내용을 모두 허용합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.AddObject(System.String,System.Object)">
      <summary>개체를 개체 컨텍스트에 추가합니다.</summary>
      <param name="entitySetName">엔터티 컨테이너 이름으로 정규화될 수도 있는 엔터티 집합 이름을 나타냅니다.</param>
      <param name="entity">추가할 <see cref="T:System.Object" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">엔터티 매개변수가 null이거나 entitySetName이 적합하지 않습니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.ApplyCurrentValues``1(System.String,``0)">
      <summary>제공된 개체의 스칼라 값을 같은 키를 가진 <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" />의 개체에 복사합니다.</summary>
      <returns>업데이트된 개체입니다.</returns>
      <param name="entitySetName">개체가 속하는 엔터티 집합의 이름입니다.</param>
      <param name="currentEntity">원래 개체에 적용할 속성 업데이트가 있는 분리된 개체입니다.currentEntity의 엔터티 키는 <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" />에 있는 항목의 <see cref="P:System.Data.Entity.Core.Objects.ObjectStateEntry.EntityKey" /> 속성과 일치해야 합니다.</param>
      <typeparam name="TEntity">개체의 엔터티 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">entitySetName 또는 현재 값이 null입니다.</exception>
      <exception cref="T:System.InvalidOperationException">entitySetName의 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" />가 개체의 <see cref="T:System.Data.Entity.Core.EntityKey" />에 대한 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" />와 일치하지 않거나, 데이터가 <see cref="T:System.Data.Entity.Core.Objects.ObjectStateManager" />에 없거나, <see cref="F:System.Data.Entity.EntityState.Detached" /> 상태이거나, 제공된 개체의 엔터티 키가 잘못된 경우</exception>
      <exception cref="T:System.ArgumentException">entitySetName이 빈 문자열입니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.ApplyOriginalValues``1(System.String,``0)">
      <summary>제공된 개체의 스칼라 값을 동일한 키를 포함하는 <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" />의 개체에 대한 원래 값 집합에 복사합니다.</summary>
      <returns>업데이트된 개체입니다.</returns>
      <param name="entitySetName">개체가 속하는 엔터티 집합의 이름입니다.</param>
      <param name="originalEntity">개체에 적용할 원래 값이 있는 분리된 개체입니다.originalEntity의 엔터티 키는 <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" />에 있는 항목의 <see cref="P:System.Data.Entity.Core.Objects.ObjectStateEntry.EntityKey" /> 속성과 일치해야 합니다.</param>
      <typeparam name="TEntity">엔터티 개체의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">entitySetName 또는 원래 값이 null입니다.</exception>
      <exception cref="T:System.InvalidOperationException">entitySetName의 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" />가 개체의 <see cref="T:System.Data.Entity.Core.EntityKey" />에 대한 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" />와 일치하지 않거나, 개체의 <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" />를 <see cref="T:System.Data.Entity.Core.Objects.ObjectStateManager" />에서 찾을 수 없거나, 개체가 <see cref="F:System.Data.Entity.EntityState.Added" /> 또는 <see cref="F:System.Data.Entity.EntityState.Detached" /> 상태에 있거나, 제공된 개체의 엔터티 키가 잘못되었거나, 속성 변경 내용을 포함하는 경우</exception>
      <exception cref="T:System.ArgumentException">entitySetName이 빈 문자열입니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.ApplyPropertyChanges(System.String,System.Object)">
      <summary>분리된 개체의 속성 변경을 개체 컨텍스트에 이미 연결된 개체에 적용합니다.</summary>
      <param name="entitySetName">개체가 속하는 엔터티 집합의 이름입니다.</param>
      <param name="changed">원래 개체에 적용할 속성 업데이트가 있는 분리된 개체입니다.</param>
      <exception cref="T:System.ArgumentNullException">entitySetName이 null 또는 빈 문자열이거나 변경된 내용이 null입니다.</exception>
      <exception cref="T:System.InvalidOperationException">entitySetName의 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" />가 개체의 <see cref="T:System.Data.Entity.Core.EntityKey" />에 대한 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" />와 일치하지 않거나, 엔터티의 상태가 <see cref="F:System.Data.Entity.EntityState.Modified" /> 또는 <see cref="F:System.Data.Entity.EntityState.Unchanged" />가 아니거나, 원래 개체가 컨텍스트에 연결되지 않은 경우</exception>
      <exception cref="T:System.ArgumentException">changed 개체의 형식이 원래 개체의 형식과 다른 경우</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.Attach(System.Data.Entity.Core.Objects.DataClasses.IEntityWithKey)">
      <summary>개체에 엔터티 키가 있으면 개체 또는 개체 그래프를 개체 컨텍스트에 연결합니다.</summary>
      <param name="entity">연결할 개체입니다.</param>
      <exception cref="T:System.ArgumentNullException">@FSHO2@entity가 null인 경우</exception>
      <exception cref="T:System.InvalidOperationException">엔터티 키가 잘못된 경우</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.AttachTo(System.String,System.Object)">
      <summary>특정 엔터티 집합에서 개체 또는 개체 그래프를 개체 컨텍스트에 연결합니다.</summary>
      <param name="entitySetName">엔터티 컨테이너 이름으로 정규화될 수도 있는 엔터티 집합 이름을 나타냅니다.</param>
      <param name="entity">연결할 <see cref="T:System.Object" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">@FSHO2@entity가 null인 경우</exception>
      <exception cref="T:System.InvalidOperationException">엔터티 집합이 잘못되었거나, 개체에 임시 키가 포함되었거나, 개체에 <see cref="T:System.Data.Entity.Core.EntityKey" />가 포함되었고 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" />가 메서드의 인수로 전달된 엔터티 집합과 일치하지 않거나, 개체에 <see cref="T:System.Data.Entity.Core.EntityKey" />가 포함되었고 엔터티 집합이 제공되지 않았거나, 개체 그래프의 개체가 임시 <see cref="T:System.Data.Entity.Core.EntityKey" />를 포함하거나, 개체 그래프의 그래프에 잘못된 <see cref="T:System.Data.Entity.Core.EntityKey" />가 포함되었거나(예: 키의 값이 개체의 값과 일치하지 않는 경우), 제공된 entitySetName 이름 및 엔터티 컨테이너 이름에서 엔터티 집합을 찾을 수 없거나 개체 그래프의 개체가 다른 상태 관리자에 이미 있는 경우</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectContext.CommandTimeout">
      <summary>모든 개체 컨텍스트 작업에 대한 제한 시간(초) 값을 가져오거나 설정합니다.null 값을 설정하면 기본 공급자의 기본값이 사용됩니다.</summary>
      <returns>제한 시간(초) 값인 <see cref="T:System.Int32" /> 값입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectContext.Connection">
      <summary>개체 컨텍스트에서 사용하는 연결을 가져옵니다.</summary>
      <returns>연결인 <see cref="T:System.Data.Common.DbConnection" /> 개체입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectContext.ContextOptions">
      <summary>
        <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" />의 동작에 영향을 미치는 옵션이 포함된 <see cref="T:System.Data.Entity.Core.Objects.ObjectContextOptions" /> 인스턴스를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" />의 동작에 영향을 미치는 옵션이 포함된 <see cref="T:System.Data.Entity.Core.Objects.ObjectContextOptions" /> 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.CreateDatabase">
      <summary>현재 데이터 소스 연결과 <see cref="T:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection" />에 있는 메타데이터를 사용하여 데이터베이스를 만듭니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.CreateDatabaseScript">
      <summary>
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection" />에 있는 메타데이터에 대한 스키마 개체(테이블, 기본 키, 외래 키)를 만드는 DLL(데이터 정의 언어) 스크립트를 생성합니다.<see cref="T:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection" />은 SSDL(저장소 스키마 정의 언어) 파일의 메타데이터를 로드합니다.</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection" />에 있는 메타데이터에 대한 스키마 개체를 만드는 DLL 스크립트입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.CreateEntityKey(System.String,System.Object)">
      <summary>특정 개체에 대한 엔터티 키를 만들거나 엔터티 키가 이미 있는 경우 해당 엔터티 키를 반환합니다.</summary>
      <returns>개체의 <see cref="T:System.Data.Entity.Core.EntityKey" />입니다.</returns>
      <param name="entitySetName">엔터티 개체가 속하는 엔터티 집합의 정규화된 이름입니다.</param>
      <param name="entity">엔터티 키를 검색 중인 개체입니다.</param>
      <exception cref="T:System.ArgumentNullException">매개 변수 중 하나가 null인 경우</exception>
      <exception cref="T:System.ArgumentException">entitySetName이 비어 있거나, 엔터티 개체의 형식이 엔터티 집합에 없거나, entitySetName이 정규화되지 않은 경우</exception>
      <exception cref="T:System.InvalidOperationException">제공된 매개 변수를 기반으로 엔터티 키를 성공적으로 생성할 수 없는 경우</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.CreateObject``1">
      <summary>요청된 형식의 인스턴스를 만들고 반환합니다.</summary>
      <returns>요청된 형식 T의 인스턴스이거나, Entity Framework에서 T를 사용할 수 있게 만드는 파생 형식의 인스턴스입니다.반환된 개체는 요청된 형식의 인스턴스이거나, Entity Framework에서 요청된 형식을 사용할 수 있게 만드는 파생 형식의 인스턴스입니다.</returns>
      <typeparam name="T">반환될 개체의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.CreateObjectSet``1">
      <summary>지정된 엔터티 형식의 개체에 대한 쿼리, 추가, 수정 및 삭제에 사용되는 새 <see cref="T:System.Data.Entity.Core.Objects.ObjectSet`1" /> 인스턴스를 만듭니다.</summary>
      <returns>새 <see cref="T:System.Data.Entity.Core.Objects.ObjectSet`1" /> 인스턴스입니다.</returns>
      <typeparam name="TEntity">요청된 <see cref="T:System.Data.Entity.Core.Objects.ObjectSet`1" />의 엔터티 형식입니다.</typeparam>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Data.Entity.Core.Objects.ObjectContext.DefaultContainerName" /> 속성이 <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" />에 설정되지 않았거나 지정된 형식이 하나 이상의 엔터티 집합에 포함됩니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.CreateObjectSet``1(System.String)">
      <summary>지정된 형식과 지정된 엔터티 집합 이름을 갖는 개체의 쿼리, 추가, 수정 및 삭제에 사용되는 새 <see cref="T:System.Data.Entity.Core.Objects.ObjectSet`1" /> 인스턴스를 만듭니다.</summary>
      <returns>새 <see cref="T:System.Data.Entity.Core.Objects.ObjectSet`1" /> 인스턴스입니다.</returns>
      <param name="entitySetName">반환된 <see cref="T:System.Data.Entity.Core.Objects.ObjectSet`1" />에 대한 엔터티 집합의 이름입니다.<see cref="T:System.Data.Entity.Core.Objects.ObjectContext" />에 <see cref="P:System.Data.Entity.Core.Objects.ObjectContext.DefaultContainerName" /> 속성이 설정되어 있지 않은 경우 문자열을 기본 컨테이너 이름으로 정규화해야 합니다.</param>
      <typeparam name="TEntity">요청된 <see cref="T:System.Data.Entity.Core.Objects.ObjectSet`1" />의 엔터티 형식입니다.</typeparam>
      <exception cref="T:System.InvalidOperationException">entitySetName의 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" />가 개체의 <see cref="T:System.Data.Entity.Core.EntityKey" />에 대한 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" />와 일치하지 않거나, <see cref="P:System.Data.Entity.Core.Objects.ObjectContext.DefaultContainerName" /> 속성이 <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" />에 설정되지 않았고 이름이 entitySetName 매개 변수의 일부로 정규화되지 않았거나, 지정된 형식이 하나 이상의 엔터티 집합에 포함되는 경우</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.CreateProxyTypes(System.Collections.Generic.IEnumerable{System.Type})">
      <summary>제공된 열거형의 각 형식에 대해 Entity Framework에서 사용할 수 있는 동등한 형식을 생성합니다.</summary>
      <param name="types">개념적 모델에 매핑되는 사용자 지정 데이터 클래스를 나타내는 <see cref="T:System.Type" /> 개체의 열거형입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.CreateQuery``1(System.String,System.Data.Entity.Core.Objects.ObjectParameter[])">
      <summary>지정된 쿼리 문자열을 사용하여 현재 개체 컨텍스트에서 <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" />를 만듭니다.</summary>
      <returns>지정된 형식의 <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" />입니다.</returns>
      <param name="queryString">실행할 쿼리 문자열입니다.</param>
      <param name="parameters">쿼리에 전달할 매개 변수입니다.</param>
      <typeparam name="T">반환된 <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" />의 엔터티 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">queryString 또는 parameters 매개 변수가 null인 경우</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.DatabaseExists">
      <summary>현재 저장소 연결에서 데이터베이스로 지정된 데이터베이스가 저장소에 있는지 확인합니다.대부분의 실제 작업은 현재 저장소 연결에 대한 DbProviderServices 구현에 의해 수행됩니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectContext.DefaultContainerName">
      <summary>기본 컨테이너 이름을 가져오거나 설정합니다.</summary>
      <returns>기본 컨테이너 이름인 <see cref="T:System.String" />입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.DeleteDatabase">
      <summary>현재 데이터 소스 연결에서 데이터베이스로 지정된 데이터베이스를 삭제합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.DeleteObject(System.Object)">
      <summary>개체에 삭제 표시를 합니다.</summary>
      <param name="entity">삭제할 엔터티를 지정하는 개체입니다.개체는 <see cref="F:System.Data.Entity.EntityState.Detached" />를 제외한 모든 상태일 수 있습니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.Detach(System.Object)">
      <summary>개체 컨텍스트에서 개체를 제거합니다.</summary>
      <param name="entity">분리할 개체입니다.엔터티만 제거됩니다. 동일한 <see cref="T:System.Data.Entity.Core.Objects.ObjectStateManager" />에서 추적되고 있는 관련 개체가 있으면 이러한 개체는 자동으로 분리되지 않습니다.</param>
      <exception cref="T:System.ArgumentNullException">@FSHO2@entity가 null인 경우</exception>
      <exception cref="T:System.InvalidOperationException">엔터티가 이 <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" />와 연결되어 있지 않은 경우(예: 새로 만들어진 후 컨텍스트에 아직 연결되지 않았거나 다른 컨텍스트를 통해 가져왔거나, 이미 분리된 경우)</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.DetectChanges">
      <summary>
        <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" /> 변경 내용이 <see cref="T:System.Data.Entity.Core.Objects.ObjectStateManager" />로 추적되는 모든 개체의 변경 내용과 동기화되도록 합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.Dispose">
      <summary>@FSHO2@개체 컨텍스트에서 사용하는 리소스를 해제합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.Dispose(System.Boolean)">
      <summary>@FSHO2@개체 컨텍스트에서 사용하는 리소스를 해제합니다.</summary>
      <param name="disposing">관리되는 리소스와 관리되지 않는 리소스를 모두 해제하려면 true이고, 관리되지 않는 리소스만 해제하려면 false입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.ExecuteFunction``1(System.String,System.Data.Entity.Core.Objects.ExecutionOptions,System.Data.Entity.Core.Objects.ObjectParameter[])">
      <summary>기본 컨테이너에 대해 지정된 함수를 실행합니다.</summary>
      <param name="functionName">함수 이름입니다.컨테이너(예:ContainerName.FunctionName)가 포함되거나 DefaultContainerName이 알려진 경우 함수 이름만 포함될 수 있습니다.</param>
      <param name="executionOptions">이 함수를 실행하기 위한 옵션입니다.</param>
      <param name="parameters">함수에 사용할 매개 변수 값입니다.</param>
      <typeparam name="TElement">함수 결과에 대한 요소 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentException">function이 null이거나 비어 있는 경우</exception>
      <exception cref="T:System.InvalidOperationException">function이 잘못된 경우(구문, 존재하지 않음, 반환 형식이 T와 호환되지 않는 함수를 참조함)</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.ExecuteFunction``1(System.String,System.Data.Entity.Core.Objects.MergeOption,System.Data.Entity.Core.Objects.ObjectParameter[])">
      <summary>데이터 소스에 정의되어 있으며 개념적 모델로 표현되는 지정된 저장 프로시저 또는 함수를 지정된 매개 변수와 병합 옵션을 사용하여 실행합니다.형식화된 <see cref="T:System.Data.Entity.Core.Objects.ObjectResult`1" />를 반환합니다.</summary>
      <returns>저장 프로시저에서 반환하는 데이터의 <see cref="T:System.Data.Entity.Core.Objects.ObjectResult`1" />입니다.</returns>
      <param name="functionName">저장 프로시저나 함수의 이름입니다.이름에는 &amp;lt;Container Name&amp;gt;.&amp;lt;Function Name&amp;gt;과 같은 컨테이너 이름이 포함될 수 있습니다.기본 컨테이너 이름이 알려져 있으면 함수 이름만 필요합니다.</param>
      <param name="mergeOption">쿼리를 실행할 때 사용할 <see cref="T:System.Data.Entity.Core.Objects.MergeOption" />입니다.</param>
      <param name="parameters">
        <see cref="T:System.Data.Entity.Core.Objects.ObjectParameter" /> 개체의 배열</param>
      <typeparam name="TElement">함수가 데이터 원본에 대해 실행될 때 반환되는 <see cref="T:System.Data.Entity.Core.Objects.ObjectResult`1" />의 엔터티 형식입니다.이 형식은 <see cref="T:System.Data.Entity.Core.Objects.DataClasses.IEntityWithChangeTracker" />를 구현해야 합니다.</typeparam>
      <exception cref="T:System.ArgumentException">함수가 null 또는 비어 있거나 함수를 찾을 수 없는 경우</exception>
      <exception cref="T:System.InvalidOperationException">엔터티 판독기에서 이 함수를 지원하지 않거나 판독기와 함수 사이에 형식 불일치가 존재하는 경우</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.ExecuteFunction(System.String,System.Data.Entity.Core.Objects.ObjectParameter[])">
      <summary>데이터 소스에 정의되어 있으며 개념적 모델로 표현되는 저장 프로시저 또는 함수를 실행합니다. 함수에서 반환되는 결과는 모두 무시되고 실행의 영향을 받는 행 수가 반환됩니다.</summary>
      <returns>영향을 받은 행 수입니다.</returns>
      <param name="functionName">저장 프로시저나 함수의 이름입니다.이름에는 &amp;lt;Container Name&amp;gt;.&amp;lt;Function Name&amp;gt;과 같은 컨테이너 이름이 포함될 수 있습니다.기본 컨테이너 이름이 알려져 있으면 함수 이름만 필요합니다.</param>
      <param name="parameters">
        <see cref="T:System.Data.Entity.Core.Objects.ObjectParameter" /> 개체의 배열</param>
      <exception cref="T:System.ArgumentException">함수가 null 또는 비어 있거나 함수를 찾을 수 없는 경우</exception>
      <exception cref="T:System.InvalidOperationException">엔터티 판독기에서 이 함수를 지원하지 않거나 판독기와 함수 사이에 형식 불일치가 존재하는 경우</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.ExecuteFunction``1(System.String,System.Data.Entity.Core.Objects.ObjectParameter[])">
      <summary>데이터 소스에 정의되어 있으며 개념적 모델에 매핑되는 저장 프로시저 또는 함수를 지정된 매개 변수를 사용하여 실행합니다.형식화된 <see cref="T:System.Data.Entity.Core.Objects.ObjectResult`1" />를 반환합니다.</summary>
      <returns>저장 프로시저에서 반환하는 데이터의 <see cref="T:System.Data.Entity.Core.Objects.ObjectResult`1" />입니다.</returns>
      <param name="functionName">저장 프로시저나 함수의 이름입니다.이름에는 &amp;lt;Container Name&amp;gt;.&amp;lt;Function Name&amp;gt;과 같은 컨테이너 이름이 포함될 수 있습니다.기본 컨테이너 이름이 알려져 있으면 함수 이름만 필요합니다.</param>
      <param name="parameters">
        <see cref="T:System.Data.Entity.Core.Objects.ObjectParameter" /> 개체의 배열</param>
      <typeparam name="TElement">함수가 데이터 원본에 대해 실행될 때 반환되는 <see cref="T:System.Data.Entity.Core.Objects.ObjectResult`1" />의 엔터티 형식입니다.이 형식은 <see cref="T:System.Data.Entity.Core.Objects.DataClasses.IEntityWithChangeTracker" />를 구현해야 합니다.</typeparam>
      <exception cref="T:System.ArgumentException">함수가 null 또는 비어 있거나 함수를 찾을 수 없는 경우</exception>
      <exception cref="T:System.InvalidOperationException">엔터티 판독기에서 이 함수를 지원하지 않거나 판독기와 함수 사이에 형식 불일치가 존재하는 경우</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.ExecuteStoreCommand(System.Data.Entity.TransactionalBehavior,System.String,System.Object[])">
      <summary>기존 연결을 사용하여 데이터 소스에 대해 직접 임의의 명령을 실행합니다.명령은 SQL과 같은 서버의 기본 쿼리 언어를 사용하여 지정됩니다.SQL을 허용하는 API와 마찬가지로 사용자 입력을 매개 변수화하여 SQL 삽입 공격으로부터 보호해야 합니다.SQL 쿼리 문자열에 매개 변수 자리 표시자를 포함한 다음 매개 변수 값을 추가 인수로 제공할 수 있습니다.제공하는 매개 변수 값은 모두 DbParameter로 자동 변환됩니다.context.ExecuteStoreCommand("UPDATE dbo.Posts SET Rating = 5 WHERE Author = @p0", userSuppliedAuthor); 또는 DbParameter를 생성하여 SqlQuery에 제공할 수도 있습니다.그러면 SQL 쿼리 문자열에 명명된 매개 변수를 사용할 수 있습니다.context.ExecuteStoreCommand("UPDATE dbo.Posts SET Rating = 5 WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor));</summary>
      <returns>영향을 받은 행 수입니다.</returns>
      <param name="transactionalBehavior">이 명령에 대한 트랜잭션의 생성을 제어합니다.</param>
      <param name="commandText">서버의 기본 쿼리 언어로 지정된 명령입니다.</param>
      <param name="parameters">쿼리에 사용할 매개 변수 값입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.ExecuteStoreCommand(System.String,System.Object[])">
      <summary>기존 연결을 사용하여 데이터 소스에 대해 직접 임의의 명령을 실행합니다.명령은 SQL과 같은 서버의 기본 쿼리 언어를 사용하여 지정됩니다.SQL을 허용하는 API와 마찬가지로 사용자 입력을 매개 변수화하여 SQL 삽입 공격으로부터 보호해야 합니다.SQL 쿼리 문자열에 매개 변수 자리 표시자를 포함한 다음 매개 변수 값을 추가 인수로 제공할 수 있습니다.제공하는 매개 변수 값은 모두 DbParameter로 자동 변환됩니다.context.ExecuteStoreCommand("UPDATE dbo.Posts SET Rating = 5 WHERE Author = @p0", userSuppliedAuthor); 또는 DbParameter를 생성하여 SqlQuery에 제공할 수도 있습니다.그러면 SQL 쿼리 문자열에 명명된 매개 변수를 사용할 수 있습니다.context.ExecuteStoreCommand("UPDATE dbo.Posts SET Rating = 5 WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor));</summary>
      <returns>영향을 받은 행 수입니다.</returns>
      <param name="commandText">서버의 기본 쿼리 언어로 지정된 명령입니다.</param>
      <param name="parameters">쿼리에 사용할 매개 변수 값입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.ExecuteStoreCommandAsync(System.Data.Entity.TransactionalBehavior,System.String,System.Object[])">
      <summary>기존 연결을 사용하여 데이터 소스에 대해 직접 임의의 명령을 비동기적으로 실행합니다.명령은 SQL과 같은 서버의 기본 쿼리 언어를 사용하여 지정됩니다.SQL을 허용하는 API와 마찬가지로 사용자 입력을 매개 변수화하여 SQL 삽입 공격으로부터 보호해야 합니다.SQL 쿼리 문자열에 매개 변수 자리 표시자를 포함한 다음 매개 변수 값을 추가 인수로 제공할 수 있습니다.제공하는 매개 변수 값은 모두 DbParameter로 자동 변환됩니다.context.ExecuteStoreCommandAsync("UPDATE dbo.Posts SET Rating = 5 WHERE Author = @p0", userSuppliedAuthor); Alternatively, you can also construct a DbParameter and supply it to SqlQuery.그러면 SQL 쿼리 문자열에 명명된 매개 변수를 사용할 수 있습니다.context.ExecuteStoreCommandAsync("UPDATE dbo.Posts SET Rating = 5 WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor));</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.작업 결과에는 영향을 받는 행 수가 포함됩니다.</returns>
      <param name="transactionalBehavior">이 명령에 대한 트랜잭션의 생성을 제어합니다.</param>
      <param name="commandText">서버의 기본 쿼리 언어로 지정된 명령입니다.</param>
      <param name="parameters">쿼리에 사용할 매개 변수 값입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.ExecuteStoreCommandAsync(System.Data.Entity.TransactionalBehavior,System.String,System.Threading.CancellationToken,System.Object[])">
      <summary>기존 연결을 사용하여 데이터 소스에 대해 직접 임의의 명령을 비동기적으로 실행합니다.명령은 SQL과 같은 서버의 기본 쿼리 언어를 사용하여 지정됩니다.SQL을 허용하는 API와 마찬가지로 사용자 입력을 매개 변수화하여 SQL 삽입 공격으로부터 보호해야 합니다.SQL 쿼리 문자열에 매개 변수 자리 표시자를 포함한 다음 매개 변수 값을 추가 인수로 제공할 수 있습니다.제공하는 매개 변수 값은 모두 DbParameter로 자동 변환됩니다.context.ExecuteStoreCommandAsync("UPDATE dbo.Posts SET Rating = 5 WHERE Author = @p0", userSuppliedAuthor); Alternatively, you can also construct a DbParameter and supply it to SqlQuery.그러면 SQL 쿼리 문자열에 명명된 매개 변수를 사용할 수 있습니다.context.ExecuteStoreCommandAsync("UPDATE dbo.Posts SET Rating = 5 WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor));</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.작업 결과에는 영향을 받는 행 수가 포함됩니다.</returns>
      <param name="transactionalBehavior">이 명령에 대한 트랜잭션의 생성을 제어합니다.</param>
      <param name="commandText">서버의 기본 쿼리 언어로 지정된 명령입니다.</param>
      <param name="cancellationToken">작업이 완료되기를 기다리는 동안 관찰할 <see cref="T:System.Threading.CancellationToken" />입니다.</param>
      <param name="parameters">쿼리에 사용할 매개 변수 값입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.ExecuteStoreCommandAsync(System.String,System.Object[])">
      <summary>기존 연결을 사용하여 데이터 소스에 대해 직접 임의의 명령을 비동기적으로 실행합니다.명령은 SQL과 같은 서버의 기본 쿼리 언어를 사용하여 지정됩니다.SQL을 허용하는 API와 마찬가지로 사용자 입력을 매개 변수화하여 SQL 삽입 공격으로부터 보호해야 합니다.SQL 쿼리 문자열에 매개 변수 자리 표시자를 포함한 다음 매개 변수 값을 추가 인수로 제공할 수 있습니다.제공하는 매개 변수 값은 모두 DbParameter로 자동 변환됩니다.context.ExecuteStoreCommandAsync("UPDATE dbo.Posts SET Rating = 5 WHERE Author = @p0", userSuppliedAuthor); Alternatively, you can also construct a DbParameter and supply it to SqlQuery.그러면 SQL 쿼리 문자열에 명명된 매개 변수를 사용할 수 있습니다.context.ExecuteStoreCommandAsync("UPDATE dbo.Posts SET Rating = 5 WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor));</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.작업 결과에는 영향을 받는 행 수가 포함됩니다.</returns>
      <param name="commandText">서버의 기본 쿼리 언어로 지정된 명령입니다.</param>
      <param name="parameters">쿼리에 사용할 매개 변수 값입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.ExecuteStoreCommandAsync(System.String,System.Threading.CancellationToken,System.Object[])">
      <summary>기존 연결을 사용하여 데이터 소스에 대해 직접 임의의 명령을 비동기적으로 실행합니다.명령은 SQL과 같은 서버의 기본 쿼리 언어를 사용하여 지정됩니다.SQL을 허용하는 API와 마찬가지로 사용자 입력을 매개 변수화하여 SQL 삽입 공격으로부터 보호해야 합니다.SQL 쿼리 문자열에 매개 변수 자리 표시자를 포함한 다음 매개 변수 값을 추가 인수로 제공할 수 있습니다.제공하는 매개 변수 값은 모두 DbParameter로 자동 변환됩니다.context.ExecuteStoreCommandAsync("UPDATE dbo.Posts SET Rating = 5 WHERE Author = @p0", userSuppliedAuthor); Alternatively, you can also construct a DbParameter and supply it to SqlQuery.그러면 SQL 쿼리 문자열에 명명된 매개 변수를 사용할 수 있습니다.context.ExecuteStoreCommandAsync("UPDATE dbo.Posts SET Rating = 5 WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor));</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.작업 결과에는 영향을 받는 행 수가 포함됩니다.</returns>
      <param name="commandText">서버의 기본 쿼리 언어로 지정된 명령입니다.</param>
      <param name="cancellationToken">작업이 완료되기를 기다리는 동안 관찰할 <see cref="T:System.Threading.CancellationToken" />입니다.</param>
      <param name="parameters">쿼리에 사용할 매개 변수 값입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.ExecuteStoreQuery``1(System.String,System.Data.Entity.Core.Objects.ExecutionOptions,System.Object[])">
      <summary>쿼리를 데이터 소스에 대해 직접 실행하고 형식화된 결과의 시퀀스를 반환합니다.쿼리는 SQL과 같은 서버의 기본 쿼리 언어를 사용하여 지정됩니다.결과가 컨텍스트에서 추적되지 않으며, 엔터티 집합 이름을 지정하는 오버로드를 사용해서 결과를 추적합니다.SQL을 허용하는 API와 마찬가지로 사용자 입력을 매개 변수화하여 SQL 삽입 공격으로부터 보호해야 합니다.SQL 쿼리 문자열에 매개 변수 자리 표시자를 포함한 다음 매개 변수 값을 추가 인수로 제공할 수 있습니다.제공하는 매개 변수 값은 모두 DbParameter로 자동 변환됩니다.context.ExecuteStoreQuery&amp;amp;lt;Post&amp;amp;gt;("SELECT * FROM dbo.Posts WHERE Author = @p0", userSuppliedAuthor); 또는 DbParameter를 생성하여 SqlQuery에 제공할 수도 있습니다.그러면 SQL 쿼리 문자열에 명명된 매개 변수를 사용할 수 있습니다.context.ExecuteStoreQuery&amp;amp;lt;Post&amp;amp;gt;("SELECT * FROM dbo.Posts WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor));</summary>
      <returns>
        <paramref name="TElement" /> 형식의 개체 열거형입니다.</returns>
      <param name="commandText">서버의 기본 쿼리 언어로 지정된 쿼리입니다.</param>
      <param name="executionOptions">이 쿼리를 실행하기 위한 옵션입니다.</param>
      <param name="parameters">쿼리에 사용할 매개 변수 값입니다.</param>
      <typeparam name="TElement">결과 시퀀스의 요소 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.ExecuteStoreQuery``1(System.String,System.Object[])">
      <summary>쿼리를 데이터 소스에 대해 직접 실행하고 형식화된 결과의 시퀀스를 반환합니다.쿼리는 SQL과 같은 서버의 기본 쿼리 언어를 사용하여 지정됩니다.결과가 컨텍스트에서 추적되지 않으며, 엔터티 집합 이름을 지정하는 오버로드를 사용해서 결과를 추적합니다.SQL을 허용하는 API와 마찬가지로 사용자 입력을 매개 변수화하여 SQL 삽입 공격으로부터 보호해야 합니다.SQL 쿼리 문자열에 매개 변수 자리 표시자를 포함한 다음 매개 변수 값을 추가 인수로 제공할 수 있습니다.제공하는 매개 변수 값은 모두 DbParameter로 자동 변환됩니다.context.ExecuteStoreQuery&amp;amp;lt;Post&amp;amp;gt;("SELECT * FROM dbo.Posts WHERE Author = @p0", userSuppliedAuthor); 또는 DbParameter를 생성하여 SqlQuery에 제공할 수도 있습니다.그러면 SQL 쿼리 문자열에 명명된 매개 변수를 사용할 수 있습니다.context.ExecuteStoreQuery&amp;amp;lt;Post&amp;amp;gt;("SELECT * FROM dbo.Posts WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor));</summary>
      <returns>
        <paramref name="TElement" /> 형식의 개체 열거형입니다.</returns>
      <param name="commandText">서버의 기본 쿼리 언어로 지정된 쿼리입니다.</param>
      <param name="parameters">쿼리에 사용할 매개 변수 값입니다.</param>
      <typeparam name="TElement">결과 시퀀스의 요소 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.ExecuteStoreQuery``1(System.String,System.String,System.Data.Entity.Core.Objects.ExecutionOptions,System.Object[])">
      <summary>쿼리를 데이터 소스에 대해 직접 실행하고 형식화된 결과의 시퀀스를 반환합니다.쿼리는 SQL과 같은 서버의 기본 쿼리 언어를 사용하여 지정됩니다.엔터티 집합 이름이 지정되지 않았으면 결과가 컨텍스트에서 추적됩니다.SQL을 허용하는 API와 마찬가지로 사용자 입력을 매개 변수화하여 SQL 삽입 공격으로부터 보호해야 합니다.SQL 쿼리 문자열에 매개 변수 자리 표시자를 포함한 다음 매개 변수 값을 추가 인수로 제공할 수 있습니다.제공하는 매개 변수 값은 모두 DbParameter로 자동 변환됩니다.context.ExecuteStoreQuery&amp;amp;lt;Post&amp;amp;gt;("SELECT * FROM dbo.Posts WHERE Author = @p0", userSuppliedAuthor); 또는 DbParameter를 생성하여 SqlQuery에 제공할 수도 있습니다.그러면 SQL 쿼리 문자열에 명명된 매개 변수를 사용할 수 있습니다.context.ExecuteStoreQuery&amp;amp;lt;Post&amp;amp;gt;("SELECT * FROM dbo.Posts WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor));</summary>
      <returns>
        <paramref name="TElement" /> 형식의 개체 열거형입니다.</returns>
      <param name="commandText">서버의 기본 쿼리 언어로 지정된 쿼리입니다.</param>
      <param name="entitySetName">TResult 형식의 엔터티 집합입니다.엔터티 집합 이름을 제공하지 않으면 결과가 추적되지 않습니다.</param>
      <param name="executionOptions">이 쿼리를 실행하기 위한 옵션입니다.</param>
      <param name="parameters">쿼리에 사용할 매개 변수 값입니다.</param>
      <typeparam name="TElement">결과 시퀀스의 요소 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.ExecuteStoreQuery``1(System.String,System.String,System.Data.Entity.Core.Objects.MergeOption,System.Object[])">
      <summary>쿼리를 데이터 소스에 대해 직접 실행하고 형식화된 결과의 시퀀스를 반환합니다.쿼리는 SQL과 같은 서버의 기본 쿼리 언어를 사용하여 지정됩니다.엔터티 집합 이름이 지정되지 않았으면 결과가 컨텍스트에서 추적됩니다.SQL을 허용하는 API와 마찬가지로 사용자 입력을 매개 변수화하여 SQL 삽입 공격으로부터 보호해야 합니다.SQL 쿼리 문자열에 매개 변수 자리 표시자를 포함한 다음 매개 변수 값을 추가 인수로 제공할 수 있습니다.제공하는 매개 변수 값은 모두 DbParameter로 자동 변환됩니다.context.ExecuteStoreQuery&amp;amp;lt;Post&amp;amp;gt;("SELECT * FROM dbo.Posts WHERE Author = @p0", userSuppliedAuthor); 또는 DbParameter를 생성하여 SqlQuery에 제공할 수도 있습니다.그러면 SQL 쿼리 문자열에 명명된 매개 변수를 사용할 수 있습니다.context.ExecuteStoreQuery&amp;amp;lt;Post&amp;amp;gt;("SELECT * FROM dbo.Posts WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor));</summary>
      <returns>
        <paramref name="TElement" /> 형식의 개체 열거형입니다.</returns>
      <param name="commandText">서버의 기본 쿼리 언어로 지정된 쿼리입니다.</param>
      <param name="entitySetName">TResult 형식의 엔터티 집합입니다.엔터티 집합 이름을 제공하지 않으면 결과가 추적되지 않습니다.</param>
      <param name="mergeOption">쿼리를 실행할 때 사용할 <see cref="T:System.Data.Entity.Core.Objects.MergeOption" />입니다.기본값은 <see cref="F:System.Data.Entity.Core.Objects.MergeOption.AppendOnly" />입니다.</param>
      <param name="parameters">쿼리에 사용할 매개 변수 값입니다.</param>
      <typeparam name="TElement">결과 시퀀스의 요소 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.ExecuteStoreQueryAsync``1(System.String,System.Data.Entity.Core.Objects.ExecutionOptions,System.Object[])">
      <summary>쿼리를 데이터 소스에 대해 직접 비동기적으로 실행하고 형식화된 결과의 시퀀스를 반환합니다.쿼리는 SQL과 같은 서버의 기본 쿼리 언어를 사용하여 지정됩니다.결과가 컨텍스트에서 추적되지 않으며, 엔터티 집합 이름을 지정하는 오버로드를 사용해서 결과를 추적합니다.SQL을 허용하는 API와 마찬가지로 사용자 입력을 매개 변수화하여 SQL 삽입 공격으로부터 보호해야 합니다.SQL 쿼리 문자열에 매개 변수 자리 표시자를 포함한 다음 매개 변수 값을 추가 인수로 제공할 수 있습니다.제공하는 매개 변수 값은 모두 DbParameter로 자동 변환됩니다.context.ExecuteStoreQueryAsync&amp;amp;lt;Post&amp;amp;gt;("SELECT * FROM dbo.Posts WHERE Author = @p0", userSuppliedAuthor); Alternatively, you can also construct a DbParameter and supply it to SqlQuery.그러면 SQL 쿼리 문자열에 명명된 매개 변수를 사용할 수 있습니다.context.ExecuteStoreQueryAsync&amp;amp;lt;Post&amp;amp;gt;("SELECT * FROM dbo.Posts WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor));</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.작업 결과에는 <paramref name="TElement" /> 형식의 개체 열거형이 포함됩니다.</returns>
      <param name="commandText">서버의 기본 쿼리 언어로 지정된 쿼리입니다.</param>
      <param name="executionOptions">이 쿼리를 실행하기 위한 옵션입니다.</param>
      <param name="parameters">쿼리에 사용할 매개 변수 값입니다.</param>
      <typeparam name="TElement">결과 시퀀스의 요소 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.ExecuteStoreQueryAsync``1(System.String,System.Data.Entity.Core.Objects.ExecutionOptions,System.Threading.CancellationToken,System.Object[])">
      <summary>쿼리를 데이터 소스에 대해 직접 비동기적으로 실행하고 형식화된 결과의 시퀀스를 반환합니다.쿼리는 SQL과 같은 서버의 기본 쿼리 언어를 사용하여 지정됩니다.결과가 컨텍스트에서 추적되지 않으며, 엔터티 집합 이름을 지정하는 오버로드를 사용해서 결과를 추적합니다.SQL을 허용하는 API와 마찬가지로 사용자 입력을 매개 변수화하여 SQL 삽입 공격으로부터 보호해야 합니다.SQL 쿼리 문자열에 매개 변수 자리 표시자를 포함한 다음 매개 변수 값을 추가 인수로 제공할 수 있습니다.제공하는 매개 변수 값은 모두 DbParameter로 자동 변환됩니다.context.ExecuteStoreQueryAsync&amp;amp;lt;Post&amp;amp;gt;("SELECT * FROM dbo.Posts WHERE Author = @p0", userSuppliedAuthor); Alternatively, you can also construct a DbParameter and supply it to SqlQuery.그러면 SQL 쿼리 문자열에 명명된 매개 변수를 사용할 수 있습니다.context.ExecuteStoreQueryAsync&amp;amp;lt;Post&amp;amp;gt;("SELECT * FROM dbo.Posts WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor));</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.작업 결과에는 <paramref name="TElement" /> 형식의 개체 열거형이 포함됩니다.</returns>
      <param name="commandText">서버의 기본 쿼리 언어로 지정된 쿼리입니다.</param>
      <param name="executionOptions">이 쿼리를 실행하기 위한 옵션입니다.</param>
      <param name="cancellationToken">작업이 완료되기를 기다리는 동안 관찰할 <see cref="T:System.Threading.CancellationToken" />입니다.</param>
      <param name="parameters">쿼리에 사용할 매개 변수 값입니다.</param>
      <typeparam name="TElement">결과 시퀀스의 요소 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.ExecuteStoreQueryAsync``1(System.String,System.Object[])">
      <summary>쿼리를 데이터 소스에 대해 직접 비동기적으로 실행하고 형식화된 결과의 시퀀스를 반환합니다.쿼리는 SQL과 같은 서버의 기본 쿼리 언어를 사용하여 지정됩니다.결과가 컨텍스트에서 추적되지 않으며, 엔터티 집합 이름을 지정하는 오버로드를 사용해서 결과를 추적합니다.SQL을 허용하는 API와 마찬가지로 사용자 입력을 매개 변수화하여 SQL 삽입 공격으로부터 보호해야 합니다.SQL 쿼리 문자열에 매개 변수 자리 표시자를 포함한 다음 매개 변수 값을 추가 인수로 제공할 수 있습니다.제공하는 매개 변수 값은 모두 DbParameter로 자동 변환됩니다.context.ExecuteStoreQueryAsync&amp;amp;lt;Post&amp;amp;gt;("SELECT * FROM dbo.Posts WHERE Author = @p0", userSuppliedAuthor); Alternatively, you can also construct a DbParameter and supply it to SqlQuery.그러면 SQL 쿼리 문자열에 명명된 매개 변수를 사용할 수 있습니다.context.ExecuteStoreQueryAsync&amp;amp;lt;Post&amp;amp;gt;("SELECT * FROM dbo.Posts WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor));</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.작업 결과에는 <paramref name="TElement" /> 형식의 개체 열거형이 포함됩니다.</returns>
      <param name="commandText">서버의 기본 쿼리 언어로 지정된 쿼리입니다.</param>
      <param name="parameters">쿼리에 사용할 매개 변수 값입니다.</param>
      <typeparam name="TElement">결과 시퀀스의 요소 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.ExecuteStoreQueryAsync``1(System.String,System.String,System.Data.Entity.Core.Objects.ExecutionOptions,System.Object[])">
      <summary>쿼리를 데이터 소스에 대해 직접 비동기적으로 실행하고 형식화된 결과의 시퀀스를 반환합니다.쿼리는 SQL과 같은 서버의 기본 쿼리 언어를 사용하여 지정됩니다.엔터티 집합 이름이 지정되지 않았으면 결과가 컨텍스트에서 추적됩니다.SQL을 허용하는 API와 마찬가지로 사용자 입력을 매개 변수화하여 SQL 삽입 공격으로부터 보호해야 합니다.SQL 쿼리 문자열에 매개 변수 자리 표시자를 포함한 다음 매개 변수 값을 추가 인수로 제공할 수 있습니다.제공하는 매개 변수 값은 모두 DbParameter로 자동 변환됩니다.context.ExecuteStoreQueryAsync&amp;amp;lt;Post&amp;amp;gt;("SELECT * FROM dbo.Posts WHERE Author = @p0", userSuppliedAuthor); Alternatively, you can also construct a DbParameter and supply it to SqlQuery.그러면 SQL 쿼리 문자열에 명명된 매개 변수를 사용할 수 있습니다.context.ExecuteStoreQueryAsync&amp;amp;lt;Post&amp;amp;gt;("SELECT * FROM dbo.Posts WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor));</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.작업 결과에는 <paramref name="TElement" /> 형식의 개체 열거형이 포함됩니다.</returns>
      <param name="commandText">서버의 기본 쿼리 언어로 지정된 쿼리입니다.</param>
      <param name="entitySetName">TResult 형식의 엔터티 집합입니다.엔터티 집합 이름을 제공하지 않으면 결과가 추적되지 않습니다.</param>
      <param name="executionOptions">이 쿼리를 실행하기 위한 옵션입니다.</param>
      <param name="parameters">쿼리에 사용할 매개 변수 값입니다.</param>
      <typeparam name="TElement">결과 시퀀스의 요소 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.ExecuteStoreQueryAsync``1(System.String,System.String,System.Data.Entity.Core.Objects.ExecutionOptions,System.Threading.CancellationToken,System.Object[])">
      <summary>쿼리를 데이터 소스에 대해 직접 비동기적으로 실행하고 형식화된 결과의 시퀀스를 반환합니다.쿼리는 SQL과 같은 서버의 기본 쿼리 언어를 사용하여 지정됩니다.엔터티 집합 이름이 지정되지 않았으면 결과가 컨텍스트에서 추적됩니다.SQL을 허용하는 API와 마찬가지로 사용자 입력을 매개 변수화하여 SQL 삽입 공격으로부터 보호해야 합니다.SQL 쿼리 문자열에 매개 변수 자리 표시자를 포함한 다음 매개 변수 값을 추가 인수로 제공할 수 있습니다.제공하는 매개 변수 값은 모두 DbParameter로 자동 변환됩니다.context.ExecuteStoreQueryAsync&amp;amp;lt;Post&amp;amp;gt;("SELECT * FROM dbo.Posts WHERE Author = @p0", userSuppliedAuthor); Alternatively, you can also construct a DbParameter and supply it to SqlQuery.그러면 SQL 쿼리 문자열에 명명된 매개 변수를 사용할 수 있습니다.context.ExecuteStoreQueryAsync&amp;amp;lt;Post&amp;amp;gt;("SELECT * FROM dbo.Posts WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor));</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.작업 결과에는 <paramref name="TElement" /> 형식의 개체 열거형이 포함됩니다.</returns>
      <param name="commandText">서버의 기본 쿼리 언어로 지정된 쿼리입니다.</param>
      <param name="entitySetName">TResult 형식의 엔터티 집합입니다.엔터티 집합 이름을 제공하지 않으면 결과가 추적되지 않습니다.</param>
      <param name="executionOptions">이 쿼리를 실행하기 위한 옵션입니다.</param>
      <param name="cancellationToken">작업이 완료되기를 기다리는 동안 관찰할 <see cref="T:System.Threading.CancellationToken" />입니다.</param>
      <param name="parameters">쿼리에 사용할 매개 변수 값입니다.</param>
      <typeparam name="TElement">결과 시퀀스의 요소 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.ExecuteStoreQueryAsync``1(System.String,System.Threading.CancellationToken,System.Object[])">
      <summary>쿼리를 데이터 소스에 대해 직접 비동기적으로 실행하고 형식화된 결과의 시퀀스를 반환합니다.쿼리는 SQL과 같은 서버의 기본 쿼리 언어를 사용하여 지정됩니다.결과가 컨텍스트에서 추적되지 않으며, 엔터티 집합 이름을 지정하는 오버로드를 사용해서 결과를 추적합니다.SQL을 허용하는 API와 마찬가지로 사용자 입력을 매개 변수화하여 SQL 삽입 공격으로부터 보호해야 합니다.SQL 쿼리 문자열에 매개 변수 자리 표시자를 포함한 다음 매개 변수 값을 추가 인수로 제공할 수 있습니다.제공하는 매개 변수 값은 모두 DbParameter로 자동 변환됩니다.context.ExecuteStoreQueryAsync&amp;amp;lt;Post&amp;amp;gt;("SELECT * FROM dbo.Posts WHERE Author = @p0", userSuppliedAuthor); Alternatively, you can also construct a DbParameter and supply it to SqlQuery.그러면 SQL 쿼리 문자열에 명명된 매개 변수를 사용할 수 있습니다.context.ExecuteStoreQueryAsync&amp;amp;lt;Post&amp;amp;gt;("SELECT * FROM dbo.Posts WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor));</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.작업 결과에는 <paramref name="TElement" /> 형식의 개체 열거형이 포함됩니다.</returns>
      <param name="commandText">서버의 기본 쿼리 언어로 지정된 쿼리입니다.</param>
      <param name="cancellationToken">작업이 완료되기를 기다리는 동안 관찰할 <see cref="T:System.Threading.CancellationToken" />입니다.</param>
      <param name="parameters">쿼리에 사용할 매개 변수 값입니다.</param>
      <typeparam name="TElement">결과 시퀀스의 요소 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.GetKnownProxyTypes">
      <summary>기존 프록시 형식을 모두 반환합니다.</summary>
      <returns>모든 기존 프록시 형식의 <see cref="T:System.Collections.Generic.IEnumerable`1" />입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.GetObjectByKey(System.Data.Entity.Core.EntityKey)">
      <summary>지정된 엔터티 키가 있는 개체를 반환합니다.</summary>
      <returns>엔터티 형식의 인스턴스인 <see cref="T:System.Object" />입니다.</returns>
      <param name="key">찾을 개체의 키입니다.</param>
      <exception cref="T:System.ArgumentNullException">key 매개 변수가 null인 경우</exception>
      <exception cref="T:System.Data.Entity.Core.ObjectNotFoundException">
        <see cref="T:System.Data.Entity.Core.Objects.ObjectStateManager" /> 또는 데이터 원본에서 개체를 찾을 수 없는 경우</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.GetObjectType(System.Type)">
      <summary>지정된 형식의 프록시 개체와 연결된 POCO 엔터티의 엔터티 형식을 반환합니다.</summary>
      <returns>연결된 POCO 엔터티의 <see cref="T:System.Type" />입니다.</returns>
      <param name="type">프록시 개체의 <see cref="T:System.Type" />입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.LoadProperty(System.Object,System.String)">
      <summary>지정된 탐색 속성과 기본 병합 옵션을 사용하여 제공된 개체와 관련된 개체를 명시적으로 로드합니다.</summary>
      <param name="entity">관련 개체를 로드할 엔터티입니다.</param>
      <param name="navigationProperty">로드할 관련 개체를 반환하는 탐색 속성의 이름입니다.</param>
      <exception cref="T:System.InvalidOperationException">엔터티가 <see cref="F:System.Data.Entity.EntityState.Detached" />, <see cref="F:System.Data.Entity.EntityState.Added," /> 또는 <see cref="F:System.Data.Entity.EntityState.Deleted" /> 상태이거나 엔터티가 <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" />의 다른 인스턴스에 연결된 경우</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.LoadProperty(System.Object,System.String,System.Data.Entity.Core.Objects.MergeOption)">
      <summary>지정된 탐색 속성과 지정된 병합 옵션을 사용하여 제공된 개체와 관련된 개체를 명시적으로 로드합니다.</summary>
      <param name="entity">관련 개체를 로드할 엔터티입니다.</param>
      <param name="navigationProperty">로드할 관련 개체를 반환하는 탐색 속성의 이름입니다.</param>
      <param name="mergeOption">관련 개체를 로드할 때 사용할 <see cref="T:System.Data.Entity.Core.Objects.MergeOption" /> 값입니다.</param>
      <exception cref="T:System.InvalidOperationException">엔터티가 <see cref="F:System.Data.Entity.EntityState.Detached" />, <see cref="F:System.Data.Entity.EntityState.Added," /> 또는 <see cref="F:System.Data.Entity.EntityState.Deleted" /> 상태이거나 엔터티가 <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" />의 다른 인스턴스에 연결된 경우</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.LoadProperty``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
      <summary>지정된 LINQ 쿼리와 기본 병합 옵션을 사용하여 제공된 개체와 관련된 개체를 명시적으로 로드합니다.</summary>
      <param name="entity">관련 개체를 로드할 소스 개체입니다.</param>
      <param name="selector">로드할 관련 개체를 정의하는 LINQ 식입니다.</param>
      <typeparam name="TEntity"></typeparam>
      <exception cref="T:System.ArgumentException">선택기가 유효한 입력 매개 변수를 제공하지 않는 경우</exception>
      <exception cref="T:System.ArgumentNullException">선택기가 null인 경우</exception>
      <exception cref="T:System.InvalidOperationException">엔터티가 <see cref="F:System.Data.Entity.EntityState.Detached" />, <see cref="F:System.Data.Entity.EntityState.Added," /> 또는 <see cref="F:System.Data.Entity.EntityState.Deleted" /> 상태이거나 엔터티가 <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" />의 다른 인스턴스에 연결된 경우</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.LoadProperty``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Data.Entity.Core.Objects.MergeOption)">
      <summary>지정된 LINQ 쿼리와 지정된 병합 옵션을 사용하여 제공된 개체와 관련된 개체를 명시적으로 로드합니다.</summary>
      <param name="entity">관련 개체를 로드할 소스 개체입니다.</param>
      <param name="selector">로드할 관련 개체를 정의하는 LINQ 식입니다.</param>
      <param name="mergeOption">관련 개체를 로드할 때 사용할 <see cref="T:System.Data.Entity.Core.Objects.MergeOption" /> 값입니다.</param>
      <typeparam name="TEntity"></typeparam>
      <exception cref="T:System.ArgumentException">선택기가 유효한 입력 매개 변수를 제공하지 않는 경우</exception>
      <exception cref="T:System.ArgumentNullException">선택기가 null인 경우</exception>
      <exception cref="T:System.InvalidOperationException">엔터티가 <see cref="F:System.Data.Entity.EntityState.Detached" />, <see cref="F:System.Data.Entity.EntityState.Added," /> 또는 <see cref="F:System.Data.Entity.EntityState.Deleted" /> 상태이거나 엔터티가 <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" />의 다른 인스턴스에 연결된 경우</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectContext.MetadataWorkspace">
      <summary>개체 컨텍스트에서 사용하는 메타데이터 작업 영역을 가져옵니다.</summary>
      <returns>이 <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" />와 연결된 <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace" /> 개체입니다.</returns>
    </member>
    <member name="E:System.Data.Entity.Core.Objects.ObjectContext.ObjectMaterialized">
      <summary>쿼리 작업이나 로드 작업의 일부로 데이터 소스의 데이터에서 새 엔터티 개체가 만들어지는 경우 발생합니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectContext.ObjectStateManager">
      <summary>개체 변경 내용을 추적하기 위해 개체 컨텍스트에서 사용하는 개체 상태 관리자를 가져옵니다.</summary>
      <returns>이 <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" />에서 사용하는 <see cref="T:System.Data.Entity.Core.Objects.ObjectStateManager" />입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectContext.QueryProvider">
      <summary>이 개체 컨텍스트와 연결된 LINQ 쿼리 공급자를 가져옵니다.</summary>
      <returns>이 개체 컨텍스트에서 사용하는 <see cref="T:System.Linq.IQueryProvider" /> 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.Refresh(System.Data.Entity.Core.Objects.RefreshMode,System.Collections.IEnumerable)">
      <summary>개체 컨텍스트의 개체 컬렉션을 데이터베이스의 데이터로 업데이트합니다.</summary>
      <param name="refreshMode">개체 컨텍스트의 속성 변경 내용을 데이터베이스의 속성 값으로 덮어쓸지 여부를 나타내는 <see cref="T:System.Data.Entity.Core.Objects.RefreshMode" /> 값입니다.</param>
      <param name="collection">새로 고칠 개체의 <see cref="T:System.Collections.IEnumerable" /> 컬렉션입니다.</param>
      <exception cref="T:System.ArgumentNullException">collection이 null인 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">refreshMode가 잘못된 경우</exception>
      <exception cref="T:System.ArgumentException">컬렉션이 비어 있거나 개체가 컨텍스트에 연결되지 않은 경우</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.Refresh(System.Data.Entity.Core.Objects.RefreshMode,System.Object)">
      <summary>개체 컨텍스트의 개체를 데이터베이스의 데이터로 업데이트합니다.</summary>
      <param name="refreshMode">개체 컨텍스트의 속성 변경 내용을 데이터베이스의 속성 값으로 덮어쓸지 여부를 나타내는 <see cref="T:System.Data.Entity.Core.Objects.RefreshMode" /> 값입니다.</param>
      <param name="entity">새로 고칠 개체입니다.</param>
      <exception cref="T:System.ArgumentNullException">entity가 null인 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">refreshMode가 잘못된 경우</exception>
      <exception cref="T:System.ArgumentException">엔터티가 컨텍스트에 연결되지 않은 경우</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.RefreshAsync(System.Data.Entity.Core.Objects.RefreshMode,System.Collections.IEnumerable)">
      <summary>개체 컨텍스트의 개체 컬렉션을 데이터베이스의 데이터로 비동기적으로 업데이트합니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.</returns>
      <param name="refreshMode">개체 컨텍스트의 속성 변경 내용을 데이터베이스의 속성 값으로 덮어쓸지 여부를 나타내는 <see cref="T:System.Data.Entity.Core.Objects.RefreshMode" /> 값입니다.</param>
      <param name="collection">새로 고칠 개체의 <see cref="T:System.Collections.IEnumerable" /> 컬렉션입니다.</param>
      <exception cref="T:System.ArgumentNullException">collection이 null인 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">refreshMode가 잘못된 경우</exception>
      <exception cref="T:System.ArgumentException">컬렉션이 비어 있거나 개체가 컨텍스트에 연결되지 않은 경우</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.RefreshAsync(System.Data.Entity.Core.Objects.RefreshMode,System.Collections.IEnumerable,System.Threading.CancellationToken)">
      <summary>개체 컨텍스트의 개체 컬렉션을 데이터베이스의 데이터로 비동기적으로 업데이트합니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.</returns>
      <param name="refreshMode">개체 컨텍스트의 속성 변경 내용을 데이터베이스의 속성 값으로 덮어쓸지 여부를 나타내는 <see cref="T:System.Data.Entity.Core.Objects.RefreshMode" /> 값입니다.</param>
      <param name="collection">새로 고칠 개체의 <see cref="T:System.Collections.IEnumerable" /> 컬렉션입니다.</param>
      <param name="cancellationToken">작업이 완료되기를 기다리는 동안 관찰할 <see cref="T:System.Threading.CancellationToken" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">collection이 null인 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">refreshMode가 잘못된 경우</exception>
      <exception cref="T:System.ArgumentException">컬렉션이 비어 있거나 개체가 컨텍스트에 연결되지 않은 경우</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.RefreshAsync(System.Data.Entity.Core.Objects.RefreshMode,System.Object)">
      <summary>개체 컨텍스트의 개체를 데이터베이스의 데이터로 비동기적으로 업데이트합니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.</returns>
      <param name="refreshMode">개체 컨텍스트의 속성 변경 내용을 데이터베이스의 속성 값으로 덮어쓸지 여부를 나타내는 <see cref="T:System.Data.Entity.Core.Objects.RefreshMode" /> 값입니다.</param>
      <param name="entity">새로 고칠 개체입니다.</param>
      <exception cref="T:System.ArgumentNullException">entity가 null인 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">refreshMode가 잘못된 경우</exception>
      <exception cref="T:System.ArgumentException">엔터티가 컨텍스트에 연결되지 않은 경우</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.RefreshAsync(System.Data.Entity.Core.Objects.RefreshMode,System.Object,System.Threading.CancellationToken)">
      <summary>개체 컨텍스트의 개체를 데이터베이스의 데이터로 비동기적으로 업데이트합니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.</returns>
      <param name="refreshMode">개체 컨텍스트의 속성 변경 내용을 데이터베이스의 속성 값으로 덮어쓸지 여부를 나타내는 <see cref="T:System.Data.Entity.Core.Objects.RefreshMode" /> 값입니다.</param>
      <param name="entity">새로 고칠 개체입니다.</param>
      <param name="cancellationToken">작업이 완료되기를 기다리는 동안 관찰할 <see cref="T:System.Threading.CancellationToken" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">entity가 null인 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">refreshMode가 잘못된 경우</exception>
      <exception cref="T:System.ArgumentException">엔터티가 컨텍스트에 연결되지 않은 경우</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.SaveChanges">
      <summary>데이터베이스에 대한 모든 업데이트를 유지하고 개체 컨텍스트에서 변경 내용 추적을 다시 설정합니다.</summary>
      <returns>
        <see cref="M:System.Data.Entity.Core.Objects.ObjectContext.SaveChanges" />가 호출된 경우 <see cref="F:System.Data.Entity.EntityState.Added" />, <see cref="F:System.Data.Entity.EntityState.Modified" /> 또는 <see cref="F:System.Data.Entity.EntityState.Deleted" /> 상태의 개체 수입니다.</returns>
      <exception cref="T:System.Data.Entity.Core.OptimisticConcurrencyException">변경 내용을 저장하는 중 낙관적 동시성 위반이 발생하는 경우</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.SaveChanges(System.Boolean)">
      <summary>데이터베이스에 대한 모든 업데이트를 유지하고 선택적으로 개체 컨텍스트에서 변경 내용 추적을 다시 설정합니다.</summary>
      <returns>
        <see cref="M:System.Data.Entity.Core.Objects.ObjectContext.SaveChanges" />가 호출된 경우 <see cref="F:System.Data.Entity.EntityState.Added" />, <see cref="F:System.Data.Entity.EntityState.Modified" /> 또는 <see cref="F:System.Data.Entity.EntityState.Deleted" /> 상태의 개체 수입니다.</returns>
      <param name="acceptChangesDuringSave">이 매개 변수는 클라이언트 쪽 트랜잭션을 지원하는 데 필요합니다.true이면 <see cref="M:System.Data.Entity.Core.Objects.ObjectContext.SaveChanges(System.Boolean)" />가 완료된 후 모든 개체의 변경 내용 추적이 다시 설정됩니다.false이면 <see cref="M:System.Data.Entity.Core.Objects.ObjectContext.SaveChanges(System.Boolean)" /> 후에 <see cref="M:System.Data.Entity.Core.Objects.ObjectContext.AcceptAllChanges" /> 메서드를 호출해야 합니다.</param>
      <exception cref="T:System.Data.Entity.Core.OptimisticConcurrencyException">변경 내용을 저장하는 중 낙관적 동시성 위반이 발생하는 경우</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.SaveChanges(System.Data.Entity.Core.Objects.SaveOptions)">
      <summary>데이터베이스에 대한 모든 업데이트를 유지하고 선택적으로 개체 컨텍스트에서 변경 내용 추적을 다시 설정합니다.</summary>
      <returns>
        <see cref="M:System.Data.Entity.Core.Objects.ObjectContext.SaveChanges" />가 호출된 경우 <see cref="F:System.Data.Entity.EntityState.Added" />, <see cref="F:System.Data.Entity.EntityState.Modified" /> 또는 <see cref="F:System.Data.Entity.EntityState.Deleted" /> 상태의 개체 수입니다.</returns>
      <param name="options">작업의 동작을 결정하는 <see cref="T:System.Data.Entity.Core.Objects.SaveOptions" /> 값입니다.</param>
      <exception cref="T:System.Data.Entity.Core.OptimisticConcurrencyException">변경 내용을 저장하는 중 낙관적 동시성 위반이 발생하는 경우</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.SaveChangesAsync">
      <summary>데이터베이스에 대한 모든 업데이트를 비동기적으로 유지하고 개체 컨텍스트에서 변경 내용 추적을 다시 설정합니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.작업 결과에는 <see cref="M:System.Data.Entity.Core.Objects.ObjectContext.SaveChanges" />가 호출된 경우 <see cref="F:System.Data.Entity.EntityState.Added" />, <see cref="F:System.Data.Entity.EntityState.Modified" /> 또는 <see cref="F:System.Data.Entity.EntityState.Deleted" /> 상태의 개체 수가 포함됩니다.</returns>
      <exception cref="T:System.Data.Entity.Core.OptimisticConcurrencyException">변경 내용을 저장하는 중 낙관적 동시성 위반이 발생하는 경우</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.SaveChangesAsync(System.Data.Entity.Core.Objects.SaveOptions)">
      <summary>데이터베이스에 대한 모든 업데이트를 비동기적으로 유지하고 선택적으로 개체 컨텍스트에서 변경 내용 추적을 다시 설정합니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.작업 결과에는 <see cref="M:System.Data.Entity.Core.Objects.ObjectContext.SaveChanges" />가 호출된 경우 <see cref="F:System.Data.Entity.EntityState.Added" />, <see cref="F:System.Data.Entity.EntityState.Modified" /> 또는 <see cref="F:System.Data.Entity.EntityState.Deleted" /> 상태의 개체 수가 포함됩니다.</returns>
      <param name="options">작업의 동작을 결정하는 <see cref="T:System.Data.Entity.Core.Objects.SaveOptions" /> 값입니다.</param>
      <exception cref="T:System.Data.Entity.Core.OptimisticConcurrencyException">변경 내용을 저장하는 중 낙관적 동시성 위반이 발생하는 경우</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.SaveChangesAsync(System.Data.Entity.Core.Objects.SaveOptions,System.Threading.CancellationToken)">
      <summary>데이터베이스에 대한 모든 업데이트를 비동기적으로 유지하고 선택적으로 개체 컨텍스트에서 변경 내용 추적을 다시 설정합니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.작업 결과에는 <see cref="M:System.Data.Entity.Core.Objects.ObjectContext.SaveChanges" />가 호출된 경우 <see cref="F:System.Data.Entity.EntityState.Added" />, <see cref="F:System.Data.Entity.EntityState.Modified" /> 또는 <see cref="F:System.Data.Entity.EntityState.Deleted" /> 상태의 개체 수가 포함됩니다.</returns>
      <param name="options">작업의 동작을 결정하는 <see cref="T:System.Data.Entity.Core.Objects.SaveOptions" /> 값입니다.</param>
      <param name="cancellationToken">작업이 완료되기를 기다리는 동안 관찰할 <see cref="T:System.Threading.CancellationToken" />입니다.</param>
      <exception cref="T:System.Data.Entity.Core.OptimisticConcurrencyException">변경 내용을 저장하는 중 낙관적 동시성 위반이 발생하는 경우</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.SaveChangesAsync(System.Threading.CancellationToken)">
      <summary>데이터베이스에 대한 모든 업데이트를 비동기적으로 유지하고 개체 컨텍스트에서 변경 내용 추적을 다시 설정합니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.작업 결과에는 <see cref="M:System.Data.Entity.Core.Objects.ObjectContext.SaveChanges" />가 호출된 경우 <see cref="F:System.Data.Entity.EntityState.Added" />, <see cref="F:System.Data.Entity.EntityState.Modified" /> 또는 <see cref="F:System.Data.Entity.EntityState.Deleted" /> 상태의 개체 수가 포함됩니다.</returns>
      <param name="cancellationToken">작업이 완료되기를 기다리는 동안 관찰할 <see cref="T:System.Threading.CancellationToken" />입니다.</param>
      <exception cref="T:System.Data.Entity.Core.OptimisticConcurrencyException">변경 내용을 저장하는 중 낙관적 동시성 위반이 발생하는 경우</exception>
    </member>
    <member name="E:System.Data.Entity.Core.Objects.ObjectContext.SavingChanges">
      <summary>변경 내용이 데이터 원본에 저장될 때 발생합니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectContext.System#Data#Entity#Infrastructure#IObjectContextAdapter#ObjectContext">
      <summary>자신을 반환합니다.ObjectContext는 <see cref="T:System.Data.Entity.DbContext" /> 및 ObjectContext(둘 다 기본 ObjectContext를 반환함)의 공통 인터페이스를 제공하기 위해 <see cref="T:System.Data.Entity.Infrastructure.IObjectContextAdapter" />를 구현합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.Translate``1(System.Data.Common.DbDataReader)">
      <summary>엔터티 데이터의 행이 포함된 <see cref="T:System.Data.Common.DbDataReader" />를 요청된 엔터티 형식의 개체로 변환합니다.</summary>
      <returns>TResult 형식의 개체 열거형입니다.</returns>
      <param name="reader">엔터티 개체로 변환할 엔터티 데이터를 포함하는 <see cref="T:System.Data.Common.DbDataReader" />입니다.</param>
      <typeparam name="TElement"></typeparam>
      <exception cref="T:System.ArgumentNullException">판독기가 null인 경우</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.Translate``1(System.Data.Common.DbDataReader,System.String,System.Data.Entity.Core.Objects.MergeOption)">
      <summary>엔터티 데이터의 행이 포함된 <see cref="T:System.Data.Common.DbDataReader" />를 특정 엔터티 집합에서 지정된 병합 옵션을 사용하여 요청된 엔터티 형식의 개체로 변환합니다.</summary>
      <returns>TResult 형식의 개체 열거형입니다.</returns>
      <param name="reader">엔터티 개체로 변환할 엔터티 데이터를 포함하는 <see cref="T:System.Data.Common.DbDataReader" />입니다.</param>
      <param name="entitySetName">TResult 형식의 엔터티 집합입니다.</param>
      <param name="mergeOption">변환된 개체를 개체 컨텍스트에 추가할 때 사용하는 <see cref="T:System.Data.Entity.Core.Objects.MergeOption" />입니다.기본값은 <see cref="F:System.Data.Entity.Core.Objects.MergeOption.AppendOnly" />입니다.</param>
      <typeparam name="TEntity"></typeparam>
      <exception cref="T:System.ArgumentNullException">판독기가 null인 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">제공된 mergeOption이 유효한 <see cref="T:System.Data.Entity.Core.Objects.MergeOption" /> 값이 아닌 경우</exception>
      <exception cref="T:System.InvalidOperationException">제공된 entitySetName이 TResult 형식에 대해 유효한 엔터티 집합이 아닌 경우</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.TryGetObjectByKey(System.Data.Entity.Core.EntityKey,System.Object@)">
      <summary>지정된 엔터티 키가 있는 개체를 반환합니다.</summary>
      <returns>개체가 검색되었으면 true이고,키가 임시 키이거나, 연결이 null이거나 값이 null이면 false입니다.</returns>
      <param name="key">찾을 개체의 키입니다.</param>
      <param name="value">이 메서드의 반환 값에는 개체가 포함됩니다.</param>
      <exception cref="T:System.ArgumentException">key의 메타데이터가 호환되지 않는 경우</exception>
      <exception cref="T:System.ArgumentNullException">key가 null인 경우</exception>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.ObjectContextOptions">
      <summary>ObjectContext의 동작에 영향을 주는 옵션을 정의합니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectContextOptions.LazyLoadingEnabled">
      <summary>탐색 속성을 액세스할 때 관련 개체가 자동으로 로드되는지 여부를 결정하는 부울 값을 가져오거나 설정합니다.</summary>
      <returns>지연 로드가 사용되면 true이고, 그렇지 않으면 false입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectContextOptions.ProxyCreationEnabled">
      <summary>지속성을 무시하는 사용자 지정 데이터 클래스에 대해 프록시 인스턴스를 만들지 여부를 결정하는 부울 값을 가져오거나 설정합니다.</summary>
      <returns>프록시가 만들어졌으면 true이고, 그렇지 않으면 false입니다.기본값은 true입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectContextOptions.UseConsistentNullReferenceBehavior">
      <summary>일관된 NullReference 동작을 사용할지 여부를 결정하는 부울 값을 가져오거나 설정합니다.</summary>
      <returns>일관된 NullReference 동작을 사용해야 하면 true이고, 그렇지 않으면 false입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectContextOptions.UseCSharpNullComparisonBehavior">
      <summary>C# NullComparison 동작을 사용할지 여부를 결정하는 부울 값을 가져오거나 설정합니다.</summary>
      <returns>C# NullComparison 동작을 사용해야 하면 true이고, 그렇지 않으면 false입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectContextOptions.UseLegacyPreserveChangesBehavior">
      <summary>레거시 PreserveChanges 동작을 사용할지 여부를 결정하는 부울 값을 가져오거나 설정합니다.</summary>
      <returns>레거시 PreserveChanges 동작을 사용해야 하는 경우에는 true이고, 그렇지 않으면 false입니다.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.ObjectMaterializedEventArgs">
      <summary>ObjectMaterialized 이벤트의 EventArgs입니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectMaterializedEventArgs.Entity">
      <summary>만들어진 엔터티 개체를 가져옵니다.</summary>
      <returns>만들어진 엔터티 개체입니다.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.ObjectMaterializedEventHandler">
      <summary>ObjectMaterialized 이벤트의 대리자입니다.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.ObjectParameter">
      <summary>이 클래스는 이름, 형식 및 값으로 구성된 개체 계층의 쿼리 매개 변수를 나타냅니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectParameter.#ctor(System.String,System.Object)">
      <summary>지정된 이름 및 값을 사용하여 <see cref="T:System.Data.Entity.Core.Objects.ObjectParameter" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="name">매개 변수 이름입니다.이 이름에는 Entity SQL 문에 사용되는 "@" 매개 변수 표식이 포함될 수 없으며, 실제 이름만 포함될 수 있습니다.식의 첫 번째 문자는 영문자여야 하고,그 다음에 나오는 문자는 영문자, 숫자 또는 밑줄(_) 문자여야 합니다.</param>
      <param name="value">매개 변수의 초기 값(및 기본적으로 형식)입니다.</param>
      <exception cref="T:System.ArgumentNullException">인수 값 중 하나가 null인 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">name 인수 값이 잘못된 경우.매개 변수 이름은 영문자로 시작해야 하며 영문자, 숫자 및 밑줄만 사용할 수 있습니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectParameter.#ctor(System.String,System.Type)">
      <summary>지정된 이름 및 형식을 사용하여 <see cref="T:System.Data.Entity.Core.Objects.ObjectParameter" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="name">매개 변수 이름입니다.이 이름에는 Entity SQL 문에 사용되는 "@" 매개 변수 표식이 포함될 수 없으며, 실제 이름만 포함될 수 있습니다.식의 첫 번째 문자는 영문자여야 하고,그 다음에 나오는 문자는 영문자, 숫자 또는 밑줄(_) 문자여야 합니다.</param>
      <param name="type">매개 변수의 CLR(공용 언어 런타임) 형식입니다.</param>
      <exception cref="T:System.ArgumentNullException">인수 값 중 하나가 null인 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">name 인수 값이 잘못된 경우.매개 변수 이름은 영문자로 시작해야 하며 영문자, 숫자 및 밑줄만 사용할 수 있습니다.</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectParameter.Name">
      <summary>생성자를 통해서만 설정할 수 있는 매개 변수 이름을 가져옵니다.</summary>
      <returns>생성자를 통해서만 설정할 수 있는 매개 변수 이름입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectParameter.ParameterType">
      <summary>매개 변수 형식을 가져옵니다.</summary>
      <returns>매개 변수의 <see cref="T:System.Type" />입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectParameter.Value">
      <summary>매개 변수 값을 가져오거나 설정합니다.</summary>
      <returns>매개 변수 값입니다.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.ObjectParameterCollection">
      <summary>이 클래스는 개체 계층의 쿼리 매개 변수 컬렉션을 나타냅니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectParameterCollection.Add(System.Data.Entity.Core.Objects.ObjectParameter)">
      <summary>지정된 <see cref="T:System.Data.Entity.Core.Objects.ObjectParameter" />를 컬렉션에 추가합니다.</summary>
      <param name="item">컬렉션에 추가할 매개 변수입니다.</param>
      <exception cref="T:System.ArgumentNullException">매개 변수 인수가 null인 경우</exception>
      <exception cref="T:System.ArgumentException">parameter 인수가 컬렉션에 이미 있는 경우.이 동작은 중복 항목을 허용하는 대다수 컬렉션의 동작과 다릅니다.또는 매개 변수 인수와 이름이 같은 다른 매개 변수가 컬렉션에 이미 있습니다.조회할 때는 대/소문자가 구분되지 않습니다.이 동작은 대다수 컬렉션의 동작과 다르며 <see cref="T:System.Collections.Generic.Dictionary" />의 동작과 비슷합니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">parameter의 형식이 잘못된 경우</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectParameterCollection.Clear">
      <summary>컬렉션에서 <see cref="T:System.Data.Entity.Core.Objects.ObjectParameter" /> 인스턴스를 모두 삭제합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectParameterCollection.Contains(System.Data.Entity.Core.Objects.ObjectParameter)">
      <summary>지정한 <see cref="T:System.Data.Entity.Core.Objects.ObjectParameter" />가 컬렉션에 있는지 참조를 통해 확인합니다.</summary>
      <returns>컬렉션에 매개 변수 개체가 있으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="item">컬렉션에서 찾을 <see cref="T:System.Data.Entity.Core.Objects.ObjectParameter" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">매개 변수 인수가 null인 경우</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectParameterCollection.Contains(System.String)">
      <summary>지정한 이름의 <see cref="T:System.Data.Entity.Core.Objects.ObjectParameter" />가 컬렉션에 있는지 여부를 확인합니다.</summary>
      <returns>지정한 이름의 매개 변수가 컬렉션에 있으면 true를 반환하고, 그렇지 않으면 false를 반환합니다.</returns>
      <param name="name">컬렉션에서 검색할 매개 변수의 이름입니다.이 이름에는 Entity SQL 문에 사용되는 "@" 매개 변수 표식이 포함될 수 없으며, 실제 이름만 포함될 수 있습니다.</param>
      <exception cref="T:System.ArgumentNullException">name 매개 변수가 null인 경우</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectParameterCollection.CopyTo(System.Data.Entity.Core.Objects.ObjectParameter[],System.Int32)">
      <summary>지정된 인덱스의 개체부터 시작하여 컬렉션의 매개 변수를 제공된 배열에 복사할 수 있습니다.</summary>
      <param name="array">매개 변수를 복사할 배열입니다.</param>
      <param name="arrayIndex">매개 변수 복사를 시작할 배열의 인덱스입니다.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectParameterCollection.Count">
      <summary>현재 컬렉션에 있는 매개 변수의 수를 가져옵니다.</summary>
      <returns>현재 컬렉션에 있는 <see cref="T:System.Data.Entity.Core.Objects.ObjectParameter" /> 개체의 수입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectParameterCollection.GetEnumerator">
      <summary>이러한 메서드는 컬렉션 전체를 반복하고 이동할 수 있도록 하는 열거자 인스턴스를 반환합니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectParameterCollection.Item(System.String)">
      <summary>호출자가 이름으로 매개 변수를 검색할 수 있는 인덱서를 제공합니다.</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Objects.ObjectParameter" /> 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectParameterCollection.Remove(System.Data.Entity.Core.Objects.ObjectParameter)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Objects.ObjectParameter" /> 인스턴스가 컬렉션에 있으면 참조를 통해 컬렉션에서 제거합니다.</summary>
      <returns>매개 변수 개체를 컬렉션에서 찾아 제거했으면 true를 반환하고, 그렇지 않으면 false를 반환합니다.</returns>
      <param name="item">컬렉션에서 제거할 개체입니다.</param>
      <exception cref="T:System.ArgumentNullException">매개 변수 인수가 null인 경우</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectParameterCollection.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>
        <see cref="T:System.Data.Entity.Core.Objects.ObjectParameter" />가 읽기 전용인지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Objects.ObjectParameter" />가 읽기 전용이면 true이고, 그렇지 않으면 false입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectParameterCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>컬렉션에서 형식화되지 않은 열거자를 반환합니다.</summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator" /> 인스턴스입니다.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.ObjectQuery">
      <summary>이 클래스는 개체 계층에서 형식화되지 않은 쿼리를 구현합니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectQuery.CommandText">
      <summary>쿼리의 명령 텍스트를 반환합니다.</summary>
      <returns>string 값</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectQuery.Context">
      <summary>이 개체 쿼리와 관련된 개체 컨텍스트를 가져옵니다.</summary>
      <returns>이 <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" /> 인스턴스와 관련된 <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" />입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectQuery.EnablePlanCaching">
      <summary>쿼리 계획을 캐시해야 하는지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
      <returns>쿼리 계획을 캐시해야 하는지 여부를 나타내는 값입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery.Execute(System.Data.Entity.Core.Objects.MergeOption)">
      <summary>지정된 병합 옵션을 사용하여 형식화되지 않은 개체 쿼리를 실행합니다.</summary>
      <returns>쿼리에서 반환되는 엔터티 개체의 컬렉션을 포함하는 <see cref="T:System.Data.Entity.Core.Objects.ObjectResult`1" />입니다.</returns>
      <param name="mergeOption">쿼리를 실행할 때 사용할 <see cref="T:System.Data.Entity.Core.Objects.MergeOption" />입니다.기본값은 <see cref="F:System.Data.Entity.Core.Objects.MergeOption.AppendOnly" />입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery.ExecuteAsync(System.Data.Entity.Core.Objects.MergeOption)">
      <summary>지정된 병합 옵션을 사용하여 형식화되지 않은 개체 쿼리를 비동기적으로 실행합니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.작업 결과에는 쿼리로 반환된 엔터티 개체의 컬렉션이 포함된 <see cref="T:System.Data.Entity.Core.Objects.ObjectResult`1" />가 포함됩니다.</returns>
      <param name="mergeOption">쿼리를 실행할 때 사용할 <see cref="T:System.Data.Entity.Core.Objects.MergeOption" />입니다.기본값은 <see cref="F:System.Data.Entity.Core.Objects.MergeOption.AppendOnly" />입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery.ExecuteAsync(System.Data.Entity.Core.Objects.MergeOption,System.Threading.CancellationToken)">
      <summary>지정된 병합 옵션을 사용하여 형식화되지 않은 개체 쿼리를 비동기적으로 실행합니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.작업 결과에는 쿼리로 반환된 엔터티 개체의 컬렉션이 포함된 <see cref="T:System.Data.Entity.Core.Objects.ObjectResult`1" />가 포함됩니다.</returns>
      <param name="mergeOption">쿼리를 실행할 때 사용할 <see cref="T:System.Data.Entity.Core.Objects.MergeOption" />입니다.기본값은 <see cref="F:System.Data.Entity.Core.Objects.MergeOption.AppendOnly" />입니다.</param>
      <param name="cancellationToken">작업이 완료되기를 기다리는 동안 관찰할 <see cref="T:System.Threading.CancellationToken" />입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery.GetResultType">
      <summary>쿼리의 결과 형식에 대한 정보를 반환합니다.</summary>
      <returns>쿼리의 결과 형식에 대한 정보를 포함하는 <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> 값입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectQuery.MergeOption">
      <summary>쿼리에서 반환되는 개체를 개체 컨텍스트에 추가하는 방법을 가져오거나 설정합니다.</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Objects.MergeOption" /> 쿼리입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectQuery.Parameters">
      <summary>이 개체 쿼리에 대한 매개 변수 컬렉션을 가져옵니다.</summary>
      <returns>이 <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" />에 대한 매개 변수 컬렉션입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectQuery.Streaming">
      <summary>쿼리가 스트리밍인지 또는 버퍼링인지 여부를 나타냅니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery.System#Collections#IEnumerable#GetEnumerator">
      <summary>컬렉션을 반복하는 열거자를 반환합니다.</summary>
      <returns>컬렉션에서 반복하는 데 사용할 수 있는 <see cref="T:System.Collections.IEnumerator" />입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectQuery.System#ComponentModel#IListSource#ContainsListCollection">
      <summary>이 쿼리에 쿼리 개체의 컬렉션이 포함되는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>이 쿼리에 쿼리 개체의 컬렉션이 포함되면 true이고, 그렇지 않으면 false입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery.System#ComponentModel#IListSource#GetList">
      <summary>컬렉션을 데이터 바인딩에 사용되는 <see cref="T:System.Collections.IList" />로 반환합니다.</summary>
      <returns>엔터티 개체의 <see cref="T:System.Collections.IList" />입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery.System#Data#Entity#Infrastructure#IDbAsyncEnumerable#GetAsyncEnumerator">
      <summary>열거된 경우 데이터베이스에 대해 지정된 SQL 쿼리를 실행하는 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncEnumerator" />를 반환합니다.</summary>
      <returns>쿼리 결과입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectQuery.System#Linq#IQueryable#ElementType">
      <summary>이 쿼리 인스턴스에 대한 결과 요소 형식을 가져옵니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectQuery.System#Linq#IQueryable#Expression">
      <summary>이 쿼리를 설명하는 식을 가져옵니다.LINQ 작성기 패턴을 사용하여 작성한 쿼리의 경우 전체 LINQ 식 트리를 반환하고, 그렇지 않으면 이 쿼리를 래핑하는 상수 식을 반환합니다.기본 식은 캐시되지 않습니다.따라서 LINQ 쿼리와 Entity SQL 쿼리를 구별할 수 있습니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectQuery.System#Linq#IQueryable#Provider">
      <summary>이 쿼리 인스턴스와 연결된 <see cref="T:System.Linq.IQueryProvider" />를 가져옵니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery.ToTraceString">
      <summary>데이터 원본에 대해 실행할 명령을 반환합니다.</summary>
      <returns>쿼리가 데이터 원본에 대해 실행하는 명령을 나타내는 string입니다.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.ObjectQuery`1">
      <summary>ObjectQuery는 개체 계층에서 강력한 형식의 쿼리를 구현합니다.Entity-SQL 문자열을 사용하여 쿼리를 지정하고 ObjectQuery에 의해 선언된 Entity-SQL 기반 쿼리 작성기 메서드를 호출하여 쿼리를 만들 수 있습니다.</summary>
      <typeparam name="T">이 ObjectQuery의 결과 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery`1.#ctor(System.String,System.Data.Entity.Core.Objects.ObjectContext)">
      <summary>지정된 Entity SQL 명령을 초기 쿼리로 사용하여 새 <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" /> 인스턴스를 만듭니다.</summary>
      <param name="commandText">Entity SQL 쿼리입니다.</param>
      <param name="context">쿼리를 실행할 <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" />입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery`1.#ctor(System.String,System.Data.Entity.Core.Objects.ObjectContext,System.Data.Entity.Core.Objects.MergeOption)">
      <summary>지정된 Entity SQL 명령을 초기 쿼리로 사용하고 지정된 병합 옵션을 사용하여 새 <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" /> 인스턴스를 만듭니다.</summary>
      <param name="commandText">Entity SQL 쿼리입니다.</param>
      <param name="context">쿼리를 실행할 <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" />입니다.</param>
      <param name="mergeOption">이 쿼리를 통해 검색한 엔터티를 같은 <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" />의 이전 쿼리에서 반환된 엔터티와 병합할 방법을 지정합니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery`1.Distinct">
      <summary>결과가 고유하도록 쿼리를 제한합니다.</summary>
      <returns>원래 인스턴스에 SELECT DISTINCT가 적용된 것과 동일한 새 <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" /> 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery`1.Except(System.Data.Entity.Core.Objects.ObjectQuery{`0})">
      <summary>이 쿼리 작성기 메서드는 지정된 다른 쿼리에도 있는 결과를 제외하고 모든 결과를 반환하는 새 쿼리를 만듭니다.</summary>
      <returns>새 ObjectQuery 인스턴스</returns>
      <param name="query">실행할 결과를 나타내는 쿼리입니다.</param>
      <exception cref="T:System.ArgumentNullException">쿼리 매개 변수가 null인 경우</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery`1.Execute(System.Data.Entity.Core.Objects.MergeOption)">
      <summary>지정된 병합 옵션을 사용하여 개체 쿼리를 실행합니다.</summary>
      <returns>쿼리에서 반환되는 엔터티 개체의 컬렉션을 포함하는 <see cref="T:System.Data.Entity.Core.Objects.ObjectResult`1" />입니다.</returns>
      <param name="mergeOption">쿼리를 실행할 때 사용할 <see cref="T:System.Data.Entity.Core.Objects.MergeOption" />입니다.기본값은 <see cref="F:System.Data.Entity.Core.Objects.MergeOption.AppendOnly" />입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery`1.ExecuteAsync(System.Data.Entity.Core.Objects.MergeOption)">
      <summary>지정된 병합 옵션을 사용하여 개체 쿼리를 비동기적으로 실행합니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.작업 결과에는 쿼리로 반환된 엔터티 개체의 컬렉션이 포함된 <see cref="T:System.Data.Entity.Core.Objects.ObjectResult`1" />가 포함됩니다.</returns>
      <param name="mergeOption">쿼리를 실행할 때 사용할 <see cref="T:System.Data.Entity.Core.Objects.MergeOption" />입니다.기본값은 <see cref="F:System.Data.Entity.Core.Objects.MergeOption.AppendOnly" />입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery`1.ExecuteAsync(System.Data.Entity.Core.Objects.MergeOption,System.Threading.CancellationToken)">
      <summary>지정된 병합 옵션을 사용하여 개체 쿼리를 비동기적으로 실행합니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.작업 결과에는 쿼리로 반환된 엔터티 개체의 컬렉션이 포함된 <see cref="T:System.Data.Entity.Core.Objects.ObjectResult`1" />가 포함됩니다.</returns>
      <param name="mergeOption">쿼리를 실행할 때 사용할 <see cref="T:System.Data.Entity.Core.Objects.MergeOption" />입니다.기본값은 <see cref="F:System.Data.Entity.Core.Objects.MergeOption.AppendOnly" />입니다.</param>
      <param name="cancellationToken">작업이 완료되기를 기다리는 동안 관찰할 <see cref="T:System.Threading.CancellationToken" />입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery`1.GroupBy(System.String,System.String,System.Data.Entity.Core.Objects.ObjectParameter[])">
      <summary>지정된 조건으로 쿼리 결과를 그룹화합니다.</summary>
      <returns>원래 인스턴스에 GROUP BY가 적용된 것과 동일한 <see cref="T:System.Data.Common.DbDataRecord" /> 형식의 새 <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" /> 인스턴스입니다.</returns>
      <param name="keys">결과를 그룹화할 기준 키 열입니다.</param>
      <param name="projection">프로젝션을 정의하는 선택한 속성 목록입니다.</param>
      <param name="parameters">@FSHO2@이 메서드에 사용되는 0개 이상의 매개 변수입니다.</param>
      <exception cref="T:System.ArgumentNullException">쿼리 매개 변수가 null 또는 빈 문자열이거나 프로젝션 매개 변수가 null 또는 빈 문자열인 경우</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery`1.Include(System.String)">
      <summary>쿼리 결과에 포함할 관련 개체를 지정합니다.</summary>
      <returns>쿼리 경로가 정의된 새 <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" />입니다.</returns>
      <param name="path">쿼리 결과에 반환할 관련 개체의 목록입니다(점으로 구분됨).</param>
      <exception cref="T:System.ArgumentNullException">path가 null인 경우</exception>
      <exception cref="T:System.ArgumentException">path가 empty인 경우</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery`1.Intersect(System.Data.Entity.Core.Objects.ObjectQuery{`0})">
      <summary>이 쿼리 작성기 메서드는 지정된 다른 쿼리와 중복된 결과를 반환하는 새 쿼리를 만듭니다.</summary>
      <returns>새 ObjectQuery 인스턴스</returns>
      <param name="query">상호 작용할 결과를 나타내는 쿼리입니다.</param>
      <exception cref="T:System.ArgumentNullException">쿼리 매개 변수가 null인 경우</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectQuery`1.Name">
      <summary>이 개체 쿼리의 이름을 가져오거나 설정합니다.</summary>
      <returns>이 <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" />의 이름인 문자열 값입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery`1.OfType``1">
      <summary>특정 형식의 결과로 쿼리를 제한합니다.</summary>
      <returns>원래 인스턴스에 OFTYPE이 적용된 것과 동일한 새 <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" /> 인스턴스입니다.</returns>
      <typeparam name="TResultType">적용된 필터를 사용하여 쿼리가 실행될 때 반환되는 <see cref="T:System.Data.Entity.Core.Objects.ObjectResult`1" />의 형식입니다.</typeparam>
      <exception cref="T:System.Data.Entity.Core.EntitySqlException">지정된 형식이 잘못된 경우</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery`1.OrderBy(System.String,System.Data.Entity.Core.Objects.ObjectParameter[])">
      <summary>지정된 조건으로 쿼리 결과를 정렬합니다.</summary>
      <returns>원래 인스턴스에 ORDER BY가 적용된 것과 동일한 새 <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" /> 인스턴스입니다.</returns>
      <param name="keys">결과를 정렬할 기준 키 열입니다.</param>
      <param name="parameters">@FSHO2@이 메서드에 사용되는 0개 이상의 매개 변수입니다.</param>
      <exception cref="T:System.ArgumentNullException">keys 또는 parameters 매개 변수가 null인 경우</exception>
      <exception cref="T:System.ArgumentException">key가 빈 문자열인 경우</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery`1.Select(System.String,System.Data.Entity.Core.Objects.ObjectParameter[])">
      <summary>지정된 프로젝션에 정의된 속성만으로 쿼리 결과를 제한합니다.</summary>
      <returns>원래 인스턴스에 SELECT가 적용된 것과 동일한 <see cref="T:System.Data.Common.DbDataRecord" /> 형식의 새 <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" /> 인스턴스입니다.</returns>
      <param name="projection">프로젝션을 정의하는 선택한 속성 목록입니다.</param>
      <param name="parameters">@FSHO2@이 메서드에 사용되는 0개 이상의 매개 변수입니다.</param>
      <exception cref="T:System.ArgumentNullException">프로젝션이 null이거나 매개 변수가 null인 경우</exception>
      <exception cref="T:System.ArgumentException">projection이 빈 문자열인 경우</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery`1.SelectValue``1(System.String,System.Data.Entity.Core.Objects.ObjectParameter[])">
      <summary>프로젝션에 지정된 속성만으로 쿼리 결과를 제한합니다.</summary>
      <returns>특정 프로젝션과 호환되는 형식의 새 <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" /> 인스턴스입니다.반환된 <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" />는 원래 인스턴스에 SELECT VALUE가 적용된 것과 동일합니다.</returns>
      <param name="projection">프로젝션 목록입니다.</param>
      <param name="parameters">@FSHO2@구문 분석 시 범위에 속해야 하는 쿼리 매개 변수의 선택적 집합입니다.</param>
      <typeparam name="TResultType">
        <see cref="M:System.Data.Entity.Core.Objects.ObjectQuery`1.SelectValue``1(System.String,System.Data.Entity.Core.Objects.ObjectParameter[])" /> 메서드에서 반환하는 <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" />의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">프로젝션이 null이거나 매개 변수가 null인 경우</exception>
      <exception cref="T:System.ArgumentException">projection이 빈 문자열인 경우</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery`1.Skip(System.String,System.String,System.Data.Entity.Core.Objects.ObjectParameter[])">
      <summary>지정된 조건으로 쿼리 결과를 정렬하고 지정된 개수의 결과를 건너뜁니다.</summary>
      <returns>원래 인스턴스에 ORDER BY 및 SKIP이 적용된 것과 동일한 새 <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" /> 인스턴스입니다.</returns>
      <param name="keys">결과를 정렬할 기준 키 열입니다.</param>
      <param name="count">건너뛸 결과의 개수입니다.상수 또는 매개 변수 참조여야 합니다.</param>
      <param name="parameters">@FSHO2@구문 분석 시 범위에 속해야 하는 쿼리 매개 변수의 선택적 집합입니다.</param>
      <exception cref="T:System.ArgumentNullException">인수 중 하나가 null인 경우</exception>
      <exception cref="T:System.ArgumentException">키가 빈 문자열이거나 개수가 빈 문자열인 경우</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>열거된 경우 데이터베이스에 대해 지정된 SQL 쿼리를 실행하는 <see cref="T:System.Collections.Generic.IEnumerator`1" />를 반환합니다.</summary>
      <returns>쿼리 결과입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery`1.System#Data#Entity#Infrastructure#IDbAsyncEnumerable{T}#GetAsyncEnumerator">
      <summary>열거된 경우 데이터베이스에 대해 지정된 SQL 쿼리를 실행하는 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncEnumerator`1" />를 반환합니다.</summary>
      <returns>쿼리 결과입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery`1.Top(System.String,System.Data.Entity.Core.Objects.ObjectParameter[])">
      <summary>지정된 개수의 항목으로 쿼리 결과를 제한합니다.</summary>
      <returns>원래 인스턴스에 TOP가 적용된 것과 동일한 새 <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" /> 인스턴스입니다.</returns>
      <param name="count">문자열 형태의 결과 항목 개수입니다.</param>
      <param name="parameters">@FSHO2@구문 분석 시 범위에 속해야 하는 쿼리 매개 변수의 선택적 집합입니다.</param>
      <exception cref="T:System.ArgumentNullException">count가 null인 경우</exception>
      <exception cref="T:System.ArgumentException">count가 빈 문자열인 경우</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery`1.Union(System.Data.Entity.Core.Objects.ObjectQuery{`0})">
      <summary>이 쿼리 작성기 메서드는 해당 쿼리의 모든 결과와 함께 중복되지 않은(즉, 고유한) 다른 쿼리의 모든 결과를 반환하는 새 쿼리를 만듭니다.</summary>
      <returns>새 ObjectQuery 인스턴스</returns>
      <param name="query">추가할 결과를 나타내는 쿼리입니다.</param>
      <exception cref="T:System.ArgumentNullException">쿼리 매개 변수가 null인 경우</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery`1.UnionAll(System.Data.Entity.Core.Objects.ObjectQuery{`0})">
      <summary>이 쿼리 작성기 메서드는 해당 쿼리의 모든 결과와 함께 다른 쿼리의 모든 결과(중복된 결과 포함)를 반환하는 새 쿼리를 만듭니다.</summary>
      <returns>새 ObjectQuery 인스턴스</returns>
      <param name="query">추가할 결과를 나타내는 쿼리입니다.</param>
      <exception cref="T:System.ArgumentNullException">쿼리 매개 변수가 null인 경우</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery`1.Where(System.String,System.Data.Entity.Core.Objects.ObjectParameter[])">
      <summary>지정된 필터링 조건과 일치하는 결과로 쿼리를 제한합니다.</summary>
      <returns>원래 인스턴스에 WHERE가 적용된 것과 동일한 새 <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" /> 인스턴스입니다.</returns>
      <param name="predicate">필터 조건자입니다.</param>
      <param name="parameters">@FSHO2@이 메서드에 사용되는 0개 이상의 매개 변수입니다.</param>
      <exception cref="T:System.ArgumentNullException">조건자가 null이거나 매개 변수가 null인 경우</exception>
      <exception cref="T:System.ArgumentException">조건자가 빈 문자열인 경우</exception>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.ObjectResult">
      <summary>이 클래스는 IEnumerable 및 IDisposable을 구현합니다.이 클래스의 인스턴스는 ObjectQuery.Execute 메서드에서 반환됩니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectResult.Dispose">
      <summary>리소스 확보, 해제 또는 재설정과 관련된 작업을 수행합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectResult.Dispose(System.Boolean)">
      <summary>개체 결과에서 사용된 리소스를 해제합니다.</summary>
      <param name="disposing">관리되는 리소스와 관리되지 않는 리소스를 모두 해제하려면 true이고, 관리되지 않는 리소스만 해제하려면 false입니다.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectResult.ElementType">
      <summary>파생 클래스에서 재정의될 경우 제네릭 <see cref="T:System.Data.Entity.Core.Objects.ObjectResult`1" />의 형식을 가져옵니다.</summary>
      <returns>제네릭 <see cref="T:System.Data.Entity.Core.Objects.ObjectResult`1" />의 형식입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectResult.GetNextResult``1">
      <summary>저장 프로시저의 다음 결과 집합을 가져옵니다.</summary>
      <returns>다음 결과 집합 값을 열거하는 ObjectResult입니다.더 이상 해당 사항이 없거나 ObjectResult가 저장된 프로시저 호출 결과가 아닌 경우 Null입니다.</returns>
      <typeparam name="TElement">요소의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectResult.System#Collections#IEnumerable#GetEnumerator">
      <summary>쿼리 결과를 반복하는 열거자를 반환합니다.</summary>
      <returns>쿼리 결과를 반복하는 열거자입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectResult.System#ComponentModel#IListSource#ContainsListCollection">
      <summary>IListSource.ContainsListCollection 구현입니다.항상 false를 반환합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectResult.System#ComponentModel#IListSource#GetList">
      <summary>데이터 바인딩에 유용한 형식의 결과를 반환합니다.</summary>
      <returns>엔터티 개체의 <see cref="T:System.Collections.IList" />입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectResult.System#Data#Entity#Infrastructure#IDbAsyncEnumerable#GetAsyncEnumerator">
      <summary>쿼리 결과를 반복하는 비동기 열거자를 반환합니다.</summary>
      <returns>쿼리 결과를 반복하는 비동기 열거자입니다.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.ObjectResult`1">
      <summary>이 클래스는 <see cref="M:System.Data.Entity.Core.Objects.ObjectQuery`1.Execute(System.Data.Entity.Core.Objects.MergeOption)" /> 메서드의 결과를 나타냅니다.</summary>
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectResult`1.Dispose(System.Boolean)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Objects.ObjectResult`1" />가 사용하는 관리되지 않는 리소스를 해제하고 관리되는 리소스를 선택적으로 해제합니다.</summary>
      <param name="disposing">관리되는 리소스와 관리되지 않는 리소스를 해제하려면 true이고, 관리되지 않는 리소스만 해제하려면 false입니다.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectResult`1.ElementType">
      <summary>
        <see cref="T:System.Data.Entity.Core.Objects.ObjectResult`1" />의 형식을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Objects.ObjectResult`1" />의 형식인 <see cref="T:System.Type" />입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectResult`1.GetEnumerator">
      <summary>쿼리 결과를 반복하는 열거자를 반환합니다.</summary>
      <returns>쿼리 결과를 반복하는 열거자입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectResult`1.System#Data#Entity#Infrastructure#IDbAsyncEnumerable{T}#GetAsyncEnumerator">
      <summary>
        <see cref="T:System.Data.Entity.Core.Objects.ObjectResult`1" />를 반복하는 열거자를 비동기적으로 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Objects.ObjectResult`1" />를 반복하는 열거자입니다.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.ObjectSet`1">
      <summary>생성, 읽기, 업데이트 및 삭제 작업을 수행하기 위해 사용되는 형식이 지정된 엔터티 집합을 나타냅니다.</summary>
      <typeparam name="TEntity">엔터티의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectSet`1.AddObject(`0)">
      <summary>현재 엔터티 집합에서 개체를 개체 컨텍스트에 추가합니다.</summary>
      <param name="entity">추가할 개체입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectSet`1.ApplyCurrentValues(`0)">
      <summary>제공된 개체의 스칼라 값을 같은 키를 가진 <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" />의 개체에 복사합니다.</summary>
      <returns>업데이트된 개체입니다.</returns>
      <param name="currentEntity">원래 개체에 적용할 속성 업데이트가 있는 분리된 개체입니다.currentEntity의 엔터티 키는 <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" />에 있는 항목의 <see cref="P:System.Data.Entity.Core.Objects.ObjectStateEntry.EntityKey" /> 속성과 일치해야 합니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectSet`1.ApplyOriginalValues(`0)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" />의 <see cref="P:System.Data.Entity.Core.Objects.ObjectStateEntry.OriginalValues" /> 속성을 제공된 개체의 속성 값과 일치하도록 설정합니다.</summary>
      <returns>업데이트된 개체입니다.</returns>
      <param name="originalEntity">원래 개체에 적용할 속성 업데이트가 있는 분리된 개체입니다.originalEntity의 엔터티 키는 <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" />에 있는 항목의 <see cref="P:System.Data.Entity.Core.Objects.ObjectStateEntry.EntityKey" /> 속성과 일치해야 합니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectSet`1.Attach(`0)">
      <summary>현재 엔터티 집합에서 개체 또는 개체 그래프를 개체 컨텍스트에 연결합니다.</summary>
      <param name="entity">연결할 개체입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectSet`1.CreateObject``1">
      <summary>지정된 형식의 인스턴스를 만듭니다.</summary>
      <returns>요청된 형식 T의 인스턴스이거나, T 형식에 해당하는 프록시 형식의 인스턴스입니다.</returns>
      <typeparam name="T">반환될 개체의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectSet`1.CreateObject">
      <summary>새 엔터티 형식 개체를 만듭니다.</summary>
      <returns>새 엔터티 형식 개체이거나, 엔터티 형식에 해당하는 프록시 형식의 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectSet`1.DeleteObject(`0)">
      <summary>개체에 삭제 표시를 합니다.</summary>
      <param name="entity">삭제할 엔터티를 나타내는 개체입니다.개체는 <see cref="F:System.Data.Entity.EntityState.Detached" />를 제외한 모든 상태일 수 있습니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectSet`1.Detach(`0)">
      <summary>개체 컨텍스트에서 개체를 제거합니다.</summary>
      <param name="entity">분리할 개체입니다.엔터티만 제거됩니다. 동일한 <see cref="T:System.Data.Entity.Core.Objects.ObjectStateManager" />에서 추적되고 있는 관련 개체가 있으면 이러한 개체는 자동으로 분리되지 않습니다.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectSet`1.EntitySet">
      <summary>이 <see cref="T:System.Data.Entity.Core.Objects.ObjectSet`1" /> 인스턴스가 나타내는 엔터티 집합의 메타데이터를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" /> 개체입니다.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.ObjectStateEntry">
      <summary>엔터티, 엔터티 스텁 또는 관계를 나타냅니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateEntry.AcceptChanges">
      <summary>현재 값을 원래 값으로 사용합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateEntry.ApplyCurrentValues(System.Object)">
      <summary>항목의 현재 값을 제공된 개체의 속성 값과 일치하도록 설정합니다.</summary>
      <param name="currentEntity">개체에 적용할 업데이트된 값이 있는 분리된 개체입니다.currentEntity는 개체의 엔터티 키일 수도 있습니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateEntry.ApplyOriginalValues(System.Object)">
      <summary>항목의 원래 값을 제공된 개체의 속성 값과 일치하도록 설정합니다.</summary>
      <param name="originalEntity">개체에 적용할 원래 값이 있는 분리된 개체입니다.originalEntity는 개체의 엔터티 키일 수도 있습니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateEntry.ChangeState(System.Data.Entity.EntityState)">
      <summary>항목의 상태를 지정된 <see cref="T:System.Data.Entity.EntityState" /> 값으로 변경합니다.</summary>
      <param name="state">항목의 <see cref="P:System.Data.Entity.Core.Objects.ObjectStateEntry.State" /> 속성에 대해 설정할 <see cref="T:System.Data.Entity.EntityState" /> 값입니다.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectStateEntry.CurrentValues">
      <summary>이 <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" />와 연결된 개체 또는 관계의 현재 속성 값을 가져옵니다.</summary>
      <returns>이 <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" />와 연결된 개체 또는 속성의 현재 값을 포함하는 <see cref="T:System.Data.Entity.Core.Objects.CurrentValueRecord" />입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateEntry.Delete">
      <summary>엔터티를 삭제된 상태로 표시합니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectStateEntry.Entity">
      <summary>엔터티 개체를 가져옵니다.</summary>
      <returns>엔터티 개체입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectStateEntry.EntityKey">
      <summary>엔터티 키를 가져옵니다.</summary>
      <returns>엔터티 키입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectStateEntry.EntitySet">
      <summary>개체 또는 관계의 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySetBase" />를 가져옵니다.</summary>
      <returns>개체 또는 관계의 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySetBase" />입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateEntry.GetModifiedProperties">
      <summary>
        <see cref="M:System.Data.Entity.Core.Objects.ObjectContext.SaveChanges" />가 마지막으로 호출된 이후 변경된 개체의 속성 이름을 반환합니다.</summary>
      <returns>문자열 형태의 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 이름 컬렉션입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateEntry.GetUpdatableOriginalValues">
      <summary>이 <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" />에 연결된 개체의 원래 값을 업데이트 가능한 버전으로 가져옵니다.</summary>
      <returns>개체 데이터의 업데이트 가능한 원래 값입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateEntry.IsPropertyChanged(System.String)">
      <summary>DetectChanges를 사용하여 지정된 이름의 속성에 대한 현재 값이 원래 값과 다른지 여부를 확인합니다.변경되지 않은 속성이 여전히 수정됨으로 표시될 수 있으므로 표시 중인 속성이 수정된 속성과 다를 수 있습니다.</summary>
      <returns>속성이 변경되었으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="propertyName">속성의 이름입니다.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectStateEntry.IsRelationship">
      <summary>
        <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" />가 관계를 나타내는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" />가 관계를 나타내면 true이고, 그렇지 않으면 false입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectStateEntry.ObjectStateManager">
      <summary>
        <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" />의 <see cref="T:System.Data.Entity.Core.Objects.ObjectStateManager" />를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" />의 <see cref="T:System.Data.Entity.Core.Objects.ObjectStateManager" />입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectStateEntry.OriginalValues">
      <summary>개체 또는 관계의 원래 값을 읽기 전용 버전으로 가져옵니다.</summary>
      <returns>관계 집합 항목 또는 엔터티의 읽기 전용 버전인 원래 값입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateEntry.RejectPropertyChanges(System.String)">
      <summary>속성이 마지막으로 로드, 첨부, 저장되었으며 변경 사항이 사용된 이후 지정한 이름과 함께 속성에 대한 모든 변경 사항이 거부됩니다.속성의 원래 값이 저장되며 속성이 더 이상 수정된 것으로 표시되지 않습니다.</summary>
      <param name="propertyName">변경할 속성의 이름입니다.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectStateEntry.RelationshipManager">
      <summary>항목이 나타내는 개체의 <see cref="T:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager" /> 인스턴스를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager" /> 개체입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateEntry.SetModified">
      <summary>개체 또는 관계의 상태를 Modify로 설정합니다.</summary>
      <exception cref="T:System.InvalidOperationException">상태가 Modified 또는 Unchanged인 경우</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateEntry.SetModifiedProperty(System.String)">
      <summary>지정된 속성을 수정된 상태로 표시합니다.</summary>
      <param name="propertyName">속성의 이름입니다.</param>
      <exception cref="T:System.InvalidOperationException">상태가 Modified 또는 Unchanged인 경우</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectStateEntry.State">
      <summary>
        <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" />의 상태를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" />의 상태입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateEntry.System#Data#Entity#Core#Objects#DataClasses#IEntityChangeTracker#EntityComplexMemberChanged(System.String,System.Object,System.String)">
      <summary>복합 속성이 변경되었음을 보고하는 데 사용됩니다. EntityMemberChanging 중에 캐시된 속성 값은 이제 OriginalValues에 추가됩니다.</summary>
      <param name="entityMemberName">변경된 최상위 엔터티 속성의 이름입니다.</param>
      <param name="complexObject">변경된 속성이 포함된 복합 개체입니다.</param>
      <param name="complexObjectMemberName">complexObject에서 변경된 속성의 이름입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateEntry.System#Data#Entity#Core#Objects#DataClasses#IEntityChangeTracker#EntityComplexMemberChanging(System.String,System.Object,System.String)">
      <summary>복합 속성이 변경됨을 보고하는 데 사용됩니다. 이 메서드가 호출되면 지정된 속성의 현재 값이 캐시됩니다.</summary>
      <param name="entityMemberName">변경 중인 최상위 엔터티 속성의 이름입니다.</param>
      <param name="complexObject">변경 중인 속성이 포함된 복합 개체입니다.</param>
      <param name="complexObjectMemberName">complexObject에서 변경 중인 속성의 이름입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateEntry.System#Data#Entity#Core#Objects#DataClasses#IEntityChangeTracker#EntityMemberChanged(System.String)">
      <summary>스칼라 엔터티 속성이 변경되었음을 보고하는 데 사용됩니다. EntityMemberChanging 중에 캐시된 속성 값은 이제 OriginalValues에 추가됩니다.</summary>
      <param name="entityMemberName">변경된 엔터티 속성의 이름입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateEntry.System#Data#Entity#Core#Objects#DataClasses#IEntityChangeTracker#EntityMemberChanging(System.String)">
      <summary>스칼라 엔터티 속성이 변경됨을 보고하는 데 사용됩니다. 이 메서드가 호출되면 지정된 속성의 현재 값이 캐시됩니다.</summary>
      <param name="entityMemberName">변경 중인 엔터티 속성의 이름입니다.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectStateEntry.System#Data#Entity#Core#Objects#DataClasses#IEntityChangeTracker#EntityState">
      <summary>ObjectStateEntry에서 EntityState를 반환합니다.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.ObjectStateManager">
      <summary>엔터티 형식 인스턴스 및 관계 인스턴스에 대한 개체 상태 및 ID 관리를 유지 관리합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateManager.#ctor(System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Objects.ObjectStateManager" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="metadataWorkspace">매핑 및 메타데이터 정보를 제공하는 <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace" />입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateManager.ChangeObjectState(System.Object,System.Data.Entity.EntityState)">
      <summary>특정 개체에 대한 <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" />의 상태를 지정된 entityState로 변경합니다.</summary>
      <returns>제공된 엔터티에 대한 <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" />입니다.</returns>
      <param name="entity">상태를 변경해야 할 개체입니다.</param>
      <param name="entityState">개체의 새 상태입니다.</param>
      <exception cref="T:System.ArgumentNullException">엔터티가 null인 경우</exception>
      <exception cref="T:System.InvalidOperationException">개체가 검색되지 않았고 상태 관리자에 항목이 없거나, 상태를 다른 <see cref="T:System.Data.Entity.EntityState." />에서 <see cref="F:System.Data.Entity.EntityState.Detached" />로 변경하려고 시도하거나, 상태가 유효한 <see cref="T:System.Data.Entity.EntityState" /> 값이 아닌 경우</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateManager.ChangeRelationshipState(System.Object,System.Object,System.String,System.Data.Entity.EntityState)">
      <summary>두 관련 개체와 탐색 속성의 이름에 따라 지정된 두 엔터티 개체 간 관계의 상태를 변경합니다.</summary>
      <returns>변경된 관계에 대한 <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" />입니다.</returns>
      <param name="sourceEntity">관계의 한쪽 End에 있는 소스 엔터티의 <see cref="T:System.Data.Entity.Core.EntityKey" /> 또는 개체 인스턴스입니다.</param>
      <param name="targetEntity">관계의 다른 쪽 End에 있는 대상 엔터티의 <see cref="T:System.Data.Entity.Core.EntityKey" /> 또는 개체 인스턴스입니다.</param>
      <param name="navigationProperty">지정된 대상을 반환하는 원본의 탐색 속성 이름입니다.</param>
      <param name="relationshipState">지정된 관계의 요청된 <see cref="T:System.Data.Entity.EntityState" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">원본 또는 대상이 null인 경우</exception>
      <exception cref="T:System.InvalidOperationException">원본 또는 대상이 <see cref="F:System.Data.Entity.EntityState.Deleted" /> 상태일 때 관계의 상태를 <see cref="F:System.Data.Entity.EntityState.Deleted" /> 또는 <see cref="F:System.Data.Entity.EntityState.Detached" /> 이외의 상태로 변경하려고 시도하거나, 원본 또는 대상이 <see cref="F:System.Data.Entity.EntityState.Added" /> 상태일 때 관계의 상태를 <see cref="F:System.Data.Entity.EntityState.Added" /> 또는 <see cref="F:System.Data.Entity.EntityState.Detached" /> 이외의 상태로 변경하려고 시도하거나, 상태가 유효한 <see cref="T:System.Data.Entity.EntityState" /> 값이 아닌 경우</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateManager.ChangeRelationshipState(System.Object,System.Object,System.String,System.String,System.Data.Entity.EntityState)">
      <summary>두 관련 개체와 관계의 속성에 따라 지정된 두 엔터티 개체 간 관계의 상태를 변경합니다.</summary>
      <returns>변경된 관계에 대한 <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" />입니다.</returns>
      <param name="sourceEntity">관계의 한쪽 End에 있는 소스 엔터티의 <see cref="T:System.Data.Entity.Core.EntityKey" /> 또는 개체 인스턴스입니다.</param>
      <param name="targetEntity">관계의 다른 쪽 End에 있는 대상 엔터티의 <see cref="T:System.Data.Entity.Core.EntityKey" /> 또는 개체 인스턴스입니다.</param>
      <param name="relationshipName">관계의 이름입니다.</param>
      <param name="targetRoleName">관계의 대상 끝에 있는 역할 이름입니다.</param>
      <param name="relationshipState">지정된 관계의 요청된 <see cref="T:System.Data.Entity.EntityState" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">원본 또는 대상이 null인 경우</exception>
      <exception cref="T:System.InvalidOperationException">원본 또는 대상이 <see cref="F:System.Data.Entity.EntityState.Deleted" /> 상태일 때 관계의 상태를 <see cref="F:System.Data.Entity.EntityState.Deleted" /> 또는 <see cref="F:System.Data.Entity.EntityState.Detached" /> 이외의 상태로 변경하려고 시도하거나, 원본 또는 대상이 <see cref="F:System.Data.Entity.EntityState.Added" /> 상태일 때 관계의 상태를 <see cref="F:System.Data.Entity.EntityState.Added" /> 또는 <see cref="F:System.Data.Entity.EntityState.Detached" /> 이외의 상태로 변경하려고 시도하거나, 상태가 유효한 <see cref="T:System.Data.Entity.EntityState" /> 값이 아닌 경우</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateManager.ChangeRelationshipState``1(``0,System.Object,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Data.Entity.EntityState)">
      <summary>두 관련 개체와 탐색 속성을 정의하는 LINQ 식에 따라 지정된 두 엔터티 개체 간 관계의 상태를 변경합니다.</summary>
      <returns>변경된 관계에 대한 <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" />입니다.</returns>
      <param name="sourceEntity">관계의 한쪽 End에 있는 소스 엔터티의 <see cref="T:System.Data.Entity.Core.EntityKey" /> 또는 개체 인스턴스입니다.</param>
      <param name="targetEntity">관계의 다른 쪽 End에 있는 대상 엔터티의 <see cref="T:System.Data.Entity.Core.EntityKey" /> 또는 개체 인스턴스입니다.</param>
      <param name="navigationPropertySelector">지정된 대상을 반환하는 원본에 대한 탐색 속성을 선택하는 LINQ 식입니다.</param>
      <param name="relationshipState">지정된 관계의 요청된 <see cref="T:System.Data.Entity.EntityState" />입니다.</param>
      <typeparam name="TEntity">원본 개체의 엔터티 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">원본, 대상 또는 선택기가 null인 경우</exception>
      <exception cref="T:System.ArgumentException">선택기 형식이 잘못되었거나 탐색 속성을 반환할 수 없는 경우</exception>
      <exception cref="T:System.InvalidOperationException">원본 또는 대상이 <see cref="F:System.Data.Entity.EntityState.Deleted" /> 상태일 때 관계의 상태를 <see cref="F:System.Data.Entity.EntityState.Deleted" /> 또는 <see cref="F:System.Data.Entity.EntityState.Detached" /> 이외의 상태로 변경하려고 시도하거나, 원본 또는 대상이 <see cref="F:System.Data.Entity.EntityState.Added" /> 상태일 때 관계의 상태를 <see cref="F:System.Data.Entity.EntityState.Added" /> 또는 <see cref="F:System.Data.Entity.EntityState.Detached" /> 이외의 상태로 변경하려고 시도하거나, 상태가 유효한 <see cref="T:System.Data.Entity.EntityState" /> 값이 아닌 경우</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateManager.GetObjectStateEntries(System.Data.Entity.EntityState)">
      <summary>지정된 상태의 개체 또는 관계에 대한 <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" /> 개체 컬렉션을 반환합니다.</summary>
      <returns>지정된 <see cref="T:System.Data.Entity.EntityState" />의 <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" /> 개체 컬렉션입니다.</returns>
      <param name="state">반환되는 <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" /> 개체를 필터링하는 데 사용되는 <see cref="T:System.Data.Entity.EntityState" />입니다.</param>
      <exception cref="T:System.ArgumentException">상태가 <see cref="F:System.Data.Entity.EntityState.Detached" />인 경우</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateManager.GetObjectStateEntry(System.Data.Entity.Core.EntityKey)">
      <summary>지정된 키를 사용하여 개체 또는 관계 항목에 대한 <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" />를 반환합니다.</summary>
      <returns>지정된 <see cref="T:System.Data.Entity.Core.EntityKey" />에 대한 해당 <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" />입니다.</returns>
      <param name="key">
        <see cref="T:System.Data.Entity.Core.EntityKey" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">키가 null인 경우</exception>
      <exception cref="T:System.ArgumentException">지정된 키를 상태 관리자에서 찾을 수 없는 경우</exception>
      <exception cref="T:System.InvalidOperationException">지정된 <see cref="T:System.Data.Entity.Core.EntityKey" />를 갖는 엔터티가 <see cref="T:System.Data.Entity.Core.Objects.ObjectStateManager" />에 없는 경우</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateManager.GetObjectStateEntry(System.Object)">
      <summary>지정된 개체에 대한 <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" />를 반환합니다.</summary>
      <returns>지정된 <see cref="T:System.Object" />에 대한 해당 <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" />입니다.</returns>
      <param name="entity">검색한 <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" />가 속하는 <see cref="T:System.Object" />입니다.</param>
      <exception cref="T:System.InvalidOperationException">지정된 <see cref="T:System.Object" />에 대한 엔터티가 <see cref="T:System.Data.Entity.Core.Objects.ObjectStateManager" />에 없는 경우</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateManager.GetRelationshipManager(System.Object)">
      <summary>지정된 개체에서 사용되는 <see cref="T:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager" />를 반환합니다.</summary>
      <returns>지정된 개체에 대한 <see cref="T:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager" />입니다.</returns>
      <param name="entity">
        <see cref="T:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager" />를 반환할 개체입니다.</param>
      <exception cref="T:System.InvalidOperationException">엔터티가 IEntityWithRelationships를 구현하지 않고 이 ObjectStateManager에 의해 추적되지 않는 경우</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectStateManager.MetadataWorkspace">
      <summary>이 상태 관리자와 연결된 <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace" />를 가져옵니다.</summary>
      <returns>이 <see cref="T:System.Data.Entity.Core.Objects.ObjectStateManager" />과 연결된 <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace" />입니다.</returns>
    </member>
    <member name="E:System.Data.Entity.Core.Objects.ObjectStateManager.ObjectStateManagerChanged">
      <summary>상태 관리자에서 엔터티가 추가되거나 제거될 때 발생합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateManager.TryGetObjectStateEntry(System.Data.Entity.Core.EntityKey,System.Data.Entity.Core.Objects.ObjectStateEntry@)">
      <summary>지정된 <see cref="T:System.Data.Entity.Core.EntityKey" />를 사용하여 개체 또는 관계에 대한 해당 <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" />를 검색하려고 시도합니다.</summary>
      <returns>지정된 <see cref="T:System.Data.Entity.Core.EntityKey" />에 대한 해당 <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" />가 있으면 true이고 그렇지 않으면 false인 부울 값입니다.</returns>
      <param name="key">지정된 <see cref="T:System.Data.Entity.Core.EntityKey" />입니다.</param>
      <param name="entry">이 메서드가 반환될 때 지정된 <see cref="T:System.Data.Entity.Core.EntityKey" />에 대한 <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" />가 포함됩니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
      <exception cref="T:System.ArgumentNullException">key에 null(Visual Basic에서는 Nothing) 값이 제공된 경우</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateManager.TryGetObjectStateEntry(System.Object,System.Data.Entity.Core.Objects.ObjectStateEntry@)">
      <summary>지정된 <see cref="T:System.Object" />에 대한 해당 <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" />를 검색하려고 시도합니다.</summary>
      <returns>지정된 개체에 대한 해당 <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" />가 있으면 true이고 그렇지 않으면 false인 부울 값입니다.</returns>
      <param name="entity">검색한 <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" />가 속하는 <see cref="T:System.Object" />입니다.</param>
      <param name="entry">이 메서드가 반환될 때 지정된 <see cref="T:System.Data.Entity.Core.EntityKey" />에 대한 <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" />가 포함됩니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateManager.TryGetRelationshipManager(System.Object,System.Data.Entity.Core.Objects.DataClasses.RelationshipManager@)">
      <summary>지정된 개체에서 사용되는 <see cref="T:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager" />를 반환합니다.</summary>
      <returns>지정된 엔터티에 대해 <see cref="T:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager" /> 인스턴스가 반환된 경우 true이고 그렇지 않으면 false입니다.</returns>
      <param name="entity">
        <see cref="T:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager" />를 반환할 개체입니다.</param>
      <param name="relationshipManager">이 메서드는 반환될 때 엔터티에 대한 <see cref="T:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager" />를 포함합니다.</param>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.OriginalValueRecord">
      <summary>데이터베이스에서 검색되었을 때 엔터티 속성의 원래 값입니다.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.ProxyDataContractResolver">
      <summary>지속성 무시 클래스에 대해 만들어진 프록시 형식을 해당 기본 형식으로 확인하는 방법을 알고 있는 DataContractResolver입니다.DataContractResolver는 DataContractSerializer와 함께 사용됩니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ProxyDataContractResolver.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.Core.Objects.ProxyDataContractResolver" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ProxyDataContractResolver.ResolveName(System.String,System.String,System.Type,System.Runtime.Serialization.DataContractResolver)">
      <summary>deserialization 중에 모든 xsi:type 정보를 지속성 무시 개체의 실제 형식에 매핑합니다.</summary>
      <returns>xsi:type이 매핑되는 형식을 반환합니다.xsi:type과 일치하는 알려진 형식이 없는 경우 null을 반환합니다.</returns>
      <param name="typeName">매핑할 xsi:type 정보입니다.</param>
      <param name="typeNamespace">xsi:type의 네임스페이스입니다.</param>
      <param name="declaredType">선언된 형식입니다.</param>
      <param name="knownTypeResolver">
        <see cref="T:System.Data.Entity.Core.Objects.ProxyDataContractResolver" />의 인스턴스입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ProxyDataContractResolver.TryResolveType(System.Type,System.Type,System.Runtime.Serialization.DataContractResolver,System.Xml.XmlDictionaryString@,System.Xml.XmlDictionaryString@)">
      <summary>serialization 중에 실제 형식을 xsi:type 정보에 매핑합니다.</summary>
      <returns>형식이 확인되었으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="type">지속성 무시 개체의 실제 형식입니다.</param>
      <param name="declaredType">선언된 형식입니다.</param>
      <param name="knownTypeResolver">
        <see cref="T:System.Data.Entity.Core.Objects.ProxyDataContractResolver" />의 인스턴스입니다.</param>
      <param name="typeName">이 메서드는 반환될 때 xsi:type 선언의 목록을 포함합니다.</param>
      <param name="typeNamespace">이 메서드는 반환될 때 사용된 네임스페이스의 목록을 포함합니다.</param>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.RefreshMode">
      <summary>데이터베이스에서 메모리 내 데이터를 새로 고칠 때 수정된 속성을 처리하는 여러 가지 방법을 정의합니다.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Objects.RefreshMode.ClientWins">
      <summary>수정되지 않은 클라이언트 개체의 경우 StoreWins와 동작이 같고,수정된 클라이언트 개체의 경우 클라이언트 개체의 모든 값을 유지한 상태로 원래 값을 저장소 값으로 바꿉니다.다음 번에 업데이트할 때 모든 클라이언트 변경 단위를 수정하고 업데이트하는 것이 좋습니다.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Objects.RefreshMode.StoreWins">
      <summary>클라이언트의 모든 변경 내용을 취소하고 저장소 값으로 값을 새로 고칩니다.클라이언트의 원래 값이 저장소와 일치하도록 업데이트됩니다.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.SaveOptions">
      <summary>ObjectContext.SaveChanges()의 동작을 수정하는 데 사용되는 플래그입니다.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Objects.SaveOptions.AcceptAllChangesAfterSave">
      <summary>변경 내용이 저장된 후 AcceptAllChangesAfterSave 메서드가 호출되어 ObjectStateManager에서 변경 내용 추적이 다시 설정됩니다.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Objects.SaveOptions.DetectChangesBeforeSave">
      <summary>변경 내용이 저장되기 전에 DetectChanges 메서드가 호출되어 개체 컨텍스트에 연결된 개체의 속성 값이 ObjectStateManager의 데이터와 동기화됩니다.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Objects.SaveOptions.None">
      <summary>변경 내용은 DetectChanges 또는 AcceptAllChangesAfterSave 메서드가 호출되지 않고 저장됩니다.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.DataClasses.ComplexObject">
      <summary>최소 인터페이스가 ADO.NET의 엔터티여야 함을 나타내는 인터페이스입니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.ComplexObject.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.Core.Objects.DataClasses.ComplexObject" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.ComplexObject.ReportPropertyChanged(System.String)">
      <summary>변경 추적 장치에 복합 개체 속성이 변경되었음을 알립니다.</summary>
      <param name="property">@FSHO2@변경된 속성의 이름입니다.</param>
      <exception cref="T:System.ArgumentNullException">@FSHO2@property가 null인 경우</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.ComplexObject.ReportPropertyChanging(System.String)">
      <summary>변경 추적 장치에 복합 개체에 대한 속성 변경이 보류 중임을 알립니다.</summary>
      <param name="property">@FSHO2@변경 중인 속성의 이름입니다.</param>
      <exception cref="T:System.ArgumentNullException">@FSHO2@property가 null인 경우</exception>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.DataClasses.EdmComplexPropertyAttribute">
      <summary>복합 속성의 특성입니다. 암시적 기본 AttributeUsage 속성 Inherited=True, AllowMultiple=False입니다. 메타데이터 시스템에서는 이를 예상하여 추가 항목이 있는 경우에도 이러한 각 특성의 첫 번째 항목만 확인합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EdmComplexPropertyAttribute.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EdmComplexPropertyAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.DataClasses.EdmComplexTypeAttribute">
      <summary>복합 형식의 특성입니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EdmComplexTypeAttribute.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EdmComplexTypeAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.DataClasses.EdmEntityTypeAttribute">
      <summary>Edm 기본 클래스를 식별하는 특성입니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EdmEntityTypeAttribute.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EdmEntityTypeAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.DataClasses.EdmEnumTypeAttribute">
      <summary>열거형 형식을 나타내는 특성입니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EdmEnumTypeAttribute.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EdmEnumTypeAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.DataClasses.EdmFunctionAttribute">
      <summary>지정된 메서드가 EDM 함수의 프록시임을 나타냅니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EdmFunctionAttribute.#ctor(System.String,System.String)">
      <summary>새 DbFunctionAttribute 인스턴스를 만듭니다.</summary>
      <param name="namespaceName">특성을 사용하는 메서드가 나타내는 EDM 함수의 네임스페이스 이름입니다.</param>
      <param name="functionName">특성을 사용하는 메서드가 나타내는 EDM 함수의 함수 이름입니다.</param>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.DataClasses.EdmPropertyAttribute">
      <summary>요소를 저장하도록 매핑된 속성의 기본 특성입니다.암시적 기본 AttributeUsage 속성 Inherited=True, AllowMultiple=False입니다. 메타데이터 시스템에서는 이를 예상하여 추가 항목이 있는 경우에도 이러한 각 특성의 첫 번째 항목만 확인합니다.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.DataClasses.EdmRelationshipAttribute">
      <summary>개념적 모델의 연결을 기반으로 두 엔터티 형식 간의 관계를 정의합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EdmRelationshipAttribute.#ctor(System.String,System.String,System.String,System.Data.Entity.Core.Metadata.Edm.RelationshipMultiplicity,System.Type,System.String,System.Data.Entity.Core.Metadata.Edm.RelationshipMultiplicity,System.Type)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EdmRelationshipAttribute" /> 클래스의 인스턴스를 만듭니다.</summary>
      <param name="relationshipNamespaceName">이 엔터티가 참여하는 연결에 대한 네임스페이스의 이름입니다.</param>
      <param name="relationshipName">이 엔터티가 참여하는 관계의 이름입니다.</param>
      <param name="role1Name">연결의 한쪽 End에 있는 형식의 역할 이름입니다.</param>
      <param name="role1Multiplicity">"일" 또는 "다"와 같이 연결의 한쪽 End에 있는 다중성을 나타내는 <see cref="T:System.Data.Entity.Core.Metadata.Edm.RelationshipMultiplicity" /> 값입니다.</param>
      <param name="role1Type">연결의 한쪽 End에 있는 엔터티의 형식입니다.</param>
      <param name="role2Name">연결의 다른 쪽 End에 있는 형식의 역할 이름입니다.</param>
      <param name="role2Multiplicity">"일" 또는 "다"와 같이 연결의 다른 쪽 End에 있는 다중성을 나타내는 <see cref="T:System.Data.Entity.Core.Metadata.Edm.RelationshipMultiplicity" />의 값입니다.</param>
      <param name="role2Type">연결의 다른 쪽 End에 있는 엔터티의 형식입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EdmRelationshipAttribute.#ctor(System.String,System.String,System.String,System.Data.Entity.Core.Metadata.Edm.RelationshipMultiplicity,System.Type,System.String,System.Data.Entity.Core.Metadata.Edm.RelationshipMultiplicity,System.Type,System.Boolean)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EdmRelationshipAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="relationshipNamespaceName">이 엔터티가 참여하는 연결에 대한 네임스페이스의 이름입니다.</param>
      <param name="relationshipName">이 엔터티가 참여하는 관계의 이름입니다.</param>
      <param name="role1Name">연결의 한쪽 End에 있는 형식의 역할 이름입니다.</param>
      <param name="role1Multiplicity">"일" 또는 "다"와 같이 연결의 한쪽 End에 있는 다중성을 나타내는 <see cref="T:System.Data.Entity.Core.Metadata.Edm.RelationshipMultiplicity" /> 값입니다.</param>
      <param name="role1Type">연결의 한쪽 End에 있는 엔터티의 형식입니다.</param>
      <param name="role2Name">연결의 다른 쪽 End에 있는 형식의 역할 이름입니다.</param>
      <param name="role2Multiplicity">"일" 또는 "다"와 같이 연결의 다른 쪽 End에 있는 다중성을 나타내는 <see cref="T:System.Data.Entity.Core.Metadata.Edm.RelationshipMultiplicity" />의 값입니다.</param>
      <param name="role2Type">연결의 다른 쪽 End에 있는 엔터티의 형식입니다.</param>
      <param name="isForeignKey">관계가 외래 키 값에 기반하는지 여부를 나타내는 값입니다.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.EdmRelationshipAttribute.IsForeignKey">
      <summary>관계가 외래 키 값에 기반하는지 여부를 나타내는 부울 값을 가져옵니다.</summary>
      <returns>관계가 외래 키 값을 기반으로 하는 경우 true이고, 그렇지 않으면 false입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.EdmRelationshipAttribute.RelationshipName">
      <summary>관계의 이름입니다.</summary>
      <returns>이 <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EdmRelationshipAttribute" />에 정의된 관계의 이름인 <see cref="T:System.String" />입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.EdmRelationshipAttribute.RelationshipNamespaceName">
      <summary>관계의 네임스페이스입니다.</summary>
      <returns>관계의 네임스페이스인 <see cref="T:System.String" />입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.EdmRelationshipAttribute.Role1Multiplicity">
      <summary>관계의 한쪽 End에 있는 다중성입니다.</summary>
      <returns>다중성을 나타내는 <see cref="T:System.Data.Entity.Core.Metadata.Edm.RelationshipMultiplicity" /> 값입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.EdmRelationshipAttribute.Role1Name">
      <summary>관계의 한쪽 End에 있는 역할의 이름입니다.</summary>
      <returns>역할의 이름인 <see cref="T:System.String" />입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.EdmRelationshipAttribute.Role1Type">
      <summary>관계의 한쪽 End에 있는 엔터티의 형식입니다.</summary>
      <returns>연결의 이쪽 End에 있는 개체의 형식인 <see cref="T:System.Type" />입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.EdmRelationshipAttribute.Role2Multiplicity">
      <summary>관계의 다른 쪽 End에 있는 다중성입니다.</summary>
      <returns>다중성을 나타내는 <see cref="T:System.Data.Entity.Core.Metadata.Edm.RelationshipMultiplicity" /> 값입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.EdmRelationshipAttribute.Role2Name">
      <summary>관계의 다른 쪽 End에 있는 역할의 이름입니다.</summary>
      <returns>역할의 이름인 <see cref="T:System.String" />입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.EdmRelationshipAttribute.Role2Type">
      <summary>관계의 다른 쪽 End에 있는 엔터티의 형식입니다.</summary>
      <returns>연결의 다른 쪽 End에 있는 개체의 형식인 <see cref="T:System.Type" />입니다.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute">
      <summary>RelationshipSet에 대해 정의된 End를 식별하는 특성입니다. 암시적 기본 AttributeUsage 속성 Inherited=True, AllowMultiple=False입니다. 메타데이터 시스템에서는 이를 예상하여 추가 항목이 있는 경우에도 이러한 각 특성의 첫 번째 항목만 확인합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute.#ctor(System.String,System.String,System.String)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="relationshipNamespaceName">관계 속성의 네임스페이스 이름입니다.</param>
      <param name="relationshipName">관계의 이름입니다.관계 이름은 정규화된 네임스페이스가 아닙니다.</param>
      <param name="targetRoleName">관계의 다른 쪽 End에 있는 역할 이름입니다.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute.RelationshipName">
      <summary>비정규화된 관계 이름을 가져옵니다.</summary>
      <returns>@FSHO2@관계 이름입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute.RelationshipNamespaceName">
      <summary>탐색 속성의 네임스페이스 이름입니다.</summary>
      <returns>네임스페이스 이름인 <see cref="T:System.String" />입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute.TargetRoleName">
      <summary>관계의 다른 쪽 End에 있는 역할 이름을 가져옵니다.</summary>
      <returns>대상 역할 이름은 개념적 모델에서 이 관계를 정의하는 연결에 포함된 다른 쪽 End 요소의 Role 특성으로 지정됩니다.자세한 내용은 연결(EDM)을 참조하십시오.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.DataClasses.EdmScalarPropertyAttribute">
      <summary>IEntity의 스칼라 속성에 대한 특성입니다.암시적 기본 AttributeUsage 속성 Inherited=True, AllowMultiple=False입니다. 메타데이터 시스템에서는 이를 예상하여 추가 항목이 있는 경우에도 이러한 각 특성의 첫 번째 항목만 확인합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EdmScalarPropertyAttribute.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EdmScalarPropertyAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.EdmScalarPropertyAttribute.EntityKeyProperty">
      <summary>속성이 엔터티 키의 일부인지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
      <returns>속성이 엔터티 키의 일부인지 여부를 나타내는 값입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.EdmScalarPropertyAttribute.IsNullable">
      <summary>속성에 null 값을 사용할 수 있는지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
      <returns>속성에 null 값을 사용할 수 있는지 여부를 나타내는 값입니다.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.DataClasses.EdmSchemaAttribute">
      <summary>정적 형식의 특성입니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EdmSchemaAttribute.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EdmSchemaAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EdmSchemaAttribute.#ctor(System.String)">
      <summary>어셈블리에서 참조되는 각 모델에 고유한 값을 사용하여 <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EdmSchemaAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="assemblyGuid">어셈블리의 모델에 고유한 GUID 값인 문자열입니다.</param>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.DataClasses.EdmTypeAttribute">
      <summary>스키마화된 형식의 기본 특성입니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.EdmTypeAttribute.Name">
      <summary>이 특성이 적용된 클래스에 매핑되는 개념 스키마의 형식 이름입니다.</summary>
      <returns>이름인 <see cref="T:System.String" />입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.EdmTypeAttribute.NamespaceName">
      <summary>이 형식에 매핑되는 개념 스키마에 있는 엔터티 개체 형식 또는 복합 형식의 네임스페이스 이름입니다.</summary>
      <returns>네임스페이스 이름인 <see cref="T:System.String" />입니다.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1">
      <summary>특정 형식의 모든 엔터티이거나 특정 관계에 참여하는 엔터티일 수 있는 특정 EDM 구문을 모델링하는 엔터티의 컬렉션입니다.</summary>
      <typeparam name="TEntity"></typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1.Add(`0)">
      <summary>개체를 컬렉션에 추가합니다.</summary>
      <param name="item">@FSHO2@컬렉션에 추가할 개체입니다.엔터티는 <see cref="T:System.Data.Entity.Core.Objects.DataClasses.IEntityWithRelationships" />를 구현해야 합니다.</param>
      <exception cref="T:System.ArgumentNullException">entity가 null인 경우</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1.Attach(System.Collections.Generic.IEnumerable{`0})">
      <summary>개체와 개체 컨텍스트의 관련 개체 컬렉션 간의 관계를 정의합니다.</summary>
      <param name="entities">소스 개체와 관련된 개체 컨텍스트의 개체 컬렉션입니다.</param>
      <exception cref="T:System.ArgumentNullException">entities 컬렉션이 null인 경우</exception>
      <exception cref="T:System.InvalidOperationException">소스 개체 또는 엔터티 컬렉션의 개체가 null이거나 <see cref="F:System.Data.Entity.EntityState.Unchanged" /> 또는 <see cref="F:System.Data.Entity.EntityState.Modified" /> 상태가 아닌 경우 또는 EDM 메타데이터에서 관계를 정의할 수 없는 경우@FSHO2@개념 스키마의 연결이 두 형식 간의 관계를 지원하지 않을 때 발생할 수 있습니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1.Attach(`0)">
      <summary>@FSHO2@개체 컨텍스트의 연결된 두 개체 간의 관계를 정의합니다.</summary>
      <param name="entity">@FSHO2@연결 중인 개체입니다.</param>
      <exception cref="T:System.ArgumentNullException">@FSHO2@entity가 null인 경우</exception>
      <exception cref="T:System.InvalidOperationException">entity를 소스 개체와 관련시킬 수 없는 경우.개념 스키마의 연결이 두 형식 간의 관계를 지원하지 않는 경우 또는 어느 한 개체가 null이거나 <see cref="F:System.Data.Entity.EntityState.Unchanged" /> 또는 <see cref="F:System.Data.Entity.EntityState.Modified" /> 상태가 아닐 때 발생할 수 있습니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1.Clear">
      <summary>컬렉션에서 엔터티를 모두 제거합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1.Contains(`0)">
      <summary>특정 개체가 컬렉션에 있는지 여부를 확인합니다.</summary>
      <returns>개체가 <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1" />에 있으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="item">
        <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1" />에서 찾을 개체입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1.CopyTo(`0[],System.Int32)">
      <summary>대상 배열의 지정된 인덱스부터 시작하여 컬렉션의 모든 내용을 배열에 복사합니다.</summary>
      <param name="array">복사할 대상 배열입니다.</param>
      <param name="arrayIndex">배열에서 복사가 시작되는 인덱스(0부터 시작)입니다.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1.Count">
      <summary>컬렉션에 포함된 개체 수를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1" />에 포함된 요소 수입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1.CreateSourceQuery">
      <summary>실행되면 현재 컬렉션에 있는 동일한 개체 집합을 반환하는 개체 쿼리를 반환합니다.</summary>
      <returns>엔터티 컬렉션을 나타내는 <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" />입니다.</returns>
      <exception cref="T:System.InvalidOperationException">개체가 <see cref="F:System.Data.Entity.EntityState.Added" /> 상태이거나, 개체가 <see cref="F:System.Data.Entity.Core.Objects.MergeOption.NoTracking" /> 이외의 <see cref="T:System.Data.Entity.Core.Objects.MergeOption" />을 사용해서 <see cref="F:System.Data.Entity.EntityState.Detached" /> 상태인 경우</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1.GetEnumerator">
      <summary>컬렉션의 개체를 반복하는 데 사용되는 열거자를 반환합니다.</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1" />에서 캐시되는 값 집합을 반복하는 <see cref="T:System.Collections.IEnumerator" />입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1.IsReadOnly">
      <summary>
        <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1" />가 읽기 전용인지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>항상 false를 반환합니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1.Load(System.Data.Entity.Core.Objects.MergeOption)">
      <summary>지정된 병합 옵션을 사용하여 관련 개체를 컬렉션에 로드합니다.</summary>
      <param name="mergeOption">같은 <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" />의 이전 쿼리에서 반환된 개체가 있는 경우 이 컬렉션의 개체와 병합할 방법을 지정합니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1.LoadAsync(System.Data.Entity.Core.Objects.MergeOption,System.Threading.CancellationToken)">
      <summary>기본 병합 옵션을 사용하여 관련 엔터티를 관련 end에 비동기적으로 로드합니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.</returns>
      <param name="mergeOption">병합 옵션입니다.</param>
      <param name="cancellationToken">작업이 완료되기를 기다리는 동안 관찰할 CancellationToken입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1.OnCollectionDeserialized(System.Runtime.Serialization.StreamingContext)">
      <summary>엔터티 개체를 deserialize하기 위해 내부적으로 사용됩니다.</summary>
      <param name="context">스트리밍 컨텍스트입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1.OnSerializing(System.Runtime.Serialization.StreamingContext)">
      <summary>엔터티 개체를 serialize하기 위해 내부적으로 사용됩니다.</summary>
      <param name="context">스트리밍 컨텍스트입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1.Remove(`0)">
      <summary>컬렉션에서 개체를 제거하고 삭제할 관계를 표시합니다.</summary>
      <returns>항목이 성공적으로 제거되었으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="item">컬렉션에서 제거할 개체입니다.</param>
      <exception cref="T:System.ArgumentNullException">엔터티 개체가 null인 경우</exception>
      <exception cref="T:System.InvalidOperationException">엔터티 개체가 동일한 개체 컨텍스트에 연결되지 않았거나, 엔터티 개체가 유효한 관계 관리자를 포함하지 않는 경우</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>
        <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1" />에서 캐시되는 값 집합을 반복하는 데 사용되는 열거자를 반환합니다.</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1" />에서 캐시되는 값 집합을 반복하는 <see cref="T:System.Collections.IEnumerator" />입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1.System#ComponentModel#IListSource#ContainsListCollection">
      <summary>IListSource.ContainsListCollection 구현입니다.항상 false를 반환합니다.즉, 반환되는 IList는 컬렉션 목록이 아니라 실제 데이터가 포함된 목록입니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1.System#ComponentModel#IListSource#GetList">
      <summary>컬렉션을 데이터 바인딩에 사용되는 <see cref="T:System.Collections.IList" />로 반환합니다.</summary>
      <returns>엔터티 개체의 <see cref="T:System.Collections.IList" />입니다.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.DataClasses.EntityObject">
      <summary>미리 지정된 모든 EntityObject 클래스의 기본 클래스입니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityObject.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityObject" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.EntityObject.EntityKey">
      <summary>이 개체의 키를 가져오거나 설정합니다.</summary>
      <returns>이 개체의 <see cref="T:System.Data.Entity.Core.EntityKey" />입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.EntityObject.EntityState">
      <summary>개체의 엔터티 상태를 가져옵니다.</summary>
      <returns>이 개체의 <see cref="T:System.Data.Entity.EntityState" />입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityObject.ReportPropertyChanged(System.String)">
      <summary>변경 추적 장치에 속성이 변경되었음을 알립니다.</summary>
      <param name="property">@FSHO2@변경된 속성의 이름입니다.</param>
      <exception cref="T:System.ArgumentNullException">@FSHO2@property가 null인 경우</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityObject.ReportPropertyChanging(System.String)">
      <summary>변경 추적 장치에 속성 변경이 보류 중임을 알립니다.</summary>
      <param name="property">@FSHO2@변경 중인 속성의 이름입니다.</param>
      <exception cref="T:System.ArgumentNullException">@FSHO2@property가 null인 경우</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityObject.System#Data#Entity#Core#Objects#DataClasses#IEntityWithChangeTracker#SetChangeTracker(System.Data.Entity.Core.Objects.DataClasses.IEntityChangeTracker)">
      <summary>이 EntityObject를 캐시에 연결하거나 분리하기 위해 ObjectStateManager에서 사용됩니다.</summary>
      <param name="changeTracker">이 엔터티가 포함된 ObjectStateEntry에 대한 참조입니다.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.EntityObject.System#Data#Entity#Core#Objects#DataClasses#IEntityWithRelationships#RelationshipManager">
      <summary>나중에 만들어진 관계 탐색 속성 개체, 컬렉션 및 참조에 대한 컨테이너를 반환합니다.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.DataClasses.EntityReference">
      <summary>복합성 1로 끝나는 관계를 모델링합니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.EntityReference.EntityKey">
      <summary>관련 개체의 키를 반환합니다.</summary>
      <returns>관련 개체의 키인 <see cref="T:System.Data.Entity.Core.EntityKey" />입니다.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1">
      <summary>복합성 1로 끝나는 관계를 모델링합니다.</summary>
      <typeparam name="TEntity"></typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1" />의 새 인스턴스를 만듭니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1.Attach(`0)">
      <summary>@FSHO2@개체 컨텍스트의 두 개체 간에 다대일 또는 일대일 관계를 만듭니다.</summary>
      <param name="entity">@FSHO2@연결 중인 개체입니다.</param>
      <exception cref="T:System.ArgumentNullException">@FSHO2@entity가 null인 경우</exception>
      <exception cref="T:System.InvalidOperationException">entity를 현재 관련 End에 연결할 수 없는 경우.@FSHO2@개념 스키마의 연결이 두 형식 간의 관계를 지원하지 않을 때 발생할 수 있습니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1.CreateSourceQuery">
      <summary>관련 개체를 반환하는 해당 개체 쿼리를 만듭니다.</summary>
      <returns>관련 개체를 반환하는 <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" />입니다.</returns>
      <exception cref="T:System.InvalidOperationException">개체가 <see cref="F:System.Data.Entity.EntityState.Added" /> 상태이거나, 개체가 <see cref="F:System.Data.Entity.Core.Objects.MergeOption.NoTracking" /> 이외의 <see cref="P:System.Data.Entity.Core.Objects.ObjectQuery.MergeOption" />을 사용해서 <see cref="F:System.Data.Entity.EntityState.Detached" /> 상태인 경우</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1.Load(System.Data.Entity.Core.Objects.MergeOption)">
      <summary>지정된 병합 옵션을 사용하여 이 <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1" />의 관련 개체를 로드합니다.</summary>
      <param name="mergeOption">
        <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" />에 개체가 이미 있는 경우 해당 개체를 반환하는 방법을 지정합니다.</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1" /> 소스가 null이거나, 쿼리가 두 개 이상의 관련 end를 반환하거나, 쿼리가 관련 end를 반환하지 않거나, 한 개의 관련 end가 필요한 경우</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1.LoadAsync(System.Data.Entity.Core.Objects.MergeOption,System.Threading.CancellationToken)">
      <summary>기본 병합 옵션을 사용하여 관련 엔터티를 관련 end에 비동기적으로 로드합니다.</summary>
      <returns>관련 end로 로드된 하나 이상의 관련 엔터티입니다.</returns>
      <param name="mergeOption">병합 옵션입니다.</param>
      <param name="cancellationToken">작업이 완료되기를 기다리는 동안 관찰할 CancellationToken입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1.OnRefDeserialized(System.Runtime.Serialization.StreamingContext)">
      <summary>이 메서드는 관련 엔터티 개체를 serialize하기 위해 내부적으로 사용됩니다.</summary>
      <param name="context">serialize된 스트림입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1.OnSerializing(System.Runtime.Serialization.StreamingContext)">
      <summary>이 메서드는 관련 엔터티 개체를 serialize하기 위해 내부적으로 사용됩니다.</summary>
      <param name="context">serialize된 스트림입니다.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1.Value">
      <summary>이 <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1" />에서 반환되는 관련 개체를 가져오거나 설정합니다.</summary>
      <returns>이 <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1" />에서 반환되는 개체입니다.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.DataClasses.IEntityChangeTracker">
      <summary>이 인터페이스는 변경 추적 장치에 의해 구현되며 데이터 클래스에서 변경 내용을 보고하는 데 사용됩니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.IEntityChangeTracker.EntityComplexMemberChanged(System.String,System.Object,System.String)">
      <summary>변경 추적 장치에 복합 형식 속성이 변경되었음을 알립니다.</summary>
      <param name="entityMemberName">변경된 엔터티 형식 복합 속성의 이름입니다.</param>
      <param name="complexObject">변경된 속성이 포함된 복합 형식입니다.</param>
      <param name="complexObjectMemberName">복합 형식에 대해 변경된 속성의 이름입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.IEntityChangeTracker.EntityComplexMemberChanging(System.String,System.Object,System.String)">
      <summary>변경 추적 장치에 복합 속성 변경이 보류 중임을 알립니다.</summary>
      <param name="entityMemberName">변경 중인 최상위 엔터티 속성의 이름입니다.</param>
      <param name="complexObject">변경 중인 속성을 포함하는 복합 형식입니다.</param>
      <param name="complexObjectMemberName">복합 형식에 대해 변경 중인 속성 이름입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.IEntityChangeTracker.EntityMemberChanged(System.String)">
      <summary>변경 추적 장치에 엔터티 형식의 속성이 변경되었음을 알립니다.</summary>
      <param name="entityMemberName">변경된 속성의 이름입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.IEntityChangeTracker.EntityMemberChanging(System.String)">
      <summary>변경 추적 장치에 엔터티 형식 속성 변경이 보류 중임을 알립니다.</summary>
      <param name="entityMemberName">변경되고 있는 속성의 이름입니다.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.IEntityChangeTracker.EntityState">
      <summary>추적된 개체의 현재 상태를 가져옵니다.</summary>
      <returns>추적된 개체의 상태인 <see cref="T:System.Data.Entity.EntityState" />입니다. 자세한 내용은 ID 확인, 상태 관리 및 변경 내용 추적 및 POCO 엔터티의 변경 내용 추적을 참조하십시오.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.DataClasses.IEntityWithChangeTracker">
      <summary>변경 추적 장치에서 관리하기 위해 데이터 클래스에서 구현해야 하는 최소 인터페이스입니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.IEntityWithChangeTracker.SetChangeTracker(System.Data.Entity.Core.Objects.DataClasses.IEntityChangeTracker)">
      <summary>변경 내용을 보고하는 데 사용되는 <see cref="T:System.Data.Entity.Core.Objects.DataClasses.IEntityChangeTracker" />를 가져오거나 설정합니다.</summary>
      <param name="changeTracker">변경 내용을 보고하는 데 사용되는 <see cref="T:System.Data.Entity.Core.Objects.DataClasses.IEntityChangeTracker" />입니다.</param>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.DataClasses.IEntityWithKey">
      <summary>키가 포함된 엔터티를 정의하는 인터페이스입니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.IEntityWithKey.EntityKey">
      <summary>이 인터페이스를 구현하는 엔터티 형식의 인스턴스에 대한 <see cref="T:System.Data.Entity.Core.EntityKey" />를 가져오거나 설정합니다.</summary>
      <returns>이 인터페이스를 구현하는 엔터티 형식의 인스턴스에 대한 <see cref="T:System.Data.Entity.Core.EntityKey" />입니다.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.DataClasses.IEntityWithRelationships">
      <summary>관계를 노출하는 경우 데이터 클래스에서 구현해야 하는 인터페이스입니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.IEntityWithRelationships.RelationshipManager">
      <summary>엔터티 형식의 인스턴스에 대한 관계를 관리하는 관계 관리자를 반환합니다.</summary>
      <returns>이 엔터티의 <see cref="T:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager" />입니다.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd">
      <summary>관계의 한쪽 end를 나타냅니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd.Add(System.Data.Entity.Core.Objects.DataClasses.IEntityWithRelationships)">
      <summary>개체를 관련 End에 추가합니다.</summary>
      <param name="entity">@FSHO2@컬렉션에 추가할 개체입니다.엔터티는 <see cref="T:System.Data.Entity.Core.Objects.DataClasses.IEntityWithRelationships" />를 구현해야 합니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd.Add(System.Object)">
      <summary>개체를 관련 End에 추가합니다.</summary>
      <param name="entity">@FSHO2@컬렉션에 추가할 개체입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd.Attach(System.Data.Entity.Core.Objects.DataClasses.IEntityWithRelationships)">
      <summary>연결된 두 개체 간의 관계를 정의합니다.</summary>
      <param name="entity">@FSHO2@연결 중인 개체입니다.엔터티는 <see cref="T:System.Data.Entity.Core.Objects.DataClasses.IEntityWithRelationships" />를 구현해야 합니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd.Attach(System.Object)">
      <summary>연결된 두 개체 간의 관계를 정의합니다.</summary>
      <param name="entity">@FSHO2@연결 중인 개체입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd.CreateSourceQuery">
      <summary>관련 End에 속하는 개체를 나타내는 <see cref="T:System.Collections.IEnumerable" />을 반환합니다.</summary>
      <returns>관련 End에 속하는 개체를 나타내는 <see cref="T:System.Collections.IEnumerable" />입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd.GetEnumerator">
      <summary>관련 개체의 컬렉션을 반복하는 <see cref="T:System.Collections.IEnumerator" />를 반환합니다.</summary>
      <returns>관련 개체의 컬렉션을 반복하는 <see cref="T:System.Collections.IEnumerator" />입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd.IsLoaded">
      <summary>관련 개체가 모두 로드되었는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>관련 End에 데이터베이스의 모든 관련 엔터티가 포함되어 있으면 true이고, 그렇지 않으면 false입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd.Load">
      <summary>기본 병합 옵션을 사용하여 관련 개체를 이 관련 End에 로드합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd.Load(System.Data.Entity.Core.Objects.MergeOption)">
      <summary>지정된 병합 옵션을 사용하여 관련 개체를 관련 End에 로드합니다.</summary>
      <param name="mergeOption">기존 <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1" />으로 개체를 병합할 때 사용하는 <see cref="T:System.Data.Entity.Core.Objects.MergeOption" />입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd.LoadAsync(System.Data.Entity.Core.Objects.MergeOption,System.Threading.CancellationToken)">
      <summary>지정된 병합 옵션을 사용하여 관련 개체를 관련 End에 비동기적으로 로드합니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.</returns>
      <param name="mergeOption">기존 <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1" />으로 개체를 병합할 때 사용하는 <see cref="T:System.Data.Entity.Core.Objects.MergeOption" />입니다.</param>
      <param name="cancellationToken">작업이 완료되기를 기다리는 동안 관찰할 <see cref="T:System.Threading.CancellationToken" />입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd.LoadAsync(System.Threading.CancellationToken)">
      <summary>기본 병합 옵션을 사용하여 관련 개체를 이 관련 End에 비동기적으로 로드합니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.</returns>
      <param name="cancellationToken">작업이 완료되기를 기다리는 동안 관찰할 <see cref="T:System.Threading.CancellationToken" />입니다.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd.RelationshipName">
      <summary>이 관련 End가 참여하는 관계의 이름을 가져옵니다.</summary>
      <returns>이 <see cref="T:System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd" />가 참여하고 있는 관계의 이름입니다.관계 이름은 정규화된 네임스페이스가 아닙니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd.RelationshipSet">
      <summary>관련 End의 메타데이터에 대한 참조를 반환합니다.</summary>
      <returns>관계의 End에 대한 메타데이터를 포함한 <see cref="T:System.Data.Entity.Core.Metadata.Edm.RelationshipSet" /> 개체입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd.Remove(System.Data.Entity.Core.Objects.DataClasses.IEntityWithRelationships)">
      <summary>관련 End의 개체 컬렉션에서 개체를 제거합니다.</summary>
      <returns>엔터티가 제거되었으면 true이고, 엔터티가 <see cref="T:System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd" />의 일부가 아니면 false입니다.</returns>
      <param name="entity">컬렉션에서 제거할 개체입니다.엔터티는 <see cref="T:System.Data.Entity.Core.Objects.DataClasses.IEntityWithRelationships" />를 구현해야 합니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd.Remove(System.Object)">
      <summary>관련 End의 개체 컬렉션에서 개체를 제거합니다.</summary>
      <returns>엔터티가 제거되었으면 true이고, 엔터티가 <see cref="T:System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd" />의 일부가 아니면 false입니다.</returns>
      <param name="entity">컬렉션에서 제거할 개체입니다.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd.SourceRoleName">
      <summary>관계의 소스 End에 있는 역할 이름을 가져옵니다.</summary>
      <returns>관계의 소스 End에 있는 역할 이름입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd.TargetRoleName">
      <summary>관계의 대상 End에 있는 역할 이름을 가져옵니다.</summary>
      <returns>관계의 대상 끝에 있는 역할 이름입니다.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd">
      <summary>EntityCollection 및 EntityReference의 기본 클래스입니다.</summary>
    </member>
    <member name="E:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd.AssociationChanged">
      <summary>관련 End가 변경될 때 발생합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd.GetEnumerator">
      <summary>관련 개체의 컬렉션을 반복하는 <see cref="T:System.Collections.IEnumerator" />를 반환합니다.</summary>
      <returns>관련 개체의 컬렉션을 반복하는 <see cref="T:System.Collections.IEnumerator" />입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd.IsLoaded">
      <summary>관련 개체가 모두 로드되었는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>관련 End에 데이터베이스의 모든 관련 개체가 포함되어 있으면 true이고, 그렇지 않으면 false입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd.Load">
      <summary>기본 병합 옵션을 사용하여 관련 개체를 관련 End에 로드합니다.</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="F:System.Data.Entity.Core.Objects.MergeOption.NoTracking" /> 쿼리를 사용하여 원본 개체가 검색되었고 <see cref="T:System.Data.Entity.Core.Objects.MergeOption" />이 <see cref="F:System.Data.Entity.Core.Objects.MergeOption.NoTracking" />이 아니거나 관련 개체가 이미 로드되었거나, 원본 개체가 <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" />에 연결되지 않았거나, 원본 개체를 추적 중이지만 <see cref="F:System.Data.Entity.EntityState.Added" /> 또는 <see cref="F:System.Data.Entity.EntityState.Deleted" /> 상태이거나, <see cref="M:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd.Load" />에 대해 사용된 <see cref="T:System.Data.Entity.Core.Objects.MergeOption" />이 <see cref="F:System.Data.Entity.Core.Objects.MergeOption.NoTracking" />인 경우</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd.Load(System.Data.Entity.Core.Objects.MergeOption)">
      <summary>지정된 병합 옵션을 사용하여 개체를 관련 End에 로드합니다.</summary>
      <param name="mergeOption">기존 <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1" />으로 개체를 병합할 때 사용하는 <see cref="T:System.Data.Entity.Core.Objects.MergeOption" />입니다.</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="F:System.Data.Entity.Core.Objects.MergeOption.NoTracking" /> 쿼리를 사용하여 원본 개체가 검색되었고 <see cref="T:System.Data.Entity.Core.Objects.MergeOption" />이 <see cref="F:System.Data.Entity.Core.Objects.MergeOption.NoTracking" />이 아니거나 관련 개체가 이미 로드되었거나, 원본 개체가 <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" />에 연결되지 않았거나, 원본 개체를 추적 중이지만 <see cref="F:System.Data.Entity.EntityState.Added" /> 또는 <see cref="F:System.Data.Entity.EntityState.Deleted" /> 상태이거나, <see cref="M:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd.Load" />에 대해 사용된 <see cref="T:System.Data.Entity.Core.Objects.MergeOption" />이 <see cref="F:System.Data.Entity.Core.Objects.MergeOption.NoTracking" />인 경우</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd.LoadAsync(System.Data.Entity.Core.Objects.MergeOption,System.Threading.CancellationToken)">
      <summary>지정된 병합 옵션을 사용하여 개체를 관련 End에 비동기적으로 로드합니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.</returns>
      <param name="mergeOption">기존 <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1" />으로 개체를 병합할 때 사용하는 <see cref="T:System.Data.Entity.Core.Objects.MergeOption" />입니다.</param>
      <param name="cancellationToken">작업이 완료되기를 기다리는 동안 관찰할 <see cref="T:System.Threading.CancellationToken" />입니다.</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="F:System.Data.Entity.Core.Objects.MergeOption.NoTracking" /> 쿼리를 사용하여 원본 개체가 검색되었고 <see cref="T:System.Data.Entity.Core.Objects.MergeOption" />이 <see cref="F:System.Data.Entity.Core.Objects.MergeOption.NoTracking" />이 아니거나 관련 개체가 이미 로드되었거나, 원본 개체가 <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" />에 연결되지 않았거나, 원본 개체를 추적 중이지만 <see cref="F:System.Data.Entity.EntityState.Added" /> 또는 <see cref="F:System.Data.Entity.EntityState.Deleted" /> 상태이거나, <see cref="M:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd.Load" />에 대해 사용된 <see cref="T:System.Data.Entity.Core.Objects.MergeOption" />이 <see cref="F:System.Data.Entity.Core.Objects.MergeOption.NoTracking" />인 경우</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd.LoadAsync(System.Threading.CancellationToken)">
      <summary>기본 병합 옵션을 사용하여 관련 개체를 관련 End에 비동기적으로 로드합니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.</returns>
      <param name="cancellationToken">작업이 완료되기를 기다리는 동안 관찰할 <see cref="T:System.Threading.CancellationToken" />입니다.</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="F:System.Data.Entity.Core.Objects.MergeOption.NoTracking" /> 쿼리를 사용하여 원본 개체가 검색되었고 <see cref="T:System.Data.Entity.Core.Objects.MergeOption" />이 <see cref="F:System.Data.Entity.Core.Objects.MergeOption.NoTracking" />이 아니거나 관련 개체가 이미 로드되었거나, 원본 개체가 <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" />에 연결되지 않았거나, 원본 개체를 추적 중이지만 <see cref="F:System.Data.Entity.EntityState.Added" /> 또는 <see cref="F:System.Data.Entity.EntityState.Deleted" /> 상태이거나, <see cref="M:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd.Load" />에 대해 사용된 <see cref="T:System.Data.Entity.Core.Objects.MergeOption" />이 <see cref="F:System.Data.Entity.Core.Objects.MergeOption.NoTracking" />인 경우</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd.OnDeserialized(System.Runtime.Serialization.StreamingContext)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager" /> 인스턴스와 함께 엔터티 개체를 deserialize하기 위해 내부적으로 사용됩니다.</summary>
      <param name="context">serialize된 스트림입니다.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd.RelationshipName">
      <summary>이 관련 End가 참여하는 관계의 이름을 가져옵니다.</summary>
      <returns>이 <see cref="T:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd" />가 참여하는 관계의 이름입니다.관계 이름은 정규화된 네임스페이스가 아닙니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd.RelationshipSet">
      <summary>관련 End의 메타데이터에 대한 참조를 가져옵니다.</summary>
      <returns>관계의 End에 대한 메타데이터를 포함한 <see cref="T:System.Data.Entity.Core.Metadata.Edm.RelationshipSet" /> 개체입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd.SourceRoleName">
      <summary>관계의 소스 End에 있는 역할 이름을 가져옵니다.</summary>
      <returns>역할 이름인 <see cref="T:System.String" />입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd.System#Data#Entity#Core#Objects#DataClasses#IRelatedEnd#Add(System.Data.Entity.Core.Objects.DataClasses.IEntityWithRelationships)">
      <summary>엔터티를 관련 end에 추가합니다.이 메서드는 Add(object)와 정확히 동일한 방식으로 작동합니다.IRelatedEnd 이전 버전과의 호환성을 유지할 목적으로 제공됩니다.</summary>
      <param name="entity">관련 end에 추가할 엔터티 인스턴스입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd.System#Data#Entity#Core#Objects#DataClasses#IRelatedEnd#Add(System.Object)">
      <summary>엔터티를 관련 end에 추가합니다.소유자가 캐시에 연결되면 연결된 모든 end가 개체 캐시에 추가되고 해당 관계도 ObjectStateManager에 추가됩니다.또한 관계의 RelatedEnd가 고정됩니다.</summary>
      <param name="entity">관련 end에 추가할 엔터티 인스턴스입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd.System#Data#Entity#Core#Objects#DataClasses#IRelatedEnd#Attach(System.Data.Entity.Core.Objects.DataClasses.IEntityWithRelationships)">
      <summary>관련 end에 엔터티를 연결합니다.이 메서드는 Attach(object)와 정확히 동일한 방식으로 작동합니다.IRelatedEnd 이전 버전과의 호환성을 유지할 목적으로 제공됩니다.</summary>
      <param name="entity">관련 end에 연결할 엔터티입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="entity" />이 null인 경우 throw됩니다.</exception>
      <exception cref="T:System.InvalidOperationException">현재 관련 end를 통해 엔터티를 연결할 수 없는 경우에 발생합니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd.System#Data#Entity#Core#Objects#DataClasses#IRelatedEnd#Attach(System.Object)">
      <summary>관련 end에 엔터티를 연결합니다.관련 end가 이미 채워져 있거나 부분적으로 채워져 있으면 기존 엔터티를 지정된 엔터티와 병합합니다.지정된 엔터티는 관련 엔터티의 전체 집합이 아닐 수도 있습니다.소유자와 전달되는 모든 엔터티는 Unchanged 또는 Modified 상태여야 합니다.삭제된 요소는 상태 관리자가 관계 인스턴스를 이미 추적하고 있는 경우에만 허용됩니다.</summary>
      <param name="entity">관련 end에 연결할 엔터티입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="entity" />이 null인 경우 throw됩니다.</exception>
      <exception cref="T:System.InvalidOperationException">현재 관련 end를 통해 엔터티를 연결할 수 없는 경우에 발생합니다.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd.System#Data#Entity#Core#Objects#DataClasses#IRelatedEnd#CreateSourceQuery">
      <summary>관련 End에 속하는 개체를 나타내는 <see cref="T:System.Collections.IEnumerable" />을 반환합니다.</summary>
      <returns>관련 End에 속하는 개체를 나타내는 <see cref="T:System.Collections.IEnumerable" />입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd.System#Data#Entity#Core#Objects#DataClasses#IRelatedEnd#Remove(System.Data.Entity.Core.Objects.DataClasses.IEntityWithRelationships)">
      <summary>관련 end에서 엔터티를 제거합니다.이 메서드는 Remove(object)와 정확히 동일한 방식으로 작동합니다.IRelatedEnd 이전 버전과의 호환성을 유지할 목적으로 제공됩니다.</summary>
      <returns>엔터티가 제거되었으면 true를 반환하고, 엔터티가 RelatedEnd의 일부가 아니면 false를 반환합니다.</returns>
      <param name="entity">관련 end에서 제거할 엔터티 인스턴스입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd.System#Data#Entity#Core#Objects#DataClasses#IRelatedEnd#Remove(System.Object)">
      <summary>관련 end에서 엔터티를 제거합니다.소유자가 캐시에 연결된 경우 삭제할 관계를 표시하고 관계가 컴퍼지션인 경우 삭제할 엔터티를 표시합니다.</summary>
      <returns>엔터티가 제거되었으면 true를 반환하고, 엔터티가 RelatedEnd의 일부가 아니면 false를 반환합니다.</returns>
      <param name="entity">관련 end에서 제거할 엔터티 인스턴스입니다.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd.TargetRoleName">
      <summary>관계의 대상 End에 있는 역할 이름을 가져옵니다.</summary>
      <returns>역할 이름인 <see cref="T:System.String" />입니다.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.DataClasses.RelationshipKind">
      <summary>관계의 종류를 식별합니다.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Objects.DataClasses.RelationshipKind.Association">
      <summary>관계가 연결입니다.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager">
      <summary>나중에 만들어진 관계 탐색 속성 개체(컬렉션 및 참조)에 대한 컨테이너입니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager.Create(System.Data.Entity.Core.Objects.DataClasses.IEntityWithRelationships)">
      <summary>새 <see cref="T:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager" /> 개체를 만듭니다.</summary>
      <returns>요청된 <see cref="T:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager" />입니다.</returns>
      <param name="owner">이 메서드를 호출하고 있는 엔터티에 대한 참조입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager.GetAllRelatedEnds">
      <summary>관계 관리자에서 관리하는 모든 관련 End의 열거형을 반환합니다.</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd" />를 구현하는 개체의 <see cref="T:System.Collections.Generic.IEnumerable`1" />입니다.관계가 아직 채워지지 않았으면 빈 열거형이 반환됩니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager.GetRelatedCollection``1(System.String,System.String)">
      <summary>지정된 관계 이름 및 대상 역할 이름을 사용하여 관련 개체의 <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1" />을 가져옵니다.</summary>
      <returns>관련 개체의 <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1" />입니다.</returns>
      <param name="relationshipName">탐색할 관계의 이름입니다.관계 이름은 정규화된 네임스페이스가 아닙니다.</param>
      <param name="targetRoleName">탐색에 사용할 대상 역할의 이름입니다.관계를 탐색할 방향을 나타냅니다.</param>
      <typeparam name="TTargetEntity">반환된 <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1" />의 형식입니다.</typeparam>
      <exception cref="T:System.InvalidOperationException">지정된 역할에서 <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1" /> 대신 <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1" />를 반환한 경우</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager.GetRelatedEnd(System.String,System.String)">
      <summary>관계에서 지정된 대상 역할에 대한 올바른 형식의 <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1" /> 또는 <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1" />를 반환합니다.</summary>
      <returns>검색된 <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1" /> 또는 <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1" />를 나타내는 <see cref="T:System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd" />입니다.</returns>
      <param name="relationshipName">targetRoleName이 정의된 관계의 이름입니다.관계 이름은 정규화된 네임스페이스가 아닙니다.</param>
      <param name="targetRoleName">relationshipName의 반대편 end를 검색하는 데 사용되는 대상 역할입니다.</param>
      <exception cref="T:System.ArgumentNullException">relationshipName 또는 targetRoleName이 null인 경우</exception>
      <exception cref="T:System.InvalidOperationException">소스 형식이 소유자의 형식과 일치하지 않는 경우</exception>
      <exception cref="T:System.ArgumentException">targetRoleName이 잘못되었거나, 메타데이터에서 관계 형식을 찾을 수 없는 경우</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager.GetRelatedReference``1(System.String,System.String)">
      <summary>관계 이름 및 대상 역할 이름의 지정된 조합을 사용하여 관련 개체의 <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1" />를 가져옵니다.</summary>
      <returns>관련 개체의 <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1" />입니다.</returns>
      <param name="relationshipName">탐색할 관계의 이름입니다.관계 이름은 정규화된 네임스페이스가 아닙니다.</param>
      <param name="targetRoleName">탐색에 사용할 대상 역할의 이름입니다.관계를 탐색할 방향을 나타냅니다.</param>
      <typeparam name="TTargetEntity">반환된 <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1" />의 형식입니다.</typeparam>
      <exception cref="T:System.InvalidOperationException">지정된 역할에서 <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1" /> 대신 <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1" />를 반환한 경우</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager.InitializeRelatedCollection``1(System.String,System.String,System.Data.Entity.Core.Objects.DataClasses.EntityCollection{``0})">
      <summary>기본 생성자로 만들어진 기존 EntityCollection을 가져와 제공된 관계 및 대상 역할 이름을 사용하여 초기화합니다.이 메서드는 deserialization 중에만 사용하도록 디자인되었으며, 제공된 EntityCollection이 이미 초기화되었거나 관계 관리자가 ObjectContext에 이미 연결된 경우 예외를 발생시킵니다.</summary>
      <typeparam name="TTargetEntity">targetRoleName이 나타내는 엔터티의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager.InitializeRelatedReference``1(System.String,System.String,System.Data.Entity.Core.Objects.DataClasses.EntityReference{``0})">
      <summary>기본 생성자로 만들어진 기존 EntityReference를 가져와 제공된 관계 및 대상 역할 이름을 사용하여 초기화합니다.이 메서드는 deserialization 중에만 사용하도록 디자인되었으며, 제공된 EntityReference가 이미 초기화되었거나, 관계 관리자에 이 이름 및 대상 역할의 관계가 이미 포함되어 있거나, 관계 관리자가 ObjectContext.W에 이미 연결된 경우 예외를 발생시킵니다.</summary>
      <param name="relationshipName">@FSHO2@관계 이름입니다.</param>
      <param name="targetRoleName">관련 End의 역할 이름입니다.</param>
      <param name="entityReference">초기화할 <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1" />입니다.</param>
      <typeparam name="TTargetEntity">초기화 중인 <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1" />의 형식입니다.</typeparam>
      <exception cref="T:System.InvalidOperationException">제공된 <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1" />가 이미 초기화되었거나, 관계 관리자가 이미 <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" />에 연결되었거나, 관계 관리자에 이미 이 이름 및 대상 역할을 포함하는 관계가 포함된 경우</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager.OnDeserialized(System.Runtime.Serialization.StreamingContext)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager" /> 인스턴스와 함께 엔터티 개체를 deserialize하기 위해 내부적으로 사용됩니다.</summary>
      <param name="context">serialize된 스트림입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager.OnSerializing(System.Runtime.Serialization.StreamingContext)">
      <summary>serialize된 관계를 사용하여 이진 serialization에 대한 <see cref="T:System.Data.Entity.Core.EntityKey" />를 준비하기 위해 개체 서비스에서 호출됩니다.</summary>
      <param name="context">주어진 serialize된 스트림의 소스 및 대상을 설명하고 추가 호출자 정의 컨텍스트를 제공합니다.</param>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.DataClasses.StructuralObject">
      <summary>이 클래스는 날짜 개체에 필요한 일반적인 메서드를 포함합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.Core.Objects.DataClasses.StructuralObject" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.BinaryEquals(System.Byte[],System.Byte[])">
      <summary>지정된 바이트 배열에 동일한 값이 포함되어 있는지 여부를 확인합니다.</summary>
      <returns>두 배열이 동일한 길이이고 같은 바이트 값을 포함하거나 두 배열이 모두 null이면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="first">비교할 첫 번째 바이트 배열 값입니다.</param>
      <param name="second">비교할 두 번째 바이트 배열입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.DefaultDateTimeValue">
      <summary>데이터 원본에서 지원되는 최소 날짜 시간 값을 반환합니다.</summary>
      <returns>데이터 원본에서 지원되는 최소 날짜 시간인 <see cref="T:System.DateTime" /> 값입니다.</returns>
    </member>
    <member name="F:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.EntityKeyPropertyName">
      <summary>변경 추적에 사용되는 공용 상수 이름입니다. 이 정의를 제공하면 사용자가 문자열을 하드 코드하는 대신 이 상수를 사용할 수 있습니다.그러면 정확한 속성 이름이 사용되고 이 특정 문자열을 찾는 위치에서 보다 빠르게 비교할 수 있습니다.사용자는 상수 대신 대/소문자 구분 문자열을 직접 사용할 수도 있습니다. 이 경우 비교 속도가 약간 느려질 뿐입니다.이름을 대시(-) 문자로 둘러싸면 실제 데이터 속성과 충돌하지 않게 됩니다. -EntityKey-는 유효한 식별자 이름이 아니기 때문입니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.GetValidValue(System.Byte[])">
      <summary>현재 바이트 값의 복사본을 반환합니다.</summary>
      <returns>현재 <see cref="T:System.Byte" /> 값의 복사본입니다.</returns>
      <param name="currentValue">현재 바이트 배열 값입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.GetValidValue``1(``0,System.String,System.Boolean,System.Boolean)">
      <summary>지정된 속성에 대한 복합 형식을 반환합니다.</summary>
      <returns>속성에 대한 복합 형식 개체입니다.</returns>
      <param name="currentValue">복합 개체에서 상속하는 복합 개체입니다.</param>
      <param name="property">복합 개체인 복합 속성의 이름입니다.</param>
      <param name="isNullable">형식이 null 값을 지원하는지 여부를 나타냅니다.</param>
      <param name="isInitialized">형식이 초기화되는지 여부를 나타냅니다.</param>
      <typeparam name="T">요청 중인 복합 개체의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.OnPropertyChanged(System.String)">
      <summary>
        <see cref="E:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.PropertyChanged" /> 이벤트를 발생시킵니다.</summary>
      <param name="property">@FSHO2@변경된 속성의 이름입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.OnPropertyChanging(System.String)">
      <summary>
        <see cref="E:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.PropertyChanging" /> 이벤트를 발생시킵니다.</summary>
      <param name="property">변경 중인 속성의 이름입니다.</param>
    </member>
    <member name="E:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.PropertyChanged">
      <summary>속성이 변경되었음을 나타내는 알림입니다.</summary>
    </member>
    <member name="E:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.PropertyChanging">
      <summary>속성이 변경됨을 나타내는 알림입니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.ReportPropertyChanged(System.String)">
      <summary>속성 변경이 발생했음을 보고하는 데 사용되는 이벤트를 발생시킵니다.</summary>
      <param name="property">변경된 속성의 이름입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.ReportPropertyChanging(System.String)">
      <summary>속성 변경이 보류 중임을 보고하는 데 사용되는 이벤트를 발생시킵니다.</summary>
      <param name="property">@FSHO2@변경 중인 속성의 이름입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Boolean)">
      <summary>속성에 대해 설정할 <see cref="T:System.Boolean" /> 값이 올바른지 확인합니다.</summary>
      <returns>설정하는 <see cref="T:System.Boolean" /> 값입니다.</returns>
      <param name="value">부울 값</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Boolean,System.String)">
      <summary>속성에 대해 설정할 <see cref="T:System.Boolean" /> 값이 올바른지 확인합니다.</summary>
      <returns>설정하는 <see cref="T:System.Boolean" /> 값입니다.</returns>
      <param name="value">부울 값</param>
      <param name="propertyName">유효성을 검사할 속성의 이름입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Byte)">
      <summary>속성에 대해 설정할 <see cref="T:System.Byte" /> 값이 올바른지 확인합니다.</summary>
      <returns>설정된 <see cref="T:System.Byte" /> 값입니다.</returns>
      <param name="value">유효성 검사 중인 값입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Byte,System.String)">
      <summary>속성에 대해 설정할 <see cref="T:System.Byte" /> 값이 올바른지 확인합니다.</summary>
      <returns>설정된 <see cref="T:System.Byte" />입니다.</returns>
      <param name="value">
        <see cref="T:System.Byte" /> 값입니다.</param>
      <param name="propertyName">유효성을 검사할 속성의 이름입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Byte[],System.Boolean)">
      <summary>속성에 대해 설정할 <see cref="T:System.Byte[]" /> 값이 올바른지 확인합니다.</summary>
      <returns>설정할 <see cref="T:System.Byte" /> 값입니다.</returns>
      <param name="value">설정하는 값입니다.</param>
      <param name="isNullable">속성에 null이 허용되는지 여부를 나타냅니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Byte[],System.Boolean,System.String)">
      <summary>속성에 대해 설정할 <see cref="T:System.Byte[]" /> 값이 올바른지 확인합니다.</summary>
      <returns>유효성을 검사하는 <see cref="T:System.Byte" /> 값입니다.</returns>
      <param name="value">속성 setter에 전달된 값입니다.</param>
      <param name="isNullable">이 속성이 null일 수 있는지 여부를 나타내는 플래그입니다.</param>
      <param name="propertyName">유효성을 검사할 속성의 이름입니다.</param>
      <exception cref="T:System.Data.ConstraintException">null을 허용하지 않는 값에 대해 값이 null인 경우</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Data.Entity.Spatial.DbGeography,System.Boolean)">
      <summary>속성이 null이 아닌지 유효성을 검사하고 null인 경우 throw됩니다.</summary>
      <returns>설정하는 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 값입니다.</returns>
      <param name="value">검사할 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 값입니다.</param>
      <param name="isNullable">이 속성이 null일 수 있는지 여부를 나타내는 플래그입니다.</param>
      <exception cref="T:System.Data.ConstraintException">null을 허용하지 않는 속성에 대해 값이 null인 경우</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Data.Entity.Spatial.DbGeography,System.Boolean,System.String)">
      <summary>속성이 null이 아닌지 유효성을 검사하고 null인 경우 throw됩니다.</summary>
      <returns>설정하는 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 값입니다.</returns>
      <param name="value">검사할 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 값입니다.</param>
      <param name="isNullable">이 속성이 null일 수 있는지 여부를 나타내는 플래그입니다.</param>
      <param name="propertyName">유효성을 검사하는 속성의 이름입니다.</param>
      <exception cref="T:System.Data.ConstraintException">null을 허용하지 않는 속성에 대해 값이 null인 경우</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Data.Entity.Spatial.DbGeometry,System.Boolean)">
      <summary>속성이 null이 아닌지 유효성을 검사하고 null인 경우 throw됩니다.</summary>
      <returns>설정하는 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 값입니다.</returns>
      <param name="value">검사할 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 값입니다.</param>
      <param name="isNullable">이 속성이 null일 수 있는지 여부를 나타내는 플래그입니다.</param>
      <exception cref="T:System.Data.ConstraintException">null을 허용하지 않는 속성에 대해 값이 null인 경우</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Data.Entity.Spatial.DbGeometry,System.Boolean,System.String)">
      <summary>속성이 null이 아닌지 유효성을 검사하고 null인 경우 throw됩니다.</summary>
      <returns>설정하는 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 값입니다.</returns>
      <param name="value">검사할 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 값입니다.</param>
      <param name="isNullable">이 속성이 null일 수 있는지 여부를 나타내는 플래그입니다.</param>
      <param name="propertyName">유효성을 검사할 속성의 이름입니다.</param>
      <exception cref="T:System.Data.ConstraintException">null을 허용하지 않는 속성에 대해 값이 null인 경우</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.DateTime)">
      <summary>속성에 대해 설정할 <see cref="T:System.DateTime" /> 값이 올바른지 확인합니다.</summary>
      <returns>설정하는 <see cref="T:System.DateTime" /> 값입니다.</returns>
      <param name="value">
        <see cref="T:System.DateTime" /> 값입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.DateTime,System.String)">
      <summary>속성에 대해 설정할 <see cref="T:System.DateTime" /> 값이 올바른지 확인합니다.</summary>
      <returns>설정하는 <see cref="T:System.DateTime" /> 값입니다.</returns>
      <param name="value">
        <see cref="T:System.DateTime" /> 값입니다.</param>
      <param name="propertyName">유효성을 검사할 속성의 이름입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.DateTimeOffset)">
      <summary>속성에 대해 설정할 <see cref="T:System.DateTimeOffset" /> 값이 올바른지 확인합니다.</summary>
      <returns>설정할 <see cref="T:System.DateTimeOffset" /> 값입니다.</returns>
      <param name="value">
        <see cref="T:System.DateTimeOffset" /> 값입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.DateTimeOffset,System.String)">
      <summary>속성에 대해 설정할 <see cref="T:System.DateTimeOffset" /> 값이 올바른지 확인합니다.</summary>
      <returns>설정하는 <see cref="T:System.DateTimeOffset" /> 값입니다.</returns>
      <param name="value">
        <see cref="T:System.DateTimeOffset" /> 값입니다.</param>
      <param name="propertyName">유효성을 검사할 속성의 이름입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Decimal)">
      <summary>속성에 대해 설정할 <see cref="T:System.Decimal" /> 값이 올바른지 확인합니다.</summary>
      <returns>설정하는 <see cref="T:System.Decimal" /> 값입니다.</returns>
      <param name="value">
        <see cref="T:System.Decimal" /> 값입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Decimal,System.String)">
      <summary>속성에 대해 설정할 <see cref="T:System.Decimal" /> 값이 올바른지 확인합니다.</summary>
      <returns>설정하는 <see cref="T:System.Decimal" /> 값입니다.</returns>
      <param name="value">
        <see cref="T:System.Decimal" /> 값입니다.</param>
      <param name="propertyName">유효성을 검사할 속성의 이름입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Double)">
      <summary>속성에 대해 설정할 <see cref="T:System.Double" /> 값이 올바른지 확인합니다.</summary>
      <returns>설정하는 <see cref="T:System.Double" /> 값입니다.</returns>
      <param name="value">
        <see cref="T:System.Double" /> 값입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Double,System.String)">
      <summary>속성에 대해 설정할 <see cref="T:System.Double" /> 값이 올바른지 확인합니다.</summary>
      <returns>설정하는 <see cref="T:System.Double" /> 값입니다.</returns>
      <param name="value">
        <see cref="T:System.Double" /> 값입니다.</param>
      <param name="propertyName">유효성을 검사할 속성의 이름입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Guid)">
      <summary>속성에 대해 설정할 <see cref="T:System.Guid" /> 값이 올바른지 확인합니다.</summary>
      <returns>설정하는 <see cref="T:System.Guid" /> 값입니다.</returns>
      <param name="value">
        <see cref="T:System.Guid" /> 값입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Guid,System.String)">
      <summary>속성에 대해 설정할 <see cref="T:System.Guid" /> 값이 올바른지 확인합니다.</summary>
      <returns>설정하는 <see cref="T:System.Guid" /> 값입니다.</returns>
      <param name="value">
        <see cref="T:System.Guid" /> 값입니다.</param>
      <param name="propertyName">유효성을 검사하는 속성의 이름입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Int16)">
      <summary>속성에 대해 설정할 <see cref="T:System.Int16" /> 값이 올바른지 확인합니다.</summary>
      <returns>설정하는 <see cref="T:System.Int16" /> 값입니다.</returns>
      <param name="value">
        <see cref="T:System.Int16" /> 값입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Int16,System.String)">
      <summary>속성에 대해 설정할 <see cref="T:System.Int16" /> 값이 올바른지 확인합니다.</summary>
      <returns>설정하는 <see cref="T:System.Int16" /> 값입니다.</returns>
      <param name="value">
        <see cref="T:System.Int16" /> 값입니다.</param>
      <param name="propertyName">유효성을 검사할 속성의 이름입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Int32)">
      <summary>속성에 대해 설정할 <see cref="T:System.Int32" /> 값이 올바른지 확인합니다.</summary>
      <returns>설정하는 <see cref="T:System.Int32" /> 값입니다.</returns>
      <param name="value">
        <see cref="T:System.Int32" /> 값입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Int32,System.String)">
      <summary>속성에 대해 설정할 <see cref="T:System.Int32" /> 값이 올바른지 확인합니다.</summary>
      <returns>설정하는 <see cref="T:System.Int32" /> 값입니다.</returns>
      <param name="value">
        <see cref="T:System.Int32" /> 값입니다.</param>
      <param name="propertyName">유효성을 검사할 속성의 이름입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Int64)">
      <summary>속성에 대해 설정할 <see cref="T:System.Int64" /> 값이 올바른지 확인합니다.</summary>
      <returns>설정하는 <see cref="T:System.Int64" /> 값입니다.</returns>
      <param name="value">
        <see cref="T:System.Int64" /> 값입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Int64,System.String)">
      <summary>속성에 대해 설정할 <see cref="T:System.Int64" /> 값이 올바른지 확인합니다.</summary>
      <returns>설정하는 <see cref="T:System.Int64" /> 값입니다.</returns>
      <param name="value">
        <see cref="T:System.Int64" /> 값입니다.</param>
      <param name="propertyName">유효성을 검사할 속성의 이름입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Boolean})">
      <summary>속성에 대해 설정할 <see cref="T:System.Boolean" /> 값이 올바른지 확인합니다.</summary>
      <returns>설정하는 nullable <see cref="T:System.Boolean" /> 값입니다.</returns>
      <param name="value">nullable <see cref="T:System.Boolean" /> 값입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Boolean},System.String)">
      <summary>속성에 대해 설정할 <see cref="T:System.Boolean" /> 값이 올바른지 확인합니다.</summary>
      <returns>설정하는 nullable <see cref="T:System.Boolean" /> 값입니다.</returns>
      <param name="value">nullable <see cref="T:System.Boolean" /> 값입니다.</param>
      <param name="propertyName">유효성을 검사할 속성의 이름입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Byte})">
      <summary>속성에 대해 설정할 <see cref="T:System.Byte" /> 값이 올바른지 확인합니다.</summary>
      <returns>설정하는 nullable <see cref="T:System.Byte" /> 값입니다.</returns>
      <param name="value">nullable <see cref="T:System.Byte" /> 값입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Byte},System.String)">
      <summary>속성에 대해 설정할 <see cref="T:System.Byte" /> 값이 올바른지 확인합니다.</summary>
      <returns>설정하는 nullable <see cref="T:System.Byte" /> 값입니다.</returns>
      <param name="value">nullable <see cref="T:System.Byte" /> 값입니다.</param>
      <param name="propertyName">유효성을 검사할 속성의 이름입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.DateTime})">
      <summary>속성에 대해 설정할 <see cref="T:System.DateTime" /> 값이 올바른지 확인합니다.</summary>
      <returns>설정하는 nullable <see cref="T:System.DateTime" /> 값입니다.</returns>
      <param name="value">nullable <see cref="T:System.DateTime" /> 값입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.DateTime},System.String)">
      <summary>속성에 대해 설정할 <see cref="T:System.DateTime" /> 값이 올바른지 확인합니다.</summary>
      <returns>설정하는 nullable <see cref="T:System.DateTime" /> 값입니다.</returns>
      <param name="value">nullable <see cref="T:System.DateTime" /> 값입니다.</param>
      <param name="propertyName">유효성을 검사할 속성의 이름입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.DateTimeOffset})">
      <summary>속성에 대해 설정할 <see cref="T:System.DateTimeOffset" /> 값이 올바른지 확인합니다.</summary>
      <returns>설정하는 nullable <see cref="T:System.DateTimeOffset" /> 값입니다.</returns>
      <param name="value">nullable <see cref="T:System.DateTimeOffset" /> 값입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.DateTimeOffset},System.String)">
      <summary>속성에 대해 설정할 <see cref="T:System.DateTimeOffset" /> 값이 올바른지 확인합니다.</summary>
      <returns>설정하는 <see cref="T:System.DateTimeOffset" /> 값입니다.</returns>
      <param name="value">
        <see cref="T:System.DateTimeOffset" /> 값입니다.</param>
      <param name="propertyName">유효성을 검사할 속성의 이름입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Decimal})">
      <summary>속성에 대해 설정할 <see cref="T:System.Decimal" /> 값이 올바른지 확인합니다.</summary>
      <returns>설정하는 nullable <see cref="T:System.Decimal" /> 값입니다.</returns>
      <param name="value">nullable <see cref="T:System.Decimal" /> 값입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Decimal},System.String)">
      <summary>속성에 대해 설정할 <see cref="T:System.Decimal" /> 값이 올바른지 확인합니다.</summary>
      <returns>설정하는 nullable <see cref="T:System.Decimal" /> 값입니다.</returns>
      <param name="value">nullable <see cref="T:System.Decimal" /> 값입니다.</param>
      <param name="propertyName">유효성을 검사할 속성의 이름입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Double})">
      <summary>속성에 대해 설정할 <see cref="T:System.Double" /> 값이 올바른지 확인합니다.</summary>
      <returns>설정하는 nullable <see cref="T:System.Double" /> 값입니다.</returns>
      <param name="value">nullable <see cref="T:System.Double" /> 값입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Double},System.String)">
      <summary>속성에 대해 설정할 <see cref="T:System.Double" /> 값이 올바른지 확인합니다.</summary>
      <returns>설정하는 nullable <see cref="T:System.Double" /> 값입니다.</returns>
      <param name="value">nullable <see cref="T:System.Double" /> 값입니다.</param>
      <param name="propertyName">유효성을 검사할 속성의 이름입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Guid})">
      <summary>속성에 대해 설정할 <see cref="T:System.Guid" /> 값이 올바른지 확인합니다.</summary>
      <returns>설정하는 nullable <see cref="T:System.Guid" /> 값입니다.</returns>
      <param name="value">nullable <see cref="T:System.Guid" /> 값입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Guid},System.String)">
      <summary>속성에 대해 설정할 <see cref="T:System.Guid" /> 값이 올바른지 확인합니다.</summary>
      <returns>설정하는 nullable <see cref="T:System.Guid" /> 값입니다.</returns>
      <param name="value">nullable <see cref="T:System.Guid" /> 값입니다.</param>
      <param name="propertyName">유효성을 검사할 속성의 이름입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Int16})">
      <summary>속성에 대해 설정할 <see cref="T:System.Int16" /> 값이 올바른지 확인합니다.</summary>
      <returns>설정하는 nullable <see cref="T:System.Int16" /> 값입니다.</returns>
      <param name="value">nullable <see cref="T:System.Int16" /> 값입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Int16},System.String)">
      <summary>속성에 대해 설정할 <see cref="T:System.Int16" /> 값이 올바른지 확인합니다.</summary>
      <returns>설정하는 nullable <see cref="T:System.Int16" /> 값입니다.</returns>
      <param name="value">nullable <see cref="T:System.Int16" /> 값입니다.</param>
      <param name="propertyName">유효성을 검사할 속성의 이름입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Int32})">
      <summary>속성에 대해 설정할 <see cref="T:System.Int32" /> 값이 올바른지 확인합니다.</summary>
      <returns>설정하는 nullable <see cref="T:System.Int32" /> 값입니다.</returns>
      <param name="value">nullable <see cref="T:System.Int32" /> 값입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Int32},System.String)">
      <summary>속성에 대해 설정할 <see cref="T:System.Int32" /> 값이 올바른지 확인합니다.</summary>
      <returns>설정하는 nullable <see cref="T:System.Int32" /> 값입니다.</returns>
      <param name="value">nullable <see cref="T:System.Int32" /> 값입니다.</param>
      <param name="propertyName">유효성을 검사할 속성의 이름입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Int64})">
      <summary>속성에 대해 설정할 <see cref="T:System.Int64" /> 값이 올바른지 확인합니다.</summary>
      <returns>설정하는 nullable <see cref="T:System.Int64" /> 값입니다.</returns>
      <param name="value">nullable <see cref="T:System.Int64" /> 값입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Int64},System.String)">
      <summary>속성에 대해 설정할 <see cref="T:System.Int64" /> 값이 올바른지 확인합니다.</summary>
      <returns>설정하는 nullable <see cref="T:System.Int64" /> 값입니다.</returns>
      <param name="value">nullable <see cref="T:System.Int64" /> 값입니다.</param>
      <param name="propertyName">유효성을 검사할 속성의 이름입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.SByte})">
      <summary>속성에 대해 설정할 <see cref="T:System.SByte" /> 값이 올바른지 확인합니다.</summary>
      <returns>설정하는 nullable <see cref="T:System.SByte" /> 값입니다.</returns>
      <param name="value">nullable <see cref="T:System.SByte" /> 값입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.SByte},System.String)">
      <summary>속성에 대해 설정할 <see cref="T:System.SByte" /> 값이 올바른지 확인합니다.</summary>
      <returns>설정하는 nullable <see cref="T:System.SByte" /> 값입니다.</returns>
      <param name="value">nullable <see cref="T:System.SByte" /> 값입니다.</param>
      <param name="propertyName">유효성을 검사할 속성의 이름입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Single})">
      <summary>속성에 대해 설정할 <see cref="T:System.Single" /> 값이 올바른지 확인합니다.</summary>
      <returns>설정하는 nullable <see cref="T:System.Single" /> 값입니다.</returns>
      <param name="value">nullable <see cref="T:System.Single" /> 값입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Single},System.String)">
      <summary>속성에 대해 설정할 <see cref="T:System.Single" /> 값이 올바른지 확인합니다.</summary>
      <returns>설정하는 nullable <see cref="T:System.Single" /> 값입니다.</returns>
      <param name="value">nullable <see cref="T:System.Single" /> 값입니다.</param>
      <param name="propertyName">유효성을 검사할 속성의 이름입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.TimeSpan})">
      <summary>속성에 대해 설정할 <see cref="T:System.TimeSpan" /> 값이 올바른지 확인합니다.</summary>
      <returns>설정하는 nullable <see cref="T:System.TimeSpan" /> 값입니다.</returns>
      <param name="value">nullable <see cref="T:System.TimeSpan" /> 값입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.TimeSpan},System.String)">
      <summary>속성에 대해 설정할 <see cref="T:System.TimeSpan" /> 값이 올바른지 확인합니다.</summary>
      <returns>설정하는 nullable <see cref="T:System.TimeSpan" /> 값입니다.</returns>
      <param name="value">nullable <see cref="T:System.TimeSpan" /> 값입니다.</param>
      <param name="propertyName">유효성을 검사할 속성의 이름입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.UInt16})">
      <summary>속성에 대해 설정할 UInt16 값이 올바른지 확인합니다.</summary>
      <returns>설정하는 null을 허용하는 UInt16 값입니다.</returns>
      <param name="value">null을 허용하는 UInt16 값입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.UInt16},System.String)">
      <summary>속성에 대해 설정할 UInt16 값이 올바른지 확인합니다.</summary>
      <returns>설정하는 null을 허용하는 UInt16 값입니다.</returns>
      <param name="value">null을 허용하는 UInt16 값입니다.</param>
      <param name="propertyName">유효성을 검사할 속성의 이름입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.UInt32})">
      <summary>속성에 대해 설정할 UInt32 값이 올바른지 확인합니다.</summary>
      <returns>설정하는 null을 허용하는 UInt32 값입니다.</returns>
      <param name="value">null을 허용하는 UInt32 값입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.UInt32},System.String)">
      <summary>속성에 대해 설정할 UInt32 값이 올바른지 확인합니다.</summary>
      <returns>설정하는 null을 허용하는 UInt32 값입니다.</returns>
      <param name="value">null을 허용하는 UInt32 값입니다.</param>
      <param name="propertyName">유효성을 검사할 속성의 이름입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.UInt64})">
      <summary>속성에 대해 설정할 <see cref="T:System.UInt64" /> 값이 올바른지 확인합니다.</summary>
      <returns>설정하는 null을 허용하는 UInt64 값입니다.</returns>
      <param name="value">null을 허용하는 UInt64 값입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.UInt64},System.String)">
      <summary>속성에 대해 설정할 <see cref="T:System.UInt64" /> 값이 올바른지 확인합니다.</summary>
      <returns>설정하는 null을 허용하는 UInt64 값입니다.</returns>
      <param name="value">null을 허용하는 UInt64 값입니다.</param>
      <param name="propertyName">유효성을 검사할 속성의 이름입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.SByte)">
      <summary>속성에 대해 설정할 <see cref="T:System.SByte" /> 값이 올바른지 확인합니다.</summary>
      <returns>설정하는 <see cref="T:System.SByte" /> 값입니다.</returns>
      <param name="value">
        <see cref="T:System.SByte" /> 값입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.SByte,System.String)">
      <summary>속성에 대해 설정할 <see cref="T:System.SByte" /> 값이 올바른지 확인합니다.</summary>
      <returns>설정하는 <see cref="T:System.SByte" /> 값입니다.</returns>
      <param name="value">
        <see cref="T:System.SByte" /> 값입니다.</param>
      <param name="propertyName">유효성을 검사할 속성의 이름입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Single)">
      <summary>속성에 대해 설정할 Single 값이 올바른지 확인합니다.</summary>
      <returns>설정하는 <see cref="T:System.Single" /> 값입니다.</returns>
      <param name="value">
        <see cref="T:System.Single" /> 값입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Single,System.String)">
      <summary>속성에 대해 설정할 Single 값이 올바른지 확인합니다.</summary>
      <returns>설정하는 <see cref="T:System.Single" /> 값입니다.</returns>
      <param name="value">
        <see cref="T:System.Single" /> 값입니다.</param>
      <param name="propertyName">유효성을 검사할 속성의 이름입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.String,System.Boolean)">
      <summary>속성이 null이 아닌지 유효성을 검사하고 null인 경우 throw됩니다.</summary>
      <returns>유효성이 검증된 <see cref="T:System.String" /> 값입니다.</returns>
      <param name="value">검사할 문자열 값입니다.</param>
      <param name="isNullable">이 속성이 null일 수 있는지 여부를 나타내는 플래그입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.String,System.Boolean,System.String)">
      <summary>속성이 null이 아닌지 유효성을 검사하고 null인 경우 throw됩니다.</summary>
      <returns>유효성이 검증된 속성입니다.</returns>
      <param name="value">검사할 문자열 값입니다.</param>
      <param name="isNullable">이 속성이 null일 수 있는지 여부를 나타내는 플래그입니다.</param>
      <param name="propertyName">유효성을 검사할 속성의 이름입니다.</param>
      <exception cref="T:System.Data.ConstraintException">null을 허용하지 않는 문자열에 대해 문자열 값이 null인 경우</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.TimeSpan)">
      <summary>속성에 대해 설정할 <see cref="T:System.TimeSpan" /> 값이 올바른지 확인합니다.</summary>
      <returns>설정하는 <see cref="T:System.TimeSpan" /> 값입니다.</returns>
      <param name="value">
        <see cref="T:System.TimeSpan" /> 값입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.TimeSpan,System.String)">
      <summary>속성에 대해 설정할 <see cref="T:System.TimeSpan" /> 값이 올바른지 확인합니다.</summary>
      <returns>설정하는 <see cref="T:System.TimeSpan" /> 값입니다.</returns>
      <param name="value">
        <see cref="T:System.TimeSpan" /> 값입니다.</param>
      <param name="propertyName">유효성을 검사할 속성의 이름입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.UInt16)">
      <summary>속성에 대해 설정할 <see cref="T:System.UInt16" /> 값이 올바른지 확인합니다.</summary>
      <returns>설정하는 <see cref="T:System.UInt16" /> 값입니다.</returns>
      <param name="value">
        <see cref="T:System.UInt16" /> 값입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.UInt16,System.String)">
      <summary>속성에 대해 설정할 <see cref="T:System.UInt16" /> 값이 올바른지 확인합니다.</summary>
      <returns>설정하는 <see cref="T:System.UInt16" /> 값입니다.</returns>
      <param name="value">
        <see cref="T:System.UInt16" /> 값입니다.</param>
      <param name="propertyName">유효성을 검사할 속성의 이름입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.UInt32)">
      <summary>속성에 대해 설정할 <see cref="T:System.UInt32" /> 값이 올바른지 확인합니다.</summary>
      <returns>설정하는 <see cref="T:System.UInt32" /> 값입니다.</returns>
      <param name="value">
        <see cref="T:System.UInt32" /> 값입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.UInt32,System.String)">
      <summary>속성에 대해 설정할 <see cref="T:System.UInt32" /> 값이 올바른지 확인합니다.</summary>
      <returns>설정하는 <see cref="T:System.UInt32" /> 값입니다.</returns>
      <param name="value">
        <see cref="T:System.UInt32" /> 값입니다.</param>
      <param name="propertyName">유효성을 검사할 속성의 이름입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.UInt64)">
      <summary>속성에 대해 설정할 <see cref="T:System.UInt64" /> 값이 올바른지 확인합니다.</summary>
      <returns>설정하는 <see cref="T:System.UInt64" /> 값입니다.</returns>
      <param name="value">
        <see cref="T:System.UInt64" /> 값입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.UInt64,System.String)">
      <summary>속성에 대해 설정할 <see cref="T:System.UInt64" /> 값이 올바른지 확인합니다.</summary>
      <returns>설정하는 <see cref="T:System.UInt64" /> 값입니다.</returns>
      <param name="value">
        <see cref="T:System.UInt64" /> 값입니다.</param>
      <param name="propertyName">유효성을 검사할 속성의 이름입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue``1(``0,``0,System.String)">
      <summary>지정된 속성에 대한 복합 개체를 설정합니다.</summary>
      <returns>복잡한 개체에서 파생되는 복합 형식입니다.</returns>
      <param name="oldValue">속성에 대한 원래 복합 개체입니다(있는 경우).</param>
      <param name="newValue">설정 중인 복합 개체입니다.</param>
      <param name="property">복합 개체로 설정 중인 복합 속성입니다.</param>
      <typeparam name="T">바꾸고 있는 개체의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.VerifyComplexObjectIsNotNull``1(``0,System.String)">
      <summary>복합 개체가 null이 아닌지 확인합니다.</summary>
      <returns>유효성 검사 중인 복합 개체입니다.</returns>
      <param name="complexObject">유효성 검사 중인 복합 개체입니다.</param>
      <param name="propertyName">complexObject와 연결된 부모 개체에 대한 복합 속성입니다.</param>
      <typeparam name="TComplex">확인 중인 복합 개체의 형식입니다.</typeparam>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.CommitFailedException">
      <summary>
        <see cref="T:System.Data.Common.DbTransaction" />을 커밋하는 동안 오류가 발생하는 경우 throw됩니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.CommitFailedException.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.Infrastructure.CommitFailedException" />의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.CommitFailedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <see cref="T:System.Data.Entity.Infrastructure.CommitFailedException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="info">개체를 serialize 또는 deserialize하는 데 필요한 데이터입니다.</param>
      <param name="context">serialize된 특정 스트림의 소스 및 대상에 대한 설명입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.CommitFailedException.#ctor(System.String)">
      <summary>
        <see cref="T:System.Data.Entity.Infrastructure.CommitFailedException" />의 새 인스턴스를 초기화합니다.</summary>
      <param name="message">예외 메시지입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.CommitFailedException.#ctor(System.String,System.Exception)">
      <summary>
        <see cref="T:System.Data.Entity.Infrastructure.CommitFailedException" />의 새 인스턴스를 초기화합니다.</summary>
      <param name="message">예외 메시지입니다.</param>
      <param name="innerException">내부 예외입니다.</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbChangeTracker">
      <summary>엔터티의 변경 내용 추적과 관련된 컨텍스트의 기능에 액세스할 수 있도록 하기 위해 <see cref="T:System.Data.Entity.DbContext" />의 ChangeTracker 메서드에서 반환됩니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbChangeTracker.DetectChanges">
      <summary>POCO 엔터티의 관계와 속성에 수행된 변경 내용을 검색합니다.<see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityObject" />에서 파생되는 엔터티 및 변경 내용 추적 프록시와 같은 일부 형식의 엔터티는 변경 내용을 자동으로 보고하므로 이러한 형식의 엔터티에는 DetectChanges의 호출이 일반적으로 필요하지 않습니다.또한 일반적으로 DetectChanges는 <see cref="T:System.Data.Entity.DbContext" />의 많은 메서드와 관련 클래스에서 자동으로 호출되므로 이 메서드를 명시적으로 호출할 필요는 거의 없습니다.그러나 대개 성능상의 이유로 <see cref="P:System.Data.Entity.DbContext.Configuration" />에서 AutoDetectChangesEnabled 플래그를 사용하여 DetectChanges의 이러한 자동 호출을 해제하는 것이 바람직할 수 있습니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbChangeTracker.Entries">
      <summary>이 컨텍스트에서 추적된 모든 엔터티에 대한 <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" /> 개체를 가져옵니다.</summary>
      <returns>항목입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbChangeTracker.Entries``1">
      <summary>이 컨텍스트에서 추적된 지정된 형식의 모든 엔터티에 대한 <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" /> 개체를 가져옵니다.</summary>
      <returns>항목입니다.</returns>
      <typeparam name="TEntity">엔터티의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbChangeTracker.Equals(System.Object)">
      <summary>
        <see cref="T:System.Data.Entity.Infrastructure.DbChangeTracker" />가 지정된 개체와 같은지 여부를 지정합니다.</summary>
      <returns>
        <see cref="T:System.Data.Entity.Infrastructure.DbChangeTracker" />가 지정된 개체와 같으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="obj">비교할 개체입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbChangeTracker.GetHashCode">
      <summary>
        <see cref="T:System.Data.Entity.Infrastructure.DbChangeTracker" />에 연결된 해시 코드를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Data.Entity.Infrastructure.DbChangeTracker" />에 연결된 해시 코드입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbChangeTracker.GetType">
      <summary>현재 인스턴스의 <see cref="T:System.Type" />을 가져옵니다.</summary>
      <returns>현재 인스턴스의 정확한 런타임 형식입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbChangeTracker.HasChanges">
      <summary>
        <see cref="M:System.Data.Entity.DbContext.SaveChanges" />가 호출된 경우 <see cref="T:System.Data.Entity.DbContext" />가 데이터베이스로 전송되는 새로운, 삭제된 또는 변경된 엔터티 또는 관계를 추적 중인지 여부를 확인합니다.</summary>
      <returns>기본 <see cref="T:System.Data.Entity.DbContext" />에 변경 내용이 포함된 경우 true이고 그렇지 않으면 false입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbChangeTracker.ToString">
      <summary>
        <see cref="T:System.Data.Entity.Infrastructure.DbChangeTracker" />의 문자열 표현을 반환합니다.</summary>
      <returns>
        <see cref="T:System.Data.Entity.Infrastructure.DbChangeTracker" />의 문자열 표현입니다.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbCollectionEntry">
      <summary>
        <see cref="T:System.Data.Entity.Infrastructure.DbCollectionEntry`2" /> 클래스의 제네릭이 아닌 버전입니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbCollectionEntry.Cast``2">
      <summary>동일한 제네릭 <see cref="T:System.Data.Entity.Infrastructure.DbCollectionEntry`2" /> 개체를 반환합니다.</summary>
      <returns>동일한 제네릭 개체입니다.</returns>
      <typeparam name="TEntity">멤버가 선언되는 엔터티의 형식입니다.</typeparam>
      <typeparam name="TElement">컬렉션 요소의 형식입니다.</typeparam>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbCollectionEntry.CurrentValue">
      <summary>탐색 속성의 현재 값을 가져오거나 설정합니다.현재 값은 탐색 속성이 참조하는 엔터티입니다.</summary>
      <returns>현재 값입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbCollectionEntry.EntityEntry">
      <summary>이 탐색 속성이 속하는 <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" />입니다.</summary>
      <returns>이 탐색 속성을 소유하는 엔터티의 항목입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbCollectionEntry.IsLoaded">
      <summary>이 컬렉션의 모든 엔터티가 데이터베이스에서 로드되었는지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
      <returns>모든 관련 엔터티가 로드되었거나 IsLoaded가 명시적으로 true로 설정된 경우 true이고, 그렇지 않으면 false입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbCollectionEntry.Load">
      <summary>데이터베이스에서 엔터티의 컬렉션을 로드합니다.컨텍스트에 이미 있는 엔터티는 데이터베이스의 값으로 덮어쓰이지 않습니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbCollectionEntry.LoadAsync">
      <summary>데이터베이스에서 엔터티의 컬렉션을 비동기적으로 로드합니다.컨텍스트에 이미 있는 엔터티는 데이터베이스의 값으로 덮어쓰이지 않습니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbCollectionEntry.LoadAsync(System.Threading.CancellationToken)">
      <summary>데이터베이스에서 엔터티의 컬렉션을 비동기적으로 로드합니다.컨텍스트에 이미 있는 엔터티는 데이터베이스의 값으로 덮어쓰이지 않습니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.</returns>
      <param name="cancellationToken">작업이 완료되기를 기다리는 동안 관찰할 <see cref="T:System.Threading.CancellationToken" />입니다.</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbCollectionEntry.Name">
      <summary>속성 이름을 가져옵니다.</summary>
      <returns>속성 이름입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbCollectionEntry.Query">
      <summary>데이터베이스에서 이 컬렉션을 로드하는 데 사용되는 쿼리를 반환합니다.반환된 쿼리는 LINQ를 통해 수정하여 데이터베이스에서 필터링이나 작업을 수행할 수 있습니다. 예를 들어 데이터베이스에 있는 컬렉션의 엔터티를 실제로 로드하지 않고 그 수를 계산하는 작업을 수행할 수 있습니다.</summary>
      <returns>컬렉션에 대한 쿼리입니다.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbCollectionEntry`2">
      <summary>이 클래스의 인스턴스는 <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" />의 Collection 메서드에서 반환되고 엔터티의 컬렉션 탐색 속성에 대해 수행할 로드와 같은 작업을 허용합니다.</summary>
      <typeparam name="TEntity">이 속성이 속하는 엔터티의 형식입니다.</typeparam>
      <typeparam name="TElement">엔터티의 컬렉션에 있는 요소의 형식입니다.</typeparam>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbCollectionEntry`2.CurrentValue">
      <summary>탐색 속성의 현재 값을 가져오거나 설정합니다.현재 값은 탐색 속성이 참조하는 엔터티입니다.</summary>
      <returns>현재 값입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbCollectionEntry`2.EntityEntry">
      <summary>이 탐색 속성이 속하는 <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" />입니다.</summary>
      <returns>이 탐색 속성을 소유하는 엔터티의 항목입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbCollectionEntry`2.IsLoaded">
      <summary>이 컬렉션의 모든 엔터티가 데이터베이스에서 로드되었는지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
      <returns>모든 관련 엔터티가 로드되었거나 IsLoaded가 명시적으로 true로 설정된 경우 true이고, 그렇지 않으면 false입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbCollectionEntry`2.Load">
      <summary>데이터베이스에서 엔터티의 컬렉션을 로드합니다.컨텍스트에 이미 있는 엔터티는 데이터베이스의 값으로 덮어쓰이지 않습니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbCollectionEntry`2.LoadAsync">
      <summary>데이터베이스에서 엔터티의 컬렉션을 비동기적으로 로드합니다.컨텍스트에 이미 있는 엔터티는 데이터베이스의 값으로 덮어쓰이지 않습니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbCollectionEntry`2.LoadAsync(System.Threading.CancellationToken)">
      <summary>데이터베이스에서 엔터티의 컬렉션을 비동기적으로 로드합니다.컨텍스트에 이미 있는 엔터티는 데이터베이스의 값으로 덮어쓰이지 않습니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.</returns>
      <param name="cancellationToken">작업이 완료되기를 기다리는 동안 관찰할 <see cref="T:System.Threading.CancellationToken" />입니다.</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbCollectionEntry`2.Name">
      <summary>속성 이름을 가져옵니다.</summary>
      <returns>속성 이름입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbCollectionEntry`2.op_Implicit(System.Data.Entity.Infrastructure.DbCollectionEntry{`0,`1})~System.Data.Entity.Infrastructure.DbCollectionEntry">
      <summary>이 개체가 나타내는 탐색 속성에 대한 제네릭이 아닌 <see cref="T:System.Data.Entity.Infrastructure.DbCollectionEntry" /> 클래스의 새 인스턴스를 반환합니다.</summary>
      <returns>제네릭이 아닌 버전입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbCollectionEntry`2.Query">
      <summary>데이터베이스에서 이 컬렉션을 로드하는 데 사용되는 쿼리를 반환합니다.반환된 쿼리는 LINQ를 통해 수정하여 데이터베이스에서 필터링이나 작업을 수행할 수 있습니다. 예를 들어 데이터베이스에 있는 컬렉션의 엔터티를 실제로 로드하지 않고 그 수를 계산하는 작업을 수행할 수 있습니다.</summary>
      <returns>컬렉션에 대한 쿼리입니다.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbCompiledModel">
      <summary>
        <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" />를 만드는 데 사용할 수 있거나 <see cref="T:System.Data.Entity.DbContext" />의 생성자에 전달할 수 있는 EDM(엔터티 데이터 모델) 모델의 변경할 수 없는 표현입니다.성능 향상을 위해 이 형식의 인스턴스는 캐시되고 컨텍스트를 생성하기 위해 다시 사용되어야 합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbCompiledModel.CreateObjectContext``1(System.Data.Common.DbConnection)">
      <summary>ObjectContext에서 파생된 클래스 또는 ObjectContext의 인스턴스를 만듭니다.DbContext의 인스턴스는 적절한 DbContext 생성자를 사용하여 만들 수 있습니다.파생된 ObjectContext를 사용하는 경우 파생된 ObjectContext에 단일 EntityConnection 매개 변수를 사용하는 public 생성자가 있어야 합니다.전달된 연결은 만들어진 ObjectContext에서 사용되지만 컨텍스트에서 소유되지는 않습니다.호출자는 컨텍스트가 삭제되면 연결을 삭제해야 합니다.</summary>
      <param name="existingConnection">컨텍스트에서 사용할 데이터베이스에 대한 기존 연결입니다.</param>
      <typeparam name="TContext">만들 컨텍스트의 형식입니다.</typeparam>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbComplexPropertyEntry">
      <summary>
        <see cref="T:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2" /> 클래스의 제네릭이 아닌 버전입니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbComplexPropertyEntry.Cast``2">
      <summary>동일한 제네릭 <see cref="T:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2" /> 개체를 반환합니다.</summary>
      <returns>동일한 제네릭 개체입니다.</returns>
      <typeparam name="TEntity">멤버가 선언되는 엔터티의 형식입니다.</typeparam>
      <typeparam name="TComplexProperty">복합 속성의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbComplexPropertyEntry.ComplexProperty(System.String)">
      <summary>이 속성의 중첩 복합 속성을 나타내는 개체를 가져옵니다.</summary>
      <returns>중첩 속성을 나타내는 개체입니다.</returns>
      <param name="propertyName">중첩 속성의 이름입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbComplexPropertyEntry.Property(System.String)">
      <summary>이 속성의 중첩 속성을 나타내는 개체를 가져옵니다.이 메서드는 스칼라 속성이나 복합 속성에 사용할 수 있습니다.</summary>
      <returns>중첩 속성을 나타내는 개체입니다.</returns>
      <param name="propertyName">중첩 속성의 이름입니다.</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2">
      <summary>이 클래스의 인스턴스는 <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" />의 ComplexProperty 메서드에서 반환되고 복합 속성의 상태에 액세스할 수 있도록 허용합니다.</summary>
      <typeparam name="TEntity">이 속성이 속하는 엔터티의 형식입니다.</typeparam>
      <typeparam name="TComplexProperty">속성의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2.ComplexProperty``1(System.Linq.Expressions.Expression{System.Func{`1,``0}})">
      <summary>이 속성의 중첩 복합 속성을 나타내는 개체를 가져옵니다.</summary>
      <returns>중첩 속성을 나타내는 개체입니다.</returns>
      <param name="property">중첩 속성을 나타내는 식입니다.</param>
      <typeparam name="TNestedComplexProperty">중첩 속성의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2.ComplexProperty(System.String)">
      <summary>이 속성의 중첩 복합 속성을 나타내는 개체를 가져옵니다.</summary>
      <returns>중첩 속성을 나타내는 개체입니다.</returns>
      <param name="propertyName">중첩 속성의 이름입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2.ComplexProperty``1(System.String)">
      <summary>이 속성의 중첩 복합 속성을 나타내는 개체를 가져옵니다.</summary>
      <returns>중첩 속성을 나타내는 개체입니다.</returns>
      <param name="propertyName">중첩 속성의 이름입니다.</param>
      <typeparam name="TNestedComplexProperty">중첩 속성의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2.op_Implicit(System.Data.Entity.Infrastructure.DbComplexPropertyEntry{`0,`1})~System.Data.Entity.Infrastructure.DbComplexPropertyEntry">
      <summary>이 개체가 나타내는 속성에 대한 제네릭이 아닌 <see cref="T:System.Data.Entity.Infrastructure.DbComplexPropertyEntry" /> 클래스의 새 인스턴스를 반환합니다.</summary>
      <returns>제네릭이 아닌 버전입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2.Property``1(System.Linq.Expressions.Expression{System.Func{`1,``0}})">
      <summary>이 속성의 중첩 속성을 나타내는 개체를 가져옵니다.이 메서드는 스칼라 속성이나 복합 속성에 사용할 수 있습니다.</summary>
      <returns>중첩 속성을 나타내는 개체입니다.</returns>
      <param name="property">중첩 속성을 나타내는 식입니다.</param>
      <typeparam name="TNestedProperty">중첩 속성의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2.Property``1(System.String)">
      <summary>이 속성의 중첩 속성을 나타내는 개체를 가져옵니다.이 메서드는 스칼라 속성이나 복합 속성에 사용할 수 있습니다.</summary>
      <returns>중첩 속성을 나타내는 개체입니다.</returns>
      <param name="propertyName">중첩 속성의 이름입니다.</param>
      <typeparam name="TNestedProperty">중첩 속성의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2.Property(System.String)">
      <summary>이 속성의 중첩 속성을 나타내는 개체를 가져옵니다.이 메서드는 스칼라 속성이나 복합 속성에 사용할 수 있습니다.</summary>
      <returns>중첩 속성을 나타내는 개체입니다.</returns>
      <param name="propertyName">중첩 속성의 이름입니다.</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbConnectionInfo">
      <summary>데이터베이스 연결에 대한 정보를 나타냅니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbConnectionInfo.#ctor(System.String)">
      <summary>응용 프로그램 구성 파일에 지정된 연결을 나타내는 DbConnectionInfo의 새 인스턴스를 만듭니다.</summary>
      <param name="connectionName">응용 프로그램 구성에 있는 연결 문자열의 이름입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbConnectionInfo.#ctor(System.String,System.String)">
      <summary>연결 문자열을 기반으로 DbConnectionInfo의 새 인스턴스를 만듭니다.</summary>
      <param name="connectionString">연결에 사용할 연결 문자열입니다.</param>
      <param name="providerInvariantName">연결에 사용할 공급자의 이름입니다.SQL Server의 경우 'System.Data.SqlClient'를 사용합니다.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbConnectionInfo.Equals(System.Object)">
      <summary>현재 <see cref="T:System.Data.Entity.Infrastructure.DbConnectionInfo" /> 형식이 제공된 개체 형식과 같은지 여부를 확인합니다.</summary>
      <returns>현재 <see cref="T:System.Data.Entity.Infrastructure.DbConnectionInfo" /> 형식이 지정된 개체 형식과 같으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="obj">현재 <see cref="T:System.Data.Entity.Infrastructure.DbConnectionInfo" /> 개체와 비교되는 개체입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbConnectionInfo.GetHashCode">
      <summary>현재 연결을 나타내는 값을 생성합니다.</summary>
      <returns>현재 연결을 나타내는 값입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbConnectionInfo.GetType">
      <summary>현재 인스턴스의 <see cref="T:System.Type" />을 가져옵니다.</summary>
      <returns>현재 인스턴스의 정확한 런타임 형식입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbConnectionInfo.ToString">
      <summary>
        <see cref="T:System.Data.Entity.Infrastructure.DbConnectionInfo" /> 개체를 문자열로 변환합니다.</summary>
      <returns>현재 드라이브입니다.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbConnectionStringOrigin">
      <summary>
        <see cref="T:System.Data.Entity.DbContext" />와 연결된 데이터베이스 연결 문자열의 원본을 설명합니다.</summary>
    </member>
    <member name="F:System.Data.Entity.Infrastructure.DbConnectionStringOrigin.Configuration">
      <summary>연결 문자열은 외부 구성으로부터 읽혀졌습니다.</summary>
    </member>
    <member name="F:System.Data.Entity.Infrastructure.DbConnectionStringOrigin.Convention">
      <summary>연결 문자열은 규칙에 따라 만들어졌습니다.</summary>
    </member>
    <member name="F:System.Data.Entity.Infrastructure.DbConnectionStringOrigin.DbContextInfo">
      <summary>연결 문자열이 DbContextInfo에 제공된 연결 정보로 재정의되었습니다.</summary>
    </member>
    <member name="F:System.Data.Entity.Infrastructure.DbConnectionStringOrigin.UserCode">
      <summary>연결 문자열이 런타임에 명시적으로 지정되었습니다.</summary>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbContextConfiguration">
      <summary>
        <see cref="T:System.Data.Entity.DbContext" />의 Configuration 메서드에 의해 반환되어 컨텍스트의 구성 옵션에 액세스할 수 있도록 합니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbContextConfiguration.AutoDetectChangesEnabled">
      <summary>
        <see cref="M:System.Data.Entity.Infrastructure.DbChangeTracker.DetectChanges" /> 메서드가 <see cref="T:System.Data.Entity.DbContext" /> 및 관련 클래스의 메서드에 의해 자동으로 호출되는지 여부를 나타내는 값을 가져오거나 설정합니다.기본값은 true입니다.</summary>
      <returns>자동으로 호출되어야 하면 true이고, 그렇지 않으면 false입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbContextConfiguration.Equals(System.Object)">
      <summary>구성이 지정된 개체와 같은지 여부를 지정합니다.</summary>
      <returns>구성이 지정된 개체와 같으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="obj">비교할 개체입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbContextConfiguration.GetHashCode">
      <summary>구성에 연결된 해시 코드를 가져옵니다.</summary>
      <returns>구성에 연결된 해시 코드입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbContextConfiguration.GetType">
      <summary>현재 인스턴스의 <see cref="T:System.Type" />을 가져옵니다.</summary>
      <returns>현재 인스턴스의 정확한 런타임 형식입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbContextConfiguration.LazyLoadingEnabled">
      <summary>탐색 속성으로 노출된 관계의 지연 로드가 사용되는지 여부를 나타내는 값을 가져오거나 설정합니다.지연 로드는 기본적으로 사용됩니다.</summary>
      <returns>지연 로드를 사용할 수 있으면 true이고, 그렇지 않으면 false입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbContextConfiguration.ProxyCreationEnabled">
      <summary>프레임워크에서 엔터티 형식의 인스턴스를 만들 때마다 동적으로 생성된 프록시 클래스의 인스턴스를 만들지 여부를 나타내는 값을 가져오거나 설정합니다.이 플래그를 통해 프록시 생성 기능이 사용되는 경우에도 프록시되기 위한 요구 사항을 충족하는 엔터티 형식에 대해서만 프록시 인스턴스가 만들어집니다.프록시 생성 기능은 기본적으로 사용됩니다.</summary>
      <returns>프록시를 만들 수 있으면 true이고, 그렇지 않으면 false입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbContextConfiguration.ToString">
      <summary>
        <see cref="T:System.Data.Entity.Infrastructure.DbContextConfiguration" />의 문자열 표현을 반환합니다.</summary>
      <returns>
        <see cref="T:System.Data.Entity.Infrastructure.DbContextConfiguration" />의 문자열 표현입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbContextConfiguration.UseDatabaseNullSemantics">
      <summary>잠재적으로 null을 허용하는 두 피연산자를 비교할 때 데이터베이스 null 의미 체계를 나타낼지 여부에 대한 값을 가져오거나 설정합니다.기본값은 false입니다.예를 들어 (operand1 == operand2)는 UseDatabaseNullSemantics가 true인 경우 (operand1 = operand2)로 변환되고, UseDatabaseNullSemantics가 false이면 (((operand1 = operand2) AND (NOT (operand1 IS NULL OR operand2 IS NULL))) OR ((operand1 IS NULL) AND (operand2 IS NULL)))로 변환됩니다.</summary>
      <returns>데이터베이스 null 비교가 설정되었으면 true이고, 그렇지 않으면 false 입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbContextConfiguration.ValidateOnSaveEnabled">
      <summary>
        <see cref="M:System.Data.Entity.DbContext.SaveChanges" />를 호출할 때 추적된 엔터티의 유효성을 자동으로 검사해야 하는지 여부를 나타내는 값을 가져오거나 설정합니다.기본값은 true입니다.</summary>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbContextInfo">
      <summary>지정된 <see cref="T:System.Data.Entity.DbContext" /> 형식에 대한 런타임 정보를 제공합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbContextInfo.#ctor(System.Type)">
      <summary>지정된 <see cref="T:System.Data.Entity.DbContext" /> 형식을 나타내는 새 인스턴스를 만듭니다.</summary>
      <param name="contextType">
        <see cref="T:System.Data.Entity.DbContext" />에서 파생되는 형식입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbContextInfo.#ctor(System.Type,System.Configuration.Configuration)">
      <summary>지정된 <see cref="T:System.Data.Entity.DbContext" /> 형식을 나타내는 새 인스턴스를 만듭니다.외부 구성 개체(예:app.config 또는 web.config)는 제공될 수 있으며 연결 문자열 확인 중 사용됩니다.여기에는 연결 문자열 및 DefaultConnectionFactory 항목 찾기가 포함됩니다.</summary>
      <param name="contextType">
        <see cref="T:System.Data.Entity.DbContext" />에서 파생되는 형식입니다.</param>
      <param name="config">구성 파일을 나타내는 개체입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbContextInfo.#ctor(System.Type,System.Configuration.Configuration,System.Data.Entity.Infrastructure.DbConnectionInfo)">
      <summary>특정 데이터베이스를 대상으로 하는 지정된 <see cref="T:System.Data.Entity.DbContext" />를 나타내는 새 인스턴스를 만듭니다.외부 구성 개체(예:app.config 또는 web.config)는 제공될 수 있으며 연결 문자열 확인 중 사용됩니다.여기에는 연결 문자열 및 DefaultConnectionFactory 항목 찾기가 포함됩니다.</summary>
      <param name="contextType">
        <see cref="T:System.Data.Entity.DbContext" />에서 파생되는 형식입니다.</param>
      <param name="config">구성 파일을 나타내는 개체입니다.</param>
      <param name="connectionInfo">사용할 데이터베이스에 대한 연결 정보입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbContextInfo.#ctor(System.Type,System.Configuration.Configuration,System.Data.Entity.Infrastructure.DbProviderInfo)">
      <summary>지정된 <see cref="T:System.Data.Entity.DbContext" /> 형식을 나타내는 새 인스턴스를 만듭니다.외부 구성 개체(예:app.config 또는 web.config)는 제공될 수 있으며 연결 문자열 확인 중 사용됩니다.여기에는 연결 문자열 및 DefaultConnectionFactory 항목 찾기가 포함됩니다.기본 EDM 모델을 생성할 때 사용되는 결정된 기본 공급자를 재정의하기 위해 <see cref="T:System.Data.Entity.Infrastructure.DbProviderInfo" />를 제공할 수 있습니다.EF가 매니페스트 토큰을 검색하기 위해 연결하지 않도록 하는 데 유용할 수 있습니다.</summary>
      <param name="contextType">
        <see cref="T:System.Data.Entity.DbContext" />에서 파생되는 형식입니다.</param>
      <param name="config">구성 파일을 나타내는 개체입니다.</param>
      <param name="modelProviderInfo">대상으로 지정할 기본 ADO.NET 공급자를 지정하는 <see cref="T:System.Data.Entity.Infrastructure.DbProviderInfo" />입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbContextInfo.#ctor(System.Type,System.Configuration.ConnectionStringSettingsCollection)">
      <summary>지정된 <see cref="T:System.Data.Entity.DbContext" /> 형식을 나타내는 새 인스턴스를 만듭니다.연결 문자열의 외부 목록을 제공할 수 있고 연결 문자열 확인 중 외부 구성 파일에 지정된 연결 문자열 대신 이 연결 문자열의 외부 목록이 사용됩니다.</summary>
      <param name="contextType">
        <see cref="T:System.Data.Entity.DbContext" />에서 파생되는 형식입니다.</param>
      <param name="connectionStringSettings">연결 문자열의 컬렉션입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbContextInfo.#ctor(System.Type,System.Data.Entity.Infrastructure.DbConnectionInfo)">
      <summary>특정 데이터베이스를 대상으로 하는 지정된 <see cref="T:System.Data.Entity.DbContext" />를 나타내는 새 인스턴스를 만듭니다.</summary>
      <param name="contextType">
        <see cref="T:System.Data.Entity.DbContext" />에서 파생되는 형식입니다.</param>
      <param name="connectionInfo">사용할 데이터베이스에 대한 연결 정보입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbContextInfo.#ctor(System.Type,System.Data.Entity.Infrastructure.DbProviderInfo)">
      <summary>지정된 <see cref="T:System.Data.Entity.DbContext" /> 형식을 나타내는 새 인스턴스를 만듭니다.기본 EDM 모델을 생성할 때 사용되는 결정된 기본 공급자를 재정의하기 위해 <see cref="T:System.Data.Entity.Infrastructure.DbProviderInfo" />를 제공할 수 있습니다.</summary>
      <param name="contextType">
        <see cref="T:System.Data.Entity.DbContext" />에서 파생되는 형식입니다.</param>
      <param name="modelProviderInfo">대상으로 지정할 기본 ADO.NET 공급자를 지정하는 <see cref="T:System.Data.Entity.Infrastructure.DbProviderInfo" />입니다.</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbContextInfo.ConnectionProviderName">
      <summary>기본 <see cref="T:System.Data.Entity.DbContext" /> 형식에 사용되는 연결의 ADO.NET 공급자 이름입니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbContextInfo.ConnectionString">
      <summary>기본 <see cref="T:System.Data.Entity.DbContext" /> 형식에 사용되는 연결 문자열입니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbContextInfo.ConnectionStringName">
      <summary>기본 <see cref="T:System.Data.Entity.DbContext" /> 형식에 사용되는 연결 문자열 이름입니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbContextInfo.ConnectionStringOrigin">
      <summary>기본 <see cref="T:System.Data.Entity.DbContext" /> 형식에 사용되는 연결 문자열의 원본입니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbContextInfo.ContextType">
      <summary>구체적인 <see cref="T:System.Data.Entity.DbContext" /> 형식입니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbContextInfo.CreateInstance">
      <summary>기본 <see cref="T:System.Data.Entity.DbContext" /> 형식의 인스턴스를 만들 수 있는 경우 새 인스턴스를 반환하고 그렇지 않으면 null을 반환합니다.</summary>
      <returns>
        <see cref="T:System.Data.Entity.DbContext" /> 인스턴스입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbContextInfo.IsConstructible">
      <summary>기본 <see cref="T:System.Data.Entity.DbContext" /> 형식의 인스턴스를 만들 수 있는지 여부입니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbContextInfo.OnModelCreating">
      <summary>OnModelCreating이 컨텍스트에 대해 실행된 후 DbModelBuilder에 대해 실행될 작업입니다.</summary>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbEntityEntry">
      <summary>
        <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" /> 클래스의 제네릭이 아닌 버전입니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.Cast``1">
      <summary>이 개체가 나타내는 추적된 엔터티에 대한 지정된 제네릭 형식의 제네릭 <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" /> 클래스에 대한 새 인스턴스를 반환합니다.추적된 엔터티의 형식은 제네릭 형식과 호환되어야 합니다. 그렇지 않으면 예외가 throw됩니다.</summary>
      <returns>제네릭 버전입니다.</returns>
      <typeparam name="TEntity">엔터티의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.Collection(System.String)">
      <summary>이 엔터티에서 관련 엔터티 컬렉션으로의 컬렉션 탐색 속성을 나타내는 개체를 가져옵니다.</summary>
      <returns>탐색 속성을 나타내는 개체입니다.</returns>
      <param name="navigationProperty">탐색 속성의 이름입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.ComplexProperty(System.String)">
      <summary>이 엔터티의 복합 속성을 나타내는 개체를 가져옵니다.</summary>
      <returns>복합 속성을 나타내는 개체입니다.</returns>
      <param name="propertyName">복합 속성의 이름입니다.</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbEntityEntry.CurrentValues">
      <summary>이 개체가 나타내는 추적된 엔터티의 현재 속성 값을 가져옵니다.</summary>
      <returns>현재 값입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbEntityEntry.Entity">
      <summary>엔터티를 가져옵니다.</summary>
      <returns>엔터티입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.Equals(System.Data.Entity.Infrastructure.DbEntityEntry)">
      <summary>지정된 <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" />가 이 인스턴스와 같은지 여부를 확인합니다.두 <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" /> 인스턴스가 동일한 <see cref="T:System.Data.Entity.DbContext" />에서 동일한 엔터티의 항목인 경우 같은 것으로 간주됩니다.</summary>
      <returns>지정된 <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" />가 이 인스턴스와 같으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="other">이 인스턴스와 비교할 <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" />입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.Equals(System.Object)">
      <summary>지정된 <see cref="T:System.Object" />가 이 인스턴스와 같은지 여부를 확인합니다.두 <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" /> 인스턴스가 동일한 <see cref="T:System.Data.Entity.DbContext" />에서 동일한 엔터티의 항목인 경우 같은 것으로 간주됩니다.</summary>
      <returns>지정된 <see cref="T:System.Object" />가 이 인스턴스와 같으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="obj">이 인스턴스와 비교할 <see cref="T:System.Object" />입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.GetDatabaseValues">
      <summary>데이터베이스에 현재 있는 추적된 엔터티 값의 복사본을 데이터베이스에서 쿼리합니다.반환된 사전에서 값을 변경하면 데이터베이스에서 값이 업데이트되지 않습니다.엔터티가 데이터베이스에 없으면 null이 반환됩니다.</summary>
      <returns>저장소 값입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.GetDatabaseValuesAsync">
      <summary>데이터베이스에 현재 있는 추적된 엔터티 값의 복사본을 데이터베이스에서 비동기적으로 쿼리합니다.반환된 사전에서 값을 변경하면 데이터베이스에서 값이 업데이트되지 않습니다.엔터티가 데이터베이스에 없으면 null이 반환됩니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.작업 결과에는 저장소 값이 포함됩니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.GetDatabaseValuesAsync(System.Threading.CancellationToken)">
      <summary>데이터베이스에 현재 있는 추적된 엔터티 값의 복사본을 데이터베이스에서 비동기적으로 쿼리합니다.반환된 사전에서 값을 변경하면 데이터베이스에서 값이 업데이트되지 않습니다.엔터티가 데이터베이스에 없으면 null이 반환됩니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.작업 결과에는 저장소 값이 포함됩니다.</returns>
      <param name="cancellationToken">작업이 완료되기를 기다리는 동안 관찰할 <see cref="T:System.Threading.CancellationToken" />입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.GetHashCode">
      <summary>이 인스턴스의 해시 코드를 반환합니다.</summary>
      <returns>해시 알고리즘 및 해시 테이블과 같은 데이터 구조에 사용하기 적합한 이 인스턴스의 해시 코드입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.GetType">
      <summary>현재 인스턴스의 <see cref="T:System.Type" />을 가져옵니다.</summary>
      <returns>현재 인스턴스의 정확한 런타임 형식입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.GetValidationResult">
      <summary>이 <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" /> 인스턴스의 유효성을 검사하고 유효성 검사 결과를 반환합니다.</summary>
      <returns>엔터티 유효성 검사 결과입니다.<see cref="M:System.Data.Entity.DbContext.ValidateEntity(System.Data.Entity.Infrastructure.DbEntityEntry,System.Collections.Generic.IDictionary{System.Object,System.Object})" /> 메서드가 재정의된 경우 null일 수 있습니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.Member(System.String)">
      <summary>엔터티의 멤버를 나타내는 개체를 가져옵니다.반환된 개체의 런타임 형식은 요청된 멤버의 형식에 따라 다릅니다.현재 지원되는 멤버 형식과 해당 반환 형식은 참조 탐색 속성 <see cref="T:System.Data.Entity.Infrastructure.DbReferenceEntry" />,컬렉션 탐색 속성 <see cref="T:System.Data.Entity.Infrastructure.DbCollectionEntry" />,기본/스칼라 속성 <see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry" /> 및복합 속성 <see cref="T:System.Data.Entity.Infrastructure.DbComplexPropertyEntry" />입니다.</summary>
      <returns>멤버를 나타내는 개체입니다.</returns>
      <param name="propertyName">멤버의 이름입니다.</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbEntityEntry.OriginalValues">
      <summary>이 개체가 나타내는 추적된 엔터티의 원래 속성 값을 가져옵니다.일반적으로 원래 값은 데이터베이스에서 마지막으로 쿼리되었을 때의 값인 엔터티의 속성 값입니다.</summary>
      <returns>원래 값입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.Property(System.String)">
      <summary>이 엔터티의 스칼라 또는 복합 속성을 나타내는 개체를 가져옵니다.</summary>
      <returns>속성을 나타내는 개체입니다.</returns>
      <param name="propertyName">속성의 이름입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.Reference(System.String)">
      <summary>이 엔터티에서 다른 엔터티로의 참조(즉,비컬렉션) 탐색 속성을 나타내는 개체를 가져옵니다.</summary>
      <returns>탐색 속성을 나타내는 개체입니다.</returns>
      <param name="navigationProperty">탐색 속성의 이름입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.Reload">
      <summary>데이터베이스에서 엔터티를 다시 로드하여 속성 값을 데이터베이스의 값으로 덮어씁니다.이 메서드를 호출한 후 엔터티는 변경되지 않은 상태가 됩니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.ReloadAsync">
      <summary>데이터베이스에서 엔터티를 비동기적으로 다시 로드하여 속성 값을 데이터베이스의 값으로 덮어씁니다.이 메서드를 호출한 후 엔터티는 변경되지 않은 상태가 됩니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.ReloadAsync(System.Threading.CancellationToken)">
      <summary>데이터베이스에서 엔터티를 비동기적으로 다시 로드하여 속성 값을 데이터베이스의 값으로 덮어씁니다.이 메서드를 호출한 후 엔터티는 변경되지 않은 상태가 됩니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.</returns>
      <param name="cancellationToken">작업이 완료되기를 기다리는 동안 관찰할 <see cref="T:System.Threading.CancellationToken" />입니다.</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbEntityEntry.State">
      <summary>엔터티의 상태를 가져오거나 설정합니다.</summary>
      <returns>상태입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.ToString">
      <summary>
        <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" />의 문자열 표현을 반환합니다.</summary>
      <returns>
        <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" />의 문자열 표현입니다.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbEntityEntry`1">
      <summary>이 클래스의 인스턴스는 <see cref="T:System.Data.Entity.DbContext" />에서 추적 중인 엔터티에 대한 정보에 액세스하고 엔터티를 제어할 수 있도록 합니다.컨텍스트의 Entity 또는 Entities 메서드를 사용하여 이 형식의 개체를 가져올 수 있습니다.</summary>
      <typeparam name="TEntity">엔터티의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Collection``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.ICollection{``0}}})">
      <summary>이 엔터티에서 관련 엔터티 컬렉션으로의 컬렉션 탐색 속성을 나타내는 개체를 가져옵니다.</summary>
      <returns>탐색 속성을 나타내는 개체입니다.</returns>
      <param name="navigationProperty">탐색 속성을 나타내는 식입니다.</param>
      <typeparam name="TElement">컬렉션에 있는 요소의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Collection``1(System.String)">
      <summary>이 엔터티에서 관련 엔터티 컬렉션으로의 컬렉션 탐색 속성을 나타내는 개체를 가져옵니다.</summary>
      <returns>탐색 속성을 나타내는 개체입니다.</returns>
      <param name="navigationProperty">탐색 속성의 이름입니다.</param>
      <typeparam name="TElement">컬렉션에 있는 요소의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Collection(System.String)">
      <summary>이 엔터티에서 관련 엔터티 컬렉션으로의 컬렉션 탐색 속성을 나타내는 개체를 가져옵니다.</summary>
      <returns>탐색 속성을 나타내는 개체입니다.</returns>
      <param name="navigationProperty">탐색 속성의 이름입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.ComplexProperty``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary>이 엔터티의 복합 속성을 나타내는 개체를 가져옵니다.</summary>
      <returns>복합 속성을 나타내는 개체입니다.</returns>
      <param name="property">복합 속성을 나타내는 식입니다.</param>
      <typeparam name="TComplexProperty">복합 속성의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.ComplexProperty``1(System.String)">
      <summary>이 엔터티의 복합 속성을 나타내는 개체를 가져옵니다.</summary>
      <returns>복합 속성을 나타내는 개체입니다.</returns>
      <param name="propertyName">복합 속성의 이름입니다.</param>
      <typeparam name="TComplexProperty">복합 속성의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.ComplexProperty(System.String)">
      <summary>이 엔터티의 복합 속성을 나타내는 개체를 가져옵니다.</summary>
      <returns>복합 속성을 나타내는 개체입니다.</returns>
      <param name="propertyName">복합 속성의 이름입니다.</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbEntityEntry`1.CurrentValues">
      <summary>이 개체가 나타내는 추적된 엔터티의 현재 속성 값을 가져옵니다.</summary>
      <returns>현재 값입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbEntityEntry`1.Entity">
      <summary>엔터티를 가져옵니다.</summary>
      <returns>엔터티입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Equals(System.Data.Entity.Infrastructure.DbEntityEntry{`0})">
      <summary>지정된 <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" />가 이 인스턴스와 같은지 여부를 확인합니다.두 <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" /> 인스턴스가 동일한 <see cref="T:System.Data.Entity.DbContext" />에서 동일한 엔터티의 항목인 경우 같은 것으로 간주됩니다.</summary>
      <returns>지정된 <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" />이 이 인스턴스와 같으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="other">이 인스턴스와 비교할 <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" />입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Equals(System.Object)">
      <summary>지정된 <see cref="T:System.Object" />가 이 인스턴스와 같은지 여부를 확인합니다.두 <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" /> 인스턴스가 동일한 <see cref="T:System.Data.Entity.DbContext" />에서 동일한 엔터티의 항목인 경우 같은 것으로 간주됩니다.</summary>
      <returns>지정된 <see cref="T:System.Object" />가 이 인스턴스와 같으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="obj">이 인스턴스와 비교할 <see cref="T:System.Object" />입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.GetDatabaseValues">
      <summary>데이터베이스에 현재 있는 추적된 엔터티 값의 복사본을 데이터베이스에서 쿼리합니다.반환된 사전에서 값을 변경하면 데이터베이스에서 값이 업데이트되지 않습니다.엔터티가 데이터베이스에 없으면 null이 반환됩니다.</summary>
      <returns>저장소 값입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.GetDatabaseValuesAsync">
      <summary>데이터베이스에 현재 있는 추적된 엔터티 값의 복사본을 데이터베이스에서 비동기적으로 쿼리합니다.반환된 사전에서 값을 변경하면 데이터베이스에서 값이 업데이트되지 않습니다.엔터티가 데이터베이스에 없으면 null이 반환됩니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.작업 결과에는 저장소 값이 포함됩니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.GetDatabaseValuesAsync(System.Threading.CancellationToken)">
      <summary>데이터베이스에 현재 있는 추적된 엔터티 값의 복사본을 데이터베이스에서 비동기적으로 쿼리합니다.반환된 사전에서 값을 변경하면 데이터베이스에서 값이 업데이트되지 않습니다.엔터티가 데이터베이스에 없으면 null이 반환됩니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.작업 결과에는 저장소 값이 포함됩니다.</returns>
      <param name="cancellationToken">작업이 완료되기를 기다리는 동안 관찰할 <see cref="T:System.Threading.CancellationToken" />입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.GetHashCode">
      <summary>이 인스턴스의 해시 코드를 반환합니다.</summary>
      <returns>해시 알고리즘 및 해시 테이블과 같은 데이터 구조에 사용하기 적합한 이 인스턴스의 해시 코드입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.GetType">
      <summary>현재 인스턴스의 <see cref="T:System.Type" />을 가져옵니다.</summary>
      <returns>현재 인스턴스의 정확한 런타임 형식입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.GetValidationResult">
      <summary>이 <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" /> 인스턴스의 유효성을 검사하고 유효성 검사 결과를 반환합니다.</summary>
      <returns>엔터티 유효성 검사 결과입니다.<see cref="M:System.Data.Entity.DbContext.ValidateEntity(System.Data.Entity.Infrastructure.DbEntityEntry,System.Collections.Generic.IDictionary{System.Object,System.Object})" /> 메서드가 재정의된 경우 null일 수 있습니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Member``1(System.String)">
      <summary>엔터티의 멤버를 나타내는 개체를 가져옵니다.반환된 개체의 런타임 형식은 요청된 멤버의 형식에 따라 다릅니다.현재 지원되는 멤버 형식과 해당 반환 형식은 참조 탐색 속성 <see cref="T:System.Data.Entity.Infrastructure.DbReferenceEntry`2" />,컬렉션 탐색 속성 <see cref="T:System.Data.Entity.Infrastructure.DbCollectionEntry`2" />,기본/스칼라 속성 <see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry`2" /> 및복합 속성 <see cref="T:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2" />입니다.</summary>
      <returns>멤버를 나타내는 개체입니다.</returns>
      <param name="propertyName">멤버의 이름입니다.</param>
      <typeparam name="TMember">멤버의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Member(System.String)">
      <summary>엔터티의 멤버를 나타내는 개체를 가져옵니다.반환된 개체의 런타임 형식은 요청된 멤버의 형식에 따라 다릅니다.현재 지원되는 멤버 형식과 해당 반환 형식은 참조 탐색 속성 <see cref="T:System.Data.Entity.Infrastructure.DbReferenceEntry" />,컬렉션 탐색 속성 <see cref="T:System.Data.Entity.Infrastructure.DbCollectionEntry" />,기본/스칼라 속성 <see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry" /> 및복합 속성 <see cref="T:System.Data.Entity.Infrastructure.DbComplexPropertyEntry" />입니다.</summary>
      <returns>멤버를 나타내는 개체입니다.</returns>
      <param name="propertyName">멤버의 이름입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.op_Implicit(System.Data.Entity.Infrastructure.DbEntityEntry{`0})~System.Data.Entity.Infrastructure.DbEntityEntry">
      <summary>이 개체가 나타내는 추적된 엔터티에 대한 제네릭이 아닌 <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" /> 클래스의 새 인스턴스를 반환합니다.</summary>
      <returns>제네릭이 아닌 버전입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbEntityEntry`1.OriginalValues">
      <summary>이 개체가 나타내는 추적된 엔터티의 원래 속성 값을 가져옵니다.일반적으로 원래 값은 데이터베이스에서 마지막으로 쿼리되었을 때의 값인 엔터티의 속성 값입니다.</summary>
      <returns>원래 값입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Property``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary>이 엔터티의 스칼라 또는 복합 속성을 나타내는 개체를 가져옵니다.</summary>
      <returns>속성을 나타내는 개체입니다.</returns>
      <param name="property">속성을 나타내는 식입니다.</param>
      <typeparam name="TProperty">속성의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Property(System.String)">
      <summary>이 엔터티의 스칼라 또는 복합 속성을 나타내는 개체를 가져옵니다.</summary>
      <returns>속성을 나타내는 개체입니다.</returns>
      <param name="propertyName">속성의 이름입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Property``1(System.String)">
      <summary>이 엔터티의 스칼라 또는 복합 속성을 나타내는 개체를 가져옵니다.</summary>
      <returns>속성을 나타내는 개체입니다.</returns>
      <param name="propertyName">속성의 이름입니다.</param>
      <typeparam name="TProperty">속성의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Reference``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary>이 엔터티에서 다른 엔터티로의 참조(즉,비컬렉션) 탐색 속성을 나타내는 개체를 가져옵니다.</summary>
      <returns>탐색 속성을 나타내는 개체입니다.</returns>
      <param name="navigationProperty">탐색 속성을 나타내는 식입니다.</param>
      <typeparam name="TProperty">속성의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Reference(System.String)">
      <summary>이 엔터티에서 다른 엔터티로의 참조(즉,비컬렉션) 탐색 속성을 나타내는 개체를 가져옵니다.</summary>
      <returns>탐색 속성을 나타내는 개체입니다.</returns>
      <param name="navigationProperty">탐색 속성의 이름입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Reference``1(System.String)">
      <summary>이 엔터티에서 다른 엔터티로의 참조(즉,비컬렉션) 탐색 속성을 나타내는 개체를 가져옵니다.</summary>
      <returns>탐색 속성을 나타내는 개체입니다.</returns>
      <param name="navigationProperty">탐색 속성의 이름입니다.</param>
      <typeparam name="TProperty">속성의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Reload">
      <summary>데이터베이스에서 엔터티를 다시 로드하여 속성 값을 데이터베이스의 값으로 덮어씁니다.이 메서드를 호출한 후 엔터티는 변경되지 않은 상태가 됩니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.ReloadAsync">
      <summary>데이터베이스에서 엔터티를 비동기적으로 다시 로드하여 속성 값을 데이터베이스의 값으로 덮어씁니다.이 메서드를 호출한 후 엔터티는 변경되지 않은 상태가 됩니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.ReloadAsync(System.Threading.CancellationToken)">
      <summary>데이터베이스에서 엔터티를 비동기적으로 다시 로드하여 속성 값을 데이터베이스의 값으로 덮어씁니다.이 메서드를 호출한 후 엔터티는 변경되지 않은 상태가 됩니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.</returns>
      <param name="cancellationToken">작업이 완료되기를 기다리는 동안 관찰할 <see cref="T:System.Threading.CancellationToken" />입니다.</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbEntityEntry`1.State">
      <summary>엔터티의 상태를 가져오거나 설정합니다.</summary>
      <returns>상태입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.ToString">
      <summary>데이터베이스 엔터티 값의 문자열 표현을 반환합니다.</summary>
      <returns>데이터베이스 엔터티 값의 문자열 표현입니다.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbExecutionStrategy">
      <summary>재시도 간에 기하급수적으로 증가하는 지연을 사용하는, 신뢰할 수 없는 작업과 일시적인 조건에 대한 재시도 메커니즘의 기본 구현을 제공합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbExecutionStrategy.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.Infrastructure.DbExecutionStrategy" />의 새 인스턴스를 만듭니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbExecutionStrategy.#ctor(System.Int32,System.TimeSpan)">
      <summary>재시도 횟수의 지정된 제한과 재시도 간의 지연을 사용하여 <see cref="T:System.Data.Entity.Infrastructure.DbExecutionStrategy" />의 새 인스턴스를 만듭니다.</summary>
      <param name="maxRetryCount">최대 재시도 횟수입니다.</param>
      <param name="maxDelay">재시도 간의 최대 지연(밀리초)입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbExecutionStrategy.Execute(System.Action)">
      <summary>현재 재시도 정책을 만족하는 한 지정된 작업을 반복적으로 실행합니다.</summary>
      <param name="operation">결과를 반환하지 않는 실행 가능한 작업을 나타내는 대리자입니다.</param>
      <exception cref="T:System.Data.Entity.Infrastructure.RetryLimitExceededException">재시도 지연 전략에 따라 작업을 더 이상 재시도하지 않아야 하는 경우</exception>
      <exception cref="T:System.InvalidOperationException">기존 트랜잭션이 검색되고 실행 전략이 해당 트랜잭션을 지원하지 않는 경우</exception>
      <exception cref="T:System.InvalidOperationException">이 인스턴스가 작업을 실행하는 데 이미 사용된 경우</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbExecutionStrategy.Execute``1(System.Func{``0})">
      <summary>현재 재시도 정책을 만족하는 한 지정된 작업을 반복적으로 실행합니다.</summary>
      <returns>작업의 결과입니다.</returns>
      <param name="operation">
        <paramref name="TResult" /> 형식의 결과를 반환하는 실행 가능한 작업을 나타내는 대리자입니다.</param>
      <typeparam name="TResult">실행 가능한 작업에서 예상되는 결과의 형식입니다.</typeparam>
      <exception cref="T:System.Data.Entity.Infrastructure.RetryLimitExceededException">재시도 지연 전략에 따라 작업을 더 이상 재시도하지 않아야 하는 경우</exception>
      <exception cref="T:System.InvalidOperationException">기존 트랜잭션이 검색되고 실행 전략이 해당 트랜잭션을 지원하지 않는 경우</exception>
      <exception cref="T:System.InvalidOperationException">이 인스턴스가 작업을 실행하는 데 이미 사용된 경우</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbExecutionStrategy.ExecuteAsync``1(System.Func{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)">
      <summary>현재 재시도 정책을 만족하는 한 지정된 비동기 작업을 반복적으로 실행합니다.</summary>
      <returns>원래 작업이 성공적으로 완료되는 경우(처음으로 또는 일시적인 실패의 재시도 후) 완료되기 위해 실행될 작업입니다.작업이 일시적이 아닌 오류로 실패하거나 재시도 제한에 도달한 경우 반환되는 작업에서 오류가 발생하게 되며 예외가 관찰되어야 합니다.</returns>
      <param name="operation">
        <paramref name="TResult" /> 형식의 시작된 작업을 반환하는 함수입니다.</param>
      <param name="cancellationToken">이미 진행 중이거나 이미 성공적으로 완료된 작업이 아닌 재시도 작업을 취소하는 데 사용되는 취소 토큰입니다.</param>
      <typeparam name="TResult">
        <paramref name="operation" />에서 반환된 <see cref="T:System.Threading.Tasks.Task`1" />의 결과 형식입니다.</typeparam>
      <exception cref="T:System.Data.Entity.Infrastructure.RetryLimitExceededException">재시도 지연 전략에 따라 작업을 더 이상 재시도하지 않아야 하는 경우</exception>
      <exception cref="T:System.InvalidOperationException">기존 트랜잭션이 검색되고 실행 전략이 해당 트랜잭션을 지원하지 않는 경우</exception>
      <exception cref="T:System.InvalidOperationException">이 인스턴스가 작업을 실행하는 데 이미 사용된 경우</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbExecutionStrategy.ExecuteAsync(System.Func{System.Threading.Tasks.Task},System.Threading.CancellationToken)">
      <summary>현재 재시도 정책을 만족하는 한 지정된 비동기 작업을 반복적으로 실행합니다.</summary>
      <returns>원래 작업이 성공적으로 완료되는 경우(처음으로 또는 일시적인 실패의 재시도 후) 완료되기 위해 실행될 작업입니다.작업이 일시적이 아닌 오류로 실패하거나 재시도 제한에 도달한 경우 반환되는 작업에서 오류가 발생하게 되며 예외가 관찰되어야 합니다.</returns>
      <param name="operation">시작된 작업을 반환하는 함수입니다.</param>
      <param name="cancellationToken">이미 진행 중이거나 이미 성공적으로 완료된 작업이 아닌 재시도 작업을 취소하는 데 사용되는 취소 토큰입니다.</param>
      <exception cref="T:System.Data.Entity.Infrastructure.RetryLimitExceededException">재시도 지연 전략에 따라 작업을 더 이상 재시도하지 않아야 하는 경우</exception>
      <exception cref="T:System.InvalidOperationException">기존 트랜잭션이 검색되고 실행 전략이 해당 트랜잭션을 지원하지 않는 경우</exception>
      <exception cref="T:System.InvalidOperationException">이 인스턴스가 작업을 실행하는 데 이미 사용된 경우</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbExecutionStrategy.GetNextDelay(System.Exception)">
      <summary>작업을 다시 시도해야 할지 여부와 다음 시도 전의 지연을 확인합니다.</summary>
      <returns>작업을 다시 시도해야 하면 다음 실행 시도 전에 기다릴 시간을 나타내는 지연을 반환하고, 그렇지 않으면 null을 반환합니다.</returns>
      <param name="lastException">마지막 실행 시도 중에 throw되는 예외입니다.</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbExecutionStrategy.RetriesOnFailure">
      <summary>
        <see cref="T:System.Data.Entity.Infrastructure.DbExecutionStrategy" />가 실패 후 실행을 다시 시도할 수 있음을 나타내려면 true를 반환합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbExecutionStrategy.ShouldRetryOn(System.Exception)">
      <summary>지정된 예외가 재시도로 보정될 수 있는 일시적인 오류를 나타내는지 여부를 확인합니다.</summary>
      <returns>지정된 예외가 일시적인 것으로 간주되면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="exception">확인할 예외 개체입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbExecutionStrategy.UnwrapAndHandleException``1(System.Exception,System.Func{System.Exception,``0})">
      <summary>
        <see cref="T:System.Data.Entity.Core.EntityException" />, <see cref="T:System.Data.Entity.Infrastructure.DbUpdateException" /> 또는 <see cref="T:System.Data.Entity.Core.UpdateException" />인 <paramref name="exception" />에서 InnerException을 재귀적으로 가져와 <paramref name="exceptionHandler" />에 전달합니다.</summary>
      <returns>
        <paramref name="exceptionHandler" />의 결과입니다.</returns>
      <param name="exception">래핑을 해제할 예외입니다.</param>
      <param name="exceptionHandler">래핑되지 않은 예외를 사용하여 호출될 대리자입니다.</param>
      <typeparam name="T">래핑되지 않은 예외의 형식입니다.</typeparam>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbMemberEntry">
      <summary>엔터티의 탐색 속성이나 스칼라 또는 복합 속성을 나타내는 데 사용되는 추상 기본 클래스입니다.스칼라 속성과 복합 속성은 파생 클래스 <see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry" />를 사용하고, 참조 탐색 속성은 파생 클래스 <see cref="T:System.Data.Entity.Infrastructure.DbReferenceEntry" />를 사용하며, 컬렉션 탐색 속성은 파생 클래스 <see cref="T:System.Data.Entity.Infrastructure.DbCollectionEntry" />를 사용합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.Infrastructure.DbMemberEntry" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry.Cast``2">
      <summary>동일한 제네릭 <see cref="T:System.Data.Entity.Infrastructure.DbMemberEntry`2" /> 개체를 반환합니다.</summary>
      <returns>동일한 제네릭 개체입니다.</returns>
      <typeparam name="TEntity">멤버가 선언되는 엔터티의 형식입니다.</typeparam>
      <typeparam name="TProperty">속성의 형식입니다.</typeparam>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbMemberEntry.CurrentValue">
      <summary>이 속성의 현재 값을 가져오거나 설정합니다.</summary>
      <returns>현재 값입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbMemberEntry.EntityEntry">
      <summary>이 멤버가 속한 <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" />입니다.</summary>
      <returns>이 멤버를 소유하는 엔터티의 항목입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry.Equals(System.Object)">
      <summary>지정한 항목이 현재 항목과 같은지 여부를 확인합니다.</summary>
      <returns>지정한 항목이 현재 항목과 같으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="obj">현재 항목과 비교할 개체입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry.GetHashCode">
      <summary>이 항목의 해시 함수를 반환합니다.</summary>
      <returns>이 항목의 해시 함수입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry.GetType">
      <summary>현재 인스턴스의 <see cref="T:System.Type" />을 가져옵니다.</summary>
      <returns>현재 인스턴스의 정확한 런타임 형식입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry.GetValidationErrors">
      <summary>이 속성의 유효성을 검사합니다.</summary>
      <returns>
        <see cref="T:System.Data.Entity.Validation.DbValidationError" /> 개체의 컬렉션입니다.null일 수 없습니다.엔터티가 유효하면 컬렉션은 비어 있습니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbMemberEntry.Name">
      <summary>속성 이름을 가져옵니다.</summary>
      <returns>속성 이름입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry.ToString">
      <summary>데이터베이스 속성 값의 문자열 표현을 반환합니다.</summary>
      <returns>데이터베이스 속성 값의 문자열 표현입니다.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbMemberEntry`2">
      <summary>엔터티의 탐색 속성이나 스칼라 또는 복합 속성을 나타내는 데 사용되는 추상 기본 클래스입니다.스칼라 속성과 복합 속성은 파생 클래스 <see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry`2" />를 사용하고, 참조 탐색 속성은 파생 클래스 <see cref="T:System.Data.Entity.Infrastructure.DbReferenceEntry`2" />를 사용하며, 컬렉션 탐색 속성은 파생 클래스 <see cref="T:System.Data.Entity.Infrastructure.DbCollectionEntry`2" />를 사용합니다.</summary>
      <typeparam name="TEntity">이 속성이 속하는 엔터티의 형식입니다.</typeparam>
      <typeparam name="TProperty">속성의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry`2.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.Infrastructure.DbMemberEntry`2" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbMemberEntry`2.CurrentValue">
      <summary>이 속성의 현재 값을 가져오거나 설정합니다.</summary>
      <returns>현재 값입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbMemberEntry`2.EntityEntry">
      <summary>이 멤버가 속한 <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" />입니다.</summary>
      <returns>이 멤버를 소유하는 엔터티의 항목입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry`2.Equals(System.Object)">
      <summary>개체가 지정된 개체와 같은지 여부를 지정합니다.</summary>
      <returns>개체가 지정된 개체와 같으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="obj">비교할 개체입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry`2.GetHashCode">
      <summary>개체에 연결된 해시 코드를 가져옵니다.</summary>
      <returns>개체에 연결된 해시 코드입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry`2.GetType">
      <summary>현재 인스턴스의 <see cref="T:System.Type" />을 가져옵니다.</summary>
      <returns>현재 인스턴스의 정확한 런타임 형식입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry`2.GetValidationErrors">
      <summary>이 속성의 유효성을 검사합니다.</summary>
      <returns>
        <see cref="T:System.Data.Entity.Validation.DbValidationError" /> 개체의 컬렉션입니다.null일 수 없습니다.엔터티가 유효하면 컬렉션은 비어 있습니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbMemberEntry`2.Name">
      <summary>속성 이름을 가져옵니다.</summary>
      <returns>속성의 이름입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry`2.op_Implicit(System.Data.Entity.Infrastructure.DbMemberEntry{`0,`1})~System.Data.Entity.Infrastructure.DbMemberEntry">
      <summary>이 개체가 나타내는 속성에 대한 제네릭이 아닌 <see cref="T:System.Data.Entity.Infrastructure.DbMemberEntry" /> 클래스의 새 인스턴스를 반환합니다.</summary>
      <returns>제네릭이 아닌 버전입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry`2.ToString">
      <summary>
        <see cref="T:System.Data.Entity.Infrastructure.DbMemberEntry`2" />의 문자열 표현을 반환합니다.</summary>
      <returns>
        <see cref="T:System.Data.Entity.Infrastructure.DbMemberEntry`2" />의 문자열 표현입니다.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbModel">
      <summary>
        <see cref="T:System.Data.Entity.DbModelBuilder" />가 만든 EDM(엔터티 데이터 모델)을 나타냅니다.Compile 메서드를 사용하여 이 EDM 표현에서 <see cref="T:System.Data.Entity.DbContext" /> 또는 <see cref="T:System.Data.Objects.ObjectContext" /> 인스턴스를 캐시하고 만드는 데 적합한 모델의 컴파일된 스냅숏인 <see cref="T:System.Data.Entity.Infrastructure.DbCompiledModel" />로 이동할 수 있습니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbModel.Compile">
      <summary>
        <see cref="T:System.Data.Entity.DbContext" /> 인스턴스를 캐시하고 만드는 데 적합한 컴파일된 스냅숏인 이 모드의 <see cref="T:System.Data.Entity.Infrastructure.DbCompiledModel" />을 만듭니다.</summary>
      <returns>컴파일된 모델입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbModel.ProviderInfo">
      <summary>공급자 정보를 가져옵니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbModel.ProviderManifest">
      <summary>공급자 매니페스트를 가져옵니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbModel.System#Data#Entity#Core#Metadata#Edm#IEdmModelAdapter#ConceptualModel"></member>
    <member name="P:System.Data.Entity.Infrastructure.DbModel.System#Data#Entity#Core#Metadata#Edm#IEdmModelAdapter#StoreModel"></member>
    <member name="T:System.Data.Entity.Infrastructure.DbPropertyEntry">
      <summary>
        <see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry`2" /> 클래스의 제네릭이 아닌 버전입니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbPropertyEntry.Cast``2">
      <summary>동일한 제네릭 <see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry`2" /> 개체를 반환합니다.</summary>
      <returns>동일한 제네릭 개체입니다.</returns>
      <typeparam name="TEntity">멤버가 선언되는 엔터티의 형식입니다.</typeparam>
      <typeparam name="TProperty">속성의 형식입니다.</typeparam>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry.CurrentValue">
      <summary>이 속성의 현재 값을 가져오거나 설정합니다.</summary>
      <returns>현재 값입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry.EntityEntry">
      <summary>이 속성이 속한 <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" />입니다.</summary>
      <returns>이 속성을 소유하는 엔터티의 항목입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry.IsModified">
      <summary>이 속성의 값이 데이터베이스에서 로드된 이후 수정되었는지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
      <returns>이 인스턴스가 수정되었으면 true이고, 그렇지 않으면 false입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry.Name">
      <summary>속성 이름을 가져옵니다.</summary>
      <returns>속성 이름입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry.OriginalValue">
      <summary>이 속성의 원래 값을 가져오거나 설정합니다.</summary>
      <returns>원래 값입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry.ParentProperty">
      <summary>중첩 속성에 대한 부모 속성의 <see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry" />입니다.이 메서드는 복합 개체의 속성에 대해서만 null이 아닌 항목을 반환하고, 엔터티 자체의 속성에 대해서는 null을 반환합니다.</summary>
      <returns>부모 복합 속성의 항목이거나, 엔터티 속성인 경우 null입니다.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbPropertyEntry`2">
      <summary>이 클래스의 인스턴스는 <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" />의 Property 메서드에서 반환되고 스칼라 또는 복합 속성의 상태에 액세스할 수 있도록 허용합니다.</summary>
      <typeparam name="TEntity">이 속성이 속하는 엔터티의 형식입니다.</typeparam>
      <typeparam name="TProperty">속성의 형식입니다.</typeparam>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry`2.CurrentValue">
      <summary>이 속성의 현재 값을 가져오거나 설정합니다.</summary>
      <returns>현재 값입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry`2.EntityEntry">
      <summary>이 속성이 속한 <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" />입니다.</summary>
      <returns>이 속성을 소유하는 엔터티의 항목입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry`2.IsModified">
      <summary>이 속성의 값이 데이터베이스에서 로드된 이후 수정되었는지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
      <returns>이 인스턴스가 수정되었으면 true이고, 그렇지 않으면 false입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry`2.Name">
      <summary>속성 이름을 가져옵니다.</summary>
      <returns>속성 이름입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbPropertyEntry`2.op_Implicit(System.Data.Entity.Infrastructure.DbPropertyEntry{`0,`1})~System.Data.Entity.Infrastructure.DbPropertyEntry">
      <summary>이 개체가 나타내는 속성에 대한 제네릭이 아닌 <see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry" /> 클래스의 새 인스턴스를 반환합니다.</summary>
      <returns>제네릭이 아닌 버전입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry`2.OriginalValue">
      <summary>이 속성의 원래 값을 가져오거나 설정합니다.</summary>
      <returns>원래 값입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry`2.ParentProperty">
      <summary>중첩 속성에 대한 부모 속성의 <see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry" />입니다.이 메서드는 복합 개체의 속성에 대해서만 null이 아닌 항목을 반환하고, 엔터티 자체의 속성에 대해서는 null을 반환합니다.</summary>
      <returns>부모 복합 속성의 항목이거나, 엔터티 속성인 경우 null입니다.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbPropertyValues">
      <summary>기본 엔터티 또는 복합 개체에 대한 모든 속성의 컬렉션입니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbPropertyValues.Clone">
      <summary>이 사전의 모든 속성 복사본이 포함된 새 사전을 만듭니다.새 사전을 변경해도 이 사전에 반영되지 않으며 그 반대의 경우에도 마찬가지입니다.</summary>
      <returns>이 사전의 복제본입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbPropertyValues.Equals(System.Object)">
      <summary>
        <see cref="T:System.Data.Entity.Infrastructure.DbPropertyValues" />가 특정 개체와 같은지 여부를 지정합니다.</summary>
      <returns>
        <see cref="T:System.Data.Entity.Infrastructure.DbPropertyValues" />가 특정 개체와 같으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="obj">비교할 개체입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbPropertyValues.GetHashCode">
      <summary>속성 값에 연결된 해시 코드를 가져옵니다.</summary>
      <returns>속성 값에 연결된 해시 코드입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbPropertyValues.GetType">
      <summary>현재 인스턴스의 <see cref="T:System.Type" />을 가져옵니다.</summary>
      <returns>현재 인스턴스의 정확한 런타임 형식입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbPropertyValues.GetValue``1(System.String)">
      <summary>인덱싱된 속성 getter를 사용하는 것처럼, 제네릭 매개 변수의 형식으로 형식화된 속성의 값을 가져옵니다.이는 중첩 사전에서 캐스트가 많은 식을 작성하지 않으려는 경우 특히 유용합니다.</summary>
      <returns>속성 값입니다.</returns>
      <param name="propertyName">속성의 이름입니다.</param>
      <typeparam name="TValue">속성의 형식입니다.</typeparam>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyValues.Item(System.String)">
      <summary>지정된 속성 이름을 가진 속성의 값을 가져오거나 설정합니다.속성 값은 이 클래스의 중첩 인스턴스일 수 있습니다.</summary>
      <returns>속성 값입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyValues.PropertyNames">
      <summary>이 사전의 모든 속성 이름의 집합을 읽기 전용 집합으로 가져옵니다.</summary>
      <returns>속성 이름입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbPropertyValues.SetValues(System.Data.Entity.Infrastructure.DbPropertyValues)">
      <summary>다른 사전에서 값을 읽어 이 사전의 값을 설정합니다.다른 사전은 이 사전과 동일한 형식이나 이 사전의 형식에서 파생된 형식을 기반으로 해야 합니다.</summary>
      <param name="propertyValues">값을 읽을 사전입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbPropertyValues.SetValues(System.Object)">
      <summary>지정된 개체에서 값을 읽어 이 사전의 값을 설정합니다.지정된 개체는 임의의 형식일 수 있습니다.사전의 속성 이름과 일치하는 이름을 가진 개체의 속성 중에서 읽을 수 있는 모든 속성을 읽게 됩니다.다른 속성은 무시됩니다.이에 따라 간단한 DTO(Data Transfer Object)에서 속성을 복사할 수 있습니다.</summary>
      <param name="obj">값을 읽을 개체입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbPropertyValues.ToObject">
      <summary>이 사전에 대한 기본 형식의 개체를 만들고 이 사전의 속성 값을 사용하여 변환합니다.</summary>
      <returns>새 개체로 복사된 이 사전의 속성입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbPropertyValues.ToString">
      <summary>
        <see cref="T:System.Data.Entity.Infrastructure.DbPropertyValues" />의 문자열 표현을 반환합니다.</summary>
      <returns>
        <see cref="T:System.Data.Entity.Infrastructure.DbPropertyValues" />의 문자열 표현입니다.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbProviderInfo">
      <summary>공급자 및 서버 버전을 식별하는 문자열 쌍을 단일 개체로 그룹화합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbProviderInfo.#ctor(System.String,System.String)">
      <summary>지정된 공급자 고정 이름 및 매니페스트 토큰에 대한 새 개체를 만듭니다.</summary>
      <param name="providerInvariantName">해당 공급자를 식별하는 문자열입니다.예를 들어 SQL Server 공급자에는 "System.Data.SqlCient" 문자열이 사용됩니다.</param>
      <param name="providerManifestToken">사용 중인 데이터베이스 서버 버전을 식별하는 문자열입니다.예를 들어 SQL Server 공급자에는 SQL Server 2008에 대해 "2008" 문자열이 사용됩니다.이 값은 null일 수 없지만 비어 있을 수 있습니다.매니페스트 토큰은 버전 힌트라고도 부릅니다.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbProviderInfo.Equals(System.Object)">
      <summary>지정한 개체가 이 현재 개체와 같은지 여부를 확인합니다.</summary>
      <returns>지정한 개체가 이 현재 개체와 같으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="obj">현재 개체와 비교할 개체입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbProviderInfo.GetHashCode">
      <summary>이 현재 개체의 해시 함수를 가져옵니다.</summary>
      <returns>이 현재 개체의 해시 함수입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbProviderInfo.ProviderInvariantName">
      <summary>해당 공급자를 식별하는 문자열입니다.예를 들어 SQL Server 공급자에는 "System.Data.SqlCient" 문자열이 사용됩니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbProviderInfo.ProviderManifestToken">
      <summary>사용 중인 데이터베이스 서버 버전을 식별하는 문자열입니다.예를 들어 SQL Server 공급자에는 SQL Server 2008에 대해 "2008" 문자열이 사용됩니다.이 값은 null일 수 없지만 비어 있을 수 있습니다.</summary>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbQuery">
      <summary>DbContext에 대한 제네릭이 아닌 LINQ to Entities 쿼리를 나타냅니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery.AsNoTracking">
      <summary>반환된 엔터티가 <see cref="T:System.Data.Entity.DbContext" />에서 캐시되지 않을 새 쿼리를 반환합니다.</summary>
      <returns>NoTracking이 적용된 새 쿼리입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery.AsStreaming">
      <summary>버퍼링 대신 결과를 스트리밍할 새 쿼리를 반환합니다.</summary>
      <returns>AsStreaming이 적용된 새 쿼리입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery.Cast``1">
      <summary>동일한 제네릭 <see cref="T:System.Data.Entity.Infrastructure.DbQuery`1" /> 개체를 반환합니다.</summary>
      <returns>제네릭 집합 개체입니다.</returns>
      <typeparam name="TElement">쿼리가 만들어진 요소의 형식입니다.</typeparam>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbQuery.ElementType">
      <summary>IQueryable 요소 형식입니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery.Equals(System.Object)">
      <summary>쿼리가 지정된 개체와 같은지 여부를 지정합니다.</summary>
      <returns>쿼리가 지정된 개체와 같으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="obj">비교할 개체입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery.GetHashCode">
      <summary>쿼리에 연결된 해시 코드를 가져옵니다.</summary>
      <returns>쿼리에 연결된 해시 코드입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery.GetType">
      <summary>쿼리에 연결된 형식을 가져옵니다.</summary>
      <returns>쿼리에 연결된 형식입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery.Include(System.String)">
      <summary>쿼리 결과에 포함할 관련 개체를 지정합니다.</summary>
      <returns>쿼리 경로가 정의된 새 DbQuery&amp;lt;T&amp;gt;입니다.</returns>
      <param name="path">쿼리 결과에 반환할 관련 개체의 목록입니다(점으로 구분됨).</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery.System#Collections#IEnumerable#GetEnumerator">
      <summary>열거될 때 데이터베이스에 대해 쿼리를 실행하는 <see cref="T:System.Collections.IEnumerator" />를 반환합니다.</summary>
      <returns>쿼리 결과입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbQuery.System#ComponentModel#IListSource#ContainsListCollection">
      <summary>false를 반환합니다.</summary>
      <returns>false .</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery.System#ComponentModel#IListSource#GetList">
      <summary>저장소 쿼리에 대한 직접 바인딩이 지원되지 않음을 나타내는 예외를 throw합니다.대신 Load 확장 메서드를 사용하는 등의 방법으로 DbSet을 데이터로 채운 다음 로컬 데이터에 바인딩합니다.WPF의 경우 DbSet.Local에 바인딩하고,Windows Forms의 경우에는 DbSet.Local.ToBindingList()에 바인딩합니다.</summary>
      <returns>반환하지 않고 항상 예외를 throw합니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery.System#Data#Entity#Infrastructure#IDbAsyncEnumerable#GetAsyncEnumerator">
      <summary>열거될 때 데이터베이스에 대해 쿼리를 실행하는 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncEnumerator" />를 반환합니다.</summary>
      <returns>쿼리 결과입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbQuery.System#Linq#IQueryable#Expression">
      <summary>IQueryable LINQ 식입니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbQuery.System#Linq#IQueryable#Provider">
      <summary>IQueryable 공급자입니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery.ToString">
      <summary>기본 쿼리의 <see cref="T:System.String" /> 표현을 반환합니다.</summary>
      <returns>쿼리 문자열입니다.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbQuery`1">
      <summary>DbContext에 대한 LINQ to Entities 쿼리를 나타냅니다.</summary>
      <typeparam name="TResult">쿼리할 엔터티의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery`1.AsNoTracking">
      <summary>반환된 엔터티가 <see cref="T:System.Data.Entity.DbContext" />에서 캐시되지 않을 새 쿼리를 반환합니다.</summary>
      <returns>NoTracking이 적용된 새 쿼리입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery`1.AsStreaming">
      <summary>버퍼링 대신 결과를 스트리밍할 새 쿼리를 반환합니다.</summary>
      <returns>AsStreaming이 적용된 새 쿼리입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery`1.Equals(System.Object)">
      <summary>현재 쿼리가 지정된 쿼리와 같은지 여부를 확인합니다.</summary>
      <returns>현재 쿼리가 지정된 쿼리와 같으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="obj">현재 쿼리와 비교할 개체입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery`1.GetHashCode">
      <summary>이 쿼리의 해시 함수를 반환합니다.</summary>
      <returns>이 쿼리의 해시 함수입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery`1.GetType">
      <summary>현재 쿼리의 형식을 가져옵니다.</summary>
      <returns>현재 쿼리의 형식입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery`1.Include(System.String)">
      <summary>쿼리 결과에 포함할 관련 개체를 지정합니다.</summary>
      <returns>쿼리 경로가 정의된 새 <see cref="T:System.Data.Entity.Infrastructure.DbQuery`1" />입니다.</returns>
      <param name="path">쿼리 결과에 반환할 관련 개체의 목록입니다(점으로 구분됨).</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery`1.op_Implicit(System.Data.Entity.Infrastructure.DbQuery{`0})~System.Data.Entity.Infrastructure.DbQuery">
      <summary>이 쿼리에 대한 제네릭이 아닌 <see cref="T:System.Data.Entity.Infrastructure.DbQuery" /> 클래스의 새 인스턴스를 반환합니다.</summary>
      <returns>제네릭이 아닌 버전입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>저장소에 대해 실행되도록 이 쿼리의 열거형을 가져옵니다.</summary>
      <returns>쿼리에 대한 <see cref="T:System.Collections.Generic.IEnumerator`1" />입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>열거될 때 데이터베이스에 대해 쿼리를 실행하는 <see cref="T:System.Collections.Generic.IEnumerator`1" />를 반환합니다.</summary>
      <returns>쿼리 결과입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbQuery`1.System#ComponentModel#IListSource#ContainsListCollection">
      <summary>false를 반환합니다.</summary>
      <returns>false .</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery`1.System#ComponentModel#IListSource#GetList">
      <summary>저장소 쿼리에 대한 직접 바인딩이 지원되지 않음을 나타내는 예외를 throw합니다.대신 Load 확장 메서드를 사용하는 등의 방법으로 DbSet을 데이터로 채운 다음 로컬 데이터에 바인딩합니다.WPF의 경우 DbSet.Local에 바인딩하고,Windows Forms의 경우에는 DbSet.Local.ToBindingList()에 바인딩합니다.</summary>
      <returns>반환하지 않고 항상 예외를 throw합니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery`1.System#Data#Entity#Infrastructure#IDbAsyncEnumerable#GetAsyncEnumerator">
      <summary>열거될 때 데이터베이스에 대해 쿼리를 실행하는 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncEnumerator" />를 반환합니다.</summary>
      <returns>쿼리 결과입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery`1.System#Data#Entity#Infrastructure#IDbAsyncEnumerable{T}#GetAsyncEnumerator">
      <summary>열거될 때 데이터베이스에 대해 쿼리를 실행하는 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncEnumerator`1" />를 반환합니다.</summary>
      <returns>쿼리 결과입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbQuery`1.System#Linq#IQueryable#ElementType">
      <summary>IQueryable 요소 형식입니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbQuery`1.System#Linq#IQueryable#Expression">
      <summary>IQueryable LINQ 식입니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbQuery`1.System#Linq#IQueryable#Provider">
      <summary>IQueryable 공급자입니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery`1.ToString">
      <summary>기본 쿼리의 <see cref="T:System.String" /> 표현을 반환합니다.</summary>
      <returns>쿼리 문자열입니다.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbRawSqlQuery">
      <summary>
        <see cref="T:System.Data.Entity.DbContext" />에서 만들어지고 해당 컨텍스트의 연결을 사용하여 실행되는 비엔터티에 대한 SQL 쿼리를 나타냅니다.이 클래스의 인스턴스는 <see cref="P:System.Data.Entity.DbContext.Database" /> 인스턴스에서 가져옵니다.쿼리는 이 개체가 만들어질 때 실행되지 않고 foreach 등을 사용하여 이 개체가 열거될 때마다 실행됩니다.엔터티에 대한 SQL 쿼리는 <see cref="M:System.Data.Entity.DbSet.SqlQuery(System.String,System.Object[])" />를 사용하여 만들어집니다.이 클래스의 제네릭 버전은 <see cref="T:System.Data.Entity.Infrastructure.DbRawSqlQuery`1" />를 참조하십시오.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery.AsStreaming">
      <summary>버퍼링 대신 결과를 스트리밍할 새 쿼리를 반환합니다.</summary>
      <returns>AsStreaming이 적용된 새 쿼리입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery.Equals(System.Object)">
      <summary>쿼리가 지정된 개체와 같은지 여부를 지정합니다.</summary>
      <returns>쿼리가 지정된 개체와 같으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="obj">비교할 개체입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery.ForEachAsync(System.Action{System.Object})">
      <summary>쿼리 결과를 비동기적으로 열거하고 각 요소에 대해 지정된 작업을 수행합니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.</returns>
      <param name="action">각 요소에 대해 수행할 작업입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery.ForEachAsync(System.Action{System.Object},System.Threading.CancellationToken)">
      <summary>쿼리 결과를 비동기적으로 열거하고 각 요소에 대해 지정된 작업을 수행합니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.</returns>
      <param name="action">각 요소에 대해 수행할 작업입니다.</param>
      <param name="cancellationToken">작업이 완료되기를 기다리는 동안 관찰할 <see cref="T:System.Threading.CancellationToken" />입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery.GetEnumerator">
      <summary>열거될 때 데이터베이스에 대해 SQL 쿼리를 실행하는 <see cref="T:System.Collections.IEnumerator" />를 반환합니다.</summary>
      <returns>요소를 반복하는 데 사용할 수 있는 <see cref="T:System.Collections.IEnumerator" /> 개체입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery.GetHashCode">
      <summary>쿼리에 연결된 해시 코드를 가져옵니다.</summary>
      <returns>쿼리에 연결된 해시 코드입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery.GetType">
      <summary>쿼리에 연결된 형식을 가져옵니다.</summary>
      <returns>쿼리에 연결된 형식입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbRawSqlQuery.System#ComponentModel#IListSource#ContainsListCollection">
      <summary>false를 반환합니다.</summary>
      <returns>false .</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery.System#ComponentModel#IListSource#GetList">
      <summary>저장소 쿼리에 대한 직접 바인딩이 지원되지 않음을 나타내는 예외를 throw합니다.</summary>
      <returns>반환하지 않고 항상 예외를 throw합니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery.System#Data#Entity#Infrastructure#IDbAsyncEnumerable#GetAsyncEnumerator">
      <summary>열거될 때 데이터베이스에 대해 SQL 쿼리를 실행하는 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncEnumerable" />를 반환합니다.</summary>
      <returns>요소를 반복하는 데 사용할 수 있는 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncEnumerable" /> 개체입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery.ToListAsync">
      <summary>비동기적으로 열거하여 쿼리에서 <see cref="T:System.Collections.Generic.List`1" />를 만듭니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.작업 결과에는 쿼리의 요소를 포함하는 <see cref="T:System.Collections.Generic.List`1" />가 포함됩니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery.ToListAsync(System.Threading.CancellationToken)">
      <summary>비동기적으로 열거하여 쿼리에서 <see cref="T:System.Collections.Generic.List`1" />를 만듭니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.작업 결과에는 쿼리의 요소를 포함하는 <see cref="T:System.Collections.Generic.List`1" />가 포함됩니다.</returns>
      <param name="cancellationToken">작업이 완료되기를 기다리는 동안 관찰할 <see cref="T:System.Threading.CancellationToken" />입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery.ToString">
      <summary>쿼리가 만들어졌을 때 설정된 SQL 문자열을 포함하는 <see cref="T:System.String" />을 반환합니다.매개 변수는 포함되지 않습니다.</summary>
      <returns>이 인스턴스를 나타내는 <see cref="T:System.String" />입니다.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbRawSqlQuery`1">
      <summary>
        <see cref="T:System.Data.Entity.DbContext" />에서 만들어지고 해당 컨텍스트의 연결을 사용하여 실행되는 비엔터티에 대한 SQL 쿼리를 나타냅니다.이 클래스의 인스턴스는 <see cref="P:System.Data.Entity.DbContext.Database" /> 인스턴스에서 가져옵니다.쿼리는 이 개체가 만들어질 때 실행되지 않고 foreach 등을 사용하여 이 개체가 열거될 때마다 실행됩니다.엔터티에 대한 SQL 쿼리는 <see cref="M:System.Data.Entity.DbSet`1.SqlQuery(System.String,System.Object[])" />를 사용하여 만들어집니다.이 클래스의 제네릭이 아닌 버전은 <see cref="T:System.Data.Entity.Infrastructure.DbRawSqlQuery" />를 참조하십시오.</summary>
      <typeparam name="TElement"></typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.AllAsync(System.Func{`0,System.Boolean})">
      <summary>쿼리의 모든 요소가 조건을 만족하는지 여부를 비동기적으로 확인합니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.쿼리 결과의 모든 요소가 지정된 조건자에서 테스트를 통과하면 작업 결과에 true가 포함되고, 그렇지 않으면 false가 포함됩니다.</returns>
      <param name="predicate">각 요소를 조건에 대해 테스트하는 함수입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="predicate" />가 null인 경우</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.AllAsync(System.Func{`0,System.Boolean},System.Threading.CancellationToken)">
      <summary>쿼리의 모든 요소가 조건을 만족하는지 여부를 비동기적으로 확인합니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.쿼리 결과의 모든 요소가 지정된 조건자에서 테스트를 통과하면 작업 결과에 true가 포함되고, 그렇지 않으면 false가 포함됩니다.</returns>
      <param name="predicate">각 요소를 조건에 대해 테스트하는 함수입니다.</param>
      <param name="cancellationToken">작업이 완료되기를 기다리는 동안 관찰할 <see cref="T:System.Threading.CancellationToken" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="predicate" />가 null인 경우</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.AnyAsync">
      <summary>쿼리에 요소가 포함되어 있는지 여부를 비동기적으로 확인합니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.쿼리 결과에 요소가 포함되어 있으면 작업 결과에 true가 포함되고, 그렇지 않으면 false가 포함됩니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.AnyAsync(System.Func{`0,System.Boolean})">
      <summary>쿼리의 요소 중에 조건을 만족하는 요소가 있는지 여부를 비동기적으로 확인합니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.쿼리 결과의 요소 중에 지정된 조건자에서 테스트를 통과하는 요소가 있으면 작업 결과에 true가 포함되고, 그렇지 않으면 false가 포함됩니다.</returns>
      <param name="predicate">각 요소를 조건에 대해 테스트하는 함수입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.AnyAsync(System.Func{`0,System.Boolean},System.Threading.CancellationToken)">
      <summary>쿼리의 요소 중에 조건을 만족하는 요소가 있는지 여부를 비동기적으로 확인합니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.쿼리 결과의 요소 중에 지정된 조건자에서 테스트를 통과하는 요소가 있으면 작업 결과에 true가 포함되고, 그렇지 않으면 false가 포함됩니다.</returns>
      <param name="predicate">각 요소를 조건에 대해 테스트하는 함수입니다.</param>
      <param name="cancellationToken">작업이 완료되기를 기다리는 동안 관찰할 <see cref="T:System.Threading.CancellationToken" />입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.AnyAsync(System.Threading.CancellationToken)">
      <summary>쿼리에 요소가 포함되어 있는지 여부를 비동기적으로 확인합니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.쿼리 결과에 요소가 포함되어 있으면 작업 결과에 true가 포함되고, 그렇지 않으면 false가 포함됩니다.</returns>
      <param name="cancellationToken">작업이 완료되기를 기다리는 동안 관찰할 <see cref="T:System.Threading.CancellationToken" />입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.AsStreaming">
      <summary>버퍼링 대신 결과를 스트리밍할 새 쿼리를 반환합니다.</summary>
      <returns>AsStreaming이 적용된 새 쿼리입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.ContainsAsync(`0)">
      <summary>기본 같음 비교자를 사용하여 쿼리에 지정된 요소가 포함되어 있는지 여부를 비동기적으로 확인합니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.쿼리 결과에 지정된 값이 포함되어 있으면 작업 결과에 true가 포함되고, 그렇지 않으면 false가 포함됩니다.</returns>
      <param name="value">쿼리 결과에서 찾을 개체입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.ContainsAsync(`0,System.Threading.CancellationToken)">
      <summary>기본 같음 비교자를 사용하여 쿼리에 지정된 요소가 포함되어 있는지 여부를 비동기적으로 확인합니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.쿼리 결과에 지정된 값이 포함되어 있으면 작업 결과에 true가 포함되고, 그렇지 않으면 false가 포함됩니다.</returns>
      <param name="value">쿼리 결과에서 찾을 개체입니다.</param>
      <param name="cancellationToken">작업이 완료되기를 기다리는 동안 관찰할 <see cref="T:System.Threading.CancellationToken" />입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.CountAsync">
      <summary>쿼리의 요소 수를 비동기적으로 반환합니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.작업 결과에는 쿼리 결과의 요소 수가 포함됩니다.</returns>
      <exception cref="T:System.OverflowException">쿼리 결과의 요소 수가 <see cref="F:System.Int32.MaxValue" />보다 큰 경우</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.CountAsync(System.Func{`0,System.Boolean})">
      <summary>조건을 만족하는 쿼리의 요소 수를 비동기적으로 반환합니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.작업 결과에는 조건자 함수의 조건을 만족하는 쿼리 결과의 요소 수가 포함됩니다.</returns>
      <param name="predicate">각 요소를 조건에 대해 테스트하는 함수입니다.</param>
      <exception cref="T:System.OverflowException">조건자 함수의 조건을 만족하는 쿼리 결과의 요소 수가 <see cref="F:System.Int32.MaxValue" />보다 큰 경우</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.CountAsync(System.Func{`0,System.Boolean},System.Threading.CancellationToken)">
      <summary>조건을 만족하는 쿼리의 요소 수를 비동기적으로 반환합니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.작업 결과에는 조건자 함수의 조건을 만족하는 쿼리 결과의 요소 수가 포함됩니다.</returns>
      <param name="predicate">각 요소를 조건에 대해 테스트하는 함수입니다.</param>
      <param name="cancellationToken">작업이 완료되기를 기다리는 동안 관찰할 <see cref="T:System.Threading.CancellationToken" />입니다.</param>
      <exception cref="T:System.OverflowException">조건자 함수의 조건을 만족하는 쿼리 결과의 요소 수가 <see cref="F:System.Int32.MaxValue" />보다 큰 경우</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.CountAsync(System.Threading.CancellationToken)">
      <summary>쿼리의 요소 수를 비동기적으로 반환합니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.작업 결과에는 쿼리 결과의 요소 수가 포함됩니다.</returns>
      <param name="cancellationToken">작업이 완료되기를 기다리는 동안 관찰할 <see cref="T:System.Threading.CancellationToken" />입니다.</param>
      <exception cref="T:System.OverflowException">쿼리 결과의 요소 수가 <see cref="F:System.Int32.MaxValue" />보다 큰 경우</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.Equals(System.Object)">
      <summary>현재 쿼리가 지정된 쿼리와 같은지 여부를 확인합니다.</summary>
      <returns>현재 쿼리가 지정된 쿼리와 같으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="obj">현재 쿼리와 비교할 쿼리입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.FirstAsync">
      <summary>쿼리의 첫 번째 요소를 비동기적으로 반환합니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.작업 결과에는 쿼리 결과의 첫 번째 요소가 포함됩니다.</returns>
      <exception cref="T:System.InvalidOperationException">쿼리 결과가 비어 있는 경우</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.FirstAsync(System.Func{`0,System.Boolean})">
      <summary>지정된 조건을 만족하는 쿼리의 첫 번째 요소를 비동기적으로 반환합니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.작업 결과에는 지정된 조건을 만족하는 쿼리 결과의 첫 번째 요소가 포함됩니다.</returns>
      <param name="predicate">각 요소를 조건에 대해 테스트하는 함수입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="predicate" />가 null인 경우</exception>
      <exception cref="T:System.InvalidOperationException">쿼리 결과가 비어 있는 경우</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.FirstAsync(System.Func{`0,System.Boolean},System.Threading.CancellationToken)">
      <summary>지정된 조건을 만족하는 쿼리의 첫 번째 요소를 비동기적으로 반환합니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.작업 결과에는 지정된 조건을 만족하는 쿼리 결과의 첫 번째 요소가 포함됩니다.</returns>
      <param name="predicate">각 요소를 조건에 대해 테스트하는 함수입니다.</param>
      <param name="cancellationToken">작업이 완료되기를 기다리는 동안 관찰할 <see cref="T:System.Threading.CancellationToken" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="predicate" />가 null인 경우</exception>
      <exception cref="T:System.InvalidOperationException">쿼리 결과가 비어 있는 경우</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.FirstAsync(System.Threading.CancellationToken)">
      <summary>쿼리의 첫 번째 요소를 비동기적으로 반환합니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.작업 결과에는 쿼리 결과의 첫 번째 요소가 포함됩니다.</returns>
      <param name="cancellationToken">작업이 완료되기를 기다리는 동안 관찰할 <see cref="T:System.Threading.CancellationToken" />입니다.</param>
      <exception cref="T:System.InvalidOperationException">쿼리 결과가 비어 있는 경우</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.FirstOrDefaultAsync">
      <summary>쿼리의 첫 번째 요소 또는 쿼리 결과에 요소가 없는 경우에는 기본값을 비동기적으로 반환합니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.쿼리 결과가 비어 있으면 작업 결과에 default(<paramref name="TElement" />)가 포함되고, 그렇지 않으면 쿼리 결과의 첫 번째 요소가 포함됩니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.FirstOrDefaultAsync(System.Func{`0,System.Boolean})">
      <summary>지정된 조건을 만족하는 쿼리의 첫 번째 요소 또는 이러한 요소가 없는 경우에는 기본값을 비동기적으로 반환합니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.쿼리 결과가 비어 있거나 <paramref name="predicate" />로 지정된 테스트를 통과하는 요소가 없으면 작업 결과에 default(<paramref name="TElement" />)가 포함되고, 그렇지 않으면 <paramref name="predicate" />로 지정된 테스트를 통과하는 쿼리 결과의 첫 번째 요소가 포함됩니다.</returns>
      <param name="predicate">각 요소를 조건에 대해 테스트하는 함수입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="predicate" />가 null인 경우</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.FirstOrDefaultAsync(System.Func{`0,System.Boolean},System.Threading.CancellationToken)">
      <summary>지정된 조건을 만족하는 쿼리의 첫 번째 요소 또는 이러한 요소가 없는 경우에는 기본값을 비동기적으로 반환합니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.쿼리 결과가 비어 있거나 default로 지정된 테스트를 통과하는 요소가 없으면 작업 결과에 <paramref name="TElement" />(<paramref name="predicate" />)가 포함되고, 그렇지 않으면 <paramref name="predicate" />로 지정된 테스트를 통과하는 쿼리 결과의 첫 번째 요소가 포함됩니다.</returns>
      <param name="predicate">각 요소를 조건에 대해 테스트하는 함수입니다.</param>
      <param name="cancellationToken">작업이 완료되기를 기다리는 동안 관찰할 <see cref="T:System.Threading.CancellationToken" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="predicate" />가 null인 경우</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.FirstOrDefaultAsync(System.Threading.CancellationToken)">
      <summary>쿼리의 첫 번째 요소 또는 쿼리 결과에 요소가 없는 경우에는 기본값을 비동기적으로 반환합니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.쿼리 결과가 비어 있으면 작업 결과에 default(<paramref name="TElement" />)가 포함되고, 그렇지 않으면 쿼리 결과의 첫 번째 요소가 포함됩니다.</returns>
      <param name="cancellationToken">작업이 완료되기를 기다리는 동안 관찰할 <see cref="T:System.Threading.CancellationToken" />입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.ForEachAsync(System.Action{`0})">
      <summary>쿼리 결과를 비동기적으로 열거하고 각 요소에 대해 지정된 작업을 수행합니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.</returns>
      <param name="action">실행할 동작입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.ForEachAsync(System.Action{`0},System.Threading.CancellationToken)">
      <summary>쿼리 결과를 비동기적으로 열거하고 각 요소에 대해 지정된 작업을 수행합니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.</returns>
      <param name="action">실행할 동작입니다.</param>
      <param name="cancellationToken">작업이 완료되기를 기다리는 동안 관찰할 <see cref="T:System.Threading.CancellationToken" />입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.GetEnumerator">
      <summary>열거될 때 데이터베이스에 대해 SQL 쿼리를 실행하는 <see cref="T:System.Collections.Generic.IEnumerator`1" />를 반환합니다.</summary>
      <returns>요소를 반복하는 데 사용할 수 있는 <see cref="T:System.Collections.Generic.IEnumerator`1" /> 개체입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.GetHashCode">
      <summary>이 쿼리의 해시 함수를 반환합니다.</summary>
      <returns>이 쿼리의 해시 함수입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.GetType">
      <summary>현재 쿼리의 형식을 가져옵니다.</summary>
      <returns>현재 쿼리의 형식입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.LongCountAsync">
      <summary>쿼리의 총 요소 수를 나타내는 <see cref="T:System.Int64" />를 비동기적으로 반환합니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.작업 결과에는 쿼리 결과의 요소 수가 포함됩니다.</returns>
      <exception cref="T:System.OverflowException">쿼리 결과의 요소 수가 <see cref="F:System.Int64.MaxValue" />보다 큰 경우</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.LongCountAsync(System.Func{`0,System.Boolean})">
      <summary>조건을 만족하는 쿼리의 요소 수를 나타내는 <see cref="T:System.Int64" />를 비동기적으로 반환합니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.작업 결과에는 조건자 함수의 조건을 만족하는 쿼리 결과의 요소 수가 포함됩니다.</returns>
      <param name="predicate">각 요소를 조건에 대해 테스트하는 함수입니다.</param>
      <exception cref="T:System.OverflowException">조건자 함수의 조건을 만족하는 쿼리 결과의 요소 수가 <see cref="F:System.Int64.MaxValue" />보다 큰 경우</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.LongCountAsync(System.Func{`0,System.Boolean},System.Threading.CancellationToken)">
      <summary>조건을 만족하는 쿼리의 요소 수를 나타내는 <see cref="T:System.Int64" />를 비동기적으로 반환합니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.작업 결과에는 조건자 함수의 조건을 만족하는 쿼리 결과의 요소 수가 포함됩니다.</returns>
      <param name="predicate">각 요소를 조건에 대해 테스트하는 함수입니다.</param>
      <param name="cancellationToken">작업이 완료되기를 기다리는 동안 관찰할 <see cref="T:System.Threading.CancellationToken" />입니다.</param>
      <exception cref="T:System.OverflowException">조건자 함수의 조건을 만족하는 쿼리 결과의 요소 수가 <see cref="F:System.Int64.MaxValue" />보다 큰 경우</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.LongCountAsync(System.Threading.CancellationToken)">
      <summary>쿼리의 총 요소 수를 나타내는 <see cref="T:System.Int64" />를 비동기적으로 반환합니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.작업 결과에는 쿼리 결과의 요소 수가 포함됩니다.</returns>
      <param name="cancellationToken">작업이 완료되기를 기다리는 동안 관찰할 <see cref="T:System.Threading.CancellationToken" />입니다.</param>
      <exception cref="T:System.OverflowException">쿼리 결과의 요소 수가 <see cref="F:System.Int64.MaxValue" />보다 큰 경우</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.MaxAsync">
      <summary>쿼리의 최대값을 비동기적으로 반환합니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.작업 결과에는 쿼리 결과의 최대값이 포함됩니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.MaxAsync(System.Threading.CancellationToken)">
      <summary>쿼리의 최대값을 비동기적으로 반환합니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.작업 결과에는 쿼리 결과의 최대값이 포함됩니다.</returns>
      <param name="cancellationToken">작업이 완료되기를 기다리는 동안 관찰할 <see cref="T:System.Threading.CancellationToken" />입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.MinAsync">
      <summary>쿼리의 최소값을 비동기적으로 반환합니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.작업 결과에는 쿼리 결과의 최소값이 포함됩니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.MinAsync(System.Threading.CancellationToken)">
      <summary>쿼리의 최소값을 비동기적으로 반환합니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.작업 결과에는 쿼리 결과의 최소값이 포함됩니다.</returns>
      <param name="cancellationToken">작업이 완료되기를 기다리는 동안 관찰할 <see cref="T:System.Threading.CancellationToken" />입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.SingleAsync">
      <summary>쿼리의 유일한 요소를 비동기적으로 반환하고, 쿼리의 요소가 정확히 하나가 아니면 예외를 throw합니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.작업 결과에는 쿼리 결과의 단일 요소가 포함됩니다.</returns>
      <exception cref="T:System.InvalidOperationException">쿼리 결과에 요소가 둘 이상 있는 경우</exception>
      <exception cref="T:System.InvalidOperationException">쿼리 결과가 비어 있는 경우</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.SingleAsync(System.Func{`0,System.Boolean})">
      <summary>지정된 조건을 만족하는 쿼리의 유일한 요소를 비동기적으로 반환하고, 이러한 요소가 둘 이상 있으면 예외를 throw합니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.작업 결과에는 <paramref name="predicate" />의 조건을 만족하는 쿼리 결과의 단일 요소가 포함됩니다.</returns>
      <param name="predicate">각 요소를 조건에 대해 테스트하는 함수입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="predicate" />가 null인 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="predicate" />의 조건을 충족하는 요소가 없는 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="predicate" />의 조건을 충족하는 요소가 둘 이상인 경우</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.SingleAsync(System.Func{`0,System.Boolean},System.Threading.CancellationToken)">
      <summary>지정된 조건을 만족하는 쿼리의 유일한 요소를 비동기적으로 반환하고, 이러한 요소가 둘 이상 있으면 예외를 throw합니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.작업 결과에는 <paramref name="predicate" />의 조건을 만족하는 쿼리 결과의 단일 요소가 포함됩니다.</returns>
      <param name="predicate">각 요소를 조건에 대해 테스트하는 함수입니다.</param>
      <param name="cancellationToken">작업이 완료되기를 기다리는 동안 관찰할 <see cref="T:System.Threading.CancellationToken" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="predicate" />가 null인 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="predicate" />의 조건을 충족하는 요소가 없는 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="predicate" />의 조건을 충족하는 요소가 둘 이상인 경우</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.SingleAsync(System.Threading.CancellationToken)">
      <summary>쿼리의 유일한 요소를 비동기적으로 반환하고, 쿼리의 요소가 정확히 하나가 아니면 예외를 throw합니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.작업 결과에는 쿼리 결과의 단일 요소가 포함됩니다.</returns>
      <param name="cancellationToken">작업이 완료되기를 기다리는 동안 관찰할 <see cref="T:System.Threading.CancellationToken" />입니다.</param>
      <exception cref="T:System.InvalidOperationException">쿼리 결과에 요소가 둘 이상 있는 경우</exception>
      <exception cref="T:System.InvalidOperationException">쿼리 결과가 비어 있는 경우</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.SingleOrDefaultAsync">
      <summary>시퀀스의 유일한 요소 또는 시퀀스가 비어 있는 경우에는 기본값을 비동기적으로 반환합니다. 시퀀스에 요소가 둘 이상 있으면 예외를 throw합니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.작업 결과에는 쿼리 결과의 단일 요소 또는 시퀀스에 요소가 없는 경우에는 default(<paramref name="TElement" />)가 포함됩니다.</returns>
      <exception cref="T:System.InvalidOperationException">쿼리 결과에 요소가 둘 이상 있는 경우</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.SingleOrDefaultAsync(System.Func{`0,System.Boolean})">
      <summary>지정된 조건을 만족하는 쿼리의 유일한 요소 또는 이러한 요소가 없는 경우에는 기본값을 비동기적으로 반환합니다. 조건을 만족하는 요소가 둘 이상 있으면 예외를 throw합니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.작업 결과에는 <paramref name="predicate" />의 조건을 만족하는 쿼리 결과의 단일 요소 또는 이러한 요소가 없는 경우에는 default(<paramref name="TElement" />)가 포함됩니다.</returns>
      <param name="predicate">각 요소를 조건에 대해 테스트하는 함수입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="predicate" />가 null인 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="predicate" />의 조건을 충족하는 요소가 둘 이상인 경우</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.SingleOrDefaultAsync(System.Func{`0,System.Boolean},System.Threading.CancellationToken)">
      <summary>지정된 조건을 만족하는 쿼리의 유일한 요소 또는 이러한 요소가 없는 경우에는 기본값을 비동기적으로 반환합니다. 조건을 만족하는 요소가 둘 이상 있으면 예외를 throw합니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.작업 결과에는 <paramref name="predicate" />의 조건을 만족하는 쿼리 결과의 단일 요소 또는 이러한 요소가 없는 경우에는 default(<paramref name="TElement" />)가 포함됩니다.</returns>
      <param name="predicate">각 요소를 조건에 대해 테스트하는 함수입니다.</param>
      <param name="cancellationToken">작업이 완료되기를 기다리는 동안 관찰할 <see cref="T:System.Threading.CancellationToken" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="predicate" />가 null인 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="predicate" />의 조건을 충족하는 요소가 둘 이상인 경우</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.SingleOrDefaultAsync(System.Threading.CancellationToken)">
      <summary>시퀀스의 유일한 요소 또는 시퀀스가 비어 있는 경우에는 기본값을 비동기적으로 반환합니다. 시퀀스에 요소가 둘 이상 있으면 예외를 throw합니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.작업 결과에는 쿼리 결과의 단일 요소 또는 시퀀스에 요소가 없는 경우에는 default(<paramref name="TElement" />)가 포함됩니다.</returns>
      <param name="cancellationToken">작업이 완료되기를 기다리는 동안 관찰할 <see cref="T:System.Threading.CancellationToken" />입니다.</param>
      <exception cref="T:System.InvalidOperationException">쿼리 결과에 요소가 둘 이상 있는 경우</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>열거될 때 데이터베이스에 대해 SQL 쿼리를 실행하는 <see cref="T:System.Collections.IEnumerator" />를 반환합니다.</summary>
      <returns>요소를 반복하는 데 사용할 수 있는 <see cref="T:System.Collections.IEnumerator" /> 개체입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.System#ComponentModel#IListSource#ContainsListCollection">
      <summary>false를 반환합니다.</summary>
      <returns>false .</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.System#ComponentModel#IListSource#GetList">
      <summary>저장소 쿼리에 대한 직접 바인딩이 지원되지 않음을 나타내는 예외를 throw합니다.</summary>
      <returns>반환하지 않고 항상 예외를 throw합니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.System#Data#Entity#Infrastructure#IDbAsyncEnumerable#GetAsyncEnumerator">
      <summary>열거될 때 데이터베이스에 대해 SQL 쿼리를 실행하는 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncEnumerable" />를 반환합니다.</summary>
      <returns>요소를 반복하는 데 사용할 수 있는 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncEnumerable" /> 개체입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.System#Data#Entity#Infrastructure#IDbAsyncEnumerable{T}#GetAsyncEnumerator">
      <summary>열거될 때 데이터베이스에 대해 SQL 쿼리를 실행하는 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncEnumerator`1" />를 반환합니다.</summary>
      <returns>요소를 반복하는 데 사용할 수 있는 <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncEnumerator`1" /> 개체입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.ToArrayAsync">
      <summary>비동기적으로 열거하여 쿼리에서 배열을 만듭니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.작업 결과에는 입력 시퀀스의 요소를 포함하는 배열이 포함됩니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.ToArrayAsync(System.Threading.CancellationToken)">
      <summary>비동기적으로 열거하여 쿼리에서 배열을 만듭니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.작업 결과에는 입력 시퀀스의 요소를 포함하는 배열이 포함됩니다.</returns>
      <param name="cancellationToken">작업이 완료되기를 기다리는 동안 관찰할 <see cref="T:System.Threading.CancellationToken" />입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.ToDictionaryAsync``1(System.Func{`0,``0})">
      <summary>지정된 키 선택기 함수에 따라 비동기적으로 열거하여 쿼리에서 <see cref="T:System.Collections.Generic.Dictionary`2" />를 만듭니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.작업 결과에는 선택된 키 및 값을 포함하는 <see cref="T:System.Collections.Generic.Dictionary`2" />가 포함됩니다.</returns>
      <param name="keySelector">각 요소에서 키를 추출하는 함수입니다.</param>
      <typeparam name="TKey">
        <paramref name="keySelector" />에서 반환하는 키의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.ToDictionaryAsync``1(System.Func{`0,``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>지정된 키 선택기 함수와 비교자에 따라 비동기적으로 열거하여 쿼리에서 <see cref="T:System.Collections.Generic.Dictionary`2" />를 만듭니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.작업 결과에는 선택된 키 및 값을 포함하는 <see cref="T:System.Collections.Generic.Dictionary`2" />가 포함됩니다.</returns>
      <param name="keySelector">각 요소에서 키를 추출하는 함수입니다.</param>
      <param name="comparer">키를 비교할 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />입니다.</param>
      <typeparam name="TKey">
        <paramref name="keySelector" />에서 반환하는 키의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.ToDictionaryAsync``1(System.Func{`0,``0},System.Collections.Generic.IEqualityComparer{``0},System.Threading.CancellationToken)">
      <summary>지정된 키 선택기 함수와 비교자에 따라 비동기적으로 열거하여 쿼리에서 <see cref="T:System.Collections.Generic.Dictionary`2" />를 만듭니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.작업 결과에는 선택된 키 및 값을 포함하는 <see cref="T:System.Collections.Generic.Dictionary`2" />가 포함됩니다.</returns>
      <param name="keySelector">각 요소에서 키를 추출하는 함수입니다.</param>
      <param name="comparer">키를 비교할 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />입니다.</param>
      <param name="cancellationToken">작업이 완료되기를 기다리는 동안 관찰할 <see cref="T:System.Threading.CancellationToken" />입니다.</param>
      <typeparam name="TKey">
        <paramref name="keySelector" />에서 반환하는 키의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.ToDictionaryAsync``2(System.Func{`0,``0},System.Func{`0,``1})">
      <summary>지정된 키 선택기 및 요소 선택기 함수에 따라 비동기적으로 열거하여 쿼리에서 <see cref="T:System.Collections.Generic.Dictionary`2" />를 만듭니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.작업 결과에는 쿼리에서 선택된 <paramref name="TResult" /> 형식의 값을 포함하는 <see cref="T:System.Collections.Generic.Dictionary`2" />가 포함됩니다.</returns>
      <param name="keySelector">각 요소에서 키를 추출하는 함수입니다.</param>
      <param name="elementSelector">각 요소에서 결과 요소 값을 생성하는 변환 함수입니다.</param>
      <typeparam name="TKey">
        <paramref name="keySelector" />에서 반환하는 키의 형식입니다.</typeparam>
      <typeparam name="TResult">
        <paramref name="elementSelector" />에서 반환하는 값의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.ToDictionaryAsync``2(System.Func{`0,``0},System.Func{`0,``1},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>지정된 키 선택기 함수, 비교자 및 요소 선택기 함수에 따라 비동기적으로 열거하여 쿼리에서 <see cref="T:System.Collections.Generic.Dictionary`2" />를 만듭니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.작업 결과에는 입력 시퀀스에서 선택된 <paramref name="TResult" /> 형식의 값을 포함하는 <see cref="T:System.Collections.Generic.Dictionary`2" />가 포함됩니다.</returns>
      <param name="keySelector">각 요소에서 키를 추출하는 함수입니다.</param>
      <param name="elementSelector">각 요소에서 결과 요소 값을 생성하는 변환 함수입니다.</param>
      <param name="comparer">키를 비교할 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />입니다.</param>
      <typeparam name="TKey">
        <paramref name="keySelector" />에서 반환하는 키의 형식입니다.</typeparam>
      <typeparam name="TResult">
        <paramref name="elementSelector" />에서 반환하는 값의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.ToDictionaryAsync``2(System.Func{`0,``0},System.Func{`0,``1},System.Collections.Generic.IEqualityComparer{``0},System.Threading.CancellationToken)">
      <summary>지정된 키 선택기 함수, 비교자 및 요소 선택기 함수에 따라 비동기적으로 열거하여 쿼리에서 <see cref="T:System.Collections.Generic.Dictionary`2" />를 만듭니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.작업 결과에는 입력 시퀀스에서 선택된 <see cref="T:System.Collections.Generic.Dictionary`2" /> 형식의 값을 포함하는 <paramref name="TResult" />가 포함됩니다.</returns>
      <param name="keySelector">각 요소에서 키를 추출하는 함수입니다.</param>
      <param name="elementSelector">각 요소에서 결과 요소 값을 생성하는 변환 함수입니다.</param>
      <param name="comparer">키를 비교할 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />입니다.</param>
      <param name="cancellationToken">작업이 완료되기를 기다리는 동안 관찰할 <see cref="T:System.Threading.CancellationToken" />입니다.</param>
      <typeparam name="TKey">
        <paramref name="keySelector" />에서 반환하는 키의 형식입니다.</typeparam>
      <typeparam name="TResult">
        <paramref name="elementSelector" />에서 반환하는 값의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.ToDictionaryAsync``2(System.Func{`0,``0},System.Func{`0,``1},System.Threading.CancellationToken)">
      <summary>지정된 키 선택기 및 요소 선택기 함수에 따라 비동기적으로 열거하여 쿼리에서 <see cref="T:System.Collections.Generic.Dictionary`2" />를 만듭니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.작업 결과에는 쿼리에서 선택된 <see cref="T:System.Collections.Generic.Dictionary`2" /> 형식의 값을 포함하는 <paramref name="TResult" />가 포함됩니다.</returns>
      <param name="keySelector">각 요소에서 키를 추출하는 함수입니다.</param>
      <param name="elementSelector">각 요소에서 결과 요소 값을 생성하는 변환 함수입니다.</param>
      <param name="cancellationToken">작업이 완료되기를 기다리는 동안 관찰할 <see cref="T:System.Threading.CancellationToken" />입니다.</param>
      <typeparam name="TKey">
        <paramref name="keySelector" />에서 반환하는 키의 형식입니다.</typeparam>
      <typeparam name="TResult">
        <paramref name="elementSelector" />에서 반환하는 값의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.ToDictionaryAsync``1(System.Func{`0,``0},System.Threading.CancellationToken)">
      <summary>지정된 키 선택기 함수에 따라 비동기적으로 열거하여 쿼리에서 <see cref="T:System.Collections.Generic.Dictionary`2" />를 만듭니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.작업 결과에는 선택된 키 및 값을 포함하는 <see cref="T:System.Collections.Generic.Dictionary`2" />가 포함됩니다.</returns>
      <param name="keySelector">각 요소에서 키를 추출하는 함수입니다.</param>
      <param name="cancellationToken">작업이 완료되기를 기다리는 동안 관찰할 <see cref="T:System.Threading.CancellationToken" />입니다.</param>
      <typeparam name="TKey">
        <paramref name="keySelector" />에서 반환하는 키의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.ToListAsync">
      <summary>비동기적으로 열거하여 쿼리에서 <see cref="T:System.Collections.Generic.List`1" />를 만듭니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.작업 결과에는 입력 시퀀스의 요소를 포함하는 <see cref="T:System.Collections.Generic.List`1" />가 포함됩니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.ToListAsync(System.Threading.CancellationToken)">
      <summary>비동기적으로 열거하여 쿼리에서 <see cref="T:System.Collections.Generic.List`1" />를 만듭니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.작업 결과에는 입력 시퀀스의 요소를 포함하는 <see cref="T:System.Collections.Generic.List`1" />가 포함됩니다.</returns>
      <param name="cancellationToken">작업이 완료되기를 기다리는 동안 관찰할 <see cref="T:System.Threading.CancellationToken" />입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.ToString">
      <summary>쿼리가 만들어졌을 때 설정된 SQL 문자열을 포함하는 <see cref="T:System.String" />을 반환합니다.매개 변수는 포함되지 않습니다.</summary>
      <returns>이 인스턴스를 나타내는 <see cref="T:System.String" />입니다.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbReferenceEntry">
      <summary>
        <see cref="T:System.Data.Entity.Infrastructure.DbReferenceEntry`2" /> 클래스의 제네릭이 아닌 버전입니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbReferenceEntry.Cast``2">
      <summary>동일한 제네릭 <see cref="T:System.Data.Entity.Infrastructure.DbReferenceEntry`2" /> 개체를 반환합니다.</summary>
      <returns>동일한 제네릭 개체입니다.</returns>
      <typeparam name="TEntity">멤버가 선언되는 엔터티의 형식입니다.</typeparam>
      <typeparam name="TProperty">속성의 형식입니다.</typeparam>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbReferenceEntry.CurrentValue">
      <summary>탐색 속성의 현재 값을 가져오거나 설정합니다.현재 값은 탐색 속성이 참조하는 엔터티입니다.</summary>
      <returns>현재 값입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbReferenceEntry.EntityEntry">
      <summary>이 탐색 속성이 속하는 <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" />입니다.</summary>
      <returns>이 탐색 속성을 소유하는 엔터티의 항목입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbReferenceEntry.IsLoaded">
      <summary>엔터티가 데이터베이스에서 로드되었는지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
      <returns>해당 엔터티가 로드되었거나 IsLoaded가 명시적으로 true로 설정된 경우 true이고, 그렇지 않으면 false입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbReferenceEntry.Load">
      <summary>데이터베이스에서 엔터티를 로드합니다.엔터티가 컨텍스트에 이미 있으면 데이터베이스의 값으로 덮어쓰이지 않습니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbReferenceEntry.LoadAsync">
      <summary>데이터베이스에서 엔터티를 비동기적으로 로드합니다.엔터티가 컨텍스트에 이미 있으면 데이터베이스의 값으로 덮어쓰이지 않습니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbReferenceEntry.LoadAsync(System.Threading.CancellationToken)">
      <summary>데이터베이스에서 엔터티를 비동기적으로 로드합니다.엔터티가 컨텍스트에 이미 있으면 데이터베이스의 값으로 덮어쓰이지 않습니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.</returns>
      <param name="cancellationToken">작업이 완료되기를 기다리는 동안 관찰할 <see cref="T:System.Threading.CancellationToken" />입니다.</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbReferenceEntry.Name">
      <summary>속성 이름을 가져옵니다.</summary>
      <returns>속성 이름입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbReferenceEntry.Query">
      <summary>데이터베이스에서 이 엔터티를 로드하는 데 사용되는 쿼리를 반환합니다.반환된 쿼리는 LINQ를 통해 수정하여 데이터베이스에서 필터링이나 작업을 수행할 수 있습니다.</summary>
      <returns>엔터티에 대한 쿼리입니다.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbReferenceEntry`2">
      <summary>이 클래스의 인스턴스는 <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" />의 Reference 메서드에서 반환되고 엔터티의 참조 탐색 속성에 대해 수행할 로드와 같은 작업을 허용합니다.</summary>
      <typeparam name="TEntity">이 속성이 속하는 엔터티의 형식입니다.</typeparam>
      <typeparam name="TProperty">속성의 형식입니다.</typeparam>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbReferenceEntry`2.CurrentValue">
      <summary>탐색 속성의 현재 값을 가져오거나 설정합니다.현재 값은 탐색 속성이 참조하는 엔터티입니다.</summary>
      <returns>현재 값입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbReferenceEntry`2.EntityEntry">
      <summary>이 탐색 속성이 속하는 <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" />입니다.</summary>
      <returns>이 탐색 속성을 소유하는 엔터티의 항목입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbReferenceEntry`2.IsLoaded">
      <summary>엔터티가 데이터베이스에서 로드되었는지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
      <returns>해당 엔터티가 로드되었거나 IsLoaded가 명시적으로 true로 설정된 경우 true이고, 그렇지 않으면 false입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbReferenceEntry`2.Load">
      <summary>데이터베이스에서 엔터티를 로드합니다.엔터티가 컨텍스트에 이미 있으면 데이터베이스의 값으로 덮어쓰이지 않습니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbReferenceEntry`2.LoadAsync">
      <summary>데이터베이스에서 엔터티를 비동기적으로 로드합니다.엔터티가 컨텍스트에 이미 있으면 데이터베이스의 값으로 덮어쓰이지 않습니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbReferenceEntry`2.LoadAsync(System.Threading.CancellationToken)">
      <summary>데이터베이스에서 엔터티를 비동기적으로 로드합니다.엔터티가 컨텍스트에 이미 있으면 데이터베이스의 값으로 덮어쓰이지 않습니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.</returns>
      <param name="cancellationToken">작업이 완료되기를 기다리는 동안 관찰할 <see cref="T:System.Threading.CancellationToken" />입니다.</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbReferenceEntry`2.Name">
      <summary>속성 이름을 가져옵니다.</summary>
      <returns>속성 이름입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbReferenceEntry`2.op_Implicit(System.Data.Entity.Infrastructure.DbReferenceEntry{`0,`1})~System.Data.Entity.Infrastructure.DbReferenceEntry">
      <summary>이 개체가 나타내는 탐색 속성에 대한 제네릭이 아닌 <see cref="T:System.Data.Entity.Infrastructure.DbReferenceEntry" /> 클래스의 새 인스턴스를 반환합니다.</summary>
      <returns>제네릭이 아닌 버전입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbReferenceEntry`2.Query">
      <summary>데이터베이스에서 이 엔터티를 로드하는 데 사용되는 쿼리를 반환합니다.반환된 쿼리는 LINQ를 통해 수정하여 데이터베이스에서 필터링이나 작업을 수행할 수 있습니다.</summary>
      <returns>엔터티에 대한 쿼리입니다.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbSqlQuery">
      <summary>
        <see cref="T:System.Data.Entity.DbContext" />에서 만들어지고 해당 컨텍스트의 연결을 사용하여 실행되는 엔터티에 대한 SQL 쿼리를 나타냅니다.이 클래스의 인스턴스는 엔터티 형식에 대한 <see cref="T:System.Data.Entity.DbSet" /> 인스턴스에서 가져옵니다.쿼리는 이 개체가 만들어질 때 실행되지 않고 foreach 등을 사용하여 이 개체가 열거될 때마다 실행됩니다.비엔터티에 대한 SQL 쿼리는 <see cref="M:System.Data.Entity.Database.SqlQuery(System.Type,System.String,System.Object[])" />를 사용하여 만들어집니다.이 클래스의 제네릭 버전은 <see cref="T:System.Data.Entity.Infrastructure.DbSqlQuery`1" />를 참조하십시오.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery.#ctor">
      <summary>
        <see cref="M:System.Data.Entity.DbSet.SqlQuery(System.String,System.Object[])" />에 대한 Test Double로 사용되는 파생 형식의 생성자로부터 호출될 때 <see cref="T:System.Data.Entity.Infrastructure.DbSqlQuery" />의 인스턴스를 만듭니다.Test Double에서 사용되는 메서드 및 속성은 기본 구현이 작동하지 않는 AsNoTracking 및 AsStreaming을 제외하고 Test Double에서 구현되어야 합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery.AsNoTracking">
      <summary>쿼리의 결과가 연결된 <see cref="T:System.Data.Entity.DbContext" />에서 추적되지 않을 새 쿼리를 반환합니다.</summary>
      <returns>NoTracking이 적용된 새 쿼리입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery.AsStreaming">
      <summary>버퍼링 대신 결과를 스트리밍할 새 쿼리를 반환합니다.</summary>
      <returns>AsStreaming이 적용된 새 쿼리입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery.Equals(System.Object)"></member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery.GetHashCode"></member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery.GetType"></member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery.ToString"></member>
    <member name="T:System.Data.Entity.Infrastructure.DbSqlQuery`1">
      <summary>
        <see cref="T:System.Data.Entity.DbContext" />에서 만들어지고 해당 컨텍스트의 연결을 사용하여 실행되는 엔터티에 대한 SQL 쿼리를 나타냅니다.이 클래스의 인스턴스는 엔터티 형식에 대한 <see cref="T:System.Data.Entity.DbSet`1" /> 인스턴스에서 가져옵니다.쿼리는 이 개체가 만들어질 때 실행되지 않고 foreach 등을 사용하여 이 개체가 열거될 때마다 실행됩니다.비엔터티에 대한 SQL 쿼리는 <see cref="M:System.Data.Entity.Database.SqlQuery``1(System.String,System.Object[])" />를 사용하여 만들어집니다.이 클래스의 제네릭이 아닌 버전은 <see cref="T:System.Data.Entity.Infrastructure.DbSqlQuery" />를 참조하십시오.</summary>
      <typeparam name="TEntity"></typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery`1.#ctor">
      <summary>
        <see cref="M:System.Data.Entity.DbSet`1.SqlQuery(System.String,System.Object[])" />에 대한 Test Double로 사용되는 파생 형식의 생성자로부터 호출될 때 <see cref="T:System.Data.Entity.Infrastructure.DbSqlQuery`1" />의 인스턴스를 만듭니다.Test Double에서 사용되는 메서드 및 속성은 기본 구현이 작동하지 않는 AsNoTracking 및 AsStreaming을 제외하고 Test Double에서 구현되어야 합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery`1.AsNoTracking">
      <summary>반환된 엔터티가 <see cref="T:System.Data.Entity.DbContext" />에서 캐시되지 않을 새 쿼리를 반환합니다.</summary>
      <returns>NoTracking이 적용된 새 쿼리입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery`1.AsStreaming">
      <summary>버퍼링 대신 결과를 스트리밍할 새 쿼리를 반환합니다.</summary>
      <returns>AsStreaming이 적용된 새 쿼리입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery`1.Equals(System.Object)"></member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery`1.GetHashCode"></member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery`1.GetType"></member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery`1.ToString"></member>
    <member name="T:System.Data.Entity.Infrastructure.DbUpdateConcurrencyException">
      <summary>엔터티에 대한 SaveChanges로 인해 데이터베이스 업데이트가 발생할 것으로 예상되었지만 실제로는 영향을 받은 데이터베이스의 행이 없을 때 <see cref="T:System.Data.Entity.DbContext" />에 의해 throw되는 예외입니다.이는 일반적으로 데이터베이스가 동시에 업데이트되어 일치할 것으로 예상된 동시성 토큰이 실제로는 일치하지 않았음을 나타냅니다.이 예외에 의해 참조되는 상태 항목은 보안 때문에 serialize되지 않으며 serialization 후 상태 항목에 대한 액세스는 null을 반환합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbUpdateConcurrencyException.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.Infrastructure.DbUpdateException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbUpdateConcurrencyException.#ctor(System.String)">
      <summary>
        <see cref="T:System.Data.Entity.Infrastructure.DbUpdateException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="message">메시지입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbUpdateConcurrencyException.#ctor(System.String,System.Exception)">
      <summary>
        <see cref="T:System.Data.Entity.Infrastructure.DbUpdateException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="message">메시지입니다.</param>
      <param name="innerException">내부 예외입니다.</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbUpdateException">
      <summary>데이터베이스에 대한 변경 내용을 저장하지 못한 경우 <see cref="T:System.Data.Entity.DbContext" />에서 throw되는 예외입니다.이 예외에 의해 참조되는 상태 항목은 보안 때문에 serialize되지 않으며 serialization 후 상태 항목에 대한 액세스는 null을 반환합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbUpdateException.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.Infrastructure.DbUpdateException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbUpdateException.#ctor(System.String)">
      <summary>
        <see cref="T:System.Data.Entity.Infrastructure.DbUpdateException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="message">메시지입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbUpdateException.#ctor(System.String,System.Exception)">
      <summary>
        <see cref="T:System.Data.Entity.Infrastructure.DbUpdateException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="message">메시지입니다.</param>
      <param name="innerException">내부 예외입니다.</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbUpdateException.Entries">
      <summary>데이터베이스에 저장할 수 없는 엔터티를 나타내는 <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" /> 개체를 가져옵니다.</summary>
      <returns>저장할 수 없는 엔터티를 나타내는 항목입니다.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DefaultExecutionStrategy">
      <summary>작업이 실패하는 경우 작업을 다시 시도하지 않는 <see cref="T:System.Data.Entity.Infrastructure.IDbExecutionStrategy" />입니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DefaultExecutionStrategy.#ctor"></member>
    <member name="M:System.Data.Entity.Infrastructure.DefaultExecutionStrategy.Execute(System.Action)">
      <summary>지정된 작업을 한 번 실행합니다.</summary>
      <param name="operation">결과를 반환하지 않는 실행 가능한 작업을 나타내는 대리자입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DefaultExecutionStrategy.Execute``1(System.Func{``0})">
      <summary>지정된 작업을 한 번 실행하고 결과를 반환합니다.</summary>
      <returns>작업의 결과입니다.</returns>
      <param name="operation">
        <paramref name="TResult" /> 형식의 결과를 반환하는 실행 가능한 작업을 나타내는 대리자입니다.</param>
      <typeparam name="TResult">
        <paramref name="operation" />의 반환 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DefaultExecutionStrategy.ExecuteAsync``1(System.Func{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)">
      <summary>실패 시 다시 시도하지 않고 지정된 비동기 작업을 한 번 실행합니다.</summary>
      <returns>원래 작업이 성공적으로 완료되면 완료되기 위해 실행될 작업입니다.</returns>
      <param name="operation">시작된 작업을 반환하는 함수입니다.</param>
      <param name="cancellationToken">이미 진행 중이거나 이미 성공적으로 완료된 작업이 아닌 재시도 작업을 취소하는 데 사용되는 취소 토큰입니다.</param>
      <typeparam name="TResult">
        <paramref name="operation" />에서 반환된 <see cref="T:System.Threading.Tasks.Task`1" />의 결과 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DefaultExecutionStrategy.ExecuteAsync(System.Func{System.Threading.Tasks.Task},System.Threading.CancellationToken)">
      <summary>실패 시 다시 시도하지 않고 지정된 비동기 작업을 한 번 실행합니다.</summary>
      <returns>원래 작업이 성공적으로 완료되면 완료되기 위해 실행될 작업입니다.</returns>
      <param name="operation">시작된 작업을 반환하는 함수입니다.</param>
      <param name="cancellationToken">이미 진행 중이거나 이미 성공적으로 완료된 작업이 아닌 재시도 작업을 취소하는 데 사용되는 취소 토큰입니다.</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DefaultExecutionStrategy.RetriesOnFailure">
      <summary>
        <see cref="T:System.Data.Entity.Infrastructure.DefaultExecutionStrategy" />가 실패 후 실행을 다시 시도하지 않음을 나타내려면 false를 반환합니다.</summary>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DefaultManifestTokenResolver">
      <summary>기본 공급자를 사용하여 매니페스트 토큰을 가져오는 <see cref="T:System.Data.Entity.Infrastructure.IManifestTokenResolver" />의 기본 구현입니다.여러 쿼리를 방지하기 위해 이 구현에서는 <see cref="T:System.Data.Common.DbConnection" /> 인스턴스, <see cref="P:System.Data.Common.DbConnection.DataSource" /> 속성 및 <see cref="P:System.Data.Common.DbConnection.Database" /> 속성의 실제 형식을 기반으로 하는 캐싱을 사용합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DefaultManifestTokenResolver.#ctor"></member>
    <member name="M:System.Data.Entity.Infrastructure.DefaultManifestTokenResolver.ResolveManifestToken(System.Data.Common.DbConnection)"></member>
    <member name="T:System.Data.Entity.Infrastructure.EdmMetadata">
      <summary>EDM에 대한 메타데이터를 데이터베이스에 저장하는 데 사용되는 엔터티를 나타냅니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.EdmMetadata.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.Infrastructure.EdmMetadata" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.EdmMetadata.Id">
      <summary>현재 항상 1인 메타데이터 엔터티의 ID를 가져오거나 설정합니다.</summary>
      <returns>ID입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.EdmMetadata.ModelHash">
      <summary>데이터베이스가 모델에서 만들어진 후 모델이 변경되었는지 여부를 확인하는 데 사용되는 모델 해시를 가져오거나 설정합니다.</summary>
      <returns>모델 해시입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.EdmMetadata.TryGetModelHash(System.Data.Entity.DbContext)">
      <summary>지정된 컨텍스트에 대해 Code First에서 계산된 모델 해시를 가져오려고 시도합니다.컨텍스트가 Code First 모드에서 사용되지 않는 경우 이 메서드는 null을 반환합니다.</summary>
      <returns>해시 문자열입니다.</returns>
      <param name="context">컨텍스트입니다.</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.EdmxWriter">
      <summary>Code First에서 EDMX 형식으로 만들어진 엔터티 데이터 모델에 액세스하는 데 사용되는 메서드를 포함합니다.일반적으로 이러한 메서드는 Code First에서 내부적으로 만드는 모델을 조회해야 하는 경우 디버깅에 사용됩니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.EdmxWriter.WriteEdmx(System.Data.Entity.DbContext,System.Xml.XmlWriter)">
      <summary>지정된 컨텍스트에서 Code First를 사용하고 결과 엔터티 데이터 모델을 지정된 기록기에 EDMX 형식으로 기록합니다.이 메서드는 Code First를 사용하고 내부적으로 모델을 만드는 컨텍스트 인스턴스에서만 사용할 수 있습니다.Database First 또는 Model First를 사용하여 만들어진 컨텍스트, 기존의 <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" />를 사용하여 만들어진 컨텍스트 또는 기존의 <see cref="T:System.Data.Entity.Infrastructure.DbCompiledModel" />을 사용하여 만들어진 컨텍스트에는 이 메서드를 사용할 수 없습니다.</summary>
      <param name="context">컨텍스트입니다.</param>
      <param name="writer">기록기입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.EdmxWriter.WriteEdmx(System.Data.Entity.Infrastructure.DbModel,System.Xml.XmlWriter)">
      <summary>지정된 <see cref="T:System.Data.Entity.Infrastructure.DbModel" />이 나타내는 엔터티 데이터 모델을 지정된 기록기에 EDMX 형식으로 기록합니다.</summary>
      <param name="model">EDM을 나타내는 개체입니다.</param>
      <param name="writer">기록기입니다.</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.ExecutionStrategyKey">
      <summary>
        <see cref="T:System.Func`1" />를 확인하는 데 사용되는 키입니다.연결 문자열에 지정된 데이터베이스 서버 이름과 ADO.NET 공급자 고정 이름으로 구성되어 있습니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.ExecutionStrategyKey.#ctor(System.String,System.String)">
      <summary>의 새 인스턴스를 초기화합니다.<see cref="T:System.Data.Entity.Infrastructure.ExecutionStrategyKey" /></summary>
      <param name="providerInvariantName">이 실행 전략이 사용될 ADO.NET 연결의 형식을 나타내는 ADO.NET 공급자 고정 이름입니다.</param>
      <param name="serverName">연결 문자열의 서버 이름과 일치하는 문자열입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.ExecutionStrategyKey.Equals(System.Object)">
      <summary>지정된 개체가 이 키와 같은지 여부를 확인합니다.</summary>
      <returns>지정된 개체가 이 키와 같으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="obj">비교할 개체입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.ExecutionStrategyKey.GetHashCode">
      <summary>현재 인스턴스의 해시 코드를 반환합니다.</summary>
      <returns>현재 인스턴스에 대한 해시 코드입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.ExecutionStrategyKey.ProviderInvariantName">
      <summary>이 실행 전략이 사용될 ADO.NET 연결의 형식을 나타내는 ADO.NET 공급자 고정 이름입니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.ExecutionStrategyKey.ServerName">
      <summary>연결 문자열의 서버 이름과 일치하는 문자열입니다.</summary>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.IDbAsyncEnumerable">
      <summary>요소가 비동기적으로 검색될 수 있도록 하는 <see cref="T:System.Collections.IEnumerable" /> 인터페이스의 비동기 버전입니다.이 인터페이스는 Entity Framework 쿼리와 상호 작용하는 데 사용되며 사용자 지정 클래스에 의해 구현되지 않아야 합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.IDbAsyncEnumerable.GetAsyncEnumerator">
      <summary>시퀀스를 비동기적으로 열거하는 데 사용할 수 있는 열거자를 가져옵니다.</summary>
      <returns>시퀀스에 대한 비동기 열거에 사용할 열거자입니다.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.IDbAsyncEnumerable`1">
      <summary>열거 가능한 시퀀스의 요소가 비동기적으로 검색될 수 있도록 하는 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 인터페이스의 비동기 버전입니다.이 인터페이스는 Entity Framework 쿼리와 상호 작용하는 데 사용되며 사용자 지정 클래스에 의해 구현되지 않아야 합니다.</summary>
      <typeparam name="T">열거할 개체의 형식입니다.이 유형 매개 변수는 공변(covariant)입니다. 즉, 지정한 유형 또는 보다 많이 파생된 모든 유형을 사용할 수 있습니다. 공변(covariance) 및 반공변(contravariance)에 대한 자세한 내용은 을(를) 참조하십시오.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.IDbAsyncEnumerable`1.GetAsyncEnumerator">
      <summary>시퀀스를 비동기적으로 열거하는 데 사용할 수 있는 열거자를 가져옵니다.</summary>
      <returns>시퀀스에 대한 비동기 열거에 사용할 열거자입니다.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.IDbAsyncEnumerator">
      <summary>요소가 비동기적으로 검색될 수 있도록 하는 <see cref="T:System.Collections.IEnumerator" /> 인터페이스의 비동기 버전입니다.이 인터페이스는 Entity Framework 쿼리와 상호 작용하는 데 사용되며 사용자 지정 클래스에 의해 구현되지 않아야 합니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.IDbAsyncEnumerator.Current">
      <summary>반복의 현재 요소를 가져옵니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.IDbAsyncEnumerator.MoveNextAsync(System.Threading.CancellationToken)">
      <summary>시퀀스의 다음 요소로 열거자를 이동하여 결과를 비동기적으로 반환합니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.작업 결과에는 열거자가 다음 요소로 이동한 경우 true가 포함되고 열거자가 시퀀스의 끝을 지난 경우 false가 포함됩니다.</returns>
      <param name="cancellationToken">작업이 완료되기를 기다리는 동안 관찰할 <see cref="T:System.Threading.CancellationToken" />입니다.</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.IDbAsyncEnumerator`1">
      <summary>요소가 비동기적으로 검색될 수 있도록 하는 <see cref="T:System.Collections.Generic.IEnumerator`1" /> 인터페이스의 비동기 버전입니다.이 인터페이스는 Entity Framework 쿼리와 상호 작용하는 데 사용되며 사용자 지정 클래스에 의해 구현되지 않아야 합니다.</summary>
      <typeparam name="T">열거할 개체의 형식입니다.이 유형 매개 변수는 공변(covariant)입니다. 즉, 지정한 유형 또는 보다 많이 파생된 모든 유형을 사용할 수 있습니다. 공변(covariance) 및 반공변(contravariance)에 대한 자세한 내용은 을(를) 참조하십시오.</typeparam>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.IDbAsyncEnumerator`1.Current">
      <summary>반복의 현재 요소를 가져옵니다.</summary>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider">
      <summary>
        <see cref="T:System.Linq.IQueryable" /> 개체가 설명하는 쿼리를 만들고 비동기적으로 실행하는 메서드를 정의합니다.이 인터페이스는 Entity Framework 쿼리와 상호 작용하는 데 사용되며 사용자 지정 클래스에 의해 구현되지 않아야 합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider.ExecuteAsync``1(System.Linq.Expressions.Expression,System.Threading.CancellationToken)">
      <summary>지정된 식 트리가 나타내는 강력한 형식의 쿼리를 비동기적으로 실행합니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.작업 결과에는 지정된 쿼리를 실행한 결과 값이 포함됩니다.</returns>
      <param name="expression">LINQ 쿼리를 나타내는 식 트리입니다.</param>
      <param name="cancellationToken">작업이 완료되기를 기다리는 동안 관찰할 <see cref="T:System.Threading.CancellationToken" />입니다.</param>
      <typeparam name="TResult">쿼리를 실행한 결과 값의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider.ExecuteAsync(System.Linq.Expressions.Expression,System.Threading.CancellationToken)">
      <summary>지정된 식 트리가 나타내는 쿼리를 비동기적으로 실행합니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.작업 결과에는 지정된 쿼리를 실행한 결과 값이 포함됩니다.</returns>
      <param name="expression">LINQ 쿼리를 나타내는 식 트리입니다.</param>
      <param name="cancellationToken">작업이 완료되기를 기다리는 동안 관찰할 <see cref="T:System.Threading.CancellationToken" />입니다.</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.IDbConnectionFactory">
      <summary>이 인터페이스의 구현은 지정된 데이터베이스 이름을 기반으로 특정 유형의 데이터베이스 서버에 대한 DbConnection 개체를 만드는 데 사용됩니다.인스턴스가 <see cref="T:System.Data.Entity.Database" /> 클래스에 대해 설정되어 연결 정보 없이 만들어지거나 데이터베이스 이름 또는 연결 문자열만 사용하여 만들어진 모든 DbContext가 기본적으로 특정 유형의 데이터베이스 서버를 사용하도록 합니다.이 인터페이스의 두 가지 구현이 제공됩니다. 그 중에서 <see cref="T:System.Data.Entity.Infrastructure.SqlConnectionFactory" />는 Express Edition을 비롯한 Microsoft SQL Server에 대한 연결을 만드는 데 사용되고,<see cref="T:System.Data.Entity.Infrastructure.SqlCeConnectionFactory" />는 Microsoft SQL Server Compact Edition에 대한 연결을 만드는 데 사용됩니다.필요에 따라 다른 데이터베이스 서버에 대한 다른 구현을 추가할 수 있습니다.구현은 여러 스레드에서 동시에 액세스할 수 있으므로 스레드로부터 안전하거나 변경할 수 없어야 합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.IDbConnectionFactory.CreateConnection(System.String)">
      <summary>지정된 데이터베이스 이름 또는 연결 문자열을 기반으로 연결을 만듭니다.</summary>
      <returns>초기화된 DbConnection입니다.</returns>
      <param name="nameOrConnectionString">데이터베이스 이름 또는 연결 문자열입니다.</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.IDbContextFactory`1">
      <summary>파생된 <see cref="T:System.Data.Entity.DbContext" /> 인스턴스를 만들기 위한 팩터리입니다.공용 기본 생성자가 없는 컨텍스트 형식에 대한 디자인 타임 서비스를 사용하도록 설정하려면 이 인터페이스를 구현합니다.디자인 타임에 모델 렌더링 및 DDL 생성과 같은 특정 디자인 타임 환경을 사용하도록 설정하기 위해 파생된 <see cref="T:System.Data.Entity.DbContext" /> 인스턴스를 만들 수 있습니다.공용 기본 생성자가 없는 파생된 <see cref="T:System.Data.Entity.DbContext" /> 형식에 대한 디자인 타임 인스턴스화를 사용하도록 설정하려면 이 인터페이스를 구현합니다.디자인 타임 서비스는 파생된 <see cref="T:System.Data.Entity.DbContext" /> 형식과 동일한 어셈블리에 있는 이 인터페이스의 구현을 자동으로 검색합니다.</summary>
      <typeparam name="TContext">이 유형 매개 변수는 공변(covariant)입니다. 즉, 지정한 유형 또는 보다 많이 파생된 모든 유형을 사용할 수 있습니다. 공변(covariance) 및 반공변(contravariance)에 대한 자세한 내용은 을(를) 참조하십시오.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.IDbContextFactory`1.Create">
      <summary>파생된 <see cref="T:System.Data.Entity.DbContext" /> 형식의 새 인스턴스를 만듭니다.</summary>
      <returns>TContext의 인스턴스입니다.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.IDbExecutionStrategy">
      <summary>데이터베이스에 대해 명령이나 쿼리를 실행하는 데 사용되는 전략으로, 실패 시 다시 시도하는 논리를 포함할 수 있습니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.IDbExecutionStrategy.Execute(System.Action)">
      <summary>지정된 작업을 실행합니다.</summary>
      <param name="operation">결과를 반환하지 않는 실행 가능한 작업을 나타내는 대리자입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.IDbExecutionStrategy.Execute``1(System.Func{``0})">
      <summary>지정된 작업을 실행하고 결과를 반환합니다.</summary>
      <returns>작업의 결과입니다.</returns>
      <param name="operation">
        <paramref name="TResult" /> 형식의 결과를 반환하는 실행 가능한 작업을 나타내는 대리자입니다.</param>
      <typeparam name="TResult">
        <paramref name="operation" />의 반환 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.IDbExecutionStrategy.ExecuteAsync``1(System.Func{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)">
      <summary>지정된 비동기 작업을 실행하고 결과를 반환합니다.</summary>
      <returns>원래 작업이 성공적으로 완료되는 경우(처음으로 또는 일시적인 실패의 재시도 후) 완료되기 위해 실행될 작업입니다.작업이 일시적이 아닌 오류로 실패하거나 재시도 제한에 도달한 경우 반환되는 작업에서 오류가 발생하게 되며 예외가 관찰되어야 합니다.</returns>
      <param name="operation">
        <paramref name="TResult" /> 형식의 시작된 작업을 반환하는 함수입니다.</param>
      <param name="cancellationToken">이미 진행 중이거나 이미 성공적으로 완료된 작업이 아닌 재시도 작업을 취소하는 데 사용되는 취소 토큰입니다.</param>
      <typeparam name="TResult">
        <paramref name="operation" />에서 반환된 <see cref="T:System.Threading.Tasks.Task`1" />의 결과 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.IDbExecutionStrategy.ExecuteAsync(System.Func{System.Threading.Tasks.Task},System.Threading.CancellationToken)">
      <summary>지정된 비동기 작업을 실행합니다.</summary>
      <returns>원래 작업이 성공적으로 완료되는 경우(처음으로 또는 일시적인 실패의 재시도 후) 완료되기 위해 실행될 작업입니다.작업이 일시적이 아닌 오류로 실패하거나 재시도 제한에 도달한 경우 반환되는 작업에서 오류가 발생하게 되며 예외가 관찰되어야 합니다.</returns>
      <param name="operation">시작된 작업을 반환하는 함수입니다.</param>
      <param name="cancellationToken">이미 진행 중이거나 이미 성공적으로 완료된 작업이 아닌 재시도 작업을 취소하는 데 사용되는 취소 토큰입니다.</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.IDbExecutionStrategy.RetriesOnFailure">
      <summary>이 <see cref="T:System.Data.Entity.Infrastructure.IDbExecutionStrategy" />가 실패 후 실행을 다시 시도할 수 있는지 여부를 나타냅니다.</summary>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.IDbModelCacheKey">
      <summary>메모리에 로드된 Entity Framework 모델을 고유하게 식별하는 키 값을 나타냅니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.IDbModelCacheKey.Equals(System.Object)">
      <summary>현재 캐시된 모델 키가 지정한 캐시된 모델 키와 같은지 여부를 확인합니다.</summary>
      <returns>현재 캐시된 모델 키가 지정한 캐시된 모델 키와 같으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="other">현재 캐시된 모델 키와 비교할 캐시된 모델 키입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.IDbModelCacheKey.GetHashCode">
      <summary>이 캐시된 모델 키의 해시 함수를 반환합니다.</summary>
      <returns>이 캐시된 모델 키의 해시 함수입니다.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.IDbModelCacheKeyProvider">
      <summary>캐시에 이미 생성된 모델을 조회하는 데 사용되는 키를 계산하기 위해 사용자 지정 논리를 사용할 수 있도록 컨텍스트에 대한 인터페이스를 구현합니다.이 인터페이스를 사용하면 동일한 AppDomain에서 여러 모델과 사용할 수 있는 단일 컨텍스트 형식 또는 동일한 모델을 사용하는 다중 컨텍스트 형식을 지정할 수 있습니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.IDbModelCacheKeyProvider.CacheKey">
      <summary>공급자에 연결된 캐시된 키를 가져옵니다.</summary>
      <returns>공급자에 연결된 캐시된 키입니다.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.IDbProviderFactoryResolver">
      <summary>지정된 <see cref="T:System.Data.Common.DbConnection" />에서 올바른 <see cref="T:System.Data.Common.DbProviderFactory" />를 가져오기 위한 서비스입니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.IDbProviderFactoryResolver.ResolveProviderFactory(System.Data.Common.DbConnection)">
      <summary>지정된 연결에 대한 <see cref="T:System.Data.Common.DbProviderFactory" />를 반환합니다.</summary>
      <returns>연결의 공급자 팩터리입니다.</returns>
      <param name="connection">연결입니다.</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.IManifestTokenResolver">
      <summary>연결이 제공된 경우 공급자 매니페스트 토큰을 가져오기 위한 서비스입니다.<see cref="T:System.Data.Entity.Infrastructure.DefaultManifestTokenResolver" /> 클래스는 기본적으로 사용되며 기본 공급자를 사용하여 토큰을 가져옵니다. 이때 연결을 열어야 하는 경우가 많습니다.토큰을 반환하기 위해 연결의 정보를 사용할 수 있는 <see cref="T:System.Data.Entity.DbConfiguration" />에 <see cref="T:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver" />를 추가하여 다른 구현을 대신 사용할 수 있습니다.예를 들어 연결이 SQL Server 2008 데이터베이스를 가리키는 것으로 알려진 경우 연결을 열지 않고 "2008"이 반환될 수 있습니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.IManifestTokenResolver.ResolveManifestToken(System.Data.Common.DbConnection)">
      <summary>지정된 연결에 사용할 매니페스트 토큰을 반환합니다.</summary>
      <returns>사용할 매니페스트 토큰입니다.</returns>
      <param name="connection">매니페스트 토큰이 필요한 연결입니다.</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.IncludeMetadataConvention">
      <summary>이 <see cref="T:System.Data.Entity.DbModelBuilder" /> 규칙은 DbModelBuilder가 모델을 빌드할 때 모델에 대한 메타데이터를 포함하도록 합니다.<see cref="T:System.Data.Entity.DbContext" />는 규칙에 따라 모델을 만들 때 DbModelBuilder가 사용하는 규칙 목록에 이 규칙을 추가합니다.이에 따라 DbContext가 데이터베이스를 만드는 데 사용되는 경우 모델 메타데이터가 데이터베이스에 기록됩니다.이 메타데이터를 사용하여 모델이 마지막으로 데이터베이스에 대해 사용된 이후 변경되었는지 여부를 신속하게 확인할 수 있습니다.이 규칙을 <see cref="T:System.Data.Entity.DbModelBuilder" /> 규칙에서 제거하려면 파생된 DbContext 클래스에서 OnModelCreating 메서드를 재정의하면 됩니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.IncludeMetadataConvention.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.Infrastructure.IncludeMetadataConvention" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.IObjectContextAdapter">
      <summary>
        <see cref="P:System.Data.Entity.Infrastructure.IObjectContextAdapter.ObjectContext" /> 인스턴스를 제공할 수 있는 개체에서 구현되는 인터페이스입니다.<see cref="T:System.Data.Entity.DbContext" /> 클래스는 기본 ObjectContext에 액세스할 수 있도록 하기 위해 이 인터페이스를 구현합니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.IObjectContextAdapter.ObjectContext">
      <summary>개체 컨텍스트를 가져옵니다.</summary>
      <returns>개체 컨텍스트입니다.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.IProviderInvariantName">
      <summary>
        <see cref="T:System.Data.Common.DbProviderFactory" />에서 공급자 고정 이름을 확인할 때 <see cref="T:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver" /> 및 <see cref="T:System.Data.Entity.DbConfiguration" />에서 사용됩니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.IProviderInvariantName.Name">
      <summary>공급자의 이름을 가져옵니다.</summary>
      <returns>공급자의 이름입니다.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.LocalDbConnectionFactory">
      <summary>이 클래스의 인스턴스는 지정된 데이터베이스 이름 또는 연결 문자열을 기반으로 SQL Server LocalDb의 DbConnection 개체를 만드는 데 사용됩니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.LocalDbConnectionFactory.#ctor(System.String)">
      <summary>지정된 LocalDb 버전에 대해 연결 팩터리의 새 인스턴스를 만듭니다.SQL Server 2012 LocalDb의 경우 "v11.0"을 사용합니다.</summary>
      <param name="localDbVersion">사용할 LocalDb 버전입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.LocalDbConnectionFactory.#ctor(System.String,System.String)">
      <summary>지정된 LocalDb 버전에 대해 연결 팩터리의 새 인스턴스를 만듭니다.SQL Server 2012 LocalDb의 경우 "v11.0"을 사용합니다.</summary>
      <param name="localDbVersion">사용할 LocalDb 버전입니다.</param>
      <param name="baseConnectionString">'Initial Catalog', 'Data Source' 및 'AttachDbFilename' 이외의 데이터베이스에 대한 옵션에 사용할 연결 문자열입니다.'Initial Catalog' 및 'AttachDbFilename'은 CreateConnection을 호출할 때 데이터베이스를 기반으로 이 문자열 앞에 표시됩니다.'Data Source'는 LocalDbVersion 인수를 기반으로 설정됩니다.</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.LocalDbConnectionFactory.BaseConnectionString">
      <summary>'Initial Catalog', 'Data Source' 및 'AttachDbFilename' 이외의 데이터베이스에 대한 옵션에 사용할 연결 문자열입니다.'Initial Catalog' 및 'AttachDbFilename'은 CreateConnection을 호출할 때 데이터베이스를 기반으로 이 문자열 앞에 표시됩니다.'Data Source'는 LocalDbVersion 인수를 기반으로 설정됩니다.기본값은 'Integrated Security=True;'입니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.LocalDbConnectionFactory.CreateConnection(System.String)">
      <summary>지정된 데이터베이스 이름 또는 연결 문자열을 기반으로 SQL Server LocalDb의 연결을 만듭니다.지정된 문자열에 '=' 문자가 포함되어 있으면 전체 연결 문자열로 취급되고, 그렇지 않으면 데이터베이스 이름으로만 취급됩니다.</summary>
      <returns>초기화된 DbConnection입니다.</returns>
      <param name="nameOrConnectionString">데이터베이스 이름 또는 연결 문자열입니다.</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.ModelContainerConvention">
      <summary>이 <see cref="T:System.Data.Entity.DbModelBuilder" /> 규칙에서는 파생 클래스 <see cref="T:System.Data.Entity.DbContext" />의 이름을 Code First에서 빌드된 개념적 모델의 컨테이너로 사용합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.ModelContainerConvention.Apply(System.Data.Entity.Core.Metadata.Edm.EntityContainer,System.Data.Entity.Infrastructure.DbModel)">
      <summary>지정된 모델에 규칙을 적용합니다.</summary>
      <param name="item">규칙을 적용할 컨테이너입니다.</param>
      <param name="model">모델입니다.</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.ModelNamespaceConvention">
      <summary>이 <see cref="T:System.Data.Entity.DbModelBuilder" /> 규칙에서는 파생 클래스 <see cref="T:System.Data.Entity.DbContext" />의 네임스페이스를 Code First에서 빌드된 개념적 모델의 네임스페이스로 사용합니다.</summary>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.ObjectReferenceEqualityComparer">
      <summary>참조 일치를 사용하여 개체를 비교합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.ObjectReferenceEqualityComparer.#ctor"></member>
    <member name="M:System.Data.Entity.Infrastructure.ObjectReferenceEqualityComparer.System#Collections#Generic#IEqualityComparer{T}#Equals(System.Object,System.Object)"></member>
    <member name="M:System.Data.Entity.Infrastructure.ObjectReferenceEqualityComparer.System#Collections#Generic#IEqualityComparer{T}#GetHashCode(System.Object)"></member>
    <member name="T:System.Data.Entity.Infrastructure.ReplacementDbQueryWrapper`1">
      <summary>이 클래스의 인스턴스는 <see cref="T:System.Data.Entity.Infrastructure.DbQuery`1" /> 및 <see cref="T:System.Data.Entity.Infrastructure.DbQuery" />에 대한 참조를 바꾸기 위해 식 트리에 삽입되는 <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" />의 상수 식을 만드는 데 내부적으로 사용됩니다.</summary>
      <typeparam name="TElement">요소의 형식입니다.</typeparam>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.ReplacementDbQueryWrapper`1.Query">
      <summary>LINQ 식 트리에서 예상되는 public 속성입니다.</summary>
      <returns>쿼리입니다.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.RetryLimitExceededException">
      <summary>구성된 횟수만큼 다시 시도된 후 작업이 다시 실패한 경우 throw되는 예외입니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.RetryLimitExceededException.#ctor">
      <summary>오류 메시지 없이 <see cref="T:System.Data.Entity.Infrastructure.RetryLimitExceededException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.RetryLimitExceededException.#ctor(System.String)">
      <summary>지정된 오류 메시지를 사용하여 <see cref="T:System.Data.Entity.Infrastructure.RetryLimitExceededException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="message">오류를 설명하는 메시지입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.RetryLimitExceededException.#ctor(System.String,System.Exception)">
      <summary>
        <see cref="T:System.Data.Entity.Infrastructure.RetryLimitExceededException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="message">오류를 설명하는 메시지입니다.</param>
      <param name="innerException">현재 예외의 원인인 예외입니다.</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.SqlCeConnectionFactory">
      <summary>이 클래스의 인스턴스는 지정된 데이터베이스 이름 또는 연결 문자열을 기반으로 SQL Server Compact Edition의 DbConnection 개체를 만드는 데 사용됩니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.SqlCeConnectionFactory.#ctor(System.String)">
      <summary>비어 있는(기본) DatabaseDirectory 및 BaseConnectionString 속성을 사용하여 새 연결 팩터리를 만듭니다.</summary>
      <param name="providerInvariantName">사용해야 하는 SQL Server Compact Edition의 버전을 지정하는 공급자 고정 이름입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.SqlCeConnectionFactory.#ctor(System.String,System.String,System.String)">
      <summary>지정된 DatabaseDirectory 및 BaseConnectionString 속성을 사용하여 새 연결 팩터리를 만듭니다.</summary>
      <param name="providerInvariantName">사용해야 하는 SQL Server Compact Edition의 버전을 지정하는 공급자 고정 이름입니다.</param>
      <param name="databaseDirectory">SQL Server Compact Edition에서 데이터베이스 파일을 만들거나 읽을 때 사용하는 파일 이름을 형성하기 위해 데이터베이스 이름 앞에 추가할 경로입니다.빈 문자열을 사용하면 SQL Server Compact Edition에서 데이터베이스 파일 위치에 대한 기본값을 사용합니다.</param>
      <param name="baseConnectionString">'Data Source' 이외의 데이터베이스에 대한 옵션에 사용할 연결 문자열입니다.CreateConnection이 호출될 때 데이터베이스 이름을 기반으로 Data Source가 이 문자열 앞에 추가됩니다.</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.SqlCeConnectionFactory.BaseConnectionString">
      <summary>'Data Source' 이외의 데이터베이스에 대한 옵션에 사용할 연결 문자열입니다.CreateConnection이 호출될 때 데이터베이스 이름을 기반으로 Data Source가 이 문자열 앞에 추가됩니다.기본값은 빈 문자열로, 다른 옵션이 사용되지 않음을 의미합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.SqlCeConnectionFactory.CreateConnection(System.String)">
      <summary>지정된 데이터베이스 이름 또는 연결 문자열을 기반으로 SQL Server Compact Edition의 연결을 만듭니다.지정된 문자열에 '=' 문자가 포함되어 있으면 전체 연결 문자열로 취급되고, 그렇지 않으면 데이터베이스 이름으로만 취급됩니다.</summary>
      <returns>초기화된 DbConnection입니다.</returns>
      <param name="nameOrConnectionString">데이터베이스 이름 또는 연결 문자열입니다.</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.SqlCeConnectionFactory.DatabaseDirectory">
      <summary>SQL Server Compact Edition에서 데이터베이스 파일을 만들거나 읽을 때 사용하는 파일 이름을 형성하기 위해 데이터베이스 이름 앞에 추가할 경로입니다.기본값은 "|DataDirectory|"로, 파일이 지정된 데이터 디렉터리에 배치됨을 의미합니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.SqlCeConnectionFactory.ProviderInvariantName">
      <summary>사용해야 하는 SQL Server Compact Edition의 버전을 지정하는 공급자 고정 이름입니다.</summary>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.SqlConnectionFactory">
      <summary>이 클래스의 인스턴스는 지정된 데이터베이스 이름 또는 연결 문자열을 기반으로 SQL Server의 DbConnection 개체를 만드는 데 사용됩니다.기본적으로'.\SQLEXPRESS'에 대한 연결이 만들어집니다.이를 변경하려면 팩터리 인스턴스를 생성할 때 기본 연결 문자열을 변경하면 됩니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.SqlConnectionFactory.#ctor">
      <summary>'Data Source=.\SQLEXPRESS; Integrated Security=True; MultipleActiveResultSets=True;'라는기본 BaseConnectionString 속성을 사용하여 새 연결 팩터리를 만듭니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.SqlConnectionFactory.#ctor(System.String)">
      <summary>지정된 BaseConnectionString 속성을 사용하여 새 연결 팩터리를 만듭니다.</summary>
      <param name="baseConnectionString">'Initial Catalog' 이외의 데이터베이스에 대한 옵션에 사용할 연결 문자열입니다.CreateConnection이 호출될 때 데이터베이스 이름을 기반으로 'Initial Catalog'가 이 문자열 앞에 추가됩니다.</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.SqlConnectionFactory.BaseConnectionString">
      <summary>'Initial Catalog' 이외의 데이터베이스에 대한 옵션에 사용할 연결 문자열입니다.CreateConnection이 호출될 때 데이터베이스 이름을 기반으로 'Initial Catalog'가 이 문자열 앞에 추가됩니다.기본값은'Data Source=.\SQLEXPRESS; Integrated Security=True;'입니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.SqlConnectionFactory.CreateConnection(System.String)">
      <summary>지정된 데이터베이스 이름 또는 연결 문자열을 기반으로 SQL Server의 연결을 만듭니다.지정된 문자열에 '=' 문자가 포함되어 있으면 전체 연결 문자열로 취급되고, 그렇지 않으면 데이터베이스 이름으로만 취급됩니다.</summary>
      <returns>초기화된 DbConnection입니다.</returns>
      <param name="nameOrConnectionString">데이터베이스 이름 또는 연결 문자열입니다.</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.SuppressDbSetInitializationAttribute">
      <summary>이 특성은 전체 파생 클래스 <see cref="T:System.Data.Entity.DbContext" /> 또는 이 클래스의 개별 <see cref="T:System.Data.Entity.DbSet`1" /> 또는 <see cref="T:System.Data.Entity.IDbSet`1" /> 속성에 적용될 수 있습니다.적용될 때 검색된 모든 <see cref="T:System.Data.Entity.DbSet`1" /> 또는 <see cref="T:System.Data.Entity.IDbSet`1" /> 속성이 모델에 포함되지만 자동으로 초기화되지는 않습니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.SuppressDbSetInitializationAttribute.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.Infrastructure.SuppressDbSetInitializationAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.UnintentionalCodeFirstException">
      <summary>컨텍스트가 Database First 또는 Model First 모드에서 <see cref="T:System.Data.Entity.DbContext" /> 템플릿을 통해 생성되고 Code First 모드에서 사용되는 경우 throw됩니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.UnintentionalCodeFirstException.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.Infrastructure.UnintentionalCodeFirstException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.UnintentionalCodeFirstException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <see cref="T:System.Data.Entity.Infrastructure.UnintentionalCodeFirstException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="info">serialize된 개체 데이터를 보유하는 개체입니다.</param>
      <param name="context">원본 또는 대상에 대한 컨텍스트 정보입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.UnintentionalCodeFirstException.#ctor(System.String)">
      <summary>
        <see cref="T:System.Data.Entity.Infrastructure.UnintentionalCodeFirstException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="message">메시지입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.UnintentionalCodeFirstException.#ctor(System.String,System.Exception)">
      <summary>
        <see cref="T:System.Data.Entity.Infrastructure.UnintentionalCodeFirstException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="message">메시지입니다.</param>
      <param name="innerException">내부 예외입니다.</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DependencyResolution.DbConfigurationLoadedEventArgs">
      <summary>
        <see cref="E:System.Data.Entity.DbConfiguration.Loaded" /> 이벤트 처리기에 전달된 이벤트 인수입니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.DbConfigurationLoadedEventArgs.AddDefaultResolver(System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver)">
      <summary>이 메서드를 호출하여 Entity Framework에 필요한 종속성 확인에 사용되는 확인자의 책임 연쇄에 <see cref="T:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver" /> 인스턴스를 추가합니다.AddDependencyResolver 메서드와 달리, 이 메서드는 다른 모든 확인자가 확인하지 못한 종속성을 확인할 경우에만 사용되도록 확인자를 책임 연쇄의 맨 마지막에 배치합니다.</summary>
      <param name="resolver">추가할 확인자입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.DbConfigurationLoadedEventArgs.AddDependencyResolver(System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver,System.Boolean)">
      <summary>이 메서드를 호출하여 Entity Framework에 필요한 종속성 확인에 사용되는 확인자의 책임 연쇄에 <see cref="T:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver" /> 인스턴스를 추가합니다.</summary>
      <param name="resolver">추가할 확인자입니다.</param>
      <param name="overrideConfigFile">True인 경우 추가된 확인자가 구성 파일의 설정보다 우선합니다.</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DependencyResolution.DbConfigurationLoadedEventArgs.DependencyResolver">
      <summary>잠그려고 하는 <see cref="T:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver" />의 스냅숏을 반환합니다.이 개체의 GetService 메서드를 사용하여 등록된 서비스를 가져옵니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.DbConfigurationLoadedEventArgs.Equals(System.Object)"></member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.DbConfigurationLoadedEventArgs.GetHashCode"></member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.DbConfigurationLoadedEventArgs.GetType"></member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.DbConfigurationLoadedEventArgs.ReplaceService``1(System.Func{``0,System.Object,``0})">
      <summary>잠그려고 하는 구성에 래핑 확인자를 추가합니다.래핑 확인자는 연쇄적으로 각 확인자에 의해 반환되는 서비스를 가로채어서 동일한 형식의 다른 서비스로 래핑하거나 대체하는 확인자입니다.</summary>
      <param name="serviceInterceptor">래핑되지 않은 서비스와 키를 가져가 래핑되거나 대체된 서비스를 반환하는 대리자입니다.</param>
      <typeparam name="TService">래핑 또는 대체할 서비스 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.DbConfigurationLoadedEventArgs.ToString"></member>
    <member name="T:System.Data.Entity.Infrastructure.DependencyResolution.DbDependencyResolverExtensions">
      <summary>이름 없이 제네릭 형식 매개 변수를 사용하여 <see cref="M:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver.GetService(System.Type,System.Object)" /> 메서드를 호출하는 확장 메서드입니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.DbDependencyResolverExtensions.GetService``1(System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver)">
      <summary>형식 인수 및 이름 인수로 각각 메서드의 제네릭 형식과 null을 전달하여 <see cref="M:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver.GetService(System.Type,System.Object)" />를 호출합니다.</summary>
      <returns>확인된 종속성 또는 확인자가 확인하지 못한 경우 null입니다.</returns>
      <param name="resolver">사용할 확인자입니다.</param>
      <typeparam name="T">확인할 계약 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.DbDependencyResolverExtensions.GetService``1(System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver,System.Object)">
      <summary>메서드의 제네릭 형식과 지정된 이름을 인수로 전달하여 <see cref="M:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver.GetService(System.Type,System.Object)" />를 호출합니다.</summary>
      <returns>확인된 종속성 또는 확인자가 확인하지 못한 경우 null입니다.</returns>
      <param name="resolver">사용할 확인자입니다.</param>
      <param name="key">확인할 종속성의 키입니다.</param>
      <typeparam name="T">확인할 계약 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.DbDependencyResolverExtensions.GetService(System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver,System.Type)">
      <summary>지정된 형식 인수를 전달하고 이름 인수에 대해 null을 사용하여 <see cref="M:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver.GetService(System.Type,System.Object)" />를 호출합니다.</summary>
      <returns>확인된 종속성 또는 확인자가 확인하지 못한 경우 null입니다.</returns>
      <param name="resolver">사용할 확인자입니다.</param>
      <param name="type">확인할 계약 형식입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.DbDependencyResolverExtensions.GetServices``1(System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver)">
      <summary>형식 인수 및 이름 인수로 각각 메서드의 제네릭 형식과 null을 전달하여 <see cref="M:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver.GetServices(System.Type,System.Object)" />를 호출합니다.</summary>
      <returns>모든 확인된 종속성이거나, 확인된 서비스가 없는 경우 <see cref="T:System.Collections.Generic.IEnumerable`1" />입니다.</returns>
      <param name="resolver">사용할 확인자입니다.</param>
      <typeparam name="T">확인할 계약 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.DbDependencyResolverExtensions.GetServices``1(System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver,System.Object)">
      <summary>메서드의 제네릭 형식과 지정된 이름을 인수로 전달하여 <see cref="M:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver.GetServices(System.Type,System.Object)" />를 호출합니다.</summary>
      <returns>모든 확인된 종속성이거나, 확인된 서비스가 없는 경우 <see cref="T:System.Collections.Generic.IEnumerable`1" />입니다.</returns>
      <param name="resolver">사용할 확인자입니다.</param>
      <param name="key">확인할 종속성의 키입니다.</param>
      <typeparam name="T">확인할 계약 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.DbDependencyResolverExtensions.GetServices(System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver,System.Type)">
      <summary>지정된 형식 인수를 전달하고 이름 인수에 대해 null을 사용하여 <see cref="M:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver.GetServices(System.Type,System.Object)" />를 호출합니다.</summary>
      <returns>모든 확인된 종속성이거나, 확인된 서비스가 없는 경우 <see cref="T:System.Collections.Generic.IEnumerable`1" />입니다.</returns>
      <param name="resolver">사용할 확인자입니다.</param>
      <param name="type">확인할 계약 형식입니다.</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DependencyResolution.ExecutionStrategyResolver`1">
      <summary>
        <see cref="T:System.Data.Entity.Infrastructure.IDbExecutionStrategy" /> 팩터리 확인에 사용되는 <see cref="T:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver" /> 구현입니다.</summary>
      <typeparam name="T">확인되는 실행 전략의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.ExecutionStrategyResolver`1.#ctor(System.String,System.String,System.Func{`0})">
      <summary>
        <see cref="T:System.Data.Entity.Infrastructure.DependencyResolution.ExecutionStrategyResolver`1" />의 새 인스턴스를 초기화합니다.</summary>
      <param name="providerInvariantName">이 실행 전략이 사용될 ADO.NET 연결의 형식을 나타내는 ADO.NET 공급자 고정 이름입니다.</param>
      <param name="serverName">연결 문자열의 서버 이름과 일치하는 문자열입니다.null을 지정하면 모든 서버 이름과 일치합니다.</param>
      <param name="getExecutionStrategy">실행 전략의 새 인스턴스를 반환하는 함수입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.ExecutionStrategyResolver`1.GetService(System.Type,System.Object)">
      <summary>지정된 형식이 <see cref="T:System.Func`1" />이면 이 확인자는 사용할 서비스를 반환하고, 그렇지 않으면 null을 반환합니다.지정된 형식이 Func{IExecutionStrategy}이면 키는 <see cref="T:System.Data.Entity.Infrastructure.ExecutionStrategyKey" />여야 합니다.</summary>
      <returns>
        <see cref="T:System.Func`1" />이거나 null입니다.</returns>
      <param name="type">확인할 서비스 형식입니다.</param>
      <param name="key">반환할 서비스를 결정하는 데 사용되는 키입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.ExecutionStrategyResolver`1.GetServices(System.Type,System.Object)">
      <summary>지정된 형식이 <see cref="T:System.Func`1" />이면 이 확인자는 사용할 서비스를 반환하고, 그렇지 않으면 빈 열거형을 반환합니다.지정된 형식이 Func{IExecutionStrategy}이면 키는 <see cref="T:System.Data.Entity.Infrastructure.ExecutionStrategyKey" />여야 합니다.</summary>
      <returns>
        <see cref="T:System.Func`1" />의 열거형이거나 빈 열거형입니다.</returns>
      <param name="type">확인할 서비스 형식입니다.</param>
      <param name="key">반환할 서비스를 결정하는 데 사용되는 키입니다.</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver">
      <summary>이 인터페이스는 직접 또는 외부 컨테이너를 사용하여 종속성을 확인할 수 있는 모든 개체에 의해 구현됩니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver.GetService(System.Type,System.Object)">
      <summary>지정된 계약 형식 및 선택적으로 지정된 키에 대한 종속성 확인을 시도합니다.확인자가 종속성을 확인하지 못할 경우 예외를 발생시키는 대신 null을 반환해야 합니다.그렇게 하면 종속성이 확인될 때까지 여러 확인자에 종속성 확인을 요청할 수 있는 책임 연쇄 패턴으로 확인자를 사용할 수 있습니다.</summary>
      <returns>확인된 종속성으로, 지정된 계약 형식의 인스턴스이거나 종속성이 확인되지 않은 경우 null이 됩니다.</returns>
      <param name="type">확인될 종속성을 정의하는 인터페이스 또는 추상 기본 클래스입니다.반환된 개체는 이 형식의 인스턴스가 됩니다.</param>
      <param name="key">필요할 경우 확인할 종속성의 키.키에 의해 식별되지 않는 종속성에 대해서는 null이 될 수 있습니다.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver.GetServices(System.Type,System.Object)">
      <summary>지정된 계약 형식 및 선택적으로 지정된 키에 대한 종속성 확인을 시도합니다.확인자가 종속성을 확인하지 못할 경우 예외를 발생시키는 대신 빈 열거형을 반환해야 합니다.이 메서드는 지정된 형식 및 키 조합에 대한 모든 등록된 서비스를 반환하는 점에서 <see cref="M:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver.GetService(System.Type,System.Object)" />와 다릅니다.</summary>
      <returns>종속성을 확인하는 모든 서비스(지정된 계약 형식의 인스턴스여야 함)이거나, 종속성을 확인하지 못한 경우 빈 열거형입니다.</returns>
      <param name="type">확인될 종속성을 정의하는 인터페이스 또는 추상 기본 클래스입니다.반환된 모든 개체는 이 형식의 인스턴스가 됩니다.</param>
      <param name="key">필요할 경우 확인할 종속성의 키.키에 의해 식별되지 않는 종속성에 대해서는 null이 될 수 있습니다.</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DependencyResolution.SingletonDependencyResolver`1">
      <summary>항상 같은 인스턴스를 반환하기 위해 종속성을 확인하도록 <see cref="T:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver" />를 구현합니다.</summary>
      <typeparam name="T">확인할 종속성에 대한 계약을 정의하는 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.SingletonDependencyResolver`1.#ctor(`0)">
      <summary>Get 메서드에 전달된 키에 상관없이 계약 형식에 대해 지정된 인스턴스를 반환하는 새 확인자를 생성합니다.</summary>
      <param name="singletonInstance">반환할 인스턴스입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.SingletonDependencyResolver`1.#ctor(`0,System.Func{System.Object,System.Boolean})">
      <summary>지정된 조건자에 따라 Get 메서드에 전달된 키와 지정된 키가 정확히 일치할 경우 계약 형식에 대해 지정된 인스턴스를 반환하는 새 확인자를 생성합니다.</summary>
      <param name="singletonInstance">반환할 인스턴스입니다.</param>
      <param name="keyPredicate">키 개체를 가져와서 일치하는 경우에만 true를 반환하는 조건자입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.SingletonDependencyResolver`1.#ctor(`0,System.Object)">
      <summary>Get 메서드에 전달된 키와 지정된 키가 정확히 일치할 경우 계약 형식에 대해 지정된 인스턴스를 반환하는 새 확인자를 생성합니다.</summary>
      <param name="singletonInstance">반환할 인스턴스입니다.</param>
      <param name="key">필요할 경우 확인할 종속성의 키.키에 의해 식별되지 않는 종속성에 대해서는 null이 될 수 있습니다.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.SingletonDependencyResolver`1.GetService(System.Type,System.Object)"></member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.SingletonDependencyResolver`1.GetServices(System.Type,System.Object)"></member>
    <member name="T:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter"></member>
    <member name="M:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter.#ctor(System.Action{System.String})"></member>
    <member name="M:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter.#ctor(System.Data.Entity.DbContext,System.Action{System.String})"></member>
    <member name="P:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter.Context"></member>
    <member name="M:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter.Equals(System.Object)"></member>
    <member name="M:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter.Executed``1(System.Data.Common.DbCommand,System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext{``0})">
      <typeparam name="TResult"></typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter.Executing``1(System.Data.Common.DbCommand,System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext{``0})">
      <typeparam name="TResult"></typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter.GetHashCode"></member>
    <member name="M:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter.GetType"></member>
    <member name="M:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter.LogCommand``1(System.Data.Common.DbCommand,System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext{``0})">
      <typeparam name="TResult"></typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter.LogParameter``1(System.Data.Common.DbCommand,System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext{``0},System.Data.Common.DbParameter)">
      <typeparam name="TResult"></typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter.LogResult``1(System.Data.Common.DbCommand,System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext{``0})">
      <typeparam name="TResult"></typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter.NonQueryExecuted(System.Data.Common.DbCommand,System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext{System.Int32})"></member>
    <member name="M:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter.NonQueryExecuting(System.Data.Common.DbCommand,System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext{System.Int32})"></member>
    <member name="M:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter.ReaderExecuted(System.Data.Common.DbCommand,System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext{System.Data.Common.DbDataReader})"></member>
    <member name="M:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter.ReaderExecuting(System.Data.Common.DbCommand,System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext{System.Data.Common.DbDataReader})"></member>
    <member name="M:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter.ScalarExecuted(System.Data.Common.DbCommand,System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext{System.Object})"></member>
    <member name="M:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter.ScalarExecuting(System.Data.Common.DbCommand,System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext{System.Object})"></member>
    <member name="P:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter.Stopwatch"></member>
    <member name="M:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter.ToString"></member>
    <member name="M:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter.Write(System.String)"></member>
    <member name="T:System.Data.Entity.Infrastructure.Interception.DbCommandDispatcher"></member>
    <member name="M:System.Data.Entity.Infrastructure.Interception.DbCommandDispatcher.Equals(System.Object)"></member>
    <member name="M:System.Data.Entity.Infrastructure.Interception.DbCommandDispatcher.GetHashCode"></member>
    <member name="M:System.Data.Entity.Infrastructure.Interception.DbCommandDispatcher.GetType"></member>
    <member name="M:System.Data.Entity.Infrastructure.Interception.DbCommandDispatcher.NonQuery(System.Data.Common.DbCommand,System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext)"></member>
    <member name="M:System.Data.Entity.Infrastructure.Interception.DbCommandDispatcher.NonQueryAsync(System.Data.Common.DbCommand,System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext,System.Threading.CancellationToken)"></member>
    <member name="M:System.Data.Entity.Infrastructure.Interception.DbCommandDispatcher.Reader(System.Data.Common.DbCommand,System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext)"></member>
    <member name="M:System.Data.Entity.Infrastructure.Interception.DbCommandDispatcher.ReaderAsync(System.Data.Common.DbCommand,System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext,System.Threading.CancellationToken)"></member>
    <member name="M:System.Data.Entity.Infrastructure.Interception.DbCommandDispatcher.Scalar(System.Data.Common.DbCommand,System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext)"></member>
    <member name="M:System.Data.Entity.Infrastructure.Interception.DbCommandDispatcher.ScalarAsync(System.Data.Common.DbCommand,System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext,System.Threading.CancellationToken)"></member>
    <member name="M:System.Data.Entity.Infrastructure.Interception.DbCommandDispatcher.ToString"></member>
    <member name="T:System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext"></member>
    <member name="M:System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext.#ctor"></member>
    <member name="M:System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext.#ctor(System.Data.Entity.Infrastructure.Interception.DbInterceptionContext)"></member>
    <member name="M:System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext.AsAsync"></member>
    <member name="M:System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext.Clone"></member>
    <member name="P:System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext.CommandBehavior"></member>
    <member name="M:System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext.Equals(System.Object)"></member>
    <member name="M:System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext.GetHashCode"></member>
    <member name="M:System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext.GetType"></member>
    <member name="M:System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext.ToString"></member>
    <member name="M:System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext.WithCommandBehavior(System.Data.CommandBehavior)"></member>
    <member name="M:System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext.WithDbContext(System.Data.Entity.DbContext)"></member>
    <member name="M:System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext.WithObjectContext(System.Data.Entity.Core.Objects.ObjectContext)"></member>
    <member name="T:System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext`1">
      <typeparam name="TResult"></typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext`1.#ctor"></member>
    <member name="M:System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext`1.#ctor(System.Data.Entity.Infrastructure.Interception.DbInterceptionContext)"></member>
    <member name="M:System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext`1.AsAsync"></member>
    <member name="M:System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext`1.Clone"></member>
    <member name="M:System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext`1.Equals(System.Object)"></member>
    <member name="P:System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext`1.Exception"></member>
    <member name="M:System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext`1.GetHashCode"></member>
    <member name="M:System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext`1.GetType"></member>
    <member name="P:System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext`1.IsExecutionSuppressed"></member>
    <member name="P:System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext`1.OriginalException"></member>
    <member name="P:System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext`1.OriginalResult"></member>
    <member name="P:System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext`1.Result"></member>
    <member name="M:System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext`1.SuppressExecution"></member>
    <member name="P:System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext`1.TaskStatus"></member>
    <member name="M:System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext`1.ToString"></member>
    <member name="M:System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext`1.WithCommandBehavior(System.Data.CommandBehavior)"></member>
    <member name="M:System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext`1.WithDbContext(System.Data.Entity.DbContext)"></member>
    <member name="M:System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext`1.WithObjectContext(System.Data.Entity.Core.Objects.ObjectContext)"></member>
    <member name="T:System.Data.Entity.Infrastructure.Interception.DbCommandInterceptor"></member>
    <member name="M:System.Data.Entity.Infrastructure.Interception.DbCommandInterceptor.#ctor"></member>
    <member name="M:System.Data.Entity.Infrastructure.Interception.DbCommandInterceptor.NonQueryExecuted(System.Data.Common.DbCommand,System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext{System.Int32})"></member>
    <member name="M:System.Data.Entity.Infrastructure.Interception.DbCommandInterceptor.NonQueryExecuting(System.Data.Common.DbCommand,System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext{System.Int32})"></member>
    <member name="M:System.Data.Entity.Infrastructure.Interception.DbCommandInterceptor.ReaderExecuted(System.Data.Common.DbCommand,System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext{System.Data.Common.DbDataReader})"></member>
    <member name="M:System.Data.Entity.Infrastructure.Interception.DbCommandInterceptor.ReaderExecuting(System.Data.Common.DbCommand,System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext{System.Data.Common.DbDataReader})"></member>
    <member name="M:System.Data.Entity.Infrastructure.Interception.DbCommandInterceptor.ScalarExecuted(System.Data.Common.DbCommand,System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext{System.Object})"></member>
    <member name="M:System.Data.Entity.Infrastructure.Interception.DbCommandInterceptor.ScalarExecuting(System.Data.Common.DbCommand,System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext{System.Object})"></member>
    <member name="T:System.Data.Entity.Infrastructure.Interception.DbCommandTreeInterceptionContext"></member>
    <member name="M:System.Data.Entity.Infrastructure.Interception.DbCommandTreeInterceptionContext.#ctor"></member>
    <member name="M:System.Data.Entity.Infrastructure.Interception.DbCommandTreeInterceptionContext.#ctor(System.Data.Entity.Infrastructure.Interception.DbInterceptionContext)"></member>
    <member name="M:System.Data.Entity.Infrastructure.Interception.DbCommandTreeInterceptionContext.AsAsync"></member>
    <member name="M:System.Data.Entity.Infrastructure.Interception.DbCommandTreeInterceptionContext.Clone"></member>
    <member name="M:System.Data.Entity.Infrastructure.Interception.DbCommandTreeInterceptionContext.Equals(System.Object)"></member>
    <member name="M:System.Data.Entity.Infrastructure.Interception.DbCommandTreeInterceptionContext.GetHashCode"></member>
    <member name="M:System.Data.Entity.Infrastructure.Interception.DbCommandTreeInterceptionContext.GetType"></member>
    <member name="P:System.Data.Entity.Infrastructure.Interception.DbCommandTreeInterceptionContext.OriginalResult"></member>
    <member name="P:System.Data.Entity.Infrastructure.Interception.DbCommandTreeInterceptionContext.Result"></member>
    <member name="M:System.Data.Entity.Infrastructure.Interception.DbCommandTreeInterceptionContext.ToString"></member>
    <member name="M:System.Data.Entity.Infrastructure.Interception.DbCommandTreeInterceptionContext.WithDbContext(System.Data.Entity.DbContext)"></member>
    <member name="M:System.Data.Entity.Infrastructure.Interception.DbCommandTreeInterceptionContext.WithObjectContext(System.Data.Entity.Core.Objects.ObjectContext)"></member>
    <member name="T:System.Data.Entity.Infrastructure.Interception.DbDispatchers"></member>
    <member name="P:System.Data.Entity.Infrastructure.Interception.DbDispatchers.Command"></member>
    <member name="M:System.Data.Entity.Infrastructure.Interception.DbDispatchers.Equals(System.Object)"></member>
    <member name="M:System.Data.Entity.Infrastructure.Interception.DbDispatchers.GetHashCode"></member>
    <member name="M:System.Data.Entity.Infrastructure.Interception.DbDispatchers.GetType"></member>
    <member name="M:System.Data.Entity.Infrastructure.Interception.DbDispatchers.ToString"></member>
    <member name="T:System.Data.Entity.Infrastructure.Interception.DbInterception"></member>
    <member name="M:System.Data.Entity.Infrastructure.Interception.DbInterception.Add(System.Data.Entity.Infrastructure.Interception.IDbInterceptor)"></member>
    <member name="P:System.Data.Entity.Infrastructure.Interception.DbInterception.Dispatch"></member>
    <member name="M:System.Data.Entity.Infrastructure.Interception.DbInterception.Remove(System.Data.Entity.Infrastructure.Interception.IDbInterceptor)"></member>
    <member name="T:System.Data.Entity.Infrastructure.Interception.DbInterceptionContext"></member>
    <member name="M:System.Data.Entity.Infrastructure.Interception.DbInterceptionContext.#ctor"></member>
    <member name="M:System.Data.Entity.Infrastructure.Interception.DbInterceptionContext.#ctor(System.Data.Entity.Infrastructure.Interception.DbInterceptionContext)"></member>
    <member name="M:System.Data.Entity.Infrastructure.Interception.DbInterceptionContext.AsAsync"></member>
    <member name="M:System.Data.Entity.Infrastructure.Interception.DbInterceptionContext.Clone"></member>
    <member name="P:System.Data.Entity.Infrastructure.Interception.DbInterceptionContext.DbContexts"></member>
    <member name="M:System.Data.Entity.Infrastructure.Interception.DbInterceptionContext.Equals(System.Object)"></member>
    <member name="M:System.Data.Entity.Infrastructure.Interception.DbInterceptionContext.GetHashCode"></member>
    <member name="M:System.Data.Entity.Infrastructure.Interception.DbInterceptionContext.GetType"></member>
    <member name="P:System.Data.Entity.Infrastructure.Interception.DbInterceptionContext.IsAsync"></member>
    <member name="P:System.Data.Entity.Infrastructure.Interception.DbInterceptionContext.ObjectContexts"></member>
    <member name="M:System.Data.Entity.Infrastructure.Interception.DbInterceptionContext.ToString"></member>
    <member name="M:System.Data.Entity.Infrastructure.Interception.DbInterceptionContext.WithDbContext(System.Data.Entity.DbContext)"></member>
    <member name="M:System.Data.Entity.Infrastructure.Interception.DbInterceptionContext.WithObjectContext(System.Data.Entity.Core.Objects.ObjectContext)"></member>
    <member name="T:System.Data.Entity.Infrastructure.Interception.IDbCommandInterceptor"></member>
    <member name="M:System.Data.Entity.Infrastructure.Interception.IDbCommandInterceptor.NonQueryExecuted(System.Data.Common.DbCommand,System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext{System.Int32})"></member>
    <member name="M:System.Data.Entity.Infrastructure.Interception.IDbCommandInterceptor.NonQueryExecuting(System.Data.Common.DbCommand,System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext{System.Int32})"></member>
    <member name="M:System.Data.Entity.Infrastructure.Interception.IDbCommandInterceptor.ReaderExecuted(System.Data.Common.DbCommand,System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext{System.Data.Common.DbDataReader})"></member>
    <member name="M:System.Data.Entity.Infrastructure.Interception.IDbCommandInterceptor.ReaderExecuting(System.Data.Common.DbCommand,System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext{System.Data.Common.DbDataReader})"></member>
    <member name="M:System.Data.Entity.Infrastructure.Interception.IDbCommandInterceptor.ScalarExecuted(System.Data.Common.DbCommand,System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext{System.Object})"></member>
    <member name="M:System.Data.Entity.Infrastructure.Interception.IDbCommandInterceptor.ScalarExecuting(System.Data.Common.DbCommand,System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext{System.Object})"></member>
    <member name="T:System.Data.Entity.Infrastructure.Interception.IDbCommandTreeInterceptor"></member>
    <member name="M:System.Data.Entity.Infrastructure.Interception.IDbCommandTreeInterceptor.TreeCreated(System.Data.Entity.Infrastructure.Interception.DbCommandTreeInterceptionContext)"></member>
    <member name="T:System.Data.Entity.Infrastructure.Interception.IDbInterceptor"></member>
    <member name="T:System.Data.Entity.Infrastructure.MappingViews.DbMappingView">
      <summary>매핑 뷰를 나타냅니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.MappingViews.DbMappingView.#ctor(System.String)">
      <summary>지정된 엔터티 SQL이 포함된 <see cref="T:System.Data.Entity.Infrastructure.MappingViews.DbMappingView" /> 인스턴스를 만듭니다.</summary>
      <param name="entitySql">엔터티 SQL을 지정하는 문자열입니다.</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.MappingViews.DbMappingView.EntitySql">
      <summary>엔터티 SQL을 가져옵니다.</summary>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCache">
      <summary>뷰 캐시 구현을 매핑하기 위한 기본 추상 클래스입니다.파생 클래스는 <see cref="T:System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCacheTypeAttribute" />와 함께 사용되는 경우 매개 변수 없는 생성자가 있어야 합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCache.#ctor"></member>
    <member name="M:System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCache.GetView(System.Data.Entity.Core.Metadata.Edm.EntitySetBase)">
      <summary>지정된 익스텐트에 해당하는 뷰를 가져옵니다.</summary>
      <returns>매핑 뷰를 지정하는 <see cref="T:System.Data.Entity.Infrastructure.MappingViews.DbMappingView" />이거나, 익스텐트가 매핑 뷰와 연결되지 않은 경우 null입니다.</returns>
      <param name="extent">익스텐트를 지정하는 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySetBase" />입니다.</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCache.MappingHashValue">
      <summary>매핑 클로저에 대해 계산된 해시 값을 가져옵니다.</summary>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCacheFactory">
      <summary>구체적인 <see cref="T:System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCache" /> 인스턴스를 만드는 수단을 지정합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCacheFactory.#ctor"></member>
    <member name="M:System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCacheFactory.Create(System.String,System.String)">
      <summary>매핑된 컨테이너의 이름으로 지정된 컨테이너 매핑에 대해 생성된 뷰 캐시 인스턴스를 만듭니다.</summary>
      <returns>생성된 뷰 캐시를 지정하는 <see cref="T:System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCache" />입니다.</returns>
      <param name="conceptualModelContainerName">개념적 모델에서 컨테이너의 이름입니다.</param>
      <param name="storeModelContainerName">저장소 모델에서 컨테이너의 이름입니다.</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCacheTypeAttribute">
      <summary>컨텍스트 형식(<see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> 또는 <see cref="T:System.Data.Entity.DbContext" />의 서브클래스)과 연결된 매핑 뷰 캐시 형식(<see cref="T:System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCache" />의 서브클래스)을 지정하는 사용자 지정 특성을 정의합니다.캐시 형식은 런타임에 인스턴스화되고 해당 컨텍스트에서 미리 생성된 뷰를 검색하는 데 사용됩니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCacheTypeAttribute.#ctor(System.Type,System.String)">
      <summary>컨텍스트 형식을 매핑 뷰 캐시 형식과 연결하는 <see cref="T:System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCacheTypeAttribute" /> 인스턴스를 만듭니다.</summary>
      <param name="contextType">
        <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> 또는 <see cref="T:System.Data.Entity.DbContext" />의 서브클래스입니다.</param>
      <param name="cacheTypeName">캐시 형식의 정규화된 어셈블리 전체 이름입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCacheTypeAttribute.#ctor(System.Type,System.Type)">
      <summary>컨텍스트 형식을 매핑 뷰 캐시 형식과 연결하는 <see cref="T:System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCacheTypeAttribute" /> 인스턴스를 만듭니다.</summary>
      <param name="contextType">
        <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> 또는 <see cref="T:System.Data.Entity.DbContext" />의 서브클래스입니다.</param>
      <param name="cacheType">
        <see cref="T:System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCache" />의 서브클래스입니다.</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.Pluralization.CustomPluralizationEntry">
      <summary>
        <see cref="T:System.Data.Entity.Infrastructure.Pluralization.EnglishPluralizationService" />에서 사용할 사용자 지정 복수 적용 용어를 나타냅니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Pluralization.CustomPluralizationEntry.#ctor(System.String,System.String)">
      <summary>새 인스턴스를 만듭니다.</summary>
      <param name="singular">단수를 나타내는 null이 아니거나 비어 있는 문자열입니다.</param>
      <param name="plural">복수를 나타내는 null이 아니거나 비어 있는 문자열입니다.</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.Pluralization.CustomPluralizationEntry.Plural">
      <summary>복수를 가져옵니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.Pluralization.CustomPluralizationEntry.Singular">
      <summary>단수를 가져옵니다.</summary>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.Pluralization.EnglishPluralizationService">
      <summary>Entity Framework에서 사용할 기본 복수 적용 서비스 구현입니다.이 복수 적용 서비스는 영어 로캘을 기반으로 합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Pluralization.EnglishPluralizationService.#ctor">
      <summary>Entity Framework에서 사용되는 기본 복수 적용 서비스의 새 인스턴스를 생성합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Pluralization.EnglishPluralizationService.#ctor(System.Collections.Generic.IEnumerable{System.Data.Entity.Infrastructure.Pluralization.CustomPluralizationEntry})">
      <summary>Entity Framework에서 사용되는 기본 복수 적용 서비스의 새 인스턴스를 생성합니다.</summary>
      <param name="userDictionaryEntries">이 서비스에서 사용할 사용자 사전 항목의 컬렉션입니다. 이러한 입력은 사용자 요구에 따라 서비스를 사용자 지정할 수 있습니다.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Pluralization.EnglishPluralizationService.Pluralize(System.String)">
      <summary>지정된 단어의 복수 형태를 반환합니다.</summary>
      <returns>입력 매개 변수의 복수 형태입니다.</returns>
      <param name="word">복수로 만들 단어입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Pluralization.EnglishPluralizationService.Singularize(System.String)">
      <summary>지정된 단어의 단수 형태를 반환합니다.</summary>
      <returns>입력 매개 변수의 단수 형태입니다.</returns>
      <param name="word">단수로 만들 단어입니다.</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.Pluralization.IPluralizationService">
      <summary>EF 런타임에서 이 인터페이스를 구현하는 데 사용할 복수 적용 서비스입니다.기본적으로 <see cref="T:System.Data.Entity.Infrastructure.Pluralization.EnglishPluralizationService" />가 사용되지만 사용할 복수 적용 서비스는 <see cref="T:System.Data.Entity.DbConfiguration" />에서 파생되는 클래스에서 설정될 수 있습니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Pluralization.IPluralizationService.Pluralize(System.String)">
      <summary>서비스를 사용하여 단어를 복수화합니다.</summary>
      <returns>복수화된 단어입니다.</returns>
      <param name="word">복수화할 단어입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Pluralization.IPluralizationService.Singularize(System.String)">
      <summary>서비스를 사용하여 단어를 단수화합니다.</summary>
      <returns>단수화된 단어입니다.</returns>
      <param name="word">단수화할 단어입니다.</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.DbMigration">
      <summary>코드 기반 마이그레이션의 기본 클래스입니다.Entity Framework 마이그레이션 API는 응용 프로그램의 최종 사용자와 같은 신뢰할 수 없는 소스에서 제공하는 입력을 허용하도록 디자인되지 않았습니다.이러한 소스의 입력이 허용되는 경우 이러한 API에 전달하기 전에 유효성 검사를 수행하여 SQL 삽입 공격 등으로부터 보호해야 합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.DbMigration" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.AddColumn(System.String,System.String,System.Func{System.Data.Entity.Migrations.Builders.ColumnBuilder,System.Data.Entity.Migrations.Model.ColumnModel},System.Object)">
      <summary>기존 테이블에 열을 추가하는 작업을 추가합니다.Entity Framework 마이그레이션 API는 응용 프로그램의 최종 사용자와 같은 신뢰할 수 없는 소스에서 제공하는 입력을 허용하도록 디자인되지 않았습니다.이러한 소스의 입력이 허용되는 경우 이러한 API에 전달하기 전에 유효성 검사를 수행하여 SQL 삽입 공격 등으로부터 보호해야 합니다.</summary>
      <param name="table">열을 추가할 테이블의 이름입니다.스키마 이름은 선택 사항입니다. 스키마를 지정하지 않은 경우 dbo로 간주됩니다.</param>
      <param name="name">추가할 열의 이름입니다.</param>
      <param name="columnAction">추가할 열을 지정하는 작업입니다.즉,c =&amp;gt; c.Int(nullable: false, defaultValue: 3)</param>
      <param name="anonymousArguments">공급자가 처리할 수 있는 추가 인수입니다.익명 형식 구문을 사용하여 인수를 지정할 수 있습니다(예:'new { SampleArgument = "MyValue" }').</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.AddForeignKey(System.String,System.String,System.String,System.String,System.Boolean,System.String,System.Object)">
      <summary>새 외래 키 제약 조건을 만드는 작업을 추가합니다.Entity Framework 마이그레이션 API는 응용 프로그램의 최종 사용자와 같은 신뢰할 수 없는 소스에서 제공하는 입력을 허용하도록 디자인되지 않았습니다.이러한 소스의 입력이 허용되는 경우 이러한 API에 전달하기 전에 유효성 검사를 수행하여 SQL 삽입 공격 등으로부터 보호해야 합니다.</summary>
      <param name="dependentTable">외래 키 열이 포함된 테이블입니다.스키마 이름은 선택 사항입니다. 스키마를 지정하지 않은 경우 dbo로 간주됩니다.</param>
      <param name="dependentColumn">외래 키 열입니다.</param>
      <param name="principalTable">이 외래 키가 참조하는 열이 포함된 테이블입니다.스키마 이름은 선택 사항입니다. 스키마를 지정하지 않은 경우 dbo로 간주됩니다.</param>
      <param name="principalColumn">이 외래 키가 참조하는 열입니다.값을 제공하지 않으면 주 테이블의 기본 키가 참조됩니다.</param>
      <param name="cascadeDelete">외래 키 관계에 대해 하위 삭제를 구성해야 하는지를 나타내는 값입니다.값을 제공하지 않으면 하위 삭제가 해제됩니다.</param>
      <param name="name">데이터베이스에 있는 외래 키 제약 조건의 이름입니다.값을 제공하지 않으면 고유한 이름이 생성됩니다.</param>
      <param name="anonymousArguments">공급자가 처리할 수 있는 추가 인수입니다.익명 형식 구문을 사용하여 인수를 지정할 수 있습니다(예:'new { SampleArgument = "MyValue" }').</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.AddForeignKey(System.String,System.String[],System.String,System.String[],System.Boolean,System.String,System.Object)">
      <summary>새 외래 키 제약 조건을 만드는 작업을 추가합니다.Entity Framework 마이그레이션 API는 응용 프로그램의 최종 사용자와 같은 신뢰할 수 없는 소스에서 제공하는 입력을 허용하도록 디자인되지 않았습니다.이러한 소스의 입력이 허용되는 경우 이러한 API에 전달하기 전에 유효성 검사를 수행하여 SQL 삽입 공격 등으로부터 보호해야 합니다.</summary>
      <param name="dependentTable">외래 키 열이 포함된 테이블입니다.스키마 이름은 선택 사항입니다. 스키마를 지정하지 않은 경우 dbo로 간주됩니다.</param>
      <param name="dependentColumns">외래 키 열입니다.</param>
      <param name="principalTable">이 외래 키가 참조하는 열이 포함된 테이블입니다.스키마 이름은 선택 사항입니다. 스키마를 지정하지 않은 경우 dbo로 간주됩니다.</param>
      <param name="principalColumns">이 외래 키가 참조하는 열입니다.값을 제공하지 않으면 주 테이블의 기본 키가 참조됩니다.</param>
      <param name="cascadeDelete">외래 키 관계에 대해 하위 삭제를 구성해야 하는지를 나타내는 값입니다.값을 제공하지 않으면 하위 삭제가 해제됩니다.</param>
      <param name="name">데이터베이스에 있는 외래 키 제약 조건의 이름입니다.값을 제공하지 않으면 고유한 이름이 생성됩니다.</param>
      <param name="anonymousArguments">공급자가 처리할 수 있는 추가 인수입니다.익명 형식 구문을 사용하여 인수를 지정할 수 있습니다(예:'new { SampleArgument = "MyValue" }').</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.AddPrimaryKey(System.String,System.String,System.String,System.Boolean,System.Object)">
      <summary>새 기본 키를 만드는 작업을 추가합니다.Entity Framework 마이그레이션 API는 응용 프로그램의 최종 사용자와 같은 신뢰할 수 없는 소스에서 제공하는 입력을 허용하도록 디자인되지 않았습니다.이러한 소스의 입력이 허용되는 경우 이러한 API에 전달하기 전에 유효성 검사를 수행하여 SQL 삽입 공격 등으로부터 보호해야 합니다.</summary>
      <param name="table">기본 키 열이 포함된 테이블입니다.스키마 이름은 선택 사항입니다. 스키마를 지정하지 않은 경우 dbo로 간주됩니다.</param>
      <param name="column">기본 키 열입니다.</param>
      <param name="name">데이터베이스에 있는 기본 키의 이름입니다.값을 제공하지 않으면 고유한 이름이 생성됩니다.</param>
      <param name="clustered">이 키가 클러스터된 기본 키인지 여부를 나타내는 값입니다.</param>
      <param name="anonymousArguments">공급자가 처리할 수 있는 추가 인수입니다.익명 형식 구문을 사용하여 인수를 지정할 수 있습니다(예:'new { SampleArgument = "MyValue" }').</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.AddPrimaryKey(System.String,System.String[],System.String,System.Boolean,System.Object)">
      <summary>여러 열을 기반으로 새 기본 키를 만드는 작업을 추가합니다.Entity Framework 마이그레이션 API는 응용 프로그램의 최종 사용자와 같은 신뢰할 수 없는 소스에서 제공하는 입력을 허용하도록 디자인되지 않았습니다.이러한 소스의 입력이 허용되는 경우 이러한 API에 전달하기 전에 유효성 검사를 수행하여 SQL 삽입 공격 등으로부터 보호해야 합니다.</summary>
      <param name="table">기본 키 열이 포함된 테이블입니다.스키마 이름은 선택 사항입니다. 스키마를 지정하지 않은 경우 dbo로 간주됩니다.</param>
      <param name="columns">기본 키 열입니다.</param>
      <param name="name">데이터베이스에 있는 기본 키의 이름입니다.값을 제공하지 않으면 고유한 이름이 생성됩니다.</param>
      <param name="clustered">이 키가 클러스터된 기본 키인지 여부를 나타내는 값입니다.</param>
      <param name="anonymousArguments">공급자가 처리할 수 있는 추가 인수입니다.익명 형식 구문을 사용하여 인수를 지정할 수 있습니다(예:'new { SampleArgument = "MyValue" }').</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.AlterColumn(System.String,System.String,System.Func{System.Data.Entity.Migrations.Builders.ColumnBuilder,System.Data.Entity.Migrations.Model.ColumnModel},System.Object)">
      <summary>기존 열의 정의를 변경하는 작업을 추가합니다.Entity Framework 마이그레이션 API는 응용 프로그램의 최종 사용자와 같은 신뢰할 수 없는 소스에서 제공하는 입력을 허용하도록 디자인되지 않았습니다.이러한 소스의 입력이 허용되는 경우 이러한 API에 전달하기 전에 유효성 검사를 수행하여 SQL 삽입 공격 등으로부터 보호해야 합니다.</summary>
      <param name="table">열이 있는 테이블의 이름입니다.스키마 이름은 선택 사항입니다. 스키마를 지정하지 않은 경우 dbo로 간주됩니다.</param>
      <param name="name">변경할 열의 이름입니다.</param>
      <param name="columnAction">열에 대한 새 정의를 지정하는 작업입니다.즉,c =&amp;gt; c.String(nullable: false, defaultValue: "none")</param>
      <param name="anonymousArguments">공급자가 처리할 수 있는 추가 인수입니다.익명 형식 구문을 사용하여 인수를 지정할 수 있습니다(예:'new { SampleArgument = "MyValue" }').</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.AlterStoredProcedure``1(System.String,System.Func{System.Data.Entity.Migrations.Builders.ParameterBuilder,``0},System.String,System.Object)">
      <summary>저장 프로시저를 수정하는 작업을 추가합니다.Entity Framework 마이그레이션 API는 응용 프로그램의 최종 사용자와 같은 신뢰할 수 없는 소스에서 제공하는 입력을 허용하도록 디자인되지 않았습니다.이러한 소스의 입력이 허용되는 경우 이러한 API에 전달하기 전에 유효성 검사를 수행하여 SQL 삽입 공격 등으로부터 보호해야 합니다.</summary>
      <param name="name">저장 프로시저의 이름입니다.스키마 이름은 선택 사항입니다. 스키마를 지정하지 않은 경우 dbo로 간주됩니다.</param>
      <param name="parametersAction">저장 프로시저의 매개 변수를 지정하는 작업입니다.</param>
      <param name="body">저장 프로시저의 본문입니다.</param>
      <param name="anonymousArguments">공급자가 처리할 수 있는 추가 인수입니다.익명 형식 구문을 사용하여 인수를 지정할 수 있습니다.예: 'new { SampleArgument = "MyValue" }'.</param>
      <typeparam name="TParameters">이 저장 프로시저 수정 작업의 매개 변수입니다.이 형식은 지정할 필요가 없으며 사용자가 제공하는 <paramref name="parametersAction" /> 매개 변수에서 유추됩니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.AlterStoredProcedure(System.String,System.String,System.Object)">
      <summary>저장 프로시저를 수정하는 작업을 추가합니다.Entity Framework 마이그레이션 API는 응용 프로그램의 최종 사용자와 같은 신뢰할 수 없는 소스에서 제공하는 입력을 허용하도록 디자인되지 않았습니다.이러한 소스의 입력이 허용되는 경우 이러한 API에 전달하기 전에 유효성 검사를 수행하여 SQL 삽입 공격 등으로부터 보호해야 합니다.</summary>
      <param name="name">저장 프로시저의 이름입니다.스키마 이름은 선택 사항입니다. 스키마를 지정하지 않은 경우 dbo로 간주됩니다.</param>
      <param name="body">저장 프로시저의 본문입니다.</param>
      <param name="anonymousArguments">공급자가 처리할 수 있는 추가 인수입니다.익명 형식 구문을 사용하여 인수를 지정할 수 있습니다.예: 'new { SampleArgument = "MyValue" }'.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.CreateIndex(System.String,System.String,System.Boolean,System.String,System.Boolean,System.Object)">
      <summary>단일 열에 인덱스를 만드는 작업을 추가합니다.Entity Framework 마이그레이션 API는 응용 프로그램의 최종 사용자와 같은 신뢰할 수 없는 소스에서 제공하는 입력을 허용하도록 디자인되지 않았습니다.이러한 소스의 입력이 허용되는 경우 이러한 API에 전달하기 전에 유효성 검사를 수행하여 SQL 삽입 공격 등으로부터 보호해야 합니다.</summary>
      <param name="table">인덱스를 만들 테이블의 이름입니다.스키마 이름은 선택 사항입니다. 스키마를 지정하지 않은 경우 dbo로 간주됩니다.</param>
      <param name="column">인덱스를 만들 열의 이름입니다.</param>
      <param name="unique">고유한 인덱스인지를 나타내는 값입니다.값을 제공하지 않으면 고유하지 않은 인덱스가 만들어집니다.</param>
      <param name="name">데이터베이스에서 인덱스에 사용할 이름입니다.값을 제공하지 않으면 고유한 이름이 생성됩니다.</param>
      <param name="clustered">이 인덱스가 클러스터형 인덱스인지 여부를 나타내는 값입니다.</param>
      <param name="anonymousArguments">공급자가 처리할 수 있는 추가 인수입니다.익명 형식 구문을 사용하여 인수를 지정할 수 있습니다(예:'new { SampleArgument = "MyValue" }').</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.CreateIndex(System.String,System.String[],System.Boolean,System.String,System.Boolean,System.Object)">
      <summary>여러 열에 인덱스를 만드는 작업을 추가합니다.Entity Framework 마이그레이션 API는 응용 프로그램의 최종 사용자와 같은 신뢰할 수 없는 소스에서 제공하는 입력을 허용하도록 디자인되지 않았습니다.이러한 소스의 입력이 허용되는 경우 이러한 API에 전달하기 전에 유효성 검사를 수행하여 SQL 삽입 공격 등으로부터 보호해야 합니다.</summary>
      <param name="table">인덱스를 만들 테이블의 이름입니다.스키마 이름은 선택 사항입니다. 스키마를 지정하지 않은 경우 dbo로 간주됩니다.</param>
      <param name="columns">인덱스를 만들 열의 이름입니다.</param>
      <param name="unique">고유한 인덱스인지를 나타내는 값입니다.값을 제공하지 않으면 고유하지 않은 인덱스가 만들어집니다.</param>
      <param name="name">데이터베이스에서 인덱스에 사용할 이름입니다.값을 제공하지 않으면 고유한 이름이 생성됩니다.</param>
      <param name="clustered">이 인덱스가 클러스터형 인덱스인지 여부를 나타내는 값입니다.</param>
      <param name="anonymousArguments">공급자가 처리할 수 있는 추가 인수입니다.익명 형식 구문을 사용하여 인수를 지정할 수 있습니다(예:'new { SampleArgument = "MyValue" }').</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.CreateStoredProcedure``1(System.String,System.Func{System.Data.Entity.Migrations.Builders.ParameterBuilder,``0},System.String,System.Object)">
      <summary>새 저장 프로시저를 만드는 작업을 추가합니다.Entity Framework 마이그레이션 API는 응용 프로그램의 최종 사용자와 같은 신뢰할 수 없는 소스에서 제공하는 입력을 허용하도록 디자인되지 않았습니다.이러한 소스의 입력이 허용되는 경우 이러한 API에 전달하기 전에 유효성 검사를 수행하여 SQL 삽입 공격 등으로부터 보호해야 합니다.</summary>
      <param name="name">저장 프로시저의 이름입니다.스키마 이름은 선택 사항입니다. 스키마를 지정하지 않은 경우 dbo로 간주됩니다.</param>
      <param name="parametersAction">저장 프로시저의 매개 변수를 지정하는 작업입니다.</param>
      <param name="body">저장 프로시저의 본문입니다.</param>
      <param name="anonymousArguments">공급자가 처리할 수 있는 추가 인수입니다.익명 형식 구문을 사용하여 인수를 지정할 수 있습니다.예: 'new { SampleArgument = "MyValue" }'.</param>
      <typeparam name="TParameters">이 저장 프로시저 만들기 작업의 매개 변수입니다.이 형식은 지정할 필요가 없으며 사용자가 제공하는 <paramref name="parametersAction" /> 매개 변수에서 유추됩니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.CreateStoredProcedure(System.String,System.String,System.Object)">
      <summary>새 저장 프로시저를 만드는 작업을 추가합니다.Entity Framework 마이그레이션 API는 응용 프로그램의 최종 사용자와 같은 신뢰할 수 없는 소스에서 제공하는 입력을 허용하도록 디자인되지 않았습니다.이러한 소스의 입력이 허용되는 경우 이러한 API에 전달하기 전에 유효성 검사를 수행하여 SQL 삽입 공격 등으로부터 보호해야 합니다.</summary>
      <param name="name">저장 프로시저의 이름입니다.스키마 이름은 선택 사항입니다. 스키마를 지정하지 않은 경우 dbo로 간주됩니다.</param>
      <param name="body">저장 프로시저의 본문입니다.</param>
      <param name="anonymousArguments">공급자가 처리할 수 있는 추가 인수입니다.익명 형식 구문을 사용하여 인수를 지정할 수 있습니다.예: 'new { SampleArgument = "MyValue" }'.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.CreateTable``1(System.String,System.Func{System.Data.Entity.Migrations.Builders.ColumnBuilder,``0},System.Object)">
      <summary>새 테이블을 만드는 작업을 추가합니다.Entity Framework 마이그레이션 API는 응용 프로그램의 최종 사용자와 같은 신뢰할 수 없는 소스에서 제공하는 입력을 허용하도록 디자인되지 않았습니다.이러한 소스의 입력이 허용되는 경우 이러한 API에 전달하기 전에 유효성 검사를 수행하여 SQL 삽입 공격 등으로부터 보호해야 합니다.</summary>
      <returns>테이블 만들기 작업의 추가 구성을 허용하는 개체입니다.</returns>
      <param name="name">테이블의 이름입니다.스키마 이름은 선택 사항입니다. 스키마를 지정하지 않은 경우 dbo로 간주됩니다.</param>
      <param name="columnsAction">테이블에 포함할 열을 지정하는 작업입니다.즉,t =&amp;gt; new { Id = t.Int(identity: true), Name = t.String() }</param>
      <param name="anonymousArguments">공급자가 처리할 수 있는 추가 인수입니다.익명 형식 구문을 사용하여 인수를 지정할 수 있습니다(예:'new { SampleArgument = "MyValue" }').</param>
      <typeparam name="TColumns">이 테이블 만들기 작업의 열입니다.이 형식은 지정할 필요가 없으며 사용자가 제공하는 columnsAction 매개 변수에서 유추됩니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.Down">
      <summary>다운그레이드 프로세스 중 수행할 작업입니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.DropColumn(System.String,System.String,System.Object)">
      <summary>기존 열을 삭제하는 작업을 추가합니다.Entity Framework 마이그레이션 API는 응용 프로그램의 최종 사용자와 같은 신뢰할 수 없는 소스에서 제공하는 입력을 허용하도록 디자인되지 않았습니다.이러한 소스의 입력이 허용되는 경우 이러한 API에 전달하기 전에 유효성 검사를 수행하여 SQL 삽입 공격 등으로부터 보호해야 합니다.</summary>
      <param name="table">열을 삭제할 테이블의 이름입니다.스키마 이름은 선택 사항입니다. 스키마를 지정하지 않은 경우 dbo로 간주됩니다.</param>
      <param name="name">삭제할 열의 이름입니다.</param>
      <param name="anonymousArguments">공급자가 처리할 수 있는 추가 인수입니다.익명 형식 구문을 사용하여 인수를 지정할 수 있습니다(예:'new { SampleArgument = "MyValue" }').</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.DropForeignKey(System.String,System.String,System.Object)">
      <summary>해당 이름을 기반으로 외래 키 제약 조건을 삭제하는 작업을 추가합니다.Entity Framework 마이그레이션 API는 응용 프로그램의 최종 사용자와 같은 신뢰할 수 없는 소스에서 제공하는 입력을 허용하도록 디자인되지 않았습니다.이러한 소스의 입력이 허용되는 경우 이러한 API에 전달하기 전에 유효성 검사를 수행하여 SQL 삽입 공격 등으로부터 보호해야 합니다.</summary>
      <param name="dependentTable">외래 키 열이 포함된 테이블입니다.스키마 이름은 선택 사항입니다. 스키마를 지정하지 않은 경우 dbo로 간주됩니다.</param>
      <param name="name">데이터베이스에 있는 외래 키 제약 조건의 이름입니다.</param>
      <param name="anonymousArguments">공급자가 처리할 수 있는 추가 인수입니다.익명 형식 구문을 사용하여 인수를 지정할 수 있습니다(예:'new { SampleArgument = "MyValue" }').</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.DropForeignKey(System.String,System.String,System.String,System.Object)">
      <summary>외래 키 제약 조건이 대상으로 하는 열을 기반으로 외래 키 제약 조건을 삭제하는 작업을 추가합니다.Entity Framework 마이그레이션 API는 응용 프로그램의 최종 사용자와 같은 신뢰할 수 없는 소스에서 제공하는 입력을 허용하도록 디자인되지 않았습니다.이러한 소스의 입력이 허용되는 경우 이러한 API에 전달하기 전에 유효성 검사를 수행하여 SQL 삽입 공격 등으로부터 보호해야 합니다.</summary>
      <param name="dependentTable">외래 키 열이 포함된 테이블입니다.스키마 이름은 선택 사항입니다. 스키마를 지정하지 않은 경우 dbo로 간주됩니다.</param>
      <param name="dependentColumn">외래 키 열입니다.</param>
      <param name="principalTable">이 외래 키가 참조하는 열이 포함된 테이블입니다.스키마 이름은 선택 사항입니다. 스키마를 지정하지 않은 경우 dbo로 간주됩니다.</param>
      <param name="anonymousArguments">공급자가 처리할 수 있는 추가 인수입니다.익명 형식 구문을 사용하여 인수를 지정할 수 있습니다(예:'new { SampleArgument = "MyValue" }').</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.DropForeignKey(System.String,System.String,System.String,System.String,System.Object)">
      <summary>외래 키 제약 조건이 대상으로 하는 열을 기반으로 외래 키 제약 조건을 삭제하는 작업을 추가합니다.Entity Framework 마이그레이션 API는 응용 프로그램의 최종 사용자와 같은 신뢰할 수 없는 소스에서 제공하는 입력을 허용하도록 디자인되지 않았습니다.이러한 소스의 입력이 허용되는 경우 이러한 API에 전달하기 전에 유효성 검사를 수행하여 SQL 삽입 공격 등으로부터 보호해야 합니다.</summary>
      <param name="dependentTable">외래 키 열이 포함된 테이블입니다.스키마 이름은 선택 사항입니다. 스키마를 지정하지 않은 경우 dbo로 간주됩니다.</param>
      <param name="dependentColumn">외래 키 열입니다.</param>
      <param name="principalTable">이 외래 키가 참조하는 열이 포함된 테이블입니다.스키마 이름은 선택 사항입니다. 스키마를 지정하지 않은 경우 dbo로 간주됩니다.</param>
      <param name="principalColumn">이 외래 키가 참조하는 열입니다.</param>
      <param name="anonymousArguments">공급자가 처리할 수 있는 추가 인수입니다.익명 형식 구문을 사용하여 인수를 지정할 수 있습니다(예:'new { SampleArgument = "MyValue" }').</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.DropForeignKey(System.String,System.String[],System.String,System.Object)">
      <summary>외래 키 제약 조건이 대상으로 하는 열을 기반으로 외래 키 제약 조건을 삭제하는 작업을 추가합니다.Entity Framework 마이그레이션 API는 응용 프로그램의 최종 사용자와 같은 신뢰할 수 없는 소스에서 제공하는 입력을 허용하도록 디자인되지 않았습니다.이러한 소스의 입력이 허용되는 경우 이러한 API에 전달하기 전에 유효성 검사를 수행하여 SQL 삽입 공격 등으로부터 보호해야 합니다.</summary>
      <param name="dependentTable">외래 키 열이 포함된 테이블입니다.스키마 이름은 선택 사항입니다. 스키마를 지정하지 않은 경우 dbo로 간주됩니다.</param>
      <param name="dependentColumns">외래 키 열입니다.</param>
      <param name="principalTable">이 외래 키가 참조하는 열이 포함된 테이블입니다.스키마 이름은 선택 사항입니다. 스키마를 지정하지 않은 경우 dbo로 간주됩니다.</param>
      <param name="anonymousArguments">공급자가 처리할 수 있는 추가 인수입니다.익명 형식 구문을 사용하여 인수를 지정할 수 있습니다(예:'new { SampleArgument = "MyValue" }').</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.DropIndex(System.String,System.String,System.Object)">
      <summary>해당 이름을 기반으로 인덱스를 삭제하는 작업을 추가합니다.Entity Framework 마이그레이션 API는 응용 프로그램의 최종 사용자와 같은 신뢰할 수 없는 소스에서 제공하는 입력을 허용하도록 디자인되지 않았습니다.이러한 소스의 입력이 허용되는 경우 이러한 API에 전달하기 전에 유효성 검사를 수행하여 SQL 삽입 공격 등으로부터 보호해야 합니다.</summary>
      <param name="table">인덱스를 삭제할 테이블의 이름입니다.스키마 이름은 선택 사항입니다. 스키마를 지정하지 않은 경우 dbo로 간주됩니다.</param>
      <param name="name">삭제할 인덱스의 이름입니다.</param>
      <param name="anonymousArguments">공급자가 처리할 수 있는 추가 인수입니다.익명 형식 구문을 사용하여 인수를 지정할 수 있습니다(예:'new { SampleArgument = "MyValue" }').</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.DropIndex(System.String,System.String[],System.Object)">
      <summary>인덱스가 대상으로 하는 열을 기반으로 인덱스를 삭제하는 작업을 추가합니다.Entity Framework 마이그레이션 API는 응용 프로그램의 최종 사용자와 같은 신뢰할 수 없는 소스에서 제공하는 입력을 허용하도록 디자인되지 않았습니다.이러한 소스의 입력이 허용되는 경우 이러한 API에 전달하기 전에 유효성 검사를 수행하여 SQL 삽입 공격 등으로부터 보호해야 합니다.</summary>
      <param name="table">인덱스를 삭제할 테이블의 이름입니다.스키마 이름은 선택 사항입니다. 스키마를 지정하지 않은 경우 dbo로 간주됩니다.</param>
      <param name="columns">인덱스가 대상으로 하는 열의 이름입니다.</param>
      <param name="anonymousArguments">공급자가 처리할 수 있는 추가 인수입니다.익명 형식 구문을 사용하여 인수를 지정할 수 있습니다(예:'new { SampleArgument = "MyValue" }').</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.DropPrimaryKey(System.String,System.Object)">
      <summary>기본 이름으로 만들어진 기존 기본 키를 삭제하는 작업을 추가합니다.Entity Framework 마이그레이션 API는 응용 프로그램의 최종 사용자와 같은 신뢰할 수 없는 소스에서 제공하는 입력을 허용하도록 디자인되지 않았습니다.이러한 소스의 입력이 허용되는 경우 이러한 API에 전달하기 전에 유효성 검사를 수행하여 SQL 삽입 공격 등으로부터 보호해야 합니다.</summary>
      <param name="table">기본 키 열이 포함된 테이블입니다.스키마 이름은 선택 사항입니다. 스키마를 지정하지 않은 경우 dbo로 간주됩니다.</param>
      <param name="anonymousArguments">공급자가 처리할 수 있는 추가 인수입니다.익명 형식 구문을 사용하여 인수를 지정할 수 있습니다(예:'new { SampleArgument = "MyValue" }').</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.DropPrimaryKey(System.String,System.String,System.Object)">
      <summary>기본 이름이 없는 기존 기본 키를 삭제하는 작업을 추가합니다.Entity Framework 마이그레이션 API는 응용 프로그램의 최종 사용자와 같은 신뢰할 수 없는 소스에서 제공하는 입력을 허용하도록 디자인되지 않았습니다.이러한 소스의 입력이 허용되는 경우 이러한 API에 전달하기 전에 유효성 검사를 수행하여 SQL 삽입 공격 등으로부터 보호해야 합니다.</summary>
      <param name="table">기본 키 열이 포함된 테이블입니다.스키마 이름은 선택 사항입니다. 스키마를 지정하지 않은 경우 dbo로 간주됩니다.</param>
      <param name="name">삭제할 기본 키의 이름입니다.</param>
      <param name="anonymousArguments">공급자가 처리할 수 있는 추가 인수입니다.익명 형식 구문을 사용하여 인수를 지정할 수 있습니다(예:'new { SampleArgument = "MyValue" }').</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.DropStoredProcedure(System.String,System.Object)">
      <summary>지정된 이름을 가진 기존 저장 프로시저를 삭제하는 작업을 추가합니다.Entity Framework 마이그레이션 API는 응용 프로그램의 최종 사용자와 같은 신뢰할 수 없는 소스에서 제공하는 입력을 허용하도록 디자인되지 않았습니다.이러한 소스의 입력이 허용되는 경우 이러한 API에 전달하기 전에 유효성 검사를 수행하여 SQL 삽입 공격 등으로부터 보호해야 합니다.</summary>
      <param name="name">삭제할 프로시저의 이름입니다.스키마 이름은 선택 사항입니다. 스키마를 지정하지 않은 경우 dbo로 간주됩니다.</param>
      <param name="anonymousArguments">공급자가 처리할 수 있는 추가 인수입니다.익명 형식 구문을 사용하여 인수를 지정할 수 있습니다.예: 'new { SampleArgument = "MyValue" }'.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.DropTable(System.String,System.Object)">
      <summary>테이블을 삭제하는 작업을 추가합니다.Entity Framework 마이그레이션 API는 응용 프로그램의 최종 사용자와 같은 신뢰할 수 없는 소스에서 제공하는 입력을 허용하도록 디자인되지 않았습니다.이러한 소스의 입력이 허용되는 경우 이러한 API에 전달하기 전에 유효성 검사를 수행하여 SQL 삽입 공격 등으로부터 보호해야 합니다.</summary>
      <param name="name">삭제할 테이블의 이름입니다.스키마 이름은 선택 사항입니다. 스키마를 지정하지 않은 경우 dbo로 간주됩니다.</param>
      <param name="anonymousArguments">공급자가 처리할 수 있는 추가 인수입니다.익명 형식 구문을 사용하여 인수를 지정할 수 있습니다(예:'new { SampleArgument = "MyValue" }').</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.Equals(System.Object)">
      <summary>이 인스턴스가 지정된 개체와 동일한지 여부를 확인합니다.</summary>
      <returns>지정된 개체가 현재 인스턴스와 같으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="obj">현재 인스턴스와 비교할 개체입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.GetHashCode">
      <summary>현재 개체의 해시 함수를 반환합니다.</summary>
      <returns>현재 개체의 해시 함수입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.GetType">
      <summary>현재 인스턴스의 런타임 형식을 반환합니다.</summary>
      <returns>현재 인스턴스의 런타임 형식입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.MemberwiseClone">
      <summary>현재 개체의 단순 복사본을 만듭니다.</summary>
      <returns>현재 개체의 단순 복사본입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.MoveStoredProcedure(System.String,System.String,System.Object)">
      <summary>저장 프로시저를 새 스키마로 이동하는 작업을 추가합니다.Entity Framework 마이그레이션 API는 응용 프로그램의 최종 사용자와 같은 신뢰할 수 없는 소스에서 제공하는 입력을 허용하도록 디자인되지 않았습니다.이러한 소스의 입력이 허용되는 경우 이러한 API에 전달하기 전에 유효성 검사를 수행하여 SQL 삽입 공격 등으로부터 보호해야 합니다.</summary>
      <param name="name">이동할 저장 프로시저의 이름입니다.스키마 이름은 선택 사항입니다. 스키마를 지정하지 않은 경우 dbo로 간주됩니다.</param>
      <param name="newSchema">저장 프로시저를 이동할 스키마입니다.</param>
      <param name="anonymousArguments">공급자가 처리할 수 있는 추가 인수입니다.익명 형식 구문을 사용하여 인수를 지정할 수 있습니다(예:'new { SampleArgument = "MyValue" }').</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.MoveTable(System.String,System.String,System.Object)">
      <summary>테이블을 새 스키마로 이동하는 작업을 추가합니다.Entity Framework 마이그레이션 API는 응용 프로그램의 최종 사용자와 같은 신뢰할 수 없는 소스에서 제공하는 입력을 허용하도록 디자인되지 않았습니다.이러한 소스의 입력이 허용되는 경우 이러한 API에 전달하기 전에 유효성 검사를 수행하여 SQL 삽입 공격 등으로부터 보호해야 합니다.</summary>
      <param name="name">이동할 테이블의 이름입니다.스키마 이름은 선택 사항입니다. 스키마를 지정하지 않은 경우 dbo로 간주됩니다.</param>
      <param name="newSchema">테이블을 이동할 대상 스키마입니다.</param>
      <param name="anonymousArguments">공급자가 처리할 수 있는 추가 인수입니다.익명 형식 구문을 사용하여 인수를 지정할 수 있습니다(예:'new { SampleArgument = "MyValue" }').</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.RenameColumn(System.String,System.String,System.String,System.Object)">
      <summary>열 이름을 바꾸는 작업을 추가합니다.Entity Framework 마이그레이션 API는 응용 프로그램의 최종 사용자와 같은 신뢰할 수 없는 소스에서 제공하는 입력을 허용하도록 디자인되지 않았습니다.이러한 소스의 입력이 허용되는 경우 이러한 API에 전달하기 전에 유효성 검사를 수행하여 SQL 삽입 공격 등으로부터 보호해야 합니다.</summary>
      <param name="table">이름을 바꿀 열이 포함된 테이블의 이름입니다.스키마 이름은 선택 사항입니다. 스키마를 지정하지 않은 경우 dbo로 간주됩니다.</param>
      <param name="name">이름을 바꿀 열의 이름입니다.</param>
      <param name="newName">열의 새 이름입니다.</param>
      <param name="anonymousArguments">공급자가 처리할 수 있는 추가 인수입니다.익명 형식 구문을 사용하여 인수를 지정할 수 있습니다(예:'new { SampleArgument = "MyValue" }').</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.RenameStoredProcedure(System.String,System.String,System.Object)">
      <summary>저장 프로시저의 이름을 바꾸는 작업을 추가합니다.저장 프로시저의 스키마를 변경하려면 MoveStoredProcedure를 사용합니다. Entity Framework 마이그레이션 API는 응용 프로그램의 최종 사용자와 같은 신뢰할 수 없는 소스에서 제공하는 입력을 허용하도록 디자인되지 않았습니다.이러한 소스의 입력이 허용되는 경우 이러한 API에 전달하기 전에 유효성 검사를 수행하여 SQL 삽입 공격 등으로부터 보호해야 합니다.</summary>
      <param name="name">이름을 바꿀 저장 프로시저의 이름입니다.스키마 이름은 선택 사항입니다. 스키마를 지정하지 않은 경우 dbo로 간주됩니다.</param>
      <param name="newName">저장 프로시저의 새 이름입니다.스키마 이름은 선택 사항입니다. 스키마를 지정하지 않은 경우 dbo로 간주됩니다.</param>
      <param name="anonymousArguments">공급자가 처리할 수 있는 추가 인수입니다.익명 형식 구문을 사용하여 인수를 지정할 수 있습니다(예:'new { SampleArgument = "MyValue" }').</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.RenameTable(System.String,System.String,System.Object)">
      <summary>테이블 이름을 바꾸는 작업을 추가합니다.테이블의 스키마를 변경하려면 MoveTable을 사용합니다.Entity Framework 마이그레이션 API는 응용 프로그램의 최종 사용자와 같은 신뢰할 수 없는 소스에서 제공하는 입력을 허용하도록 디자인되지 않았습니다.이러한 소스의 입력이 허용되는 경우 이러한 API에 전달하기 전에 유효성 검사를 수행하여 SQL 삽입 공격 등으로부터 보호해야 합니다.</summary>
      <param name="name">이름을 바꿀 테이블의 이름입니다.스키마 이름은 선택 사항입니다. 스키마를 지정하지 않은 경우 dbo로 간주됩니다.</param>
      <param name="newName">테이블의 새 이름입니다.스키마 이름은 선택 사항입니다. 스키마를 지정하지 않은 경우 dbo로 간주됩니다.</param>
      <param name="anonymousArguments">공급자가 처리할 수 있는 추가 인수입니다.익명 형식 구문을 사용하여 인수를 지정할 수 있습니다(예:'new { SampleArgument = "MyValue" }').</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.Sql(System.String,System.Boolean,System.Object)">
      <summary>SQL 명령을 실행하는 작업을 추가합니다.Entity Framework 마이그레이션 API는 응용 프로그램의 최종 사용자와 같은 신뢰할 수 없는 소스에서 제공하는 입력을 허용하도록 디자인되지 않았습니다.이러한 소스의 입력이 허용되는 경우 이러한 API에 전달하기 전에 유효성 검사를 수행하여 SQL 삽입 공격 등으로부터 보호해야 합니다.</summary>
      <param name="sql">실행할 SQL입니다.</param>
      <param name="suppressTransaction">마이그레이션 프로세스에 대해 사용 중인 트랜잭션 외부에서 SQL을 실행할지 여부를 나타내는 값입니다.값을 제공하지 않으면 SQL이 트랜잭션 내에서 실행됩니다.</param>
      <param name="anonymousArguments">공급자가 처리할 수 있는 추가 인수입니다.익명 형식 구문을 사용하여 인수를 지정할 수 있습니다(예:'new { SampleArgument = "MyValue" }').</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.System#Data#Entity#Migrations#Infrastructure#IDbMigration#AddOperation(System.Data.Entity.Migrations.Model.MigrationOperation)">
      <summary>마이그레이션 작업을 추가합니다.</summary>
      <param name="migrationOperation">추가할 마이그레이션 작업입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.ToString">
      <summary>현재 개체를 나타내는 문자열을 반환합니다.</summary>
      <returns>현재 개체를 나타내는 문자열입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.Up">
      <summary>업그레이드 프로세스 중 수행할 작업입니다.</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.DbMigrationsConfiguration">
      <summary>지정된 모델의 마이그레이션 사용과 관련된 구성입니다.일반적으로는 이 클래스를 사용하지 않고 <see cref="T:System.Data.Entity.Migrations.DbMigrationsConfiguration`1" />으로부터 파생되는 구성 클래스를 만듭니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrationsConfiguration.#ctor">
      <summary>DbMigrationsConfiguration 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.DbMigrationsConfiguration.AutomaticMigrationDataLossAllowed">
      <summary>자동 마이그레이션 중 데이터 손실이 허용되는지 여부를 나타내는 값을 가져오거나 설정합니다.false로 설정된 경우 자동 마이그레이션 중에 데이터 손실이 발생하면 예외가 발생합니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.DbMigrationsConfiguration.AutomaticMigrationsEnabled">
      <summary>데이터베이스 마이그레이션 중 자동 마이그레이션을 사용할 수 있는지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.DbMigrationsConfiguration.CodeGenerator">
      <summary>마이그레이션을 스캐폴드할 때 사용할 코드 생성기를 가져오거나 설정합니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.DbMigrationsConfiguration.CommandTimeout">
      <summary>마이그레이션 내의 개별 명령에 사용되는 시간 제한 값을 가져오거나 설정합니다.null 값을 설정하면 기본 공급자의 기본값이 사용됩니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.DbMigrationsConfiguration.ContextKey">
      <summary>이 구성에 포함되는 마이그레이션을 동일한 데이터베이스를 사용하는 다른 구성에 포함되는 마이그레이션과 구분하는 데 사용되는 문자열을 가져오거나 설정합니다.이 속성을 사용하면 여러 모델의 마이그레이션을 단일 데이터베이스에 적용할 수 있습니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.DbMigrationsConfiguration.ContextType">
      <summary>마이그레이션할 모델을 나타내는 파생된 DbContext를 가져오거나 설정합니다.</summary>
    </member>
    <member name="F:System.Data.Entity.Migrations.DbMigrationsConfiguration.DefaultMigrationsDirectory">
      <summary>마이그레이션이 저장되는 기본 디렉터리입니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrationsConfiguration.GetHistoryContextFactory(System.String)">
      <summary>지정된 데이터베이스 공급자와 함께 사용하도록 설정된 기록 컨텍스트 팩터리를 가져옵니다.</summary>
      <returns>데이터베이스 공급자에 대해 설정된 기록 컨텍스트 팩터리입니다.</returns>
      <param name="providerInvariantName">팩터리를 가져올 데이터베이스 공급자의 이름입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrationsConfiguration.GetSqlGenerator(System.String)">
      <summary>지정된 데이터베이스 공급자와 함께 사용하도록 설정된 SQL 생성기를 가져옵니다.</summary>
      <returns>데이터베이스 공급자에 대해 설정된 SQL 생성기입니다.</returns>
      <param name="providerInvariantName">SQL 생성기를 가져올 데이터베이스 공급자의 이름입니다.</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.DbMigrationsConfiguration.MigrationsAssembly">
      <summary>코드 기반 마이그레이션을 포함하는 어셈블리를 가져오거나 설정합니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.DbMigrationsConfiguration.MigrationsDirectory">
      <summary>코드 기반 마이그레이션이 저장되는 하위 디렉터리를 가져오거나 설정합니다.이 속성은 Visual Studio 프로젝트 루트 아래의 하위 디렉터리에 대한 상대 경로로 설정되어야 하며 절대 경로로 설정될 수는 없습니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.DbMigrationsConfiguration.MigrationsNamespace">
      <summary>코드 기반 마이그레이션에 사용되는 네임스페이스를 가져오거나 설정합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrationsConfiguration.SetHistoryContextFactory(System.String,System.Func{System.Data.Common.DbConnection,System.String,System.Data.Entity.Migrations.History.HistoryContext})">
      <summary>지정된 데이터베이스 공급자에 대해 사용할 <see cref="T:System.Data.Entity.Migrations.History.HistoryContext" /> 인스턴스를 만드는 데 사용할 새 팩터리를 추가합니다.</summary>
      <param name="providerInvariantName">SQL 생성기를 설정할 데이터베이스 공급자의 이름입니다.</param>
      <param name="factory">기본 스키마를 나타내는 지정된 <see cref="T:System.Data.Common.DbConnection" /> 및 <see cref="T:System.String" />에 대한 <see cref="T:System.Data.Entity.Migrations.History.HistoryContext" /> 인스턴스를 만드는 데 사용할 팩터리입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrationsConfiguration.SetSqlGenerator(System.String,System.Data.Entity.Migrations.Sql.MigrationSqlGenerator)">
      <summary>지정된 데이터베이스 공급자에 대해 사용할 새 SQL 생성기를 추가합니다.</summary>
      <param name="providerInvariantName">SQL 생성기를 설정할 데이터베이스 공급자의 이름입니다.</param>
      <param name="migrationSqlGenerator">사용할 SQL 생성기입니다.</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.DbMigrationsConfiguration.TargetDatabase">
      <summary>마이그레이션할 데이터베이스 연결을 재정의하기 위한 값을 가져오거나 설정합니다.</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.DbMigrationsConfiguration`1">
      <summary>지정된 모델의 마이그레이션 사용과 관련된 구성입니다.</summary>
      <typeparam name="TContext">이 구성이 적용되는 모델을 나타내는 컨텍스트입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrationsConfiguration`1.#ctor">
      <summary>DbMigrationsConfiguration 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrationsConfiguration`1.Equals(System.Object)">
      <summary>현재 구성이 지정된 개체와 같은지 여부를 확인합니다.</summary>
      <returns>현재 구성이 지정된 개체와 같으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="obj">현재 구성과 비교할 개체입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrationsConfiguration`1.GetHashCode">
      <summary>이 인스턴스의 해시 함수를 가져옵니다.</summary>
      <returns>이 인스턴스의 해시 함수입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrationsConfiguration`1.GetType">
      <summary>현재 인스턴스의 런타임 형식을 반환합니다.</summary>
      <returns>현재 인스턴스의 런타임 형식입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrationsConfiguration`1.MemberwiseClone">
      <summary>현재 개체의 단순 복사본을 만듭니다.</summary>
      <returns>현재 개체의 단순 복사본입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrationsConfiguration`1.Seed(`0)">
      <summary>시드된 데이터를 업데이트하도록 허용하기 위해 최신 마이그레이션으로 업그레이드한 후 실행됩니다.</summary>
      <param name="context">시드된 데이터 업데이트를 위해 사용할 컨텍스트입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrationsConfiguration`1.ToString">
      <summary>이 구성의 문자열 표현을 반환합니다.</summary>
      <returns>이 구성의 문자열 표현입니다.</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.DbMigrator">
      <summary>DbMigrator는 기존 마이그레이션을 데이터베이스에 적용하는 데 사용됩니다.DbMigrator는 지정된 마이그레이션에 대해 업그레이드 및 다운그레이드를 수행하기 위해 사용할 수 있습니다.모델에 대한 변경 내용에 따라 마이그레이션을 스캐폴드하려면 <see cref="T:System.Data.Entity.Migrations.Design.MigrationScaffolder" />를 사용하십시오.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrator.#ctor(System.Data.Entity.Migrations.DbMigrationsConfiguration)">
      <summary>DbMigrator 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="configuration">마이그레이션 프로세스에 사용할 구성입니다.</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.DbMigrator.Configuration">
      <summary>마이그레이션 프로세스에 사용 중인 구성을 가져옵니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrator.GetDatabaseMigrations">
      <summary>대상 데이터베이스에 적용된 모든 마이그레이션을 가져옵니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrator.GetLocalMigrations">
      <summary>구성된 마이그레이션 어셈블리에 정의된 모든 마이그레이션을 가져옵니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrator.GetPendingMigrations">
      <summary>어셈블리에 정의되었지만 대상 데이터베이스에 적용되지 않은 모든 마이그레이션을 가져옵니다.</summary>
    </member>
    <member name="F:System.Data.Entity.Migrations.DbMigrator.InitialDatabase">
      <summary>마이그레이션을 적용하기 전 데이터베이스의 상태를 나타내는 마이그레이션 ID입니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrator.Update(System.String)">
      <summary>대상 데이터베이스를 지정된 마이그레이션으로 업데이트합니다.</summary>
      <param name="targetMigration">업그레이드/다운그레이드를 수행할 마이그레이션입니다.</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.DbSetMigrationsExtensions">
      <summary>
        <see cref="T:System.Data.Entity.IDbSet`1" />에 대한 확장 메서드 집합입니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbSetMigrationsExtensions.AddOrUpdate``1(System.Data.Entity.IDbSet{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},``0[])">
      <summary>SaveChanges를 호출할 때 사용자 지정 식별 식으로 엔터티를 추가하거나 업데이트합니다.데이터베이스 용어인 "upsert" 작업과 동일합니다.이 메서드는 마이그레이션을 사용하여 데이터를 시드할 때 유용할 수 있습니다.</summary>
      <param name="set">엔터티가 속한 집합입니다.</param>
      <param name="identifierExpression">추가 또는 업데이트 작업을 수행해야 하는지 여부를 확인할 때 사용할 속성을 지정하는 식입니다.</param>
      <param name="entities">추가 또는 업데이트할 엔터티입니다.</param>
      <typeparam name="TEntity">추가하거나 업데이트할 엔터티의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbSetMigrationsExtensions.AddOrUpdate``1(System.Data.Entity.IDbSet{``0},``0[])">
      <summary>SaveChanges를 호출할 때 키에 따라 엔터티를 추가하거나 업데이트합니다.데이터베이스 용어인 "upsert" 작업과 동일합니다.이 메서드는 마이그레이션을 사용하여 데이터를 시드할 때 유용할 수 있습니다.</summary>
      <param name="set">엔터티가 속한 집합입니다.</param>
      <param name="entities">추가 또는 업데이트할 엔터티입니다.</param>
      <typeparam name="TEntity">추가하거나 업데이트할 엔터티의 형식입니다.</typeparam>
    </member>
    <member name="T:System.Data.Entity.Migrations.Builders.ColumnBuilder">
      <summary>열을 구성하는 데 사용되는 도우미 클래스입니다.Entity Framework 마이그레이션 API는 응용 프로그램의 최종 사용자와 같은 신뢰할 수 없는 소스에서 제공하는 입력을 허용하도록 디자인되지 않았습니다.이러한 소스의 입력이 허용되는 경우 이러한 API에 전달하기 전에 유효성 검사를 수행하여 SQL 삽입 공격 등으로부터 보호해야 합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Builders.ColumnBuilder" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Binary(System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Byte[],System.String,System.Boolean,System.String,System.String)"></member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Boolean(System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String,System.String,System.String)"></member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Byte(System.Nullable{System.Boolean},System.Boolean,System.Nullable{System.Byte},System.String,System.String,System.String)"></member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.DateTime(System.Nullable{System.Boolean},System.Nullable{System.Byte},System.Nullable{System.DateTime},System.String,System.String,System.String)"></member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.DateTimeOffset(System.Nullable{System.Boolean},System.Nullable{System.Byte},System.Nullable{System.DateTimeOffset},System.String,System.String,System.String)"></member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Decimal(System.Nullable{System.Boolean},System.Nullable{System.Byte},System.Nullable{System.Byte},System.Nullable{System.Decimal},System.String,System.String,System.String,System.Boolean)"></member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Double(System.Nullable{System.Boolean},System.Nullable{System.Double},System.String,System.String,System.String)"></member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Equals(System.Object)">
      <summary>지정한 개체와 현재 개체가 같은지 여부를 나타냅니다.</summary>
      <returns>지정된 개체가 현재 개체와 동일하면 true이고 그렇지 않으면 false입니다.</returns>
      <param name="obj">현재 개체와 비교할 개체입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Geography(System.Nullable{System.Boolean},System.Data.Entity.Spatial.DbGeography,System.String,System.String,System.String)"></member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Geometry(System.Nullable{System.Boolean},System.Data.Entity.Spatial.DbGeometry,System.String,System.String,System.String)"></member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.GetHashCode">
      <summary>이 인스턴스의 해시 코드를 반환합니다.</summary>
      <returns>이 인스턴스의 해시 코드입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.GetType">
      <summary>현재 인스턴스의 <see cref="T:System.Type" />을 가져옵니다.</summary>
      <returns>현재 인스턴스의 정확한 런타임 형식입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Guid(System.Nullable{System.Boolean},System.Boolean,System.Nullable{System.Guid},System.String,System.String,System.String)"></member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Int(System.Nullable{System.Boolean},System.Boolean,System.Nullable{System.Int32},System.String,System.String,System.String)"></member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Long(System.Nullable{System.Boolean},System.Boolean,System.Nullable{System.Int64},System.String,System.String,System.String)"></member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.MemberwiseClone">
      <summary>현재 <see cref="T:System.Object" />의 단순 복사본을 만듭니다.</summary>
      <returns>현재 <see cref="T:System.Object" />의 단순 복사본입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Short(System.Nullable{System.Boolean},System.Boolean,System.Nullable{System.Int16},System.String,System.String,System.String)"></member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Single(System.Nullable{System.Boolean},System.Nullable{System.Single},System.String,System.String,System.String)"></member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.String(System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String,System.String,System.String,System.String)"></member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Time(System.Nullable{System.Boolean},System.Nullable{System.Byte},System.Nullable{System.TimeSpan},System.String,System.String,System.String)"></member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.ToString">
      <summary>현재 개체를 나타내는 문자열을 반환합니다.</summary>
      <returns>현재 개체를 나타내는 문자열입니다.</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Builders.ParameterBuilder">
      <summary>매개 변수를 구성하는 데 사용되는 도우미 클래스입니다.Entity Framework 마이그레이션 API는 응용 프로그램의 최종 사용자와 같은 신뢰할 수 없는 소스에서 제공하는 입력을 허용하도록 디자인되지 않았습니다.이러한 소스의 입력이 허용되는 경우 이러한 API에 전달하기 전에 유효성 검사를 수행하여 SQL 삽입 공격 등으로부터 보호해야 합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.#ctor"></member>
    <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.Binary(System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Byte[],System.String,System.String,System.String,System.Boolean)">
      <summary>이진 데이터를 전달하기 위한 새로운 매개 변수 정의를 만듭니다.Entity Framework 마이그레이션 API는 응용 프로그램의 최종 사용자와 같은 신뢰할 수 없는 소스에서 제공하는 입력을 허용하도록 디자인되지 않았습니다.이러한 소스의 입력이 허용되는 경우 이러한 API에 전달하기 전에 유효성 검사를 수행하여 SQL 삽입 공격 등으로부터 보호해야 합니다.</summary>
      <returns>새로 생성된 매개 변수 정의입니다.</returns>
      <param name="maxLength">배열 데이터의 허용 가능한 최대 길이입니다.</param>
      <param name="fixedLength">모든 데이터를 최대 길이로 채워야 하는지 여부를 나타내는 값입니다.</param>
      <param name="defaultValue">이 매개 변수에 대한 기본값으로 사용할 상수 값입니다.</param>
      <param name="defaultValueSql">이 매개 변수에 대한 기본값으로 사용되는 SQL 식입니다.</param>
      <param name="name">매개 변수의 이름입니다.</param>
      <param name="storeType">이 매개 변수에 사용할 공급자별 데이터 형식입니다.</param>
      <param name="outParameter">매개 변수가 출력 매개 변수인지 여부를 나타내는 값입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.Boolean(System.Nullable{System.Boolean},System.String,System.String,System.String,System.Boolean)">
      <summary>Boolean 데이터를 전달하기 위한 새로운 매개 변수 정의를 만듭니다.Entity Framework 마이그레이션 API는 응용 프로그램의 최종 사용자와 같은 신뢰할 수 없는 소스에서 제공하는 입력을 허용하도록 디자인되지 않았습니다.이러한 소스의 입력이 허용되는 경우 이러한 API에 전달하기 전에 유효성 검사를 수행하여 SQL 삽입 공격 등으로부터 보호해야 합니다.</summary>
      <returns>새로 생성된 매개 변수 정의입니다.</returns>
      <param name="defaultValue">이 매개 변수에 대한 기본값으로 사용할 상수 값입니다.</param>
      <param name="defaultValueSql">이 매개 변수에 대한 기본값으로 사용되는 SQL 식입니다.</param>
      <param name="name">매개 변수의 이름입니다.</param>
      <param name="storeType">이 매개 변수에 사용할 공급자별 데이터 형식입니다.</param>
      <param name="outParameter">매개 변수가 출력 매개 변수인지 여부를 나타내는 값입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.Byte(System.Nullable{System.Byte},System.String,System.String,System.String,System.Boolean)">
      <summary>Byte 데이터를 전달하기 위한 새로운 매개 변수 정의를 만듭니다.Entity Framework 마이그레이션 API는 응용 프로그램의 최종 사용자와 같은 신뢰할 수 없는 소스에서 제공하는 입력을 허용하도록 디자인되지 않았습니다.이러한 소스의 입력이 허용되는 경우 이러한 API에 전달하기 전에 유효성 검사를 수행하여 SQL 삽입 공격 등으로부터 보호해야 합니다.</summary>
      <returns>새로 생성된 매개 변수 정의입니다.</returns>
      <param name="defaultValue">이 매개 변수에 대한 기본값으로 사용할 상수 값입니다.</param>
      <param name="defaultValueSql">이 매개 변수에 대한 기본값으로 사용되는 SQL 식입니다.</param>
      <param name="name">매개 변수의 이름입니다.</param>
      <param name="storeType">이 매개 변수에 사용할 공급자별 데이터 형식입니다.</param>
      <param name="outParameter">매개 변수가 출력 매개 변수인지 여부를 나타내는 값입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.DateTime(System.Nullable{System.Byte},System.Nullable{System.DateTime},System.String,System.String,System.String,System.Boolean)">
      <summary>DateTime 데이터를 전달하기 위한 새로운 매개 변수 정의를 만듭니다.Entity Framework 마이그레이션 API는 응용 프로그램의 최종 사용자와 같은 신뢰할 수 없는 소스에서 제공하는 입력을 허용하도록 디자인되지 않았습니다.이러한 소스의 입력이 허용되는 경우 이러한 API에 전달하기 전에 유효성 검사를 수행하여 SQL 삽입 공격 등으로부터 보호해야 합니다.</summary>
      <returns>새로 생성된 매개 변수 정의입니다.</returns>
      <param name="precision">매개 변수의 전체 자릿수입니다.</param>
      <param name="defaultValue">이 매개 변수에 대한 기본값으로 사용할 상수 값입니다.</param>
      <param name="defaultValueSql">이 매개 변수에 대한 기본값으로 사용되는 SQL 식입니다.</param>
      <param name="name">매개 변수의 이름입니다.</param>
      <param name="storeType">이 매개 변수에 사용할 공급자별 데이터 형식입니다.</param>
      <param name="outParameter">매개 변수가 출력 매개 변수인지 여부를 나타내는 값입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.DateTimeOffset(System.Nullable{System.Byte},System.Nullable{System.DateTimeOffset},System.String,System.String,System.String,System.Boolean)">
      <summary>DateTimeOffset 데이터를 전달하기 위한 새로운 매개 변수 정의를 만듭니다.Entity Framework 마이그레이션 API는 응용 프로그램의 최종 사용자와 같은 신뢰할 수 없는 소스에서 제공하는 입력을 허용하도록 디자인되지 않았습니다.이러한 소스의 입력이 허용되는 경우 이러한 API에 전달하기 전에 유효성 검사를 수행하여 SQL 삽입 공격 등으로부터 보호해야 합니다.</summary>
      <returns>새로 생성된 매개 변수 정의입니다.</returns>
      <param name="precision">매개 변수의 전체 자릿수입니다.</param>
      <param name="defaultValue">이 매개 변수에 대한 기본값으로 사용할 상수 값입니다.</param>
      <param name="defaultValueSql">이 매개 변수에 대한 기본값으로 사용되는 SQL 식입니다.</param>
      <param name="name">매개 변수의 이름입니다.</param>
      <param name="storeType">이 매개 변수에 사용할 공급자별 데이터 형식입니다.</param>
      <param name="outParameter">매개 변수가 출력 매개 변수인지 여부를 나타내는 값입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.Decimal(System.Nullable{System.Byte},System.Nullable{System.Byte},System.Nullable{System.Decimal},System.String,System.String,System.String,System.Boolean)">
      <summary>Decimal 데이터를 전달하기 위한 새로운 매개 변수 정의를 만듭니다.Entity Framework 마이그레이션 API는 응용 프로그램의 최종 사용자와 같은 신뢰할 수 없는 소스에서 제공하는 입력을 허용하도록 디자인되지 않았습니다.이러한 소스의 입력이 허용되는 경우 이러한 API에 전달하기 전에 유효성 검사를 수행하여 SQL 삽입 공격 등으로부터 보호해야 합니다.</summary>
      <returns>새로 생성된 매개 변수 정의입니다.</returns>
      <param name="precision">매개 변수의 전체 자릿수입니다.</param>
      <param name="scale">매개 변수의 소수 자릿수입니다.</param>
      <param name="defaultValue">이 매개 변수에 대한 기본값으로 사용할 상수 값입니다.</param>
      <param name="defaultValueSql">이 매개 변수에 대한 기본값으로 사용되는 SQL 식입니다.</param>
      <param name="name">매개 변수의 이름입니다.</param>
      <param name="storeType">이 매개 변수에 사용할 공급자별 데이터 형식입니다.</param>
      <param name="outParameter">매개 변수가 출력 매개 변수인지 여부를 나타내는 값입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.Double(System.Nullable{System.Double},System.String,System.String,System.String,System.Boolean)">
      <summary>Double 데이터를 전달하기 위한 새로운 매개 변수 정의를 만듭니다.Entity Framework 마이그레이션 API는 응용 프로그램의 최종 사용자와 같은 신뢰할 수 없는 소스에서 제공하는 입력을 허용하도록 디자인되지 않았습니다.이러한 소스의 입력이 허용되는 경우 이러한 API에 전달하기 전에 유효성 검사를 수행하여 SQL 삽입 공격 등으로부터 보호해야 합니다.</summary>
      <returns>새로 생성된 매개 변수 정의입니다.</returns>
      <param name="defaultValue">이 매개 변수에 대한 기본값으로 사용할 상수 값입니다.</param>
      <param name="defaultValueSql">이 매개 변수에 대한 기본값으로 사용되는 SQL 식입니다.</param>
      <param name="name">매개 변수의 이름입니다.</param>
      <param name="storeType">이 매개 변수에 사용할 공급자별 데이터 형식입니다.</param>
      <param name="outParameter">매개 변수가 출력 매개 변수인지 여부를 나타내는 값입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.Equals(System.Object)"></member>
    <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.Geography(System.Data.Entity.Spatial.DbGeography,System.String,System.String,System.String,System.Boolean)">
      <summary>지리 데이터를 전달하기 위한 새로운 매개 변수 정의를 만듭니다.Entity Framework 마이그레이션 API는 응용 프로그램의 최종 사용자와 같은 신뢰할 수 없는 소스에서 제공하는 입력을 허용하도록 디자인되지 않았습니다.이러한 소스의 입력이 허용되는 경우 이러한 API에 전달하기 전에 유효성 검사를 수행하여 SQL 삽입 공격 등으로부터 보호해야 합니다.</summary>
      <returns>새로 생성된 매개 변수 정의입니다.</returns>
      <param name="defaultValue">이 매개 변수에 대한 기본값으로 사용할 상수 값입니다.</param>
      <param name="defaultValueSql">이 매개 변수에 대한 기본값으로 사용되는 SQL 식입니다.</param>
      <param name="name">매개 변수의 이름입니다.</param>
      <param name="storeType">이 매개 변수에 사용할 공급자별 데이터 형식입니다.</param>
      <param name="outParameter">매개 변수가 출력 매개 변수인지 여부를 나타내는 값입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.Geometry(System.Data.Entity.Spatial.DbGeometry,System.String,System.String,System.String,System.Boolean)">
      <summary>기하 도형 데이터를 전달하기 위한 새로운 매개 변수 정의를 만듭니다.Entity Framework 마이그레이션 API는 응용 프로그램의 최종 사용자와 같은 신뢰할 수 없는 소스에서 제공하는 입력을 허용하도록 디자인되지 않았습니다.이러한 소스의 입력이 허용되는 경우 이러한 API에 전달하기 전에 유효성 검사를 수행하여 SQL 삽입 공격 등으로부터 보호해야 합니다.</summary>
      <returns>새로 생성된 매개 변수 정의입니다.</returns>
      <param name="defaultValue">이 매개 변수에 대한 기본값으로 사용할 상수 값입니다.</param>
      <param name="defaultValueSql">이 매개 변수에 대한 기본값으로 사용되는 SQL 식입니다.</param>
      <param name="name">매개 변수의 이름입니다.</param>
      <param name="storeType">이 매개 변수에 사용할 공급자별 데이터 형식입니다.</param>
      <param name="outParameter">매개 변수가 출력 매개 변수인지 여부를 나타내는 값입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.GetHashCode"></member>
    <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.GetType">
      <summary>현재 인스턴스의 <see cref="T:System.Type" />을 가져옵니다.</summary>
      <returns>현재 인스턴스의 정확한 런타임 형식입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.Guid(System.Nullable{System.Guid},System.String,System.String,System.String,System.Boolean)">
      <summary>GUID 데이터를 전달하기 위한 새로운 매개 변수 정의를 만듭니다.Entity Framework 마이그레이션 API는 응용 프로그램의 최종 사용자와 같은 신뢰할 수 없는 소스에서 제공하는 입력을 허용하도록 디자인되지 않았습니다.이러한 소스의 입력이 허용되는 경우 이러한 API에 전달하기 전에 유효성 검사를 수행하여 SQL 삽입 공격 등으로부터 보호해야 합니다.</summary>
      <returns>새로 생성된 매개 변수 정의입니다.</returns>
      <param name="defaultValue">이 매개 변수에 대한 기본값으로 사용할 상수 값입니다.</param>
      <param name="defaultValueSql">이 매개 변수에 대한 기본값으로 사용되는 SQL 식입니다.</param>
      <param name="name">매개 변수의 이름입니다.</param>
      <param name="storeType">이 매개 변수에 사용할 공급자별 데이터 형식입니다.</param>
      <param name="outParameter">매개 변수가 출력 매개 변수인지 여부를 나타내는 값입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.Int(System.Nullable{System.Int32},System.String,System.String,System.String,System.Boolean)">
      <summary>Integer 데이터를 전달하기 위한 새로운 매개 변수 정의를 만듭니다.Entity Framework 마이그레이션 API는 응용 프로그램의 최종 사용자와 같은 신뢰할 수 없는 소스에서 제공하는 입력을 허용하도록 디자인되지 않았습니다.이러한 소스의 입력이 허용되는 경우 이러한 API에 전달하기 전에 유효성 검사를 수행하여 SQL 삽입 공격 등으로부터 보호해야 합니다.</summary>
      <returns>새로 생성된 매개 변수 정의입니다.</returns>
      <param name="defaultValue">이 매개 변수에 대한 기본값으로 사용할 상수 값입니다.</param>
      <param name="defaultValueSql">이 매개 변수에 대한 기본값으로 사용되는 SQL 식입니다.</param>
      <param name="name">매개 변수의 이름입니다.</param>
      <param name="storeType">이 매개 변수에 사용할 공급자별 데이터 형식입니다.</param>
      <param name="outParameter">매개 변수가 출력 매개 변수인지 여부를 나타내는 값입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.Long(System.Nullable{System.Int64},System.String,System.String,System.String,System.Boolean)">
      <summary>Long 데이터를 전달하기 위한 새로운 매개 변수 정의를 만듭니다.Entity Framework 마이그레이션 API는 응용 프로그램의 최종 사용자와 같은 신뢰할 수 없는 소스에서 제공하는 입력을 허용하도록 디자인되지 않았습니다.이러한 소스의 입력이 허용되는 경우 이러한 API에 전달하기 전에 유효성 검사를 수행하여 SQL 삽입 공격 등으로부터 보호해야 합니다.</summary>
      <returns>새로 생성된 매개 변수 정의입니다.</returns>
      <param name="defaultValue">이 매개 변수에 대한 기본값으로 사용할 상수 값입니다.</param>
      <param name="defaultValueSql">이 매개 변수에 대한 기본값으로 사용되는 SQL 식입니다.</param>
      <param name="name">매개 변수의 이름입니다.</param>
      <param name="storeType">이 매개 변수에 사용할 공급자별 데이터 형식입니다.</param>
      <param name="outParameter">매개 변수가 출력 매개 변수인지 여부를 나타내는 값입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.MemberwiseClone">
      <summary>현재 <see cref="T:System.Object" />의 단순 복사본을 만듭니다.</summary>
      <returns>현재 <see cref="T:System.Object" />의 단순 복사본입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.Short(System.Nullable{System.Int16},System.String,System.String,System.String,System.Boolean)">
      <summary>Short 데이터를 전달하기 위한 새로운 매개 변수 정의를 만듭니다.Entity Framework 마이그레이션 API는 응용 프로그램의 최종 사용자와 같은 신뢰할 수 없는 소스에서 제공하는 입력을 허용하도록 디자인되지 않았습니다.이러한 소스의 입력이 허용되는 경우 이러한 API에 전달하기 전에 유효성 검사를 수행하여 SQL 삽입 공격 등으로부터 보호해야 합니다.</summary>
      <returns>새로 생성된 매개 변수 정의입니다.</returns>
      <param name="defaultValue">이 매개 변수에 대한 기본값으로 사용할 상수 값입니다.</param>
      <param name="defaultValueSql">이 매개 변수에 대한 기본값으로 사용되는 SQL 식입니다.</param>
      <param name="name">매개 변수의 이름입니다.</param>
      <param name="storeType">이 매개 변수에 사용할 공급자별 데이터 형식입니다.</param>
      <param name="outParameter">매개 변수가 출력 매개 변수인지 여부를 나타내는 값입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.Single(System.Nullable{System.Single},System.String,System.String,System.String,System.Boolean)">
      <summary>Single 데이터를 전달하기 위한 새로운 매개 변수 정의를 만듭니다.Entity Framework 마이그레이션 API는 응용 프로그램의 최종 사용자와 같은 신뢰할 수 없는 소스에서 제공하는 입력을 허용하도록 디자인되지 않았습니다.이러한 소스의 입력이 허용되는 경우 이러한 API에 전달하기 전에 유효성 검사를 수행하여 SQL 삽입 공격 등으로부터 보호해야 합니다.</summary>
      <returns>새로 생성된 매개 변수 정의입니다.</returns>
      <param name="defaultValue">이 매개 변수에 대한 기본값으로 사용할 상수 값입니다.</param>
      <param name="defaultValueSql">이 매개 변수에 대한 기본값으로 사용되는 SQL 식입니다.</param>
      <param name="name">매개 변수의 이름입니다.</param>
      <param name="storeType">이 매개 변수에 사용할 공급자별 데이터 형식입니다.</param>
      <param name="outParameter">매개 변수가 출력 매개 변수인지 여부를 나타내는 값입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.String(System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String,System.String,System.String,System.String,System.Boolean)">
      <summary>String 데이터를 전달하기 위한 새로운 매개 변수 정의를 만듭니다.Entity Framework 마이그레이션 API는 응용 프로그램의 최종 사용자와 같은 신뢰할 수 없는 소스에서 제공하는 입력을 허용하도록 디자인되지 않았습니다.이러한 소스의 입력이 허용되는 경우 이러한 API에 전달하기 전에 유효성 검사를 수행하여 SQL 삽입 공격 등으로부터 보호해야 합니다.</summary>
      <returns>새로 생성된 매개 변수 정의입니다.</returns>
      <param name="maxLength">문자열 데이터의 허용 가능한 최대 길이입니다.</param>
      <param name="fixedLength">모든 데이터를 최대 길이로 채워야 하는지 여부를 나타내는 값입니다.</param>
      <param name="unicode">매개 변수가 유니코드 내용을 지원하는지 여부를 나타내는 값입니다.</param>
      <param name="defaultValue">이 매개 변수에 대한 기본값으로 사용할 상수 값입니다.</param>
      <param name="defaultValueSql">이 매개 변수에 대한 기본값으로 사용되는 SQL 식입니다.</param>
      <param name="name">매개 변수의 이름입니다.</param>
      <param name="storeType">이 매개 변수에 사용할 공급자별 데이터 형식입니다.</param>
      <param name="outParameter">매개 변수가 출력 매개 변수인지 여부를 나타내는 값입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.Time(System.Nullable{System.Byte},System.Nullable{System.TimeSpan},System.String,System.String,System.String,System.Boolean)">
      <summary>Time 데이터를 전달하기 위한 새로운 매개 변수 정의를 만듭니다.Entity Framework 마이그레이션 API는 응용 프로그램의 최종 사용자와 같은 신뢰할 수 없는 소스에서 제공하는 입력을 허용하도록 디자인되지 않았습니다.이러한 소스의 입력이 허용되는 경우 이러한 API에 전달하기 전에 유효성 검사를 수행하여 SQL 삽입 공격 등으로부터 보호해야 합니다.</summary>
      <returns>새로 생성된 매개 변수 정의입니다.</returns>
      <param name="precision">매개 변수의 전체 자릿수입니다.</param>
      <param name="defaultValue">이 매개 변수에 대한 기본값으로 사용할 상수 값입니다.</param>
      <param name="defaultValueSql">이 매개 변수에 대한 기본값으로 사용되는 SQL 식입니다.</param>
      <param name="name">매개 변수의 이름입니다.</param>
      <param name="storeType">이 매개 변수에 사용할 공급자별 데이터 형식입니다.</param>
      <param name="outParameter">매개 변수가 출력 매개 변수인지 여부를 나타내는 값입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.ToString"></member>
    <member name="T:System.Data.Entity.Migrations.Builders.TableBuilder`1">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.DbMigration" />에 대한 CreateTable 호출로부터 생성 중인 테이블을 추가로 구성하기 위해 사용되는 도우미 클래스입니다.Entity Framework 마이그레이션 API는 응용 프로그램의 최종 사용자와 같은 신뢰할 수 없는 소스에서 제공하는 입력을 허용하도록 디자인되지 않았습니다.이러한 소스의 입력이 허용되는 경우 이러한 API에 전달하기 전에 유효성 검사를 수행하여 SQL 삽입 공격 등으로부터 보호해야 합니다.</summary>
      <typeparam name="TColumns"></typeparam>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.TableBuilder`1.#ctor(System.Data.Entity.Migrations.Model.CreateTableOperation,System.Data.Entity.Migrations.DbMigration)">
      <summary>TableBuilder 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="createTableOperation">추가로 구성할 테이블 만들기 작업입니다.</param>
      <param name="migration">만들어진 테이블의 마이그레이션입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.TableBuilder`1.Equals(System.Object)">
      <summary>지정한 개체와 현재 개체가 같은지 여부를 확인합니다.</summary>
      <returns>지정된 개체가 현재 개체와 동일하면 true이고 그렇지 않으면 false입니다.</returns>
      <param name="obj">현재 개체와 비교할 개체입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.TableBuilder`1.ForeignKey(System.String,System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Boolean,System.String,System.Object)">
      <summary>테이블에 생성할 외래 키 제약 조건을 지정합니다.Entity Framework 마이그레이션 API는 응용 프로그램의 최종 사용자와 같은 신뢰할 수 없는 소스에서 제공하는 입력을 허용하도록 디자인되지 않았습니다.이러한 소스의 입력이 허용되는 경우 이러한 API에 전달하기 전에 유효성 검사를 수행하여 SQL 삽입 공격 등으로부터 보호해야 합니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 그 자체입니다.</returns>
      <param name="principalTable">외래 키 제약 조건이 대상으로 하는 테이블의 이름입니다.</param>
      <param name="dependentKeyExpression">외래 키의 속성을 나타내는 람다 식입니다.C#: t =&amp;gt; t.PropertyOne VB.Net: Function(t) t.PropertyOne 여러 개의 속성으로 외래 키가 구성된 경우에는 해당 속성을 포함하는 익명 형식을 지정합니다.C#: t =&amp;gt; new { t.PropertyOne, t.PropertyTwo } VB.Net: Function(t) New With { t.PropertyOne, t.PropertyTwo }</param>
      <param name="cascadeDelete">외래 키 제약 조건에 대해 하위 삭제를 구성할지 여부를 나타내는 값입니다.</param>
      <param name="name">이 외래 키 제약 조건의 이름입니다.이름을 제공하지 않으면 기본 이름이 계산됩니다.</param>
      <param name="anonymousArguments">공급자가 처리할 수 있는 추가 인수입니다.익명 형식 구문을 사용하여 인수를 지정할 수 있습니다(예:'new { SampleArgument = "MyValue" }').</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.TableBuilder`1.GetHashCode">
      <summary>현재 개체에 대한 해시 코드를 가져옵니다.</summary>
      <returns>현재 개체에 대한 해시 코드입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.TableBuilder`1.GetType">
      <summary>현재 인스턴스의 <see cref="T:System.Type" />을 가져옵니다.</summary>
      <returns>현재 인스턴스의 정확한 런타임 형식입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.TableBuilder`1.Index(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Boolean,System.Boolean,System.Object)"></member>
    <member name="M:System.Data.Entity.Migrations.Builders.TableBuilder`1.MemberwiseClone">
      <summary>현재 <see cref="T:System.Object" />의 단순 복사본을 만듭니다.</summary>
      <returns>현재 <see cref="T:System.Object" />의 단순 복사본입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.TableBuilder`1.PrimaryKey(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.String,System.Boolean,System.Object)">
      <summary>테이블에 대한 기본 키를 지정합니다.Entity Framework 마이그레이션 API는 응용 프로그램의 최종 사용자와 같은 신뢰할 수 없는 소스에서 제공하는 입력을 허용하도록 디자인되지 않았습니다.이러한 소스의 입력이 허용되는 경우 이러한 API에 전달하기 전에 유효성 검사를 수행하여 SQL 삽입 공격 등으로부터 보호해야 합니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 그 자체입니다.</returns>
      <param name="keyExpression">기본 키로 사용할 속성을 나타내는 람다 식입니다.C#: t =&amp;gt; t.Id VB.Net: Function(t) t.Id 기본 키가 여러 개의 속성으로 구성된 경우에는 해당 속성을 포함하는 익명 형식을 지정합니다.C#: t =&amp;gt; new { t.Id1, t.Id2 } VB.Net: Function(t) New With { t.Id1, t.Id2 }</param>
      <param name="name">기본 키의 이름입니다.null을 제공하지 않으면 기본 이름이 생성됩니다.</param>
      <param name="clustered">이 키가 클러스터된 기본 키인지 여부를 나타내는 값입니다.</param>
      <param name="anonymousArguments">공급자가 처리할 수 있는 추가 인수입니다.익명 형식 구문을 사용하여 인수를 지정할 수 있습니다(예:'new { SampleArgument = "MyValue" }').</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.TableBuilder`1.ToString">
      <summary>현재 개체의 문자열 표현을 반환합니다.</summary>
      <returns>현재 개체의 문자열 표현입니다.</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator">
      <summary>코드 기반 마이그레이션에 대한 C# 코드를 생성합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Byte[])">
      <summary>
        <see cref="T:byte[]" /> 열의 기본값을 지정하기 위한 코드를 생성합니다.</summary>
      <returns>기본값을 나타내는 코드입니다.</returns>
      <param name="defaultValue">기본값으로 사용할 값입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Collections.Generic.IEnumerable{System.Data.Entity.Migrations.Model.MigrationOperation},System.String,System.String)">
      <summary>사용자가 보고 편집할 수 있는 기본 코드 파일을 생성합니다.</summary>
      <returns>생성된 코드입니다.</returns>
      <param name="operations">마이그레이션으로 수행할 작업입니다.</param>
      <param name="namespace">코드를 생성할 네임스페이스입니다.</param>
      <param name="className">생성할 클래스의 이름입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Collections.Generic.IEnumerable{System.String},System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>람다 식을 사용하여 열 이름 집합을 지정하기 위한 코드를 생성합니다.</summary>
      <param name="columns">코드를 생성할 열입니다.</param>
      <param name="writer">생성된 코드를 추가할 텍스트 기록기입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.AddColumnOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.AddColumnOperation" />을 수행할 코드를 생성합니다.</summary>
      <param name="addColumnOperation">코드를 생성할 작업입니다.</param>
      <param name="writer">생성된 코드를 추가할 텍스트 기록기입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.AddForeignKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.AddForeignKeyOperation" />을 수행할 코드를 생성합니다.</summary>
      <param name="addForeignKeyOperation">코드를 생성할 작업입니다.</param>
      <param name="writer">생성된 코드를 추가할 텍스트 기록기입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation" />을 수행할 코드를 생성합니다.</summary>
      <param name="addPrimaryKeyOperation">코드를 생성할 작업입니다.</param>
      <param name="writer">생성된 코드를 추가할 텍스트 기록기입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.AlterColumnOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.AlterColumnOperation" />을 수행할 코드를 생성합니다.</summary>
      <param name="alterColumnOperation">코드를 생성할 작업입니다.</param>
      <param name="writer">생성된 코드를 추가할 텍스트 기록기입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.AlterProcedureOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.AlterProcedureOperation" />을 수행할 코드를 생성합니다.</summary>
      <param name="alterProcedureOperation">코드를 생성할 작업입니다.</param>
      <param name="writer">생성된 코드를 추가할 텍스트 기록기입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.ColumnModel,System.Data.Entity.Migrations.Utilities.IndentedTextWriter,System.Boolean)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.ColumnModel" />에 대한 정의를 지정하기 위한 코드를 생성합니다.</summary>
      <param name="column">코드를 생성할 열 정의입니다.</param>
      <param name="writer">생성된 코드를 추가할 텍스트 기록기입니다.</param>
      <param name="emitName">정의에 열 이름을 포함할지 여부를 나타내는 값입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.CreateIndexOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.CreateIndexOperation" />을 수행할 코드를 생성합니다.</summary>
      <param name="createIndexOperation">코드를 생성할 작업입니다.</param>
      <param name="writer">생성된 코드를 추가할 텍스트 기록기입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.CreateProcedureOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.CreateProcedureOperation" />을 수행할 코드를 생성합니다.</summary>
      <param name="createProcedureOperation">코드를 생성할 작업입니다.</param>
      <param name="writer">생성된 코드를 추가할 텍스트 기록기입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.CreateTableOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.CreateTableOperation" />을 수행할 코드를 생성합니다.</summary>
      <param name="createTableOperation">코드를 생성할 작업입니다.</param>
      <param name="writer">생성된 코드를 추가할 텍스트 기록기입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.DropColumnOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.DropColumnOperation" />을 수행할 코드를 생성합니다.</summary>
      <param name="dropColumnOperation">코드를 생성할 작업입니다.</param>
      <param name="writer">생성된 코드를 추가할 텍스트 기록기입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.DropForeignKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.DropForeignKeyOperation" />을 수행할 코드를 생성합니다.</summary>
      <param name="dropForeignKeyOperation">코드를 생성할 작업입니다.</param>
      <param name="writer">생성된 코드를 추가할 텍스트 기록기입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.DropIndexOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.DropIndexOperation" />을 수행할 코드를 생성합니다.</summary>
      <param name="dropIndexOperation">코드를 생성할 작업입니다.</param>
      <param name="writer">생성된 코드를 추가할 텍스트 기록기입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.DropPrimaryKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.DropPrimaryKeyOperation" />을 수행할 코드를 생성합니다.</summary>
      <param name="dropPrimaryKeyOperation">코드를 생성할 작업입니다.</param>
      <param name="writer">생성된 코드를 추가할 텍스트 기록기입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.DropProcedureOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.DropProcedureOperation" />을 수행할 코드를 생성합니다.</summary>
      <param name="dropProcedureOperation">코드를 생성할 작업입니다.</param>
      <param name="writer">생성된 코드를 추가할 텍스트 기록기입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.DropTableOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.DropTableOperation" />을 수행할 코드를 생성합니다.</summary>
      <param name="dropTableOperation">코드를 생성할 작업입니다.</param>
      <param name="writer">생성된 코드를 추가할 텍스트 기록기입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.MoveProcedureOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.MoveProcedureOperation" />을 수행할 코드를 생성합니다.</summary>
      <param name="moveProcedureOperation">코드를 생성할 작업입니다.</param>
      <param name="writer">생성된 코드를 추가할 텍스트 기록기입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.MoveTableOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.MoveTableOperation" />을 수행할 코드를 생성합니다.</summary>
      <param name="moveTableOperation">코드를 생성할 작업입니다.</param>
      <param name="writer">생성된 코드를 추가할 텍스트 기록기입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.ParameterModel,System.Data.Entity.Migrations.Utilities.IndentedTextWriter,System.Boolean)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.ParameterModel" />에 대한 정의를 지정하기 위한 코드를 생성합니다.</summary>
      <param name="parameterModel">코드를 생성할 매개 변수 정의입니다.</param>
      <param name="writer">생성된 코드를 추가할 텍스트 기록기입니다.</param>
      <param name="emitName">정의에 열 이름을 포함할지 여부를 나타내는 값입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.RenameColumnOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.RenameColumnOperation" />을 수행할 코드를 생성합니다.</summary>
      <param name="renameColumnOperation">코드를 생성할 작업입니다.</param>
      <param name="writer">생성된 코드를 추가할 텍스트 기록기입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.RenameProcedureOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.RenameProcedureOperation" />을 수행할 코드를 생성합니다.</summary>
      <param name="renameProcedureOperation">코드를 생성할 작업입니다.</param>
      <param name="writer">생성된 코드를 추가할 텍스트 기록기입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.RenameTableOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.RenameTableOperation" />을 수행할 코드를 생성합니다.</summary>
      <param name="renameTableOperation">코드를 생성할 작업입니다.</param>
      <param name="writer">생성된 코드를 추가할 텍스트 기록기입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.SqlOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.SqlOperation" />을 수행할 코드를 생성합니다.</summary>
      <param name="sqlOperation">코드를 생성할 작업입니다.</param>
      <param name="writer">생성된 코드를 추가할 텍스트 기록기입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Spatial.DbGeography)">
      <summary>
        <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 열의 기본값을 지정하기 위한 코드를 생성합니다.</summary>
      <returns>기본값을 나타내는 코드입니다.</returns>
      <param name="defaultValue">기본값으로 사용할 값입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Spatial.DbGeometry)">
      <summary>
        <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 열의 기본값을 지정하기 위한 코드를 생성합니다.</summary>
      <returns>기본값을 나타내는 코드입니다.</returns>
      <param name="defaultValue">기본값으로 사용할 값입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.DateTime)">
      <summary>
        <see cref="T:System.DateTime" /> 열의 기본값을 지정하기 위한 코드를 생성합니다.</summary>
      <returns>기본값을 나타내는 코드입니다.</returns>
      <param name="defaultValue">기본값으로 사용할 값입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.DateTimeOffset)">
      <summary>
        <see cref="T:System.DateTimeOffset" /> 열의 기본값을 지정하기 위한 코드를 생성합니다.</summary>
      <returns>기본값을 나타내는 코드입니다.</returns>
      <param name="defaultValue">기본값으로 사용할 값입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Decimal)">
      <summary>
        <see cref="T:System.Decimal" /> 열의 기본값을 지정하기 위한 코드를 생성합니다.</summary>
      <returns>기본값을 나타내는 코드입니다.</returns>
      <param name="defaultValue">기본값으로 사용할 값입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Guid)">
      <summary>
        <see cref="T:System.Guid" /> 열의 기본값을 지정하기 위한 코드를 생성합니다.</summary>
      <returns>기본값을 나타내는 코드입니다.</returns>
      <param name="defaultValue">기본값으로 사용할 값입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Int64)">
      <summary>
        <see cref="T:System.Int64" /> 열의 기본값을 지정하기 위한 코드를 생성합니다.</summary>
      <returns>기본값을 나타내는 코드입니다.</returns>
      <param name="defaultValue">기본값으로 사용할 값입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Object)">
      <summary>알 수 없는 데이터 타입의 열에 대한 기본값을 지정하기 위한 코드를 생성합니다.</summary>
      <returns>기본값을 나타내는 코드입니다.</returns>
      <param name="defaultValue">기본값으로 사용할 값입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Single)">
      <summary>
        <see cref="T:System.Single" /> 열의 기본값을 지정하기 위한 코드를 생성합니다.</summary>
      <returns>기본값을 나타내는 코드입니다.</returns>
      <param name="defaultValue">기본값으로 사용할 값입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.String)">
      <summary>
        <see cref="T:System.String" /> 열의 기본값을 지정하기 위한 코드를 생성합니다.</summary>
      <returns>기본값을 나타내는 코드입니다.</returns>
      <param name="defaultValue">기본값으로 사용할 값입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.String,System.Collections.Generic.IEnumerable{System.Data.Entity.Migrations.Model.MigrationOperation},System.String,System.String,System.String,System.String)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Design.ScaffoldedMigration" />과 함께 코드 숨김 파일을 생성합니다.</summary>
      <returns>생성된 코드입니다.</returns>
      <param name="migrationId">마이그레이션의 고유 식별자입니다.</param>
      <param name="operations">코드를 생성할 작업입니다.</param>
      <param name="sourceModel">마이그레이션 메타데이터에 저장할 소스 모델입니다.</param>
      <param name="targetModel">마이그레이션 메타데이터에 저장할 대상 모델입니다.</param>
      <param name="namespace">코드를 생성할 네임스페이스입니다.</param>
      <param name="className">생성할 클래스의 이름입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.String,System.String,System.String,System.String,System.String)">
      <summary>마이그레이션 메타데이터와 함께 코드 숨김 파일을 생성합니다.</summary>
      <returns>생성된 코드입니다.</returns>
      <param name="migrationId">마이그레이션의 고유 식별자입니다.</param>
      <param name="sourceModel">마이그레이션 메타데이터에 저장할 소스 모델입니다.</param>
      <param name="targetModel">마이그레이션 메타데이터에 저장할 대상 모델입니다.</param>
      <param name="namespace">코드를 생성할 네임스페이스입니다.</param>
      <param name="className">생성할 클래스의 이름입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.TimeSpan)">
      <summary>
        <see cref="T:System.TimeSpan" /> 열의 기본값을 지정하기 위한 코드를 생성합니다.</summary>
      <returns>기본값을 나타내는 코드입니다.</returns>
      <param name="defaultValue">기본값으로 사용할 값입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.GenerateInline(System.Data.Entity.Migrations.Model.AddForeignKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.AddForeignKeyOperation" />을 <see cref="T:System.Data.Entity.Migrations.Model.CreateTableOperation" /> 중에 수행하기 위한 코드를 생성합니다.</summary>
      <param name="addForeignKeyOperation">코드를 생성할 작업입니다.</param>
      <param name="writer">생성된 코드를 추가할 텍스트 기록기입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.GenerateInline(System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation" />을 <see cref="T:System.Data.Entity.Migrations.Model.CreateTableOperation" /> 중에 수행하기 위한 코드를 생성합니다.</summary>
      <param name="addPrimaryKeyOperation">코드를 생성할 작업입니다.</param>
      <param name="writer">생성된 코드를 추가할 텍스트 기록기입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.GenerateInline(System.Data.Entity.Migrations.Model.CreateIndexOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.CreateIndexOperation" />을 <see cref="T:System.Data.Entity.Migrations.Model.CreateTableOperation" /> 중에 수행하기 위한 코드를 생성합니다.</summary>
      <param name="createIndexOperation">코드를 생성할 작업입니다.</param>
      <param name="writer">생성된 코드를 추가할 텍스트 기록기입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Quote(System.String)">
      <summary>문자열에 저장하도록 허용하기 위해 적합한 이스케이프 처리를 사용하여 식별자에 따옴표를 붙입니다.</summary>
      <returns>따옴표를 붙인 식별자입니다.</returns>
      <param name="identifier">따옴표를 붙일 식별자입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.ScrubName(System.String)">
      <summary>데이터베이스 아티팩트의 이름에서 잘못된 문자를 제거합니다.</summary>
      <returns>삭제된 이름입니다.</returns>
      <param name="name">삭제할 이름입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.TranslateColumnType(System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind)">
      <summary>지정된 데이터 타입의 열에 사용할 형식 이름을 가져옵니다.</summary>
      <returns>생성된 마이그레이션에 사용할 형식 이름입니다.</returns>
      <param name="primitiveTypeKind">변환할 데이터 타입입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.WriteClassEnd(System.String,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>WriteClassStart로 시작된 클래스의 닫는 코드를 생성합니다.</summary>
      <param name="writer">생성된 코드를 추가할 텍스트 기록기입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.WriteClassStart(System.String,System.String,System.Data.Entity.Migrations.Utilities.IndentedTextWriter,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.String})">
      <summary>문 및 클래스 정의를 사용하여 네임스페이스를 생성합니다.</summary>
      <param name="namespace">코드를 생성할 네임스페이스입니다.</param>
      <param name="className">생성할 클래스의 이름입니다.</param>
      <param name="writer">생성된 코드를 추가할 텍스트 기록기입니다.</param>
      <param name="base">생성된 클래스의 기본 클래스입니다.</param>
      <param name="designer">코드 숨김 파일에 대해 이 클래스를 생성 중인지를 나타내는 값입니다.</param>
      <param name="namespaces">using 지시문을 추가할 네임스페이스입니다.Null인 경우 GetDefaultNamespaces에서 반환된 네임스페이스가 사용됩니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.WriteProperty(System.String,System.String,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>코드 숨김 파일에서 소스 또는 대상 모델을 반환하기 위한 속성을 생성합니다.</summary>
      <param name="name">속성의 이름입니다.</param>
      <param name="value">반환할 값입니다.</param>
      <param name="writer">생성된 코드를 추가할 텍스트 기록기입니다.</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.Design.MigrationCodeGenerator">
      <summary>코드 기반 마이그레이션에 대한 코드를 생성하는 공급자의 기본 클래스입니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.MigrationCodeGenerator.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Design.MigrationCodeGenerator" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.MigrationCodeGenerator.Generate(System.String,System.Collections.Generic.IEnumerable{System.Data.Entity.Migrations.Model.MigrationOperation},System.String,System.String,System.String,System.String)">
      <summary>사용자 프로젝트에 추가해야 하는 코드를 생성합니다.</summary>
      <returns>생성된 코드입니다.</returns>
      <param name="migrationId">마이그레이션의 고유 식별자입니다.</param>
      <param name="operations">마이그레이션으로 수행할 작업입니다.</param>
      <param name="sourceModel">마이그레이션 메타데이터에 저장할 소스 모델입니다.</param>
      <param name="targetModel">마이그레이션 메타데이터에 저장할 대상 모델입니다.</param>
      <param name="namespace">코드를 생성할 네임스페이스입니다.</param>
      <param name="className">생성할 클래스의 이름입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.MigrationCodeGenerator.GetDefaultNamespaces(System.Boolean)">
      <summary>생성된 모든 코드에 대해 "using" 또는 "Imports" 지시문으로 출력해야 하는 기본 네임스페이스를 가져옵니다.</summary>
      <returns>정렬된 네임스페이스 이름 목록입니다.</returns>
      <param name="designer">코드 숨김 파일에 대해 이 클래스를 생성 중인지를 나타내는 값입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.MigrationCodeGenerator.GetNamespaces(System.Collections.Generic.IEnumerable{System.Data.Entity.Migrations.Model.MigrationOperation})">
      <summary>지정된 작업으로 생성된 코드를 처리하기 위해 "using" 또는 "Imports" 지시문으로 출력해야 하는 네임스페이스를 가져옵니다.</summary>
      <returns>정렬된 네임스페이스 이름 목록입니다.</returns>
      <param name="operations">코드를 생성할 작업입니다.</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.Design.MigrationScaffolder">
      <summary>보류 중인 모델 변경 내용을 데이터베이스에 적용하기 위해 코드 기반 마이그레이션을 스캐폴드합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.MigrationScaffolder.#ctor(System.Data.Entity.Migrations.DbMigrationsConfiguration)">
      <summary>MigrationScaffolder 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="migrationsConfiguration">스캐폴딩에 사용할 구성입니다.</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Design.MigrationScaffolder.Namespace">
      <summary>마이그레이션의 생성된 코드에 사용되는 네임스페이스를 가져오거나 설정합니다.기본적으로 생성자에 전달되는 마이그레이션 구성 개체의 MigrationsNamespace와 동일합니다.VB.NET 프로젝트의 경우에는 프로젝트의 루트 네임스페이스를 고려하여 업데이트해야 합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.MigrationScaffolder.Scaffold(System.String)">
      <summary>모든 보류 중인 모델 변경 내용을 데이터베이스에 적용하기 위해 코드 기반 마이그레이션을 스캐폴드합니다.</summary>
      <returns>스캐폴드된 마이그레이션입니다.</returns>
      <param name="migrationName">스캐폴드된 마이그레이션에 사용할 이름입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.MigrationScaffolder.Scaffold(System.String,System.Boolean)">
      <summary>모든 보류 중인 모델 변경 내용을 데이터베이스에 적용하기 위해 코드 기반 마이그레이션을 스캐폴드합니다.</summary>
      <returns>스캐폴드된 마이그레이션입니다.</returns>
      <param name="migrationName">스캐폴드된 마이그레이션에 사용할 이름입니다.</param>
      <param name="ignoreChanges">모델 변경 내용을 포함할지 여부입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.MigrationScaffolder.ScaffoldInitialCreate">
      <summary>이전에 실행된 데이터베이스 이니셜라이저에 따라 초기 코드 기반 마이그레이션이 스캐폴드됩니다.</summary>
      <returns>스캐폴드된 마이그레이션입니다.</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Design.ScaffoldedMigration">
      <summary>스캐폴드되었고 파일에 쓸 준비가 된 코드 기반 마이그레이션을 나타냅니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ScaffoldedMigration.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Design.ScaffoldedMigration" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Design.ScaffoldedMigration.DesignerCode">
      <summary>코드 숨김 파일에 저장해야 하는 스캐폴드된 마이그레이션 코드를 가져오거나 설정합니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Design.ScaffoldedMigration.Directory">
      <summary>이 마이그레이션을 저장해야 하는 사용자 프로젝트의 하위 디렉터리를 가져오거나 설정합니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Design.ScaffoldedMigration.IsRescaffold">
      <summary>마이그레이션이 다시 스캐폴드되었는지 여부를 가져오거나 설정합니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Design.ScaffoldedMigration.Language">
      <summary>이 마이그레이션에 사용할 프로그래밍 언어를 가져오거나 설정합니다.일반적으로 생성된 코드의 파일 확장명에 사용됩니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Design.ScaffoldedMigration.MigrationId">
      <summary>이 마이그레이션의 고유 식별자를 가져오거나 설정합니다.일반적으로 생성된 코드의 파일 이름에 사용됩니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Design.ScaffoldedMigration.Resources">
      <summary>마이그레이션 리소스 파일에 추가할 문자열 리소스의 사전을 가져옵니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Design.ScaffoldedMigration.UserCode">
      <summary>사용자가 편집할 수 있는 스캐폴드된 마이그레이션 코드를 가져오거나 설정합니다.</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Design.ToolingFacade">
      <summary>Visual Studio에서 편집 중인 응용 프로그램과 상호 작용해야 하는 마이그레이션 관련 명령을 실행하기 위해 디자인 타임 도구에서 사용되는 도우미 클래스입니다.응용 프로그램을 편집하는 중이므로 항상 최신 버전이 로드되도록 보장하기 위해 어셈블리를 별도의 AppDomain에서 로드해야 합니다.또한 구성이 적용되도록 보장하기 위해 시작 프로젝트의 App/Web.config 파일도 복사됩니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.Data.Entity.Infrastructure.DbConnectionInfo)">
      <summary>ToolingFacade 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="migrationsAssemblyName">사용할 마이그레이션 구성을 포함하는 어셈블리의 이름입니다.</param>
      <param name="contextAssemblyName">사용할 DbContext를 포함하는 어셈블리의 이름입니다.</param>
      <param name="configurationTypeName">사용할 마이그레이션 구성의 정규화된 네임스페이스 이름입니다.</param>
      <param name="workingDirectory">컴파일된 어셈블리를 포함하는 작업 디렉터리입니다.</param>
      <param name="configurationFilePath">시작 프로젝트의 구성 파일의 경로입니다.</param>
      <param name="dataDirectory">시작 프로젝트의 응용 프로그램 데이터 디렉터리의 경로입니다.일반적으로 웹 응용 프로그램에 대한 App_Data 디렉터리 또는 실행 파일에 대한 작업 디렉터리입니다.</param>
      <param name="connectionStringInfo">마이그레이션할 데이터베이스에 대한 연결입니다.null을 제공하지 않으면 컨텍스트에 대한 기본 연결이 사용됩니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.Dispose">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Design.ToolingFacade" /> 클래스의 현재 인스턴스에서 사용하는 리소스를 해제합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.Dispose(System.Boolean)">
      <summary>facade에서 사용되는 모든 리소스를 해제합니다.</summary>
      <param name="disposing">관리되는 리소스와 관리되지 않는 리소스를 모두 해제하려면 true로 설정하고, 관리되지 않는 리소스만 해제하려면 false로 설정합니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.Finalize">
      <summary>facade에서 사용되는 모든 관리되지 않는 리소스를 해제합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.GetContextType(System.String)">
      <summary>
        <see cref="T:System.Data.Entity.DbContext" />에서 파생되는 형식의 정규화된 이름을 가져옵니다.</summary>
      <returns>검색된 컨텍스트 형식입니다.</returns>
      <param name="contextTypeName">컨텍스트 형식의 이름입니다.null인 경우 어셈블리에서 검색된 단일 컨텍스트 형식이 반환됩니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.GetContextTypes">
      <summary>
        <see cref="T:System.Data.Entity.DbContext" />에서 파생되는 모든 형식의 정규화된 이름을 가져옵니다.</summary>
      <returns>발견된 모든 컨텍스트 형식입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.GetDatabaseMigrations">
      <summary>데이터베이스에 적용된 모든 마이그레이션의 목록을 가져옵니다.</summary>
      <returns>적용된 마이그레이션의 ID입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.GetPendingMigrations">
      <summary>데이터베이스에 적용되지 않은 모든 마이그레이션의 목록을 가져옵니다.</summary>
      <returns>보류 중인 마이그레이션의 ID입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Design.ToolingFacade.LogInfoDelegate">
      <summary>정보를 기록하기 위해 실행할 작업을 가져오거나 설정합니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Design.ToolingFacade.LogVerboseDelegate">
      <summary>상세 정보를 기록하기 위해 실행할 작업을 가져오거나 설정합니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Design.ToolingFacade.LogWarningDelegate">
      <summary>경고를 기록하기 위해 실행할 작업을 가져오거나 설정합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.Scaffold(System.String,System.String,System.String,System.Boolean)">
      <summary>모든 보류 중인 모델 변경 내용을 적용할 코드 기반 마이그레이션을 스캐폴드합니다.</summary>
      <returns>스캐폴드된 마이그레이션입니다.</returns>
      <param name="migrationName">생성된 마이그레이션에 대한 이름입니다.</param>
      <param name="language">생성된 마이그레이션의 프로그래밍 언어입니다.</param>
      <param name="rootNamespace">마이그레이션을 추가할 프로젝트의 루트 네임스페이스입니다.</param>
      <param name="ignoreChanges">모델 변경 내용을 포함할지 여부입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.ScaffoldInitialCreate(System.String,System.String)">
      <summary>이전에 실행된 데이터베이스 이니셜라이저에 따라 초기 코드 기반 마이그레이션이 스캐폴드됩니다.</summary>
      <returns>스캐폴드된 마이그레이션입니다.</returns>
      <param name="language">생성된 마이그레이션의 프로그래밍 언어입니다.</param>
      <param name="rootNamespace">마이그레이션을 추가할 프로젝트의 루트 네임스페이스입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.ScriptUpdate(System.String,System.String,System.Boolean)">
      <summary>두 마이그레이션 사이에 마이그레이션할 SQL 스크립트를 생성합니다.</summary>
      <returns>생성된 SQL 스크립트입니다.</returns>
      <param name="sourceMigration">업데이트할 마이그레이션입니다.Null이 제공된 경우 현재 데이터베이스를 업데이트할 스크립트가 생성됩니다.</param>
      <param name="targetMigration">업데이트할 마이그레이션입니다.Null이 제공된 경우 최신 마이그레이션으로 업데이트할 스크립트가 생성됩니다.</param>
      <param name="force">자동 마이그레이션 중 데이터 손실이 허용되는지 여부를 나타내는 값입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.Update(System.String,System.Boolean)">
      <summary>데이터베이스를 지정된 마이그레이션으로 업데이트합니다.</summary>
      <param name="targetMigration">마이그레이션할 마이그레이션의 ID입니다.Null이 제공된 경우 데이터베이스가 최신 마이그레이션으로 업데이트됩니다.</param>
      <param name="force">자동 마이그레이션 중 데이터 손실이 허용되는지 여부를 나타내는 값입니다.</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator">
      <summary>코드 기반 마이그레이션에 대한 VB.Net 코드를 생성합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Byte[])">
      <summary>
        <see cref="T:byte[]" /> 열의 기본값을 지정하기 위한 코드를 생성합니다.</summary>
      <returns>기본값을 나타내는 코드입니다.</returns>
      <param name="defaultValue">기본값으로 사용할 값입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Collections.Generic.IEnumerable{System.Data.Entity.Migrations.Model.MigrationOperation},System.String,System.String)">
      <summary>사용자가 보고 편집할 수 있는 기본 코드 파일을 생성합니다.</summary>
      <returns>생성된 코드입니다.</returns>
      <param name="operations">마이그레이션으로 수행할 작업입니다.</param>
      <param name="namespace">코드를 생성할 네임스페이스입니다.</param>
      <param name="className">생성할 클래스의 이름입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Collections.Generic.IEnumerable{System.String},System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>람다 식을 사용하여 열 이름 집합을 지정하기 위한 코드를 생성합니다.</summary>
      <param name="columns">코드를 생성할 열입니다.</param>
      <param name="writer">생성된 코드를 추가할 텍스트 기록기입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.AddColumnOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.AddColumnOperation" />을 수행할 코드를 생성합니다.</summary>
      <param name="addColumnOperation">코드를 생성할 작업입니다.</param>
      <param name="writer">생성된 코드를 추가할 텍스트 기록기입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.AddForeignKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.AddForeignKeyOperation" />을 수행할 코드를 생성합니다.</summary>
      <param name="addForeignKeyOperation">코드를 생성할 작업입니다.</param>
      <param name="writer">생성된 코드를 추가할 텍스트 기록기입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation" />을 수행할 코드를 생성합니다.</summary>
      <param name="addPrimaryKeyOperation">코드를 생성할 작업입니다.</param>
      <param name="writer">생성된 코드를 추가할 텍스트 기록기입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.AlterColumnOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.AlterColumnOperation" />을 수행할 코드를 생성합니다.</summary>
      <param name="alterColumnOperation">코드를 생성할 작업입니다.</param>
      <param name="writer">생성된 코드를 추가할 텍스트 기록기입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.AlterProcedureOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.AlterProcedureOperation" />을 수행할 코드를 생성합니다.</summary>
      <param name="alterProcedureOperation">코드를 생성할 작업입니다.</param>
      <param name="writer">생성된 코드를 추가할 텍스트 기록기입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.ColumnModel,System.Data.Entity.Migrations.Utilities.IndentedTextWriter,System.Boolean)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.ColumnModel" />에 대한 정의를 지정하기 위한 코드를 생성합니다.</summary>
      <param name="column">코드를 생성할 열 정의입니다.</param>
      <param name="writer">생성된 코드를 추가할 텍스트 기록기입니다.</param>
      <param name="emitName">정의에 열 이름을 포함할지 여부를 나타내는 값입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.CreateIndexOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.CreateIndexOperation" />을 수행할 코드를 생성합니다.</summary>
      <param name="createIndexOperation">코드를 생성할 작업입니다.</param>
      <param name="writer">생성된 코드를 추가할 텍스트 기록기입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.CreateProcedureOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.CreateProcedureOperation" />을 수행할 코드를 생성합니다.</summary>
      <param name="createProcedureOperation">코드를 생성할 작업입니다.</param>
      <param name="writer">생성된 코드를 추가할 텍스트 기록기입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.CreateTableOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.CreateTableOperation" />을 수행할 코드를 생성합니다.</summary>
      <param name="createTableOperation">코드를 생성할 작업입니다.</param>
      <param name="writer">생성된 코드를 추가할 텍스트 기록기입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.DropColumnOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.DropColumnOperation" />을 수행할 코드를 생성합니다.</summary>
      <param name="dropColumnOperation">코드를 생성할 작업입니다.</param>
      <param name="writer">생성된 코드를 추가할 텍스트 기록기입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.DropForeignKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.DropForeignKeyOperation" />을 수행할 코드를 생성합니다.</summary>
      <param name="dropForeignKeyOperation">코드를 생성할 작업입니다.</param>
      <param name="writer">생성된 코드를 추가할 텍스트 기록기입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.DropIndexOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.DropIndexOperation" />을 수행할 코드를 생성합니다.</summary>
      <param name="dropIndexOperation">코드를 생성할 작업입니다.</param>
      <param name="writer">생성된 코드를 추가할 텍스트 기록기입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.DropPrimaryKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.DropPrimaryKeyOperation" />을 수행할 코드를 생성합니다.</summary>
      <param name="dropPrimaryKeyOperation">코드를 생성할 작업입니다.</param>
      <param name="writer">생성된 코드를 추가할 텍스트 기록기입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.DropProcedureOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.DropProcedureOperation" />을 수행할 코드를 생성합니다.</summary>
      <param name="dropProcedureOperation">코드를 생성할 작업입니다.</param>
      <param name="writer">생성된 코드를 추가할 텍스트 기록기입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.DropTableOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.DropTableOperation" />을 수행할 코드를 생성합니다.</summary>
      <param name="dropTableOperation">코드를 생성할 작업입니다.</param>
      <param name="writer">생성된 코드를 추가할 텍스트 기록기입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.MoveProcedureOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.MoveProcedureOperation" />을 수행할 코드를 생성합니다.</summary>
      <param name="moveProcedureOperation">코드를 생성할 작업입니다.</param>
      <param name="writer">생성된 코드를 추가할 텍스트 기록기입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.MoveTableOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.MoveTableOperation" />을 수행할 코드를 생성합니다.</summary>
      <param name="moveTableOperation">코드를 생성할 작업입니다.</param>
      <param name="writer">생성된 코드를 추가할 텍스트 기록기입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.ParameterModel,System.Data.Entity.Migrations.Utilities.IndentedTextWriter,System.Boolean)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.ParameterModel" />을 수행할 코드를 생성합니다.</summary>
      <param name="parameterModel">코드를 생성할 매개 변수 모델 정의입니다.</param>
      <param name="writer">생성된 코드를 추가할 텍스트 기록기입니다.</param>
      <param name="emitName">정의에 열 이름을 포함하려면 true이고, 그렇지 않으면 false입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.RenameColumnOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.RenameColumnOperation" />을 수행할 코드를 생성합니다.</summary>
      <param name="renameColumnOperation">코드를 생성할 작업입니다.</param>
      <param name="writer">생성된 코드를 추가할 텍스트 기록기입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.RenameProcedureOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.RenameProcedureOperation" />을 수행할 코드를 생성합니다.</summary>
      <param name="renameProcedureOperation">코드를 생성할 작업입니다.</param>
      <param name="writer">생성된 코드를 추가할 텍스트 기록기입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.RenameTableOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.RenameTableOperation" />을 수행할 코드를 생성합니다.</summary>
      <param name="renameTableOperation">코드를 생성할 작업입니다.</param>
      <param name="writer">생성된 코드를 추가할 텍스트 기록기입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.SqlOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.SqlOperation" />을 수행할 코드를 생성합니다.</summary>
      <param name="sqlOperation">코드를 생성할 작업입니다.</param>
      <param name="writer">생성된 코드를 추가할 텍스트 기록기입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Spatial.DbGeography)">
      <summary>
        <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 열의 기본값을 지정하기 위한 코드를 생성합니다.</summary>
      <returns>기본값을 나타내는 코드입니다.</returns>
      <param name="defaultValue">기본값으로 사용할 값입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Spatial.DbGeometry)">
      <summary>
        <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 열의 기본값을 지정하기 위한 코드를 생성합니다.</summary>
      <returns>기본값을 나타내는 코드입니다.</returns>
      <param name="defaultValue">기본값으로 사용할 값입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.DateTime)">
      <summary>
        <see cref="T:System.DateTime" /> 열의 기본값을 지정하기 위한 코드를 생성합니다.</summary>
      <returns>기본값을 나타내는 코드입니다.</returns>
      <param name="defaultValue">기본값으로 사용할 값입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.DateTimeOffset)">
      <summary>
        <see cref="T:System.DateTimeOffset" /> 열의 기본값을 지정하기 위한 코드를 생성합니다.</summary>
      <returns>기본값을 나타내는 코드입니다.</returns>
      <param name="defaultValue">기본값으로 사용할 값입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Decimal)">
      <summary>
        <see cref="T:System.Decimal" /> 열의 기본값을 지정하기 위한 코드를 생성합니다.</summary>
      <returns>기본값을 나타내는 코드입니다.</returns>
      <param name="defaultValue">기본값으로 사용할 값입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Guid)">
      <summary>
        <see cref="T:System.Guid" /> 열의 기본값을 지정하기 위한 코드를 생성합니다.</summary>
      <returns>기본값을 나타내는 코드입니다.</returns>
      <param name="defaultValue">기본값으로 사용할 값입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Int64)">
      <summary>
        <see cref="T:System.Int64" /> 열의 기본값을 지정하기 위한 코드를 생성합니다.</summary>
      <returns>기본값을 나타내는 코드입니다.</returns>
      <param name="defaultValue">기본값으로 사용할 값입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Object)">
      <summary>알 수 없는 데이터 타입의 열에 대한 기본값을 지정하기 위한 코드를 생성합니다.</summary>
      <returns>기본값을 나타내는 코드입니다.</returns>
      <param name="defaultValue">기본값으로 사용할 값입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Single)">
      <summary>
        <see cref="T:System.Single" /> 열의 기본값을 지정하기 위한 코드를 생성합니다.</summary>
      <returns>기본값을 나타내는 코드입니다.</returns>
      <param name="defaultValue">기본값으로 사용할 값입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.String)">
      <summary>
        <see cref="T:System.String" /> 열의 기본값을 지정하기 위한 코드를 생성합니다.</summary>
      <returns>기본값을 나타내는 코드입니다.</returns>
      <param name="defaultValue">기본값으로 사용할 값입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.String,System.Collections.Generic.IEnumerable{System.Data.Entity.Migrations.Model.MigrationOperation},System.String,System.String,System.String,System.String)">
      <summary>마이그레이션 메타데이터와 함께 코드 숨김 파일을 생성합니다.</summary>
      <returns>생성된 코드입니다.</returns>
      <param name="migrationId">마이그레이션의 고유 식별자입니다.</param>
      <param name="operations">마이그레이션으로 수행할 작업입니다.</param>
      <param name="sourceModel">마이그레이션 메타데이터에 저장할 소스 모델입니다.</param>
      <param name="targetModel">마이그레이션 메타데이터에 저장할 대상 모델입니다.</param>
      <param name="namespace">코드를 생성할 네임스페이스입니다.</param>
      <param name="className">생성할 클래스의 이름입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.String,System.String,System.String,System.String,System.String)">
      <summary>마이그레이션 메타데이터와 함께 코드 숨김 파일을 생성합니다.</summary>
      <returns>생성된 코드입니다.</returns>
      <param name="migrationId">마이그레이션의 고유 식별자입니다.</param>
      <param name="sourceModel">마이그레이션 메타데이터에 저장할 소스 모델입니다.</param>
      <param name="targetModel">마이그레이션 메타데이터에 저장할 대상 모델입니다.</param>
      <param name="namespace">코드를 생성할 네임스페이스입니다.</param>
      <param name="className">생성할 클래스의 이름입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.TimeSpan)">
      <summary>
        <see cref="T:System.TimeSpan" /> 열의 기본값을 지정하기 위한 코드를 생성합니다.</summary>
      <returns>기본값을 나타내는 코드입니다.</returns>
      <param name="defaultValue">기본값으로 사용할 값입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.GenerateInline(System.Data.Entity.Migrations.Model.AddForeignKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.AddForeignKeyOperation" />을 <see cref="T:System.Data.Entity.Migrations.Model.CreateTableOperation" /> 중에 수행하기 위한 코드를 생성합니다.</summary>
      <param name="addForeignKeyOperation">코드를 생성할 작업입니다.</param>
      <param name="writer">생성된 코드를 추가할 텍스트 기록기입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.GenerateInline(System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation" />을 <see cref="T:System.Data.Entity.Migrations.Model.CreateTableOperation" /> 중에 수행하기 위한 코드를 생성합니다.</summary>
      <param name="addPrimaryKeyOperation">코드를 생성할 작업입니다.</param>
      <param name="writer">생성된 코드를 추가할 텍스트 기록기입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.GenerateInline(System.Data.Entity.Migrations.Model.CreateIndexOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.CreateIndexOperation" />을 <see cref="T:System.Data.Entity.Migrations.Model.CreateTableOperation" /> 중에 수행하기 위한 코드를 생성합니다.</summary>
      <param name="createIndexOperation">코드를 생성할 작업입니다.</param>
      <param name="writer">생성된 코드를 추가할 텍스트 기록기입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Quote(System.String)">
      <summary>문자열에 저장하도록 허용하기 위해 적합한 이스케이프 처리를 사용하여 식별자에 따옴표를 붙입니다.</summary>
      <returns>따옴표를 붙인 식별자입니다.</returns>
      <param name="identifier">따옴표를 붙일 식별자입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.ScrubName(System.String)">
      <summary>데이터베이스 아티팩트의 이름에서 잘못된 문자를 제거합니다.</summary>
      <returns>삭제된 이름입니다.</returns>
      <param name="name">삭제할 이름입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.TranslateColumnType(System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind)">
      <summary>지정된 데이터 타입의 열에 사용할 형식 이름을 가져옵니다.</summary>
      <returns>생성된 마이그레이션에 사용할 형식 이름입니다.</returns>
      <param name="primitiveTypeKind">변환할 데이터 타입입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.WriteClassEnd(System.String,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>WriteClassStart로 시작된 클래스의 닫는 코드를 생성합니다.</summary>
      <param name="writer">생성된 코드를 추가할 텍스트 기록기입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.WriteClassStart(System.String,System.String,System.Data.Entity.Migrations.Utilities.IndentedTextWriter,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.String})">
      <summary>문 및 클래스 정의를 사용하여 네임스페이스를 생성합니다.</summary>
      <param name="namespace">코드를 생성할 네임스페이스입니다.</param>
      <param name="className">생성할 클래스의 이름입니다.</param>
      <param name="writer">생성된 코드를 추가할 텍스트 기록기입니다.</param>
      <param name="base">생성된 클래스의 기본 클래스입니다.</param>
      <param name="designer">코드 숨김 파일에 대해 이 클래스를 생성 중인지를 나타내는 값입니다.</param>
      <param name="namespaces">Imports 지시문을 추가할 네임스페이스입니다.Null인 경우 GetDefaultNamespaces에서 반환된 네임스페이스가 사용됩니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.WriteProperty(System.String,System.String,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>코드 숨김 파일에서 소스 또는 대상 모델을 반환하기 위한 속성을 생성합니다.</summary>
      <param name="name">속성의 이름입니다.</param>
      <param name="value">반환할 값입니다.</param>
      <param name="writer">생성된 코드를 추가할 텍스트 기록기입니다.</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.History.HistoryContext">
      <summary>이 클래스는 Code First 마이그레이션이 데이터베이스에서 마이그레이션 기록을 읽고 쓰기 위해 사용됩니다.마이그레이션 기록 테이블의 정의를 사용자 지정하려면 이 클래스에서 파생하고 OnModelCreating을 재정의하면 됩니다.파생된 인스턴스는 <see cref="M:System.Data.Entity.Migrations.DbMigrationsConfiguration.SetHistoryContextFactory(System.String,System.Func{System.Data.Common.DbConnection,System.String,System.Data.Entity.Migrations.History.HistoryContext})" />를 사용하여 마이그레이션 구성별로 등록되거나 <see cref="T:System.Data.Entity.DbConfiguration" />을 사용하여 전체적으로 등록될 수 있습니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.History.HistoryContext.#ctor(System.Data.Common.DbConnection,System.String)">
      <summary>HistoryContext 클래스의 새 인스턴스를 초기화합니다.파생된 내역 컨텍스트를 만드는 경우 일반적으로 이와 동일한 3개의 매개 변수를 받아들이고 이 기본 생성자에 전달하는 생성자를 노출합니다.</summary>
      <param name="existingConnection">새 컨텍스트에 사용할 기존 연결입니다.</param>
      <param name="defaultSchema">마이그레이션되는 모델의 기본 스키마입니다.다른 스키마가 OnModelCreating에서 구성되어 있지 않은 경우 이 스키마가 마이그레이션 기록 테이블에 사용됩니다.</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.History.HistoryContext.CacheKey">
      <summary>이 컨텍스트에 대해 이전에 만들어진 모델을 찾는 데 사용되는 키를 가져옵니다.이 키는 새 컨텍스트 인스턴스가 만들어질 때마다 OnModelCreating을 처리하고 모델을 계산하는 것을 방지하기 위해 사용됩니다.기본적으로 이 속성은 기본 스키마를 반환합니다.대부분의 경우 이 속성을 재정의할 필요가 없습니다.그러나 OnModelCreating의 구현에 조건부 논리가 포함되어 동일한 데이터베이스 공급자와 기본 스키마에 대해 다른 모델이 만들어지는 경우에는 이 속성을 재정의하고 적절한 키를 계산해야 합니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.History.HistoryContext.DefaultSchema">
      <summary>마이그레이션되는 모델의 기본 스키마를 가져옵니다.다른 스키마가 OnModelCreating에서 구성되어 있지 않은 경우 이 스키마가 마이그레이션 기록 테이블에 사용됩니다.</summary>
    </member>
    <member name="F:System.Data.Entity.Migrations.History.HistoryContext.DefaultTableName">
      <summary>마이그레이션 기록 테이블에 사용되는 기본 이름입니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.History.HistoryContext.History">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.History.HistoryRow" /> 인스턴스를 읽고 쓰는 데 사용될 수 있는 <see cref="T:System.Data.Entity.DbSet`1" />을 가져오거나 설정합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.History.HistoryContext.OnModelCreating(System.Data.Entity.DbModelBuilder)">
      <summary>마이그레이션 기록 테이블에 대한 기본 구성을 적용합니다.이 메서드를 재정의하는 경우 사용자 지정 구성을 적용하기 전에 이 기본 구현을 호출하는 것이 좋습니다.</summary>
      <param name="modelBuilder">만들어지는 컨텍스트의 모델을 정의하는 작성기입니다.</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.History.HistoryRow">
      <summary>이 클래스는 Code First 마이그레이션이 데이터베이스에서 마이그레이션 기록을 읽고 쓰기 위해 사용됩니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.History.HistoryRow.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.History.HistoryRow" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.History.HistoryRow.ContextKey">
      <summary>행이 적용되는 컨텍스트를 나타내는 키를 가져오거나 설정합니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.History.HistoryRow.MigrationId">
      <summary>이 행이 나타내는 마이그레이션의 ID를 가져오거나 설정합니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.History.HistoryRow.Model">
      <summary>이 마이그레이션을 적용한 후 모델의 상태를 가져오거나 설정합니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.History.HistoryRow.ProductVersion">
      <summary>이 항목을 만든 Entity Framework의 버전을 가져오거나 설정합니다.</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Infrastructure.AutomaticDataLossException">
      <summary>자동 마이그레이션으로 데이터 손실이 일어날 때 발생하는 오류를 나타냅니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.AutomaticDataLossException.#ctor">
      <summary>AutomaticDataLossException 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.AutomaticDataLossException.#ctor(System.String)">
      <summary>AutomaticDataLossException 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="message">오류를 설명하는 메시지입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.AutomaticDataLossException.#ctor(System.String,System.Exception)">
      <summary>MigrationsException 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="message">오류를 설명하는 메시지입니다.</param>
      <param name="innerException">현재 예외의 원인이 되는 예외입니다. 또는 내부 예외가 지정되지 않은 경우 null 참조(Visual Basic에서는 Nothing)입니다.</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.Infrastructure.AutomaticMigrationsDisabledException">
      <summary>마지막 마이그레이션을 적용한 후 보류 중인 모델 변경 내용이 있고 자동 마이그레이션이 사용하지 않도록 설정되었을 때 발생하는 오류를 나타냅니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.AutomaticMigrationsDisabledException.#ctor">
      <summary>AutomaticMigrationsDisabledException 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.AutomaticMigrationsDisabledException.#ctor(System.String)">
      <summary>AutomaticMigrationsDisabledException 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="message">오류를 설명하는 메시지입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.AutomaticMigrationsDisabledException.#ctor(System.String,System.Exception)">
      <summary>MigrationsException 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="message">오류를 설명하는 메시지입니다.</param>
      <param name="innerException">현재 예외의 원인이 되는 예외입니다. 또는 내부 예외가 지정되지 않은 경우 null 참조(Visual Basic에서는 Nothing)입니다.</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.Infrastructure.IDbMigration">
      <summary>특정 멤버가 스캐폴드된 마이그레이션의 IntelliSense에 나타나는 것을 방지하기 위해 <see cref="T:System.Data.Entity.Migrations.DbMigration" />에 의해 명시적으로 구현됩니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.IDbMigration.AddOperation(System.Data.Entity.Migrations.Model.MigrationOperation)">
      <summary>사용자 지정 <see cref="T:System.Data.Entity.Migrations.Model.MigrationOperation" />을 마이그레이션에 추가합니다.사용자 지정 작업 구현자는 새 작업을 추가하기 위한 Fluent 스타일 API를 제공하는 <see cref="T:System.Data.Entity.Migrations.Infrastructure.IDbMigration" />에 대한 확장 메서드를 만드는 것이 좋습니다.</summary>
      <param name="migrationOperation">추가할 작업입니다.</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.Infrastructure.IMigrationMetadata">
      <summary>코드 기반 마이그레이션에 대한 추가 메타데이터를 제공합니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Infrastructure.IMigrationMetadata.Id">
      <summary>마이그레이션의 고유 식별자를 가져옵니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Infrastructure.IMigrationMetadata.Source">
      <summary>이 마이그레이션을 실행하기 전 모델의 상태를 가져옵니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Infrastructure.IMigrationMetadata.Target">
      <summary>이 마이그레이션을 실행한 후 모델의 상태를 가져옵니다.</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Infrastructure.MigrationsException">
      <summary>Code First 마이그레이션 파이프라인 내에서 발생하는 오류를 나타냅니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigrationsException.#ctor">
      <summary>MigrationsException 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigrationsException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>serialize된 데이터를 사용하여 MigrationsException 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="info">발생 중인 예외에 대해 serialize된 개체 데이터를 보유하는 <see cref="T:System.Runtime.Serialization.SerializationInfo" />입니다.</param>
      <param name="context">원본 또는 대상에 대한 컨텍스트 정보를 포함하는 <see cref="T:System.Runtime.Serialization.StreamingContext" />입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigrationsException.#ctor(System.String)">
      <summary>MigrationsException 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="message">오류를 설명하는 메시지입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigrationsException.#ctor(System.String,System.Exception)">
      <summary>MigrationsException 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="message">오류를 설명하는 메시지입니다.</param>
      <param name="innerException">현재 예외의 원인이 되는 예외입니다. 또는 내부 예외가 지정되지 않은 경우 null 참조(Visual Basic에서는 Nothing)입니다.</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.Infrastructure.MigrationsLogger">
      <summary>마이그레이션 프로세스에 대해 사용할 수 있는 로거의 기본 클래스입니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigrationsLogger.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Infrastructure.MigrationsLogger" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigrationsLogger.Info(System.String)">
      <summary>정보 메시지를 기록합니다.</summary>
      <param name="message">기록할 메시지입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigrationsLogger.Verbose(System.String)">
      <summary>자세한 정보 출력이 요청된 경우 사용자에게만 제공되는 일부 추가 정보를 기록합니다.</summary>
      <param name="message">기록할 메시지입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigrationsLogger.Warning(System.String)">
      <summary>사용자에게 알려야 하는 경고를 기록합니다.</summary>
      <param name="message">기록할 메시지입니다.</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.Infrastructure.MigrationsPendingException">
      <summary>데이터베이스에 적용되지 않은 기존 마이그레이션으로 인해 작업을 수행할 수 없을 때 throw됩니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigrationsPendingException.#ctor">
      <summary>MigrationsPendingException 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigrationsPendingException.#ctor(System.String)">
      <summary>MigrationsPendingException 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="message">오류를 설명하는 메시지입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigrationsPendingException.#ctor(System.String,System.Exception)">
      <summary>MigrationsPendingException 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="message">오류를 설명하는 메시지입니다.</param>
      <param name="innerException">현재 예외의 원인이 되는 예외입니다. 또는 내부 예외가 지정되지 않은 경우 null 참조(Visual Basic에서는 Nothing)입니다.</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.Infrastructure.MigratorBase">
      <summary>핵심 <see cref="T:System.Data.Entity.Migrations.DbMigrator" />를 래핑하는 데코레이터의 기본 클래스입니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigratorBase.#ctor(System.Data.Entity.Migrations.Infrastructure.MigratorBase)">
      <summary>MigratorBase 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="innerMigrator">이 데코레이터가 래핑하는 마이그레이터입니다.</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Infrastructure.MigratorBase.Configuration">
      <summary>마이그레이션 프로세스에 사용 중인 구성을 가져옵니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigratorBase.GetDatabaseMigrations">
      <summary>데이터베이스에 적용된 마이그레이션의 목록을 가져옵니다.</summary>
      <returns>마이그레이션 ID 목록</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigratorBase.GetLocalMigrations">
      <summary>어셈블리에 정의된 마이그레이션 목록을 가져옵니다.</summary>
      <returns>마이그레이션 ID 목록</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigratorBase.GetPendingMigrations">
      <summary>데이터베이스에 적용되지 않은 보류 중인 마이그레이션의 목록을 가져옵니다.</summary>
      <returns>마이그레이션 ID 목록</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigratorBase.Update">
      <summary>대상 데이터베이스를 최신 마이그레이션으로 업데이트합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigratorBase.Update(System.String)">
      <summary>대상 데이터베이스를 지정된 마이그레이션으로 업데이트합니다.</summary>
      <param name="targetMigration">업그레이드/다운그레이드를 수행할 마이그레이션입니다.</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.Infrastructure.MigratorLoggingDecorator">
      <summary>마이그레이션 작업 중 로깅을 제공하는 데코레이터입니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigratorLoggingDecorator.#ctor(System.Data.Entity.Migrations.Infrastructure.MigratorBase,System.Data.Entity.Migrations.Infrastructure.MigrationsLogger)">
      <summary>MigratorLoggingDecorator 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="innerMigrator">이 데코레이터가 래핑하는 마이그레이터입니다.</param>
      <param name="logger">메시지를 쓸 로거입니다.</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.Infrastructure.MigratorScriptingDecorator">
      <summary>변경 내용을 데이터베이스에 적용하는 대신 SQL 스크립트를 생성하는 데코레이터입니다.이 데코레이터를 사용하여 <see cref="T:System.Data.Entity.Migrations.DbMigrator" />를 래핑하면 <see cref="T:System.Data.Entity.Migrations.DbMigrator" />가 변경 내용을 대상 데이터베이스에 적용할 수 없습니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigratorScriptingDecorator.#ctor(System.Data.Entity.Migrations.Infrastructure.MigratorBase)">
      <summary>MigratorScriptingDecorator 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="innerMigrator">이 데코레이터가 래핑하는 마이그레이터입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigratorScriptingDecorator.ScriptUpdate(System.String,System.String)">
      <summary>데이터베이스를 업데이트하기 위한 스크립트를 생성합니다.</summary>
      <returns>생성된 SQL 스크립트입니다.</returns>
      <param name="sourceMigration">업데이트할 마이그레이션입니다.Null이 제공된 경우 현재 데이터베이스를 업데이트할 스크립트가 생성됩니다.</param>
      <param name="targetMigration">업데이트할 마이그레이션입니다.Null이 제공된 경우 최신 마이그레이션으로 업데이트할 스크립트가 생성됩니다.</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.AddColumnOperation">
      <summary>테이블에 추가 중인 열을 나타냅니다.Entity Framework 마이그레이션 API는 응용 프로그램의 최종 사용자와 같은 신뢰할 수 없는 소스에서 제공하는 입력을 허용하도록 디자인되지 않았습니다.이러한 소스의 입력이 허용되는 경우 이러한 API에 전달하기 전에 유효성 검사를 수행하여 SQL 삽입 공격 등으로부터 보호해야 합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.AddColumnOperation.#ctor(System.String,System.Data.Entity.Migrations.Model.ColumnModel,System.Object)">
      <summary>AddColumnOperation 클래스의 새 인스턴스를 초기화합니다.Entity Framework 마이그레이션 API는 응용 프로그램의 최종 사용자와 같은 신뢰할 수 없는 소스에서 제공하는 입력을 허용하도록 디자인되지 않았습니다.이러한 소스의 입력이 허용되는 경우 이러한 API에 전달하기 전에 유효성 검사를 수행하여 SQL 삽입 공격 등으로부터 보호해야 합니다.</summary>
      <param name="table">열을 추가할 테이블의 이름입니다.</param>
      <param name="column">추가 중인 열의 세부 정보입니다.</param>
      <param name="anonymousArguments">공급자가 처리할 수 있는 추가 인수입니다.익명 형식 구문을 사용하여 인수를 지정할 수 있습니다(예:'new { SampleArgument = "MyValue" }').</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AddColumnOperation.Column">
      <summary>추가 중인 열의 세부 정보를 가져옵니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AddColumnOperation.Inverse">
      <summary>추가된 열의 삭제를 나타내는 작업을 가져옵니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AddColumnOperation.IsDestructiveChange">
      <summary>변경 내용이 파괴적인지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>변경 내용이 파괴적이면 true이고, 그렇지 않으면 false입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AddColumnOperation.Table">
      <summary>열을 추가할 테이블의 이름을 가져옵니다.</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.AddForeignKeyOperation">
      <summary>테이블에 추가 중인 외래 키 제약 조건을 나타냅니다.Entity Framework 마이그레이션 API는 응용 프로그램의 최종 사용자와 같은 신뢰할 수 없는 소스에서 제공하는 입력을 허용하도록 디자인되지 않았습니다.이러한 소스의 입력이 허용되는 경우 이러한 API에 전달하기 전에 유효성 검사를 수행하여 SQL 삽입 공격 등으로부터 보호해야 합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.AddForeignKeyOperation.#ctor(System.Object)">
      <summary>AddForeignKeyOperation 클래스의 새 인스턴스를 초기화합니다.PrincipalTable, PrincipalColumns, DependentTable 및 DependentColumns 속성도 채워야 합니다.Entity Framework 마이그레이션 API는 응용 프로그램의 최종 사용자와 같은 신뢰할 수 없는 소스에서 제공하는 입력을 허용하도록 디자인되지 않았습니다.이러한 소스의 입력이 허용되는 경우 이러한 API에 전달하기 전에 유효성 검사를 수행하여 SQL 삽입 공격 등으로부터 보호해야 합니다.</summary>
      <param name="anonymousArguments">공급자가 처리할 수 있는 추가 인수입니다.익명 형식 구문을 사용하여 인수를 지정할 수 있습니다(예:'new { SampleArgument = "MyValue" }').</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AddForeignKeyOperation.CascadeDelete">
      <summary>외래 키 제약 조건에 대해 하위 삭제를 구성할지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.AddForeignKeyOperation.CreateCreateIndexOperation">
      <summary>외래 키 열에서 인덱스를 만드는 작업을 가져옵니다.</summary>
      <returns>인덱스를 추가하는 작업입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AddForeignKeyOperation.Inverse">
      <summary>외래 키 제약 조건을 삭제하는 작업을 가져옵니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AddForeignKeyOperation.IsDestructiveChange">
      <summary>이 변경으로 데이터가 손실될지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
      <returns>이 변경으로 데이터가 손실되면 true이고, 그렇지 않으면 false입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AddForeignKeyOperation.PrincipalColumns">
      <summary>외래 키 제약 조건이 대상으로 지정하는 열의 이름입니다.Entity Framework 마이그레이션 API는 응용 프로그램의 최종 사용자와 같은 신뢰할 수 없는 소스에서 제공하는 입력을 허용하도록 디자인되지 않았습니다.이러한 소스의 입력이 허용되는 경우 이러한 API에 전달하기 전에 유효성 검사를 수행하여 SQL 삽입 공격 등으로부터 보호해야 합니다.</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation">
      <summary>테이블에 기본 키 추가를 나타냅니다.Entity Framework 마이그레이션 API는 응용 프로그램의 최종 사용자와 같은 신뢰할 수 없는 소스에서 제공하는 입력을 허용하도록 디자인되지 않았습니다.이러한 소스의 입력이 허용되는 경우 이러한 API에 전달하기 전에 유효성 검사를 수행하여 SQL 삽입 공격 등으로부터 보호해야 합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation.#ctor(System.Object)">
      <summary>AddPrimaryKeyOperation 클래스의 새 인스턴스를 초기화합니다.Table 및 Columns 속성도 채워야 합니다.Entity Framework 마이그레이션 API는 응용 프로그램의 최종 사용자와 같은 신뢰할 수 없는 소스에서 제공하는 입력을 허용하도록 디자인되지 않았습니다.이러한 소스의 입력이 허용되는 경우 이러한 API에 전달하기 전에 유효성 검사를 수행하여 SQL 삽입 공격 등으로부터 보호해야 합니다.</summary>
      <param name="anonymousArguments">공급자가 처리할 수 있는 추가 인수입니다.익명 형식 구문을 사용하여 인수를 지정할 수 있습니다(예:'new { SampleArgument = "MyValue" }').</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation.Inverse">
      <summary>기본 키를 삭제하는 작업을 가져옵니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation.IsClustered">
      <summary>이 키가 클러스터된 기본 키인지 여부를 가져오거나 설정합니다.</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.AlterColumnOperation">
      <summary>기존 열의 변경을 나타냅니다.Entity Framework 마이그레이션 API는 응용 프로그램의 최종 사용자와 같은 신뢰할 수 없는 소스에서 제공하는 입력을 허용하도록 디자인되지 않았습니다.이러한 소스의 입력이 허용되는 경우 이러한 API에 전달하기 전에 유효성 검사를 수행하여 SQL 삽입 공격 등으로부터 보호해야 합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.AlterColumnOperation.#ctor(System.String,System.Data.Entity.Migrations.Model.ColumnModel,System.Boolean,System.Data.Entity.Migrations.Model.AlterColumnOperation,System.Object)">
      <summary>AlterColumnOperation 클래스의 새 인스턴스를 초기화합니다.Entity Framework 마이그레이션 API는 응용 프로그램의 최종 사용자와 같은 신뢰할 수 없는 소스에서 제공하는 입력을 허용하도록 디자인되지 않았습니다.이러한 소스의 입력이 허용되는 경우 이러한 API에 전달하기 전에 유효성 검사를 수행하여 SQL 삽입 공격 등으로부터 보호해야 합니다.</summary>
      <param name="table">열이 속하는 테이블의 이름입니다.</param>
      <param name="column">열을 변경할 대상에 대한 세부 정보입니다.</param>
      <param name="isDestructiveChange">이 변경으로 인해 데이터 손실이 발생하는지 여부를 나타내는 값입니다.</param>
      <param name="inverse">이 열 변경을 되돌리는 작업입니다.</param>
      <param name="anonymousArguments">공급자가 처리할 수 있는 추가 인수입니다.익명 형식 구문을 사용하여 인수를 지정할 수 있습니다(예:'new { SampleArgument = "MyValue" }').</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.AlterColumnOperation.#ctor(System.String,System.Data.Entity.Migrations.Model.ColumnModel,System.Boolean,System.Object)">
      <summary>AlterColumnOperation 클래스의 새 인스턴스를 초기화합니다.Entity Framework 마이그레이션 API는 응용 프로그램의 최종 사용자와 같은 신뢰할 수 없는 소스에서 제공하는 입력을 허용하도록 디자인되지 않았습니다.이러한 소스의 입력이 허용되는 경우 이러한 API에 전달하기 전에 유효성 검사를 수행하여 SQL 삽입 공격 등으로부터 보호해야 합니다.</summary>
      <param name="table">열이 속하는 테이블의 이름입니다.</param>
      <param name="column">열을 변경할 대상에 대한 세부 정보입니다.</param>
      <param name="isDestructiveChange">이 변경으로 인해 데이터 손실이 발생하는지 여부를 나타내는 값입니다.</param>
      <param name="anonymousArguments">공급자가 처리할 수 있는 추가 인수입니다.익명 형식 구문을 사용하여 인수를 지정할 수 있습니다(예:'new { SampleArgument = "MyValue" }').</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AlterColumnOperation.Column">
      <summary>열의 새 정의를 가져옵니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AlterColumnOperation.Inverse">
      <summary>변경 되돌리기를 나타내는 작업을 가져옵니다.역은 자동으로 계산할 수 없습니다. 생성자에 제공되지 않은 경우 이 속성이 null을 반환합니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AlterColumnOperation.IsDestructiveChange">
      <summary>이 변경으로 인해 데이터 손실이 발생하는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>이 변경으로 데이터가 손실되면 true이고, 그렇지 않으면 false입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AlterColumnOperation.Table">
      <summary>열이 속하는 테이블의 이름을 가져옵니다.</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.AlterProcedureOperation">
      <summary>기존 저장 프로시저의 변경을 나타냅니다.Entity Framework 마이그레이션 API는 응용 프로그램의 최종 사용자와 같은 신뢰할 수 없는 소스에서 제공하는 입력을 허용하도록 디자인되지 않았습니다.이러한 소스의 입력이 허용되는 경우 이러한 API에 전달하기 전에 유효성 검사를 수행하여 SQL 삽입 공격 등으로부터 보호해야 합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.AlterProcedureOperation.#ctor(System.String,System.String,System.Object)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.AlterProcedureOperation" /> 클래스의 새 인스턴스를 초기화합니다.Entity Framework 마이그레이션 API는 응용 프로그램의 최종 사용자와 같은 신뢰할 수 없는 소스에서 제공하는 입력을 허용하도록 디자인되지 않았습니다.이러한 소스의 입력이 허용되는 경우 이러한 API에 전달하기 전에 유효성 검사를 수행하여 SQL 삽입 공격 등으로부터 보호해야 합니다.</summary>
      <param name="name">저장 프로시저의 이름입니다.</param>
      <param name="bodySql">SQL로 표현된 저장 프로시저의 본문입니다.</param>
      <param name="anonymousArguments">익명 형식 구문을 사용하여 인수를 지정할 수 있습니다(예:'new { SampleArgument = "MyValue" }').</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AlterProcedureOperation.Inverse">
      <summary>이 작업을 되돌리는 작업을 가져옵니다.항상 <see cref="T:System.Data.Entity.Migrations.Model.NotSupportedOperation" />을 반환합니다.</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.ColumnModel">
      <summary>열에 대한 정보를 나타냅니다.Entity Framework 마이그레이션 API는 응용 프로그램의 최종 사용자와 같은 신뢰할 수 없는 소스에서 제공하는 입력을 허용하도록 디자인되지 않았습니다.이러한 소스의 입력이 허용되는 경우 이러한 API에 전달하기 전에 유효성 검사를 수행하여 SQL 삽입 공격 등으로부터 보호해야 합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.ColumnModel.#ctor(System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind)">
      <summary>ColumnModel 클래스의 새 인스턴스를 초기화합니다.Entity Framework 마이그레이션 API는 응용 프로그램의 최종 사용자와 같은 신뢰할 수 없는 소스에서 제공하는 입력을 허용하도록 디자인되지 않았습니다.이러한 소스의 입력이 허용되는 경우 이러한 API에 전달하기 전에 유효성 검사를 수행하여 SQL 삽입 공격 등으로부터 보호해야 합니다.</summary>
      <param name="type">이 열의 데이터 형식입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.ColumnModel.#ctor(System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind,System.Data.Entity.Core.Metadata.Edm.TypeUsage)">
      <summary>ColumnModel 클래스의 새 인스턴스를 초기화합니다.Entity Framework 마이그레이션 API는 응용 프로그램의 최종 사용자와 같은 신뢰할 수 없는 소스에서 제공하는 입력을 허용하도록 디자인되지 않았습니다.이러한 소스의 입력이 허용되는 경우 이러한 API에 전달하기 전에 유효성 검사를 수행하여 SQL 삽입 공격 등으로부터 보호해야 합니다.</summary>
      <param name="type">이 열의 데이터 형식입니다.</param>
      <param name="typeUsage">데이터 타입에 대한 추가 세부 정보입니다.여기에는 최대 길이, null 허용 여부 등의 세부 정보가 포함됩니다.</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ColumnModel.ClrDefaultValue">
      <summary>이 열의 데이터베이스 형식에 해당하는 CLR 형식의 기본값을 가져옵니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ColumnModel.ClrType">
      <summary>이 열의 데이터베이스 형식에 해당하는 CLR 형식을 가져옵니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ColumnModel.IsIdentity">
      <summary>ID 패턴을 사용하는 데이터베이스에서 이 열에 대한 값을 생성할지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.ColumnModel.IsNarrowerThan(System.Data.Entity.Migrations.Model.ColumnModel,System.Data.Entity.Core.Common.DbProviderManifest)">
      <summary>이 열이 다른 열보다 좁은 범위의 데이터 타입인지 여부를 확인합니다.제공된 열 정의를 이 정의로 변경할 경우 데이터 손실이 발생하는지 여부를 확인하는 데 사용됩니다.</summary>
      <returns>이 열이 더 좁은 범위의 데이터 타입인 경우 True입니다.</returns>
      <param name="column">비교할 열입니다.</param>
      <param name="providerManifest">사용 중인 데이터베이스 공급자의 세부 정보입니다.</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ColumnModel.IsNullable">
      <summary>이 열이 null 값을 저장할 수 있는지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ColumnModel.IsTimestamp">
      <summary>이 속성 모델을 타임스탬프로 구성해야 하는지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.CreateIndexOperation">
      <summary>데이터베이스 인덱스 만들기를 나타냅니다.Entity Framework 마이그레이션 API는 응용 프로그램의 최종 사용자와 같은 신뢰할 수 없는 소스에서 제공하는 입력을 허용하도록 디자인되지 않았습니다.이러한 소스의 입력이 허용되는 경우 이러한 API에 전달하기 전에 유효성 검사를 수행하여 SQL 삽입 공격 등으로부터 보호해야 합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.CreateIndexOperation.#ctor(System.Object)">
      <summary>CreateIndexOperation 클래스의 새 인스턴스를 초기화합니다.Table 및 Columns 속성도 채워야 합니다.Entity Framework 마이그레이션 API는 응용 프로그램의 최종 사용자와 같은 신뢰할 수 없는 소스에서 제공하는 입력을 허용하도록 디자인되지 않았습니다.이러한 소스의 입력이 허용되는 경우 이러한 API에 전달하기 전에 유효성 검사를 수행하여 SQL 삽입 공격 등으로부터 보호해야 합니다.</summary>
      <param name="anonymousArguments">공급자가 처리할 수 있는 추가 인수입니다.익명 형식 구문을 사용하여 인수를 지정할 수 있습니다(예:'new { SampleArgument = "MyValue" }').</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.CreateIndexOperation.Inverse">
      <summary>이 인덱스를 삭제하는 작업을 가져옵니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.CreateIndexOperation.IsClustered">
      <summary>이 인덱스가 클러스터형 인덱스인지 여부를 가져오거나 설정합니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.CreateIndexOperation.IsDestructiveChange">
      <summary>이 변경으로 데이터가 손실될지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
      <returns>이 변경으로 데이터가 손실되면 true이고, 그렇지 않으면 false입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.CreateIndexOperation.IsUnique">
      <summary>고유한 인덱스인지를 나타내는 값을 가져오거나 설정합니다.</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.CreateProcedureOperation">
      <summary>데이터베이스에 새 저장 프로시저를 추가하는 마이그레이션 작업입니다.Entity Framework 마이그레이션 API는 응용 프로그램의 최종 사용자와 같은 신뢰할 수 없는 소스에서 제공하는 입력을 허용하도록 디자인되지 않았습니다.이러한 소스의 입력이 허용되는 경우 이러한 API에 전달하기 전에 유효성 검사를 수행하여 SQL 삽입 공격 등으로부터 보호해야 합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.CreateProcedureOperation.#ctor(System.String,System.String,System.Object)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.CreateProcedureOperation" /> 클래스의 새 인스턴스를 초기화합니다.Entity Framework 마이그레이션 API는 응용 프로그램의 최종 사용자와 같은 신뢰할 수 없는 소스에서 제공하는 입력을 허용하도록 디자인되지 않았습니다.이러한 소스의 입력이 허용되는 경우 이러한 API에 전달하기 전에 유효성 검사를 수행하여 SQL 삽입 공격 등으로부터 보호해야 합니다.</summary>
      <param name="name">저장 프로시저의 이름입니다.</param>
      <param name="bodySql">SQL로 표현된 저장 프로시저의 본문입니다.</param>
      <param name="anonymousArguments">익명 형식 구문을 사용하여 인수를 지정할 수 있습니다(예:'new { SampleArgument = "MyValue" }').</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.CreateProcedureOperation.Inverse">
      <summary>저장 프로시저를 삭제하는 작업을 가져옵니다.</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.CreateTableOperation">
      <summary>테이블 만들기를 나타냅니다.Entity Framework 마이그레이션 API는 응용 프로그램의 최종 사용자와 같은 신뢰할 수 없는 소스에서 제공하는 입력을 허용하도록 디자인되지 않았습니다.이러한 소스의 입력이 허용되는 경우 이러한 API에 전달하기 전에 유효성 검사를 수행하여 SQL 삽입 공격 등으로부터 보호해야 합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.CreateTableOperation.#ctor(System.String,System.Object)">
      <summary>CreateTableOperation 클래스의 새 인스턴스를 초기화합니다.Entity Framework 마이그레이션 API는 응용 프로그램의 최종 사용자와 같은 신뢰할 수 없는 소스에서 제공하는 입력을 허용하도록 디자인되지 않았습니다.이러한 소스의 입력이 허용되는 경우 이러한 API에 전달하기 전에 유효성 검사를 수행하여 SQL 삽입 공격 등으로부터 보호해야 합니다.</summary>
      <param name="name">만들려는 테이블의 이름입니다.</param>
      <param name="anonymousArguments">공급자가 처리할 수 있는 추가 인수입니다.익명 형식 구문을 사용하여 인수를 지정할 수 있습니다(예:'new { SampleArgument = "MyValue" }').</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.CreateTableOperation.Columns">
      <summary>새 테이블에 포함할 열을 가져옵니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.CreateTableOperation.Inverse">
      <summary>테이블을 삭제하는 작업을 가져옵니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.CreateTableOperation.IsDestructiveChange">
      <summary>이 작업으로 인해 데이터 손실이 발생할 수 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>이 작업으로 인해 데이터 손실이 발생할 수 있으면 true이고, 그렇지 않으면 false입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.CreateTableOperation.Name">
      <summary>만들려는 테이블의 이름을 가져옵니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.CreateTableOperation.PrimaryKey">
      <summary>새 테이블의 기본 키를 가져오거나 설정합니다.</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.DropColumnOperation">
      <summary>테이블에서 삭제 중인 열을 나타냅니다.Entity Framework 마이그레이션 API는 응용 프로그램의 최종 사용자와 같은 신뢰할 수 없는 소스에서 제공하는 입력을 허용하도록 디자인되지 않았습니다.이러한 소스의 입력이 허용되는 경우 이러한 API에 전달하기 전에 유효성 검사를 수행하여 SQL 삽입 공격 등으로부터 보호해야 합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.DropColumnOperation.#ctor(System.String,System.String,System.Data.Entity.Migrations.Model.AddColumnOperation,System.Object)">
      <summary>DropColumnOperation 클래스의 새 인스턴스를 초기화합니다.Entity Framework 마이그레이션 API는 응용 프로그램의 최종 사용자와 같은 신뢰할 수 없는 소스에서 제공하는 입력을 허용하도록 디자인되지 않았습니다.이러한 소스의 입력이 허용되는 경우 이러한 API에 전달하기 전에 유효성 검사를 수행하여 SQL 삽입 공격 등으로부터 보호해야 합니다.</summary>
      <param name="table">열을 삭제할 테이블의 이름입니다.</param>
      <param name="name">삭제할 열의 이름입니다.</param>
      <param name="inverse">삭제 작업 되돌리기를 나타내는 작업입니다.</param>
      <param name="anonymousArguments">공급자가 처리할 수 있는 추가 인수입니다.익명 형식 구문을 사용하여 인수를 지정할 수 있습니다(예:'new { SampleArgument = "MyValue" }').</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.DropColumnOperation.#ctor(System.String,System.String,System.Object)">
      <summary>DropColumnOperation 클래스의 새 인스턴스를 초기화합니다.Entity Framework 마이그레이션 API는 응용 프로그램의 최종 사용자와 같은 신뢰할 수 없는 소스에서 제공하는 입력을 허용하도록 디자인되지 않았습니다.이러한 소스의 입력이 허용되는 경우 이러한 API에 전달하기 전에 유효성 검사를 수행하여 SQL 삽입 공격 등으로부터 보호해야 합니다.</summary>
      <param name="table">열을 삭제할 테이블의 이름입니다.</param>
      <param name="name">삭제할 열의 이름입니다.</param>
      <param name="anonymousArguments">공급자가 처리할 수 있는 추가 인수입니다.익명 형식 구문을 사용하여 인수를 지정할 수 있습니다(예:'new { SampleArgument = "MyValue" }').</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropColumnOperation.Inverse">
      <summary>열 삭제 되돌리기를 나타내는 작업을 가져옵니다.역은 자동으로 계산할 수 없습니다. 생성자에 제공되지 않은 경우 이 속성이 null을 반환합니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropColumnOperation.IsDestructiveChange">
      <summary>이 작업으로 인해 데이터 손실이 발생할 수 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>이 작업으로 인해 데이터 손실이 발생할 수 있으면 true이고, 그렇지 않으면 false입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropColumnOperation.Name">
      <summary>삭제하려는 열의 이름을 가져옵니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropColumnOperation.Table">
      <summary>열을 삭제할 테이블의 이름을 가져옵니다.</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.DropForeignKeyOperation">
      <summary>테이블에서 삭제 중인 외래 키 제약 조건을 나타냅니다.Entity Framework 마이그레이션 API는 응용 프로그램의 최종 사용자와 같은 신뢰할 수 없는 소스에서 제공하는 입력을 허용하도록 디자인되지 않았습니다.이러한 소스의 입력이 허용되는 경우 이러한 API에 전달하기 전에 유효성 검사를 수행하여 SQL 삽입 공격 등으로부터 보호해야 합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.DropForeignKeyOperation.#ctor(System.Data.Entity.Migrations.Model.AddForeignKeyOperation,System.Object)">
      <summary>DropForeignKeyOperation 클래스의 새 인스턴스를 초기화합니다.Entity Framework 마이그레이션 API는 응용 프로그램의 최종 사용자와 같은 신뢰할 수 없는 소스에서 제공하는 입력을 허용하도록 디자인되지 않았습니다.이러한 소스의 입력이 허용되는 경우 이러한 API에 전달하기 전에 유효성 검사를 수행하여 SQL 삽입 공격 등으로부터 보호해야 합니다.</summary>
      <param name="inverse">외래 키 제약 조건 삭제 되돌리기를 나타내는 작업입니다.</param>
      <param name="anonymousArguments">공급자가 처리할 수 있는 추가 인수입니다.익명 형식 구문을 사용하여 인수를 지정할 수 있습니다(예:'new { SampleArgument = "MyValue" }').</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.DropForeignKeyOperation.#ctor(System.Object)">
      <summary>DropForeignKeyOperation 클래스의 새 인스턴스를 초기화합니다.PrincipalTable, DependentTable 및 DependentColumns 속성도 채워야 합니다.Entity Framework 마이그레이션 API는 응용 프로그램의 최종 사용자와 같은 신뢰할 수 없는 소스에서 제공하는 입력을 허용하도록 디자인되지 않았습니다.이러한 소스의 입력이 허용되는 경우 이러한 API에 전달하기 전에 유효성 검사를 수행하여 SQL 삽입 공격 등으로부터 보호해야 합니다.</summary>
      <param name="anonymousArguments">공급자가 처리할 수 있는 추가 인수입니다.익명 형식 구문을 사용하여 인수를 지정할 수 있습니다(예:'new { SampleArgument = "MyValue" }').</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.DropForeignKeyOperation.CreateDropIndexOperation">
      <summary>외래 키 열에서 연관된 인덱스를 삭제하는 작업을 가져옵니다.</summary>
      <returns>인덱스를 삭제하는 작업입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropForeignKeyOperation.Inverse">
      <summary>외래 키 제약 조건 삭제 되돌리기를 나타내는 작업을 가져옵니다.역은 자동으로 계산할 수 없습니다. 생성자에 제공되지 않은 경우 이 속성이 null을 반환합니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropForeignKeyOperation.IsDestructiveChange">
      <summary>변경 내용이 파괴적인지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>변경 내용이 파괴적이면 true이고, 그렇지 않으면 false입니다.</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.DropIndexOperation">
      <summary>기존 인덱스의 삭제를 나타냅니다.Entity Framework 마이그레이션 API는 응용 프로그램의 최종 사용자와 같은 신뢰할 수 없는 소스에서 제공하는 입력을 허용하도록 디자인되지 않았습니다.이러한 소스의 입력이 허용되는 경우 이러한 API에 전달하기 전에 유효성 검사를 수행하여 SQL 삽입 공격 등으로부터 보호해야 합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.DropIndexOperation.#ctor(System.Data.Entity.Migrations.Model.CreateIndexOperation,System.Object)">
      <summary>DropIndexOperation 클래스의 새 인스턴스를 초기화합니다.Entity Framework 마이그레이션 API는 응용 프로그램의 최종 사용자와 같은 신뢰할 수 없는 소스에서 제공하는 입력을 허용하도록 디자인되지 않았습니다.이러한 소스의 입력이 허용되는 경우 이러한 API에 전달하기 전에 유효성 검사를 수행하여 SQL 삽입 공격 등으로부터 보호해야 합니다.</summary>
      <param name="inverse">인덱스 삭제 되돌리기를 나타내는 작업입니다.</param>
      <param name="anonymousArguments">공급자가 처리할 수 있는 추가 인수입니다.익명 형식 구문을 사용하여 인수를 지정할 수 있습니다(예:'new { SampleArgument = "MyValue" }').</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.DropIndexOperation.#ctor(System.Object)">
      <summary>DropIndexOperation 클래스의 새 인스턴스를 초기화합니다.Entity Framework 마이그레이션 API는 응용 프로그램의 최종 사용자와 같은 신뢰할 수 없는 소스에서 제공하는 입력을 허용하도록 디자인되지 않았습니다.이러한 소스의 입력이 허용되는 경우 이러한 API에 전달하기 전에 유효성 검사를 수행하여 SQL 삽입 공격 등으로부터 보호해야 합니다.</summary>
      <param name="anonymousArguments">공급자가 처리할 수 있는 추가 인수입니다.익명 형식 구문을 사용하여 인수를 지정할 수 있습니다(예:'new { SampleArgument = "MyValue" }').</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropIndexOperation.Inverse">
      <summary>인덱스 삭제 되돌리기를 나타내는 작업을 가져옵니다.역은 자동으로 계산할 수 없습니다. 생성자에 제공되지 않은 경우 이 속성이 null을 반환합니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropIndexOperation.IsDestructiveChange">
      <summary>이 작업으로 인해 데이터 손실이 발생할 수 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>이 작업으로 인해 데이터 손실이 발생할 수 있으면 true이고, 그렇지 않으면 false입니다.</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.DropPrimaryKeyOperation">
      <summary>테이블에서 기본 키 삭제를 나타냅니다.Entity Framework 마이그레이션 API는 응용 프로그램의 최종 사용자와 같은 신뢰할 수 없는 소스에서 제공하는 입력을 허용하도록 디자인되지 않았습니다.이러한 소스의 입력이 허용되는 경우 이러한 API에 전달하기 전에 유효성 검사를 수행하여 SQL 삽입 공격 등으로부터 보호해야 합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.DropPrimaryKeyOperation.#ctor(System.Object)">
      <summary>DropPrimaryKeyOperation 클래스의 새 인스턴스를 초기화합니다.Table 및 Columns 속성도 채워야 합니다.Entity Framework 마이그레이션 API는 응용 프로그램의 최종 사용자와 같은 신뢰할 수 없는 소스에서 제공하는 입력을 허용하도록 디자인되지 않았습니다.이러한 소스의 입력이 허용되는 경우 이러한 API에 전달하기 전에 유효성 검사를 수행하여 SQL 삽입 공격 등으로부터 보호해야 합니다.</summary>
      <param name="anonymousArguments">공급자가 처리할 수 있는 추가 인수입니다.익명 형식 구문을 사용하여 인수를 지정할 수 있습니다(예:'new { SampleArgument = "MyValue" }').</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropPrimaryKeyOperation.CreateTableOperation">
      <summary>기본 키를 삭제 및 추가하는 대신 테이블을 다시 빌드할 수 있도록 마이그레이션 기록 테이블을 수정할 때 사용됩니다.</summary>
      <returns>마이그레이션 기록 테이블에 대한 테이블 만들기 작업입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropPrimaryKeyOperation.Inverse">
      <summary>기본 키를 추가하는 작업을 가져옵니다.</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.DropProcedureOperation">
      <summary>데이터베이스에서 저장 프로시저를 삭제합니다.Entity Framework 마이그레이션 API는 응용 프로그램의 최종 사용자와 같은 신뢰할 수 없는 소스에서 제공하는 입력을 허용하도록 디자인되지 않았습니다.이러한 소스의 입력이 허용되는 경우 이러한 API에 전달하기 전에 유효성 검사를 수행하여 SQL 삽입 공격 등으로부터 보호해야 합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.DropProcedureOperation.#ctor(System.String,System.Object)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.DropProcedureOperation" /> 클래스의 새 인스턴스를 초기화합니다.Entity Framework 마이그레이션 API는 응용 프로그램의 최종 사용자와 같은 신뢰할 수 없는 소스에서 제공하는 입력을 허용하도록 디자인되지 않았습니다.이러한 소스의 입력이 허용되는 경우 이러한 API에 전달하기 전에 유효성 검사를 수행하여 SQL 삽입 공격 등으로부터 보호해야 합니다.</summary>
      <param name="name">삭제할 저장 프로시저의 이름입니다.</param>
      <param name="anonymousArguments">익명 형식 구문을 사용하여 인수를 지정할 수 있습니다(예:'new { SampleArgument = "MyValue" }').</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropProcedureOperation.Inverse">
      <summary>이 작업을 되돌리는 작업을 가져옵니다.항상 <see cref="T:System.Data.Entity.Migrations.Model.NotSupportedOperation" />을 반환합니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropProcedureOperation.IsDestructiveChange">
      <summary>이 작업으로 인해 데이터 손실이 발생할 수 있는지 여부를 나타내는 값을 가져옵니다.항상 false를 반환합니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropProcedureOperation.Name">
      <summary>삭제할 저장 프로시저의 이름을 가져옵니다.</summary>
      <returns>삭제할 저장 프로시저의 이름입니다.</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.DropTableOperation">
      <summary>기존 테이블의 삭제를 나타냅니다.Entity Framework 마이그레이션 API는 응용 프로그램의 최종 사용자와 같은 신뢰할 수 없는 소스에서 제공하는 입력을 허용하도록 디자인되지 않았습니다.이러한 소스의 입력이 허용되는 경우 이러한 API에 전달하기 전에 유효성 검사를 수행하여 SQL 삽입 공격 등으로부터 보호해야 합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.DropTableOperation.#ctor(System.String,System.Data.Entity.Migrations.Model.CreateTableOperation,System.Object)">
      <summary>DropTableOperation 클래스의 새 인스턴스를 초기화합니다.Entity Framework 마이그레이션 API는 응용 프로그램의 최종 사용자와 같은 신뢰할 수 없는 소스에서 제공하는 입력을 허용하도록 디자인되지 않았습니다.이러한 소스의 입력이 허용되는 경우 이러한 API에 전달하기 전에 유효성 검사를 수행하여 SQL 삽입 공격 등으로부터 보호해야 합니다.</summary>
      <param name="name">삭제할 테이블의 이름입니다.</param>
      <param name="inverse">테이블 삭제 되돌리기를 나타내는 작업입니다.</param>
      <param name="anonymousArguments">공급자가 처리할 수 있는 추가 인수입니다.익명 형식 구문을 사용하여 인수를 지정할 수 있습니다(예:'new { SampleArgument = "MyValue" }').</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.DropTableOperation.#ctor(System.String,System.Object)">
      <summary>DropTableOperation 클래스의 새 인스턴스를 초기화합니다.Entity Framework 마이그레이션 API는 응용 프로그램의 최종 사용자와 같은 신뢰할 수 없는 소스에서 제공하는 입력을 허용하도록 디자인되지 않았습니다.이러한 소스의 입력이 허용되는 경우 이러한 API에 전달하기 전에 유효성 검사를 수행하여 SQL 삽입 공격 등으로부터 보호해야 합니다.</summary>
      <param name="name">삭제할 테이블의 이름입니다.</param>
      <param name="anonymousArguments">공급자가 처리할 수 있는 추가 인수입니다.익명 형식 구문을 사용하여 인수를 지정할 수 있습니다(예:'new { SampleArgument = "MyValue" }').</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropTableOperation.Inverse">
      <summary>테이블 삭제 되돌리기를 나타내는 작업을 가져옵니다.역은 자동으로 계산할 수 없습니다. 생성자에 제공되지 않은 경우 이 속성이 null을 반환합니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropTableOperation.IsDestructiveChange">
      <summary>이 작업으로 인해 데이터 손실이 발생할 수 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>이 작업으로 인해 데이터 손실이 발생할 수 있으면 true이고, 그렇지 않으면 false입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropTableOperation.Name">
      <summary>삭제하려는 테이블의 이름을 가져옵니다.</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.ForeignKeyOperation">
      <summary>외래 키 제약 조건에 영향을 주는 변경 내용에 대한 기본 클래스입니다.Entity Framework 마이그레이션 API는 응용 프로그램의 최종 사용자와 같은 신뢰할 수 없는 소스에서 제공하는 입력을 허용하도록 디자인되지 않았습니다.이러한 소스의 입력이 허용되는 경우 이러한 API에 전달하기 전에 유효성 검사를 수행하여 SQL 삽입 공격 등으로부터 보호해야 합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.ForeignKeyOperation.#ctor(System.Object)">
      <summary>ForeignKeyOperation 클래스의 새 인스턴스를 초기화합니다.Entity Framework 마이그레이션 API는 응용 프로그램의 최종 사용자와 같은 신뢰할 수 없는 소스에서 제공하는 입력을 허용하도록 디자인되지 않았습니다.이러한 소스의 입력이 허용되는 경우 이러한 API에 전달하기 전에 유효성 검사를 수행하여 SQL 삽입 공격 등으로부터 보호해야 합니다.</summary>
      <param name="anonymousArguments">공급자가 처리할 수 있는 추가 인수입니다.익명 형식 구문을 사용하여 인수를 지정할 수 있습니다(예:'new { SampleArgument = "MyValue" }').</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ForeignKeyOperation.DependentColumns">
      <summary>외래 키 열 이름입니다.Entity Framework 마이그레이션 API는 응용 프로그램의 최종 사용자와 같은 신뢰할 수 없는 소스에서 제공하는 입력을 허용하도록 디자인되지 않았습니다.이러한 소스의 입력이 허용되는 경우 이러한 API에 전달하기 전에 유효성 검사를 수행하여 SQL 삽입 공격 등으로부터 보호해야 합니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ForeignKeyOperation.DependentTable">
      <summary>외래 키 열이 존재하는 테이블의 이름을 가져오거나 설정합니다.Entity Framework 마이그레이션 API는 응용 프로그램의 최종 사용자와 같은 신뢰할 수 없는 소스에서 제공하는 입력을 허용하도록 디자인되지 않았습니다.이러한 소스의 입력이 허용되는 경우 이러한 API에 전달하기 전에 유효성 검사를 수행하여 SQL 삽입 공격 등으로부터 보호해야 합니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ForeignKeyOperation.HasDefaultName">
      <summary>이 외래 키 제약 조건에 대해 특정 이름이 제공되었는지 여부를 나타내는 값을 가져옵니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ForeignKeyOperation.Name">
      <summary>이 외래 키 제약 조건의 이름을 가져오거나 설정합니다.이름을 제공하지 않으면 기본 이름이 계산됩니다.Entity Framework 마이그레이션 API는 응용 프로그램의 최종 사용자와 같은 신뢰할 수 없는 소스에서 제공하는 입력을 허용하도록 디자인되지 않았습니다.이러한 소스의 입력이 허용되는 경우 이러한 API에 전달하기 전에 유효성 검사를 수행하여 SQL 삽입 공격 등으로부터 보호해야 합니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ForeignKeyOperation.PrincipalTable">
      <summary>외래 키 제약 조건이 대상으로 지정하는 테이블의 이름을 가져오거나 설정합니다.Entity Framework 마이그레이션 API는 응용 프로그램의 최종 사용자와 같은 신뢰할 수 없는 소스에서 제공하는 입력을 허용하도록 디자인되지 않았습니다.이러한 소스의 입력이 허용되는 경우 이러한 API에 전달하기 전에 유효성 검사를 수행하여 SQL 삽입 공격 등으로부터 보호해야 합니다.</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.HistoryOperation">
      <summary>마이그레이션 기록 테이블에 대한 DML 변경을 나타내는 작업입니다.마이그레이션 기록 테이블은 데이터베이스에 적용된 마이그레이션의 로그를 저장하는 데 사용됩니다.Entity Framework 마이그레이션 API는 응용 프로그램의 최종 사용자와 같은 신뢰할 수 없는 소스에서 제공하는 입력을 허용하도록 디자인되지 않았습니다.이러한 소스의 입력이 허용되는 경우 이러한 API에 전달하기 전에 유효성 검사를 수행하여 SQL 삽입 공격 등으로부터 보호해야 합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.HistoryOperation.#ctor(System.Collections.Generic.IList{System.Data.Entity.Core.Common.CommandTrees.DbModificationCommandTree},System.Object)">
      <summary>HistoryOperation 클래스의 새 인스턴스를 초기화합니다.Entity Framework 마이그레이션 API는 응용 프로그램의 최종 사용자와 같은 신뢰할 수 없는 소스에서 제공하는 입력을 허용하도록 디자인되지 않았습니다.이러한 소스의 입력이 허용되는 경우 이러한 API에 전달하기 전에 유효성 검사를 수행하여 SQL 삽입 공격 등으로부터 보호해야 합니다.</summary>
      <param name="commandTrees">기록 테이블에 적용될 작업을 나타내는 명령 트리의 시퀀스입니다.</param>
      <param name="anonymousArguments">익명 형식 구문을 사용하여 인수를 지정할 수 있습니다(예:'new { SampleArgument = "MyValue" }').</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.HistoryOperation.CommandTrees">
      <summary>기록 테이블에 적용될 작업을 나타내는 명령의 시퀀스입니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.HistoryOperation.IsDestructiveChange">
      <summary>이 작업으로 인해 데이터 손실이 발생할 수 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>이 작업으로 인해 데이터 손실이 발생할 수 있으면 true이고, 그렇지 않으면 false입니다.</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.IndexOperation">
      <summary>인덱스에 영향을 주는 작업에 대한 공통 기본 클래스입니다.Entity Framework 마이그레이션 API는 응용 프로그램의 최종 사용자와 같은 신뢰할 수 없는 소스에서 제공하는 입력을 허용하도록 디자인되지 않았습니다.이러한 소스의 입력이 허용되는 경우 이러한 API에 전달하기 전에 유효성 검사를 수행하여 SQL 삽입 공격 등으로부터 보호해야 합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.IndexOperation.#ctor(System.Object)">
      <summary>IndexOperation 클래스의 새 인스턴스를 초기화합니다.Entity Framework 마이그레이션 API는 응용 프로그램의 최종 사용자와 같은 신뢰할 수 없는 소스에서 제공하는 입력을 허용하도록 디자인되지 않았습니다.이러한 소스의 입력이 허용되는 경우 이러한 API에 전달하기 전에 유효성 검사를 수행하여 SQL 삽입 공격 등으로부터 보호해야 합니다.</summary>
      <param name="anonymousArguments">공급자가 처리할 수 있는 추가 인수입니다.익명 형식 구문을 사용하여 인수를 지정할 수 있습니다(예:'new { SampleArgument = "MyValue" }').</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.IndexOperation.Columns">
      <summary>인덱싱되는 열을 가져옵니다.Entity Framework 마이그레이션 API는 응용 프로그램의 최종 사용자와 같은 신뢰할 수 없는 소스에서 제공하는 입력을 허용하도록 디자인되지 않았습니다.이러한 소스의 입력이 허용되는 경우 이러한 API에 전달하기 전에 유효성 검사를 수행하여 SQL 삽입 공격 등으로부터 보호해야 합니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.IndexOperation.HasDefaultName">
      <summary>이 인덱스에 대해 특정 이름이 제공되었는지 여부를 나타내는 값을 가져옵니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.IndexOperation.Name">
      <summary>이 인덱스의 이름을 가져오거나 설정합니다.이름을 제공하지 않으면 기본 이름이 계산됩니다.Entity Framework 마이그레이션 API는 응용 프로그램의 최종 사용자와 같은 신뢰할 수 없는 소스에서 제공하는 입력을 허용하도록 디자인되지 않았습니다.이러한 소스의 입력이 허용되는 경우 이러한 API에 전달하기 전에 유효성 검사를 수행하여 SQL 삽입 공격 등으로부터 보호해야 합니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.IndexOperation.Table">
      <summary>인덱스가 속하는 테이블을 가져오거나 설정합니다.Entity Framework 마이그레이션 API는 응용 프로그램의 최종 사용자와 같은 신뢰할 수 없는 소스에서 제공하는 입력을 허용하도록 디자인되지 않았습니다.이러한 소스의 입력이 허용되는 경우 이러한 API에 전달하기 전에 유효성 검사를 수행하여 SQL 삽입 공격 등으로부터 보호해야 합니다.</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.MigrationOperation">
      <summary>데이터베이스 스키마 수정 작업을 나타냅니다.Entity Framework 마이그레이션 API는 응용 프로그램의 최종 사용자와 같은 신뢰할 수 없는 소스에서 제공하는 입력을 허용하도록 디자인되지 않았습니다.이러한 소스의 입력이 허용되는 경우 이러한 API에 전달하기 전에 유효성 검사를 수행하여 SQL 삽입 공격 등으로부터 보호해야 합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.MigrationOperation.#ctor(System.Object)">
      <summary>MigrationOperation 클래스의 새 인스턴스를 초기화합니다.Entity Framework 마이그레이션 API는 응용 프로그램의 최종 사용자와 같은 신뢰할 수 없는 소스에서 제공하는 입력을 허용하도록 디자인되지 않았습니다.이러한 소스의 입력이 허용되는 경우 이러한 API에 전달하기 전에 유효성 검사를 수행하여 SQL 삽입 공격 등으로부터 보호해야 합니다.</summary>
      <param name="anonymousArguments">익명 형식 구문을 사용하여 인수를 지정할 수 있습니다(예:'new { SampleArgument = "MyValue" }').</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.MigrationOperation.AnonymousArguments">
      <summary>공급자가 처리할 수 있는 추가 인수를 가져옵니다.Entity Framework 마이그레이션 API는 응용 프로그램의 최종 사용자와 같은 신뢰할 수 없는 소스에서 제공하는 입력을 허용하도록 디자인되지 않았습니다.이러한 소스의 입력이 허용되는 경우 이러한 API에 전달하기 전에 유효성 검사를 수행하여 SQL 삽입 공격 등으로부터 보호해야 합니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.MigrationOperation.Inverse">
      <summary>이 작업을 되돌리는 작업을 가져옵니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.MigrationOperation.IsDestructiveChange">
      <summary>이 작업으로 인해 데이터 손실이 발생할 수 있는지 여부를 나타내는 값을 가져옵니다.</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.MoveProcedureOperation">
      <summary>데이터베이스에서 새 스키마로 저장 프로시저를 이동하는 것을 나타냅니다.Entity Framework 마이그레이션 API는 응용 프로그램의 최종 사용자와 같은 신뢰할 수 없는 소스에서 제공하는 입력을 허용하도록 디자인되지 않았습니다.이러한 소스의 입력이 허용되는 경우 이러한 API에 전달하기 전에 유효성 검사를 수행하여 SQL 삽입 공격 등으로부터 보호해야 합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.MoveProcedureOperation.#ctor(System.String,System.String,System.Object)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.MoveProcedureOperation" /> 클래스의 새 인스턴스를 초기화합니다.Entity Framework 마이그레이션 API는 응용 프로그램의 최종 사용자와 같은 신뢰할 수 없는 소스에서 제공하는 입력을 허용하도록 디자인되지 않았습니다.이러한 소스의 입력이 허용되는 경우 이러한 API에 전달하기 전에 유효성 검사를 수행하여 SQL 삽입 공격 등으로부터 보호해야 합니다.</summary>
      <param name="name">이동할 저장 프로시저의 이름입니다.</param>
      <param name="newSchema">저장 프로시저의 새 스키마입니다.</param>
      <param name="anonymousArguments">익명 형식 구문을 사용하여 인수를 지정할 수 있습니다(예:'new { SampleArgument = "MyValue" }').</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.MoveProcedureOperation.Inverse">
      <summary>이 작업을 되돌리는 작업을 가져옵니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.MoveProcedureOperation.IsDestructiveChange">
      <summary>이 작업으로 인해 데이터 손실이 발생할 수 있는지 여부를 나타내는 값을 가져옵니다.항상 false를 반환합니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.MoveProcedureOperation.Name">
      <summary>이동할 저장 프로시저의 이름을 가져옵니다.</summary>
      <returns>이동할 저장 프로시저의 이름입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.MoveProcedureOperation.NewSchema">
      <summary>저장 프로시저의 새 스키마를 가져옵니다.</summary>
      <returns>저장 프로시저의 새 스키마입니다.</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.MoveTableOperation">
      <summary>한 스키마에서 다른 스키마로 테이블 이동을 나타냅니다.Entity Framework 마이그레이션 API는 응용 프로그램의 최종 사용자와 같은 신뢰할 수 없는 소스에서 제공하는 입력을 허용하도록 디자인되지 않았습니다.이러한 소스의 입력이 허용되는 경우 이러한 API에 전달하기 전에 유효성 검사를 수행하여 SQL 삽입 공격 등으로부터 보호해야 합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.MoveTableOperation.#ctor(System.String,System.String,System.Object)">
      <summary>MoveTableOperation 클래스의 새 인스턴스를 초기화합니다.Entity Framework 마이그레이션 API는 응용 프로그램의 최종 사용자와 같은 신뢰할 수 없는 소스에서 제공하는 입력을 허용하도록 디자인되지 않았습니다.이러한 소스의 입력이 허용되는 경우 이러한 API에 전달하기 전에 유효성 검사를 수행하여 SQL 삽입 공격 등으로부터 보호해야 합니다.</summary>
      <param name="name">이동할 테이블의 이름입니다.</param>
      <param name="newSchema">테이블을 이동할 스키마의 이름입니다.</param>
      <param name="anonymousArguments">공급자가 처리할 수 있는 추가 인수입니다.익명 형식 구문을 사용하여 인수를 지정할 수 있습니다(예:'new { SampleArgument = "MyValue" }').</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.MoveTableOperation.ContextKey">
      <summary>데이터를 새 테이블로 이동할 수 있도록 마이그레이션 기록 테이블을 수정할 때 사용됩니다.</summary>
      <returns>모델의 컨텍스트 키입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.MoveTableOperation.CreateTableOperation">
      <summary>기본 키를 삭제 및 추가하는 대신 테이블을 다시 빌드할 수 있도록 마이그레이션 기록 테이블을 수정할 때 사용됩니다.</summary>
      <returns>마이그레이션 기록 테이블에 대한 테이블 만들기 작업입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.MoveTableOperation.Inverse">
      <summary>테이블을 다시 원래 스키마로 이동하는 작업을 가져옵니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.MoveTableOperation.IsDestructiveChange">
      <summary>이 변경으로 인해 데이터 손실이 발생할지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>이 변경으로 데이터가 손실되면 true이고, 그렇지 않으면 false입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.MoveTableOperation.IsSystem">
      <summary>이 테이블이 시스템 테이블인지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>테이블이 시스템 테이블이면 true이고 그렇지 않으면 false입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.MoveTableOperation.Name">
      <summary>이동하려는 테이블의 이름을 가져옵니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.MoveTableOperation.NewSchema">
      <summary>테이블을 이동할 스키마의 이름을 가져옵니다.</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.NotSupportedOperation">
      <summary>대상 데이터베이스 공급자에서 지원되지 않는 등의 이유로 수행할 수 없는 마이그레이션 작업을 나타냅니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.NotSupportedOperation.IsDestructiveChange">
      <summary>이 작업으로 인해 데이터 손실이 발생할 수 있는지 여부를 나타내는 값을 가져옵니다.항상 false를 반환합니다.</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.ParameterModel">
      <summary>매개 변수에 대한 정보를 나타냅니다.Entity Framework 마이그레이션 API는 응용 프로그램의 최종 사용자와 같은 신뢰할 수 없는 소스에서 제공하는 입력을 허용하도록 디자인되지 않았습니다.이러한 소스의 입력이 허용되는 경우 이러한 API에 전달하기 전에 유효성 검사를 수행하여 SQL 삽입 공격 등으로부터 보호해야 합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.ParameterModel.#ctor(System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind)">
      <summary>ParameterModel 클래스의 새 인스턴스를 초기화합니다.Entity Framework 마이그레이션 API는 응용 프로그램의 최종 사용자와 같은 신뢰할 수 없는 소스에서 제공하는 입력을 허용하도록 디자인되지 않았습니다.이러한 소스의 입력이 허용되는 경우 이러한 API에 전달하기 전에 유효성 검사를 수행하여 SQL 삽입 공격 등으로부터 보호해야 합니다.</summary>
      <param name="type">이 매개 변수의 데이터 형식입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.ParameterModel.#ctor(System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind,System.Data.Entity.Core.Metadata.Edm.TypeUsage)">
      <summary>ParameterModel 클래스의 새 인스턴스를 초기화합니다.Entity Framework 마이그레이션 API는 응용 프로그램의 최종 사용자와 같은 신뢰할 수 없는 소스에서 제공하는 입력을 허용하도록 디자인되지 않았습니다.이러한 소스의 입력이 허용되는 경우 이러한 API에 전달하기 전에 유효성 검사를 수행하여 SQL 삽입 공격 등으로부터 보호해야 합니다.</summary>
      <param name="type">이 매개 변수의 데이터 형식입니다.</param>
      <param name="typeUsage">데이터 타입에 대한 추가 세부 정보입니다.여기에는 최대 길이, null 허용 여부 등의 세부 정보가 포함됩니다.</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ParameterModel.IsOutParameter">
      <summary>이 인스턴스가 out 매개 변수인지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
      <returns>이 인스턴스가 out 매개 변수이면 true이고, 그렇지 않으면 false입니다.</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.PrimaryKeyOperation">
      <summary>기본 키에 영향을 주는 작업을 나타내는 공통 기본 클래스입니다.Entity Framework 마이그레이션 API는 응용 프로그램의 최종 사용자와 같은 신뢰할 수 없는 소스에서 제공하는 입력을 허용하도록 디자인되지 않았습니다.이러한 소스의 입력이 허용되는 경우 이러한 API에 전달하기 전에 유효성 검사를 수행하여 SQL 삽입 공격 등으로부터 보호해야 합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.PrimaryKeyOperation.#ctor(System.Object)">
      <summary>PrimaryKeyOperation 클래스의 새 인스턴스를 초기화합니다.Entity Framework 마이그레이션 API는 응용 프로그램의 최종 사용자와 같은 신뢰할 수 없는 소스에서 제공하는 입력을 허용하도록 디자인되지 않았습니다.이러한 소스의 입력이 허용되는 경우 이러한 API에 전달하기 전에 유효성 검사를 수행하여 SQL 삽입 공격 등으로부터 보호해야 합니다.</summary>
      <param name="anonymousArguments">공급자가 처리할 수 있는 추가 인수입니다.익명 형식 구문을 사용하여 인수를 지정할 수 있습니다(예:'new { SampleArgument = "MyValue" }').</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.PrimaryKeyOperation.Columns">
      <summary>기본 키를 구성하는 열을 가져옵니다.Entity Framework 마이그레이션 API는 응용 프로그램의 최종 사용자와 같은 신뢰할 수 없는 소스에서 제공하는 입력을 허용하도록 디자인되지 않았습니다.이러한 소스의 입력이 허용되는 경우 이러한 API에 전달하기 전에 유효성 검사를 수행하여 SQL 삽입 공격 등으로부터 보호해야 합니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.PrimaryKeyOperation.HasDefaultName">
      <summary>이 기본 키에 대해 특정 이름이 제공되었는지 여부를 나타내는 값을 가져옵니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.PrimaryKeyOperation.IsDestructiveChange">
      <summary>이 작업으로 인해 데이터 손실이 발생할 수 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>이 작업으로 인해 데이터 손실이 발생할 수 있으면 true이고, 그렇지 않으면 false입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.PrimaryKeyOperation.Name">
      <summary>이 기본 키의 이름을 가져오거나 설정합니다.이름을 제공하지 않으면 기본 이름이 계산됩니다.Entity Framework 마이그레이션 API는 응용 프로그램의 최종 사용자와 같은 신뢰할 수 없는 소스에서 제공하는 입력을 허용하도록 디자인되지 않았습니다.이러한 소스의 입력이 허용되는 경우 이러한 API에 전달하기 전에 유효성 검사를 수행하여 SQL 삽입 공격 등으로부터 보호해야 합니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.PrimaryKeyOperation.Table">
      <summary>기본 키를 포함하는 테이블의 이름을 가져오거나 설정합니다.Entity Framework 마이그레이션 API는 응용 프로그램의 최종 사용자와 같은 신뢰할 수 없는 소스에서 제공하는 입력을 허용하도록 디자인되지 않았습니다.이러한 소스의 입력이 허용되는 경우 이러한 API에 전달하기 전에 유효성 검사를 수행하여 SQL 삽입 공격 등으로부터 보호해야 합니다.</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.ProcedureOperation">
      <summary>저장 프로시저에 영향을 주는 마이그레이션 작업입니다.Entity Framework 마이그레이션 API는 응용 프로그램의 최종 사용자와 같은 신뢰할 수 없는 소스에서 제공하는 입력을 허용하도록 디자인되지 않았습니다.이러한 소스의 입력이 허용되는 경우 이러한 API에 전달하기 전에 유효성 검사를 수행하여 SQL 삽입 공격 등으로부터 보호해야 합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.ProcedureOperation.#ctor(System.String,System.String,System.Object)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.ProcedureOperation" /> 클래스의 새 인스턴스를 초기화합니다.Entity Framework 마이그레이션 API는 응용 프로그램의 최종 사용자와 같은 신뢰할 수 없는 소스에서 제공하는 입력을 허용하도록 디자인되지 않았습니다.이러한 소스의 입력이 허용되는 경우 이러한 API에 전달하기 전에 유효성 검사를 수행하여 SQL 삽입 공격 등으로부터 보호해야 합니다.</summary>
      <param name="name">저장 프로시저의 이름입니다.</param>
      <param name="bodySql">SQL로 표현된 저장 프로시저의 본문입니다.</param>
      <param name="anonymousArguments">익명 형식 구문을 사용하여 인수를 지정할 수 있습니다(예:'new { SampleArgument = "MyValue" }').</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ProcedureOperation.BodySql">
      <summary>SQL로 표현된 저장 프로시저의 본문을 가져옵니다.</summary>
      <returns>SQL로 표현된 저장 프로시저의 본문입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ProcedureOperation.IsDestructiveChange">
      <summary>이 작업으로 인해 데이터 손실이 발생할 수 있는지 여부를 나타내는 값을 가져옵니다.항상 false를 반환합니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ProcedureOperation.Name">
      <summary>저장 프로시저의 이름을 가져옵니다.</summary>
      <returns>저장 프로시저의 이름입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ProcedureOperation.Parameters">
      <summary>저장 프로시저의 매개 변수를 가져옵니다.</summary>
      <returns>저장 프로시저의 매개 변수입니다.</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.PropertyModel">
      <summary>엔터티 속성에 대한 정보를 나타냅니다.Entity Framework 마이그레이션 API는 응용 프로그램의 최종 사용자와 같은 신뢰할 수 없는 소스에서 제공하는 입력을 허용하도록 디자인되지 않았습니다.이러한 소스의 입력이 허용되는 경우 이러한 API에 전달하기 전에 유효성 검사를 수행하여 SQL 삽입 공격 등으로부터 보호해야 합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.PropertyModel.#ctor(System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind,System.Data.Entity.Core.Metadata.Edm.TypeUsage)">
      <summary>PropertyModel 클래스의 새 인스턴스를 초기화합니다.Entity Framework 마이그레이션 API는 응용 프로그램의 최종 사용자와 같은 신뢰할 수 없는 소스에서 제공하는 입력을 허용하도록 디자인되지 않았습니다.이러한 소스의 입력이 허용되는 경우 이러한 API에 전달하기 전에 유효성 검사를 수행하여 SQL 삽입 공격 등으로부터 보호해야 합니다.</summary>
      <param name="type">이 속성 모델의 데이터 형식입니다.</param>
      <param name="typeUsage">데이터 타입에 대한 추가 세부 정보입니다.여기에는 최대 길이, null 허용 여부 등의 세부 정보가 포함됩니다.</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.PropertyModel.DefaultValue">
      <summary>이 속성 모델에 대한 기본값으로 사용할 상수 값을 가져오거나 설정합니다.Entity Framework 마이그레이션 API는 응용 프로그램의 최종 사용자와 같은 신뢰할 수 없는 소스에서 제공하는 입력을 허용하도록 디자인되지 않았습니다.이러한 소스의 입력이 허용되는 경우 이러한 API에 전달하기 전에 유효성 검사를 수행하여 SQL 삽입 공격 등으로부터 보호해야 합니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.PropertyModel.DefaultValueSql">
      <summary>이 속성 모델에 대한 기본값으로 사용되는 SQL 식을 가져오거나 설정합니다.Entity Framework 마이그레이션 API는 응용 프로그램의 최종 사용자와 같은 신뢰할 수 없는 소스에서 제공하는 입력을 허용하도록 디자인되지 않았습니다.이러한 소스의 입력이 허용되는 경우 이러한 API에 전달하기 전에 유효성 검사를 수행하여 SQL 삽입 공격 등으로부터 보호해야 합니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.PropertyModel.IsFixedLength">
      <summary>이 속성 모델이 고정 길이인지 여부를 나타내는 값을 가져오거나 설정합니다.배열 데이터 형식의 경우에만 유효합니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.PropertyModel.IsUnicode">
      <summary>이 속성 모델이 유니코드 문자를 지원하는지 여부를 나타내는 값을 가져오거나 설정합니다.텍스트 데이터 형식의 경우에만 유효합니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.PropertyModel.MaxLength">
      <summary>이 속성 모델에 대한 최대 길이를 가져오거나 설정합니다.배열 데이터 형식의 경우에만 유효합니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.PropertyModel.Name">
      <summary>속성 모델의 이름을 가져오거나 설정합니다.Entity Framework 마이그레이션 API는 응용 프로그램의 최종 사용자와 같은 신뢰할 수 없는 소스에서 제공하는 입력을 허용하도록 디자인되지 않았습니다.이러한 소스의 입력이 허용되는 경우 이러한 API에 전달하기 전에 유효성 검사를 수행하여 SQL 삽입 공격 등으로부터 보호해야 합니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.PropertyModel.Precision">
      <summary>이 속성 모델의 전체 자릿수를 가져오거나 설정합니다.10진수 텍스트 데이터 형식의 경우에만 유효합니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.PropertyModel.Scale">
      <summary>이 속성 모델의 소수 자릿수를 가져오거나 설정합니다.10진수 텍스트 데이터 형식의 경우에만 유효합니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.PropertyModel.StoreType">
      <summary>이 속성 모델에 대해 사용할 공급자별 데이터 형식을 가져오거나 설정합니다.Entity Framework 마이그레이션 API는 응용 프로그램의 최종 사용자와 같은 신뢰할 수 없는 소스에서 제공하는 입력을 허용하도록 디자인되지 않았습니다.이러한 소스의 입력이 허용되는 경우 이러한 API에 전달하기 전에 유효성 검사를 수행하여 SQL 삽입 공격 등으로부터 보호해야 합니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.PropertyModel.Type">
      <summary>이 속성 모델의 데이터 형식을 가져옵니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.PropertyModel.TypeUsage">
      <summary>이 속성 모델의 데이터 형식에 대한 추가 세부 정보를 가져옵니다.여기에는 최대 길이, null 허용 여부 등의 세부 정보가 포함됩니다.</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.RenameColumnOperation">
      <summary>기존 열의 이름 바꾸기를 나타냅니다.Entity Framework 마이그레이션 API는 응용 프로그램의 최종 사용자와 같은 신뢰할 수 없는 소스에서 제공하는 입력을 허용하도록 디자인되지 않았습니다.이러한 소스의 입력이 허용되는 경우 이러한 API에 전달하기 전에 유효성 검사를 수행하여 SQL 삽입 공격 등으로부터 보호해야 합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.RenameColumnOperation.#ctor(System.String,System.String,System.String,System.Object)">
      <summary>RenameColumnOperation 클래스의 새 인스턴스를 초기화합니다.Entity Framework 마이그레이션 API는 응용 프로그램의 최종 사용자와 같은 신뢰할 수 없는 소스에서 제공하는 입력을 허용하도록 디자인되지 않았습니다.이러한 소스의 입력이 허용되는 경우 이러한 API에 전달하기 전에 유효성 검사를 수행하여 SQL 삽입 공격 등으로부터 보호해야 합니다.</summary>
      <param name="table">열이 속하는 테이블의 이름입니다.</param>
      <param name="name">이름을 바꿀 열의 이름입니다.</param>
      <param name="newName">열의 새 이름입니다.</param>
      <param name="anonymousArguments">공급자가 처리할 수 있는 추가 인수입니다.익명 형식 구문을 사용하여 인수를 지정할 수 있습니다(예:'new { SampleArgument = "MyValue" }').</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameColumnOperation.Inverse">
      <summary>이름 바꾸기를 되돌리는 작업을 가져옵니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameColumnOperation.IsDestructiveChange">
      <summary>이 작업으로 인해 데이터 손실이 발생할 수 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>이 작업으로 인해 데이터 손실이 발생할 수 있으면 true이고, 그렇지 않으면 false입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameColumnOperation.Name">
      <summary>이름을 바꾸려는 열의 이름을 가져옵니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameColumnOperation.NewName">
      <summary>열의 새 이름을 가져옵니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameColumnOperation.Table">
      <summary>열이 속하는 테이블의 이름을 가져옵니다.</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.RenameProcedureOperation">
      <summary>데이터베이스에서 저장 프로시저의 이름 바꾸기를 나타냅니다.Entity Framework 마이그레이션 API는 응용 프로그램의 최종 사용자와 같은 신뢰할 수 없는 소스에서 제공하는 입력을 허용하도록 디자인되지 않았습니다.이러한 소스의 입력이 허용되는 경우 이러한 API에 전달하기 전에 유효성 검사를 수행하여 SQL 삽입 공격 등으로부터 보호해야 합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.RenameProcedureOperation.#ctor(System.String,System.String,System.Object)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.RenameProcedureOperation" /> 클래스의 새 인스턴스를 초기화합니다.Entity Framework 마이그레이션 API는 응용 프로그램의 최종 사용자와 같은 신뢰할 수 없는 소스에서 제공하는 입력을 허용하도록 디자인되지 않았습니다.이러한 소스의 입력이 허용되는 경우 이러한 API에 전달하기 전에 유효성 검사를 수행하여 SQL 삽입 공격 등으로부터 보호해야 합니다.</summary>
      <param name="name">이름을 바꿀 저장 프로시저의 이름입니다.</param>
      <param name="newName">저장 프로시저의 새 이름입니다.</param>
      <param name="anonymousArguments">익명 형식 구문을 사용하여 인수를 지정할 수 있습니다(예:'new { SampleArgument = "MyValue" }').</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameProcedureOperation.Inverse">
      <summary>이 작업을 되돌리는 작업을 가져옵니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameProcedureOperation.IsDestructiveChange">
      <summary>이 작업으로 인해 데이터 손실이 발생할 수 있는지 여부를 나타내는 값을 가져옵니다.항상 false를 반환합니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameProcedureOperation.Name">
      <summary>이름을 바꿀 저장 프로시저의 이름을 가져옵니다.</summary>
      <returns>이름을 바꿀 저장 프로시저의 이름입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameProcedureOperation.NewName">
      <summary>저장 프로시저의 새 이름을 가져옵니다.</summary>
      <returns>저장 프로시저의 새 이름입니다.</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.RenameTableOperation">
      <summary>기존 테이블의 이름 바꾸기를 나타냅니다.Entity Framework 마이그레이션 API는 응용 프로그램의 최종 사용자와 같은 신뢰할 수 없는 소스에서 제공하는 입력을 허용하도록 디자인되지 않았습니다.이러한 소스의 입력이 허용되는 경우 이러한 API에 전달하기 전에 유효성 검사를 수행하여 SQL 삽입 공격 등으로부터 보호해야 합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.RenameTableOperation.#ctor(System.String,System.String,System.Object)">
      <summary>RenameTableOperation 클래스의 새 인스턴스를 초기화합니다.Entity Framework 마이그레이션 API는 응용 프로그램의 최종 사용자와 같은 신뢰할 수 없는 소스에서 제공하는 입력을 허용하도록 디자인되지 않았습니다.이러한 소스의 입력이 허용되는 경우 이러한 API에 전달하기 전에 유효성 검사를 수행하여 SQL 삽입 공격 등으로부터 보호해야 합니다.</summary>
      <param name="name">이름을 바꿀 테이블의 이름입니다.</param>
      <param name="newName">테이블의 새 이름입니다.</param>
      <param name="anonymousArguments">공급자가 처리할 수 있는 추가 인수입니다.익명 형식 구문을 사용하여 인수를 지정할 수 있습니다(예:'new { SampleArgument = "MyValue" }').</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameTableOperation.Inverse">
      <summary>이름 바꾸기를 되돌리는 작업을 가져옵니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameTableOperation.IsDestructiveChange">
      <summary>변경 내용이 파괴적인지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>변경 내용이 파괴적이면 true이고, 그렇지 않으면 false입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameTableOperation.Name">
      <summary>이름을 바꾸려는 테이블의 이름을 가져옵니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameTableOperation.NewName">
      <summary>테이블의 새 이름을 가져옵니다.</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.SqlOperation">
      <summary>대상 데이터베이스에 대해 직접 실행할 공급자별 SQL 문을 나타냅니다.Entity Framework 마이그레이션 API는 응용 프로그램의 최종 사용자와 같은 신뢰할 수 없는 소스에서 제공하는 입력을 허용하도록 디자인되지 않았습니다.이러한 소스의 입력이 허용되는 경우 이러한 API에 전달하기 전에 유효성 검사를 수행하여 SQL 삽입 공격 등으로부터 보호해야 합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.SqlOperation.#ctor(System.String,System.Object)">
      <summary>SqlOperation 클래스의 새 인스턴스를 초기화합니다.Entity Framework 마이그레이션 API는 응용 프로그램의 최종 사용자와 같은 신뢰할 수 없는 소스에서 제공하는 입력을 허용하도록 디자인되지 않았습니다.이러한 소스의 입력이 허용되는 경우 이러한 API에 전달하기 전에 유효성 검사를 수행하여 SQL 삽입 공격 등으로부터 보호해야 합니다.</summary>
      <param name="sql">실행할 SQL입니다.</param>
      <param name="anonymousArguments">공급자가 처리할 수 있는 추가 인수입니다.익명 형식 구문을 사용하여 인수를 지정할 수 있습니다(예:'new { SampleArgument = "MyValue" }').</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.SqlOperation.IsDestructiveChange">
      <summary>이 작업으로 인해 데이터 손실이 발생할 수 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>이 작업으로 인해 데이터 손실이 발생할 수 있으면 true이고, 그렇지 않으면 false입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.SqlOperation.Sql">
      <summary>실행할 SQL을 가져옵니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.SqlOperation.SuppressTransaction">
      <summary>마이그레이션 프로세스를 트랜잭션 가능하도록 만들기 위해 사용되는 트랜잭션 범위 외부에서 이 문을 수행해야 하는지 여부를 나타내는 값을 가져오거나 설정합니다.true로 설정된 경우 마이그레이션 프로세스가 실패해도 작업이 롤백되지 않습니다.</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.UpdateDatabaseOperation">
      <summary>데이터베이스에 대해 수행된 작업을 저장하는 데이터베이스 업데이트 작업을 스크립팅할 때 사용됩니다.Entity Framework 마이그레이션 API는 응용 프로그램의 최종 사용자와 같은 신뢰할 수 없는 소스에서 제공하는 입력을 허용하도록 디자인되지 않았습니다.이러한 소스의 입력이 허용되는 경우 이러한 API에 전달하기 전에 유효성 검사를 수행하여 SQL 삽입 공격 등으로부터 보호해야 합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.UpdateDatabaseOperation.#ctor(System.Collections.Generic.IList{System.Data.Entity.Core.Common.CommandTrees.DbQueryCommandTree})">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.UpdateDatabaseOperation" /> 클래스의 새 인스턴스를 초기화합니다.Entity Framework 마이그레이션 API는 응용 프로그램의 최종 사용자와 같은 신뢰할 수 없는 소스에서 제공하는 입력을 허용하도록 디자인되지 않았습니다.이러한 소스의 입력이 허용되는 경우 이러한 API에 전달하기 전에 유효성 검사를 수행하여 SQL 삽입 공격 등으로부터 보호해야 합니다.</summary>
      <param name="historyQueryTrees">이 마이그레이션이 데이터베이스에 적용되어야 하는지 여부를 확인하는 데 사용되는 쿼리입니다.모든 버전에서 데이터베이스에 대해 실행될 수 있는 idempotent SQL 스크립트를 생성하는 데 사용됩니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.UpdateDatabaseOperation.AddMigration(System.String,System.Collections.Generic.IList{System.Data.Entity.Migrations.Model.MigrationOperation})">
      <summary>이 데이터베이스 업데이트 작업에 마이그레이션을 추가합니다.Entity Framework 마이그레이션 API는 응용 프로그램의 최종 사용자와 같은 신뢰할 수 없는 소스에서 제공하는 입력을 허용하도록 디자인되지 않았습니다.이러한 소스의 입력이 허용되는 경우 이러한 API에 전달하기 전에 유효성 검사를 수행하여 SQL 삽입 공격 등으로부터 보호해야 합니다.</summary>
      <param name="migrationId">마이그레이션의 ID입니다.</param>
      <param name="operations">마이그레이션에서 적용된 개별 작업입니다.</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.UpdateDatabaseOperation.HistoryQueryTrees">
      <summary>이 마이그레이션이 데이터베이스에 적용되어야 하는지 여부를 확인하는 데 사용되는 쿼리입니다.모든 버전에서 데이터베이스에 대해 실행될 수 있는 idempotent SQL 스크립트를 생성하는 데 사용됩니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.UpdateDatabaseOperation.IsDestructiveChange">
      <summary>작업 중 하나로 인해 데이터 손실이 발생할 수 있는지 여부를 나타내는 값을 가져옵니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.UpdateDatabaseOperation.Migrations">
      <summary>데이터베이스 업데이트 작업 중에 적용된 마이그레이션을 가져옵니다.</summary>
      <returns>데이터베이스 업데이트 작업 중에 적용된 마이그레이션입니다.</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.UpdateDatabaseOperation.Migration">
      <summary>데이터베이스에 적용할 마이그레이션을 나타냅니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.UpdateDatabaseOperation.Migration.MigrationId">
      <summary>마이그레이션의 ID를 가져옵니다.</summary>
      <returns>마이그레이션의 ID입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.UpdateDatabaseOperation.Migration.Operations">
      <summary>이 마이그레이션에서 적용된 개별 작업을 가져옵니다.</summary>
      <returns>이 마이그레이션에서 적용된 개별 작업입니다.</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Sql.MigrationSqlGenerator">
      <summary>공급자를 알 수 없는 마이그레이션 작업을 데이터베이스 공급자의 특정 SQL 명령으로 변환하는 공급자에 대한 공통 기본 클래스입니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.MigrationSqlGenerator.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Sql.MigrationSqlGenerator" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.MigrationSqlGenerator.Generate(System.Collections.Generic.IEnumerable{System.Data.Entity.Migrations.Model.MigrationOperation},System.String)">
      <summary>마이그레이션 작업 집합을 데이터베이스 공급자의 특정 SQL로 변환합니다.</summary>
      <returns>마이그레이션 작업을 수행하기 위해 실행할 SQL 문 목록입니다.</returns>
      <param name="migrationOperations">변환할 작업입니다.</param>
      <param name="providerManifestToken">대상으로 지정 중인 데이터베이스의 버전을 나타내는 토큰입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.MigrationSqlGenerator.GenerateProcedureBody(System.Collections.Generic.ICollection{System.Data.Entity.Core.Common.CommandTrees.DbModificationCommandTree},System.String,System.String)">
      <summary>저장 프로시저의 SQL 본문을 생성합니다.</summary>
      <returns>저장 프로시저의 SQL 본문입니다.</returns>
      <param name="commandTrees">삽입, 업데이트 또는 삭제 작업을 위한 명령을 나타내는 명령 트리입니다.</param>
      <param name="rowsAffectedParameter">행의 영향을 받는 매개 변수 이름입니다.</param>
      <param name="providerManifestToken">공급자 매니페스트 토큰입니다.</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.Sql.MigrationStatement">
      <summary>SQL 문으로 변환된 마이그레이션 작업을 나타냅니다.Entity Framework 마이그레이션 API는 응용 프로그램의 최종 사용자와 같은 신뢰할 수 없는 소스에서 제공하는 입력을 허용하도록 디자인되지 않았습니다.이러한 소스의 입력이 허용되는 경우 이러한 API에 전달하기 전에 유효성 검사를 수행하여 SQL 삽입 공격 등으로부터 보호해야 합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.MigrationStatement.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Sql.MigrationStatement" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Sql.MigrationStatement.BatchTerminator">
      <summary>데이터베이스 공급자의 일괄 처리 종결자를 가져오거나 설정합니다.Entity Framework 마이그레이션 API는 응용 프로그램의 최종 사용자와 같은 신뢰할 수 없는 소스에서 제공하는 입력을 허용하도록 디자인되지 않았습니다.이러한 소스의 입력이 허용되는 경우 이러한 API에 전달하기 전에 유효성 검사를 수행하여 SQL 삽입 공격 등으로부터 보호해야 합니다.</summary>
      <returns>데이터베이스 공급자의 일괄 처리 종결자입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Sql.MigrationStatement.Sql">
      <summary>이 마이그레이션 작업을 수행하기 위해 실행할 SQL을 가져오거나 설정합니다.Entity Framework 마이그레이션 API는 응용 프로그램의 최종 사용자와 같은 신뢰할 수 없는 소스에서 제공하는 입력을 허용하도록 디자인되지 않았습니다.이러한 소스의 입력이 허용되는 경우 이러한 API에 전달하기 전에 유효성 검사를 수행하여 SQL 삽입 공격 등으로부터 보호해야 합니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Sql.MigrationStatement.SuppressTransaction">
      <summary>마이그레이션 프로세스를 트랜잭션 가능하도록 만들기 위해 사용되는 트랜잭션 범위 외부에서 이 문을 수행해야 하는지 여부를 나타내는 값을 가져오거나 설정합니다.true로 설정된 경우 마이그레이션 프로세스가 실패해도 작업이 롤백되지 않습니다.</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Utilities.IndentedTextWriter">
      <summary>
        <see cref="T:System.CodeDom.Compiler.IndentedTextWriter" />와 동일하지만 부분 신뢰로 작동하고 생성된 들여쓰기 문자열에 대한 명시적 캐싱을 추가하고 다음 줄을 올바르게 들여쓰기하도록 쓰기 줄로 \r\n 또는 \n만 포함된 문자열 쓰기를 인식합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.#ctor(System.IO.TextWriter)">
      <summary>지정된 텍스트 작성기 및 기본 탭 문자열을 사용하여 IndentedTextWriter 클래스의 새 인스턴스를 초기화합니다.이 생성기에 전달되는 작성기는 <see cref="F:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Culture" /> 속성으로 지정된 <see cref="T:System.Globalization.CultureInfo" />를 사용해야 합니다.</summary>
      <param name="writer">출력에 사용할 <see cref="T:System.IO.TextWriter" />입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.#ctor(System.IO.TextWriter,System.String)">
      <summary>지정된 텍스트 작성기 및 탭 문자열을 사용하여 IndentedTextWriter 클래스의 새 인스턴스를 초기화합니다.이 생성기에 전달되는 작성기는 <see cref="F:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Culture" /> 속성으로 지정된 <see cref="T:System.Globalization.CultureInfo" />를 사용해야 합니다.</summary>
      <param name="writer">출력에 사용할 <see cref="T:System.IO.TextWriter" />입니다.</param>
      <param name="tabString">들여쓰기에 사용할 탭 문자열입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Close">
      <summary>작성 중인 문서를 닫습니다.</summary>
    </member>
    <member name="F:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Culture">
      <summary>기본 TextWriter에서 사용할 문화권을 지정합니다.이 정적 속성은 읽기 전용입니다.<see cref="T:System.Data.Entity.Migrations.Utilities.IndentedTextWriter" />의 생성자 중 하나에 전달되는 작성기는 이와 동일한 문화권을 사용해야 합니다.<see cref="P:System.Globalization.CultureInfo.InvariantCulture" /> 문화권입니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.CurrentIndentation">
      <summary>새 줄에 대한 현재 들여쓰기 수준을 나타내는 문자열을 빌드합니다.</summary>
      <returns>빈 문자열이거나 지정된 탭 문자열의 .Indent 수준 값을 포함하는 문자열입니다.</returns>
    </member>
    <member name="F:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.DefaultTabString">
      <summary>기본 탭 문자열을 지정합니다.이 필드는 상수입니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Encoding">
      <summary>텍스트 작성기에서 사용할 인코딩을 가져옵니다.</summary>
      <returns>텍스트 작성기에서 사용할 인코딩을 나타내는 <see cref="T:System.Text.Encoding" />입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Flush">
      <summary>스트림을 플러시합니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Indent">
      <summary>들여쓸 공백의 수를 가져오거나 설정합니다.</summary>
      <returns>들여쓸 공백의 수입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.InnerWriter">
      <summary>사용할 <see cref="T:System.IO.TextWriter" />를 가져옵니다.</summary>
      <returns>사용할 <see cref="T:System.IO.TextWriter" />입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.NewLine">
      <summary>사용할 줄 바꿈 문자를 가져오거나 설정합니다.</summary>
      <returns>사용할 줄 바꿈 문자입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.OutputTabs">
      <summary>
        <see cref="P:System.CodeDom.Compiler.IndentedTextWriter.Indent" /> 속성에 따라 각 들여쓰기 수준마다 탭 문자열을 출력합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.Boolean)">
      <summary>텍스트 스트림에 Boolean 값의 텍스트 표현을 씁니다.</summary>
      <param name="value">쓸 Boolean 값입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.Char)">
      <summary>텍스트 스트림에 문자를 씁니다.</summary>
      <param name="value">쓸 문자입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.Char[])">
      <summary>텍스트 스트림에 문자 배열을 씁니다.</summary>
      <param name="buffer">쓸 문자 배열입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.Char[],System.Int32,System.Int32)">
      <summary>텍스트 스트림에 문자의 하위 배열을 씁니다.</summary>
      <param name="buffer">쓸 데이터가 있는 문자 배열입니다.</param>
      <param name="index">버퍼의 시작 인덱스입니다.</param>
      <param name="count">쓸 문자 수입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.Double)">
      <summary>Double 값의 텍스트 표현을 텍스트 스트림에 씁니다.</summary>
      <param name="value">쓸 double입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.Int32)">
      <summary>텍스트 스트림에 정수의 텍스트 표현을 씁니다.</summary>
      <param name="value">쓸 정수입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.Int64)">
      <summary>텍스트 스트림에 8바이트 정수의 텍스트 표현을 씁니다.</summary>
      <param name="value">쓸 8바이트 정수입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.Object)">
      <summary>텍스트 스트림에 개체의 텍스트 표현을 씁니다.</summary>
      <param name="value">쓸 개체입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.Single)">
      <summary>Single 값의 텍스트 표현을 텍스트 스트림에 씁니다.</summary>
      <param name="value">쓸 single입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.String)">
      <summary>텍스트 스트림에 지정된 문자열을 씁니다.</summary>
      <param name="value">쓸 문자열입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.String,System.Object)">
      <summary>지정된 것과 같은 의미 체계를 사용하여 서식이 지정된 문자열을 씁니다.</summary>
      <param name="format">서식 지정 문자열입니다.</param>
      <param name="arg0">서식이 지정된 문자열에 쓸 개체입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.String,System.Object,System.Object)">
      <summary>지정된 것과 같은 의미 체계를 사용하여 서식이 지정된 문자열을 씁니다.</summary>
      <param name="format">사용할 서식 지정 문자열입니다.</param>
      <param name="arg0">서식 지정 문자열에 쓸 첫째 개체입니다.</param>
      <param name="arg1">서식 지정 문자열에 쓸 둘째 개체입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.String,System.Object[])">
      <summary>지정된 것과 같은 의미 체계를 사용하여 서식이 지정된 문자열을 씁니다.</summary>
      <param name="format">사용할 서식 지정 문자열입니다.</param>
      <param name="arg">출력할 인수 배열입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine">
      <summary>줄 마침 표시를 씁니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.Boolean)">
      <summary>텍스트 스트림에 줄 마침 표시가 다음에 오도록 Boolean 값의 텍스트 표현을 씁니다.</summary>
      <param name="value">쓸 Boolean입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.Char)">
      <summary>텍스트 스트림에 줄 마침 표시가 다음에 오도록 문자를 씁니다.</summary>
      <param name="value">쓸 문자입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.Char[])">
      <summary>텍스트 스트림에 줄 마침 표시가 다음에 오도록 문자 배열을 씁니다.</summary>
      <param name="buffer">쓸 문자 배열입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.Char[],System.Int32,System.Int32)">
      <summary>텍스트 스트림에 줄 마침 표시가 다음에 오도록 문자의 하위 배열을 씁니다.</summary>
      <param name="buffer">쓸 데이터가 있는 문자 배열입니다.</param>
      <param name="index">버퍼의 시작 인덱스입니다.</param>
      <param name="count">쓸 문자 수입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.Double)">
      <summary>텍스트 스트림에 줄 마침 표시가 다음에 오도록 Double 값의 텍스트 표현을 씁니다.</summary>
      <param name="value">쓸 double입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.Int32)">
      <summary>텍스트 스트림에 줄 마침 표시가 다음에 오도록 정수의 텍스트 표현을 씁니다.</summary>
      <param name="value">쓸 정수입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.Int64)">
      <summary>텍스트 스트림에 줄 마침 표시가 다음에 오도록 8바이트 정수의 텍스트 표현을 씁니다.</summary>
      <param name="value">쓸 8바이트 정수입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.Object)">
      <summary>텍스트 스트림에 줄 마침 표시가 다음에 오도록 개체의 텍스트 표현을 씁니다.</summary>
      <param name="value">쓸 개체입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.Single)">
      <summary>텍스트 스트림에 줄 마침 표시가 다음에 오도록 Single 값의 텍스트 표현을 씁니다.</summary>
      <param name="value">쓸 single입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.String)">
      <summary>텍스트 스트림에 줄 마침 표시가 다음에 오도록 지정된 문자열을 씁니다.</summary>
      <param name="value">쓸 문자열입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.String,System.Object)">
      <summary>지정된 것과 같은 의미 체계를 사용하여 서식이 지정된 문자열을 줄 마침 표시가 다음에 오도록 씁니다.</summary>
      <param name="format">서식 지정 문자열입니다.</param>
      <param name="arg0">서식이 지정된 문자열에 쓸 개체입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.String,System.Object,System.Object)">
      <summary>지정된 것과 같은 의미 체계를 사용하여 서식이 지정된 문자열을 줄 마침 표시가 다음에 오도록 씁니다.</summary>
      <param name="format">사용할 서식 지정 문자열입니다.</param>
      <param name="arg0">서식 지정 문자열에 쓸 첫째 개체입니다.</param>
      <param name="arg1">서식 지정 문자열에 쓸 둘째 개체입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.String,System.Object[])">
      <summary>지정된 것과 같은 의미 체계를 사용하여 서식이 지정된 문자열을 줄 마침 표시가 다음에 오도록 씁니다.</summary>
      <param name="format">사용할 서식 지정 문자열입니다.</param>
      <param name="arg">출력할 인수 배열입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.UInt32)">
      <summary>텍스트 스트림에 줄 마침 표시가 다음에 오도록 UInt32 값의 텍스트 표현을 씁니다.</summary>
      <param name="value">출력할 UInt32입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLineNoTabs(System.String)">
      <summary>탭 없는 줄에 지정된 문자열을 씁니다.</summary>
      <param name="value">쓸 문자열입니다.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.ComplexTypeConfiguration`1">
      <summary>모델의 복합 형식에 대해 구성을 수행할 수 있도록 합니다.<see cref="T:System.Data.Entity.DbModelBuilder" />의 ComplexType 메서드를 통해 ComplexTypeConfiguration을 가져오거나, <see cref="T:System.Data.Entity.DbModelBuilder" />의 Configurations 속성을 통해 ComplexTypeConfiguration에서 파생된 사용자 지정 형식을 등록할 수 있습니다.</summary>
      <typeparam name="TComplexType">구성할 복합 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.ComplexTypeConfiguration`1.#ctor">
      <summary>ComplexTypeConfiguration의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.ComplexTypeConfiguration`1.Equals(System.Object)">
      <summary>지정한 개체와 현재 개체가 같은지 여부를 확인합니다.</summary>
      <returns>개체가 같으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="obj">지정한 개체와 비교할 개체입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.ComplexTypeConfiguration`1.GetHashCode">
      <summary>특정 형식에 대한 해시 함수 역할을 합니다.</summary>
      <returns>특정 형식에 대한 해시 함수입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.ComplexTypeConfiguration`1.GetType">
      <summary>현재 인스턴스의 형식을 가져옵니다.</summary>
      <returns>현재 인스턴스의 정확한 런타임 형식입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.ComplexTypeConfiguration`1.Ignore``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary>속성이 데이터베이스에 매핑되지 않도록 모델에서 속성을 제외합니다.</summary>
      <param name="propertyExpression">구성할 속성을 나타내는 람다 식입니다.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <typeparam name="TProperty">무시할 속성의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.ComplexTypeConfiguration`1.ToString">
      <summary>현재 개체를 나타내는 문자열을 반환합니다.</summary>
      <returns>현재 개체를 나타내는 문자열입니다.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1">
      <summary>모델의 엔터티 형식에 대해 구성을 수행할 수 있도록 합니다.<see cref="T:System.Data.Entity.DbModelBuilder" />에 대한 Entity 메서드를 통해 EntityTypeConfiguration을 가져오거나, <see cref="T:System.Data.Entity.DbModelBuilder" />의 Configurations 속성을 통해 EntityTypeConfiguration에서 파생된 사용자 지정 형식을 등록할 수 있습니다.</summary>
      <typeparam name="TEntityType"></typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.#ctor">
      <summary>EntityTypeConfiguration의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.Equals(System.Object)">
      <summary>지정된 구성 모델이 현재 구성 모델과 같은지 여부를 반환합니다.</summary>
      <returns>지정된 구성 모델이 현재 구성 모델과 같으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="obj">현재 개체와 비교할 모델입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.GetHashCode">
      <summary>지정된 구성 모델의 해시 함수를 반환합니다.</summary>
      <returns>지정된 모델 작성기의 해시 함수입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.GetType">
      <summary>현재 모델 구성의 형식을 가져옵니다.</summary>
      <returns>현재 모델 구성의 형식입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.HasEntitySetName(System.String)">
      <summary>이 엔터티 형식에 사용할 엔터티 집합 이름을 구성합니다.엔터티 집합 이름은 각 집합의 기본 형식에 대해서만 구성할 수 있습니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하는 동일한 EntityTypeConfiguration 인스턴스입니다.</returns>
      <param name="entitySetName">엔터티 집합의 이름입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.HasKey``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary>이 엔터티 형식의 기본 키 속성을 구성합니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하는 동일한 EntityTypeConfiguration 인스턴스입니다.</returns>
      <param name="keyExpression">기본 키로 사용할 속성을 나타내는 람다 식입니다.C#: t =&amp;gt; t.Id VB.Net: Function(t) t.Id 기본 키가 여러 개의 속성으로 구성된 경우에는 해당 속성을 포함하는 익명 형식을 지정합니다.C#: t =&amp;gt; new { t.Id1, t.Id2 } VB.Net: Function(t) New With { t.Id1, t.Id2 }</param>
      <typeparam name="TKey">키 유형입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.HasMany``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.ICollection{``0}}})">
      <summary>이 엔터티 형식에서 시작되는 다 관계를 구성합니다.</summary>
      <returns>관계를 보다 세부적으로 구성하는 데 사용할 수 있는 구성 개체입니다.</returns>
      <param name="navigationPropertyExpression">관계의 탐색 속성을 나타내는 람다 식입니다.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <typeparam name="TTargetEntity">관계의 다른 쪽 End에 있는 엔터티의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.HasOptional``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary>이 엔터티 형식에서 시작되는 선택적 관계를 구성합니다.이 엔터티 형식의 인스턴스는 이 관계를 지정하지 않고도 데이터베이스에 저장할 수 있게 됩니다.데이터베이스의 외래 키는 null을 허용합니다.</summary>
      <returns>관계를 보다 세부적으로 구성하는 데 사용할 수 있는 구성 개체입니다.</returns>
      <param name="navigationPropertyExpression">관계의 탐색 속성을 나타내는 람다 식입니다.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <typeparam name="TTargetEntity">관계의 다른 쪽 End에 있는 엔터티의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.HasRequired``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary>이 엔터티 형식에서 시작되는 필수 관계를 구성합니다.이 엔터티 형식의 인스턴스는 이 관계를 지정하지 않으면 데이터베이스에 저장할 수 없게 됩니다.데이터베이스의 외래 키는 null을 허용하지 않습니다.</summary>
      <returns>관계를 보다 세부적으로 구성하는 데 사용할 수 있는 구성 개체입니다.</returns>
      <param name="navigationPropertyExpression">관계의 탐색 속성을 나타내는 람다 식입니다.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <typeparam name="TTargetEntity">관계의 다른 쪽 End에 있는 엔터티의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.Ignore``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary>속성이 데이터베이스에 매핑되지 않도록 모델에서 속성을 제외합니다.</summary>
      <param name="propertyExpression">구성할 속성을 나타내는 람다 식입니다.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <typeparam name="TProperty">무시할 속성의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.Map``1(System.Action{System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration{``0}})">
      <summary>파생된 엔터티 형식이 데이터베이스 스키마에 매핑되는 방식과 관련된 고급 구성을 수행할 수 있도록 합니다.Map 호출은 누적 방식으로 수행되며, 후속 호출로 인해 Map을 통해 이미 수행된 구성이 재정의되지 않습니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하는 동일한 EntityTypeConfiguration 인스턴스입니다.</returns>
      <param name="derivedTypeMapConfigurationAction">
        <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1" />에 대한 구성을 수행하는 작업입니다.</param>
      <typeparam name="TDerived">구성할 파생된 엔터티 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.Map(System.Action{System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration{`0}})">
      <summary>이 엔터티 형식이 데이터베이스 스키마에 매핑되는 방식과 관련된 고급 구성을 수행할 수 있도록 합니다.기본적으로 모든 구성은 해당 엔터티 형식에서 파생된 형식에도 적용됩니다.파생 형식을 구성하는 Map의 오버로드를 통해서나 파생 형식의 EntityTypeConfiguration을 사용하여 파생 형식을 구성할 수 있습니다.Map을 여러 번 호출하여 엔터티의 속성을 여러 테이블에 분할할 수 있습니다.Map 호출은 누적 방식으로 수행되며, 후속 호출로 인해 Map을 통해 이미 수행된 구성이 재정의되지 않습니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하는 동일한 EntityTypeConfiguration 인스턴스입니다.</returns>
      <param name="entityMappingConfigurationAction">
        <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1" />에 대한 구성을 수행하는 작업입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.MapToStoredProcedures">
      <summary>삽입, 업데이트 및 삭제에 저장 프로시저를 사용하도록 이 형식을 구성합니다.프로시저 및 매개 변수 이름에 대한 기본 규칙이 사용됩니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 구성 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.MapToStoredProcedures(System.Action{System.Data.Entity.ModelConfiguration.Configuration.ModificationStoredProceduresConfiguration{`0}})">
      <summary>삽입, 업데이트 및 삭제에 저장 프로시저를 사용하도록 이 형식을 구성합니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 구성 인스턴스입니다.</returns>
      <param name="modificationStoredProcedureMappingConfigurationAction">프로시저 및 매개 변수 이름에 대한 기본 규칙을 재정의할 구성입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.ToString">
      <summary>모델 구성의 문자열 표현을 반환합니다.</summary>
      <returns>모델 작성기의 문자열 표현입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.ToTable(System.String)">
      <summary>이 엔터티 형식이 매핑되는 대상 테이블 이름을 구성합니다.</summary>
      <param name="tableName">테이블의 이름입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.ToTable(System.String,System.String)">
      <summary>이 엔터티 형식이 매핑되는 대상 테이블 이름을 구성합니다.</summary>
      <param name="tableName">테이블의 이름입니다.</param>
      <param name="schemaName">테이블의 데이터베이스 스키마입니다.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.ModelValidationException">
      <summary>모델 생성 중 잘못된 모델이 생성될 때 <see cref="T:System.Data.Entity.DbModelBuilder" />에 의해 throw되는 예외입니다.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.ModelValidationException.#ctor">
      <summary>ModelValidationException의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.ModelValidationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>serialization 정보와 스트리밍 컨텍스트를 사용하여 <see cref="T:System.Data.Entity.ModelConfiguration.ModelValidationException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="info">serialization 정보입니다.</param>
      <param name="context">스트리밍 컨텍스트입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.ModelValidationException.#ctor(System.String)">
      <summary>ModelValidationException의 새 인스턴스를 초기화합니다.</summary>
      <param name="message">예외 메시지입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.ModelValidationException.#ctor(System.String,System.Exception)">
      <summary>ModelValidationException의 새 인스턴스를 초기화합니다.</summary>
      <param name="message">예외 메시지입니다.</param>
      <param name="innerException">내부 예외입니다.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.AssociationMappingConfiguration">
      <summary>관계 구성을 수행하기 위한 기본 클래스입니다.이 구성 기능은 Code First Fluent API를 통해 사용할 수 있습니다. 자세한 내용은 <see cref="T:System.Data.Entity.DbModelBuilder" />를 참조하십시오.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.AssociationMappingConfiguration.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.AssociationMappingConfiguration" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.AssociationModificationStoredProcedureConfiguration`1">
      <summary>관계를 수정하는 데 사용되는 저장 프로시저에 대한 구성을 수행할 수 있도록 합니다.</summary>
      <typeparam name="TEntityType">관계가 구성될 엔터티의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.AssociationModificationStoredProcedureConfiguration`1.Parameter(System.Linq.Expressions.Expression{System.Func{`0,System.Byte[]}},System.String)">
      <summary>이 저장 프로시저의 매개 변수를 구성합니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 구성 인스턴스입니다.</returns>
      <param name="propertyExpression">매개 변수를 구성할 속성을 나타내는 람다 식입니다.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="parameterName">매개 변수의 이름입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.AssociationModificationStoredProcedureConfiguration`1.Parameter``1(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{``0}}},System.String)">
      <summary>이 저장 프로시저의 매개 변수를 구성합니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 구성 인스턴스입니다.</returns>
      <param name="propertyExpression">매개 변수를 구성할 속성을 나타내는 람다 식입니다.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="parameterName">매개 변수의 이름입니다.</param>
      <typeparam name="TProperty">속성의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.AssociationModificationStoredProcedureConfiguration`1.Parameter(System.Linq.Expressions.Expression{System.Func{`0,System.String}},System.String)">
      <summary>이 저장 프로시저의 매개 변수를 구성합니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 구성 인스턴스입니다.</returns>
      <param name="propertyExpression">매개 변수를 구성할 속성을 나타내는 람다 식입니다.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="parameterName">매개 변수의 이름입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.AssociationModificationStoredProcedureConfiguration`1.Parameter``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String)">
      <summary>이 저장 프로시저의 매개 변수를 구성합니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 구성 인스턴스입니다.</returns>
      <param name="propertyExpression">매개 변수를 구성할 속성을 나타내는 람다 식입니다.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="parameterName">매개 변수의 이름입니다.</param>
      <typeparam name="TProperty">속성의 형식입니다.</typeparam>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration">
      <summary>엔터티 형식 또는 복합 형식의 <see cref="T:System.byte[]" /> 속성을 구성하는 데 사용합니다.이 구성 기능은 Code First Fluent API를 통해 사용할 수 있습니다. 자세한 내용은 <see cref="T:System.Data.Entity.DbModelBuilder" />를 참조하십시오.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.HasColumnName(System.String)">
      <summary>속성을 저장하는 데 사용되는 데이터베이스 열의 이름을 구성합니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 BinaryPropertyConfiguration 인스턴스입니다.</returns>
      <param name="columnName">열 이름입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.HasColumnOrder(System.Nullable{System.Int32})">
      <summary>속성을 저장하는 데 사용되는 데이터베이스 열의 순서를 구성합니다.이 메서드는 엔터티 형식에 복합 키가 있는 경우 키 순서를 지정하는 데도 사용됩니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 BinaryPropertyConfiguration 인스턴스입니다.</returns>
      <param name="columnOrder">이 열이 데이터베이스 테이블에 나타나는 순서입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.HasColumnType(System.String)">
      <summary>속성을 저장하는 데 사용되는 데이터베이스 열의 데이터 형식을 구성합니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 BinaryPropertyConfiguration 인스턴스입니다.</returns>
      <param name="columnType">데이터베이스 공급자별 데이터 형식의 이름입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.HasDatabaseGeneratedOption(System.Nullable{System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption})">
      <summary>데이터베이스에서 속성 값이 생성되는 방식을 구성합니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 BinaryPropertyConfiguration 인스턴스입니다.</returns>
      <param name="databaseGeneratedOption">데이터베이스에서 속성 값을 생성하는 데 사용되는 패턴입니다.'null'을 설정하면 데이터베이스에서 생성된 패턴 패싯이 속성에서 제거됩니다.또한 'null'을 설정하면 런타임 동작이 'None'을 지정할 때와 동일하게 됩니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.HasMaxLength(System.Nullable{System.Int32})">
      <summary>속성이 지정된 최대 길이를 갖도록 구성합니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 BinaryPropertyConfiguration 인스턴스입니다.</returns>
      <param name="value">속성의 최대 길이입니다.'null'을 설정하면 모든 최대 길이 제한이 속성에서 제거됩니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.IsConcurrencyToken">
      <summary>속성이 낙관적 동시성 토큰으로 사용되도록 구성합니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 BinaryPropertyConfiguration 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.IsConcurrencyToken(System.Nullable{System.Boolean})">
      <summary>속성이 낙관적 동시성 토큰으로 사용될지 여부를 구성합니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 BinaryPropertyConfiguration 인스턴스입니다.</returns>
      <param name="concurrencyToken">속성이 동시성 토큰인지 여부를 나타내는 값입니다.'null'을 지정하면 동시성 토큰 패싯이 속성에서 제거됩니다.또한 'null'을 지정하면 런타임 동작이 'false'를 지정할 때와 동일하게 됩니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.IsFixedLength">
      <summary>속성이 고정 길이가 되도록 구성합니다.속성의 고정 길이를 설정하려면 HasMaxLength를 사용합니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 BinaryPropertyConfiguration 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.IsMaxLength">
      <summary>속성에서 데이터베이스 공급자가 지원하는 최대 길이가 허용되도록 구성합니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 BinaryPropertyConfiguration 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.IsOptional">
      <summary>속성이 선택적 속성이 되도록 구성합니다.이 속성을 저장하는 데 사용되는 데이터베이스 열은 null을 허용하게 됩니다.<see cref="T:System.byte[]" /> 속성은 기본적으로 선택적 속성입니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 BinaryPropertyConfiguration 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.IsRequired">
      <summary>속성이 필수 속성이 되도록 구성합니다.이 속성을 저장하는 데 사용되는 데이터베이스 열은 null을 허용하지 않게 됩니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 BinaryPropertyConfiguration 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.IsRowVersion">
      <summary>속성이 데이터베이스의 행 버전이 되도록 구성합니다.실제 데이터 형식은 사용되는 데이터베이스 공급자에 따라 달라집니다.속성이 행 버전이 되도록 설정하면 해당 속성은 낙관적 동시성 토큰이 되도록 자동으로 구성됩니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 BinaryPropertyConfiguration 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.IsVariableLength">
      <summary>속성이 가변 길이가 되도록 구성합니다.<see cref="T:System.byte[]" /> 속성은 기본적으로 가변 길이입니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 BinaryPropertyConfiguration 인스턴스입니다.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.CascadableNavigationPropertyConfiguration">
      <summary>하위 삭제 기능을 지원할 수 있는 관계를 구성합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.CascadableNavigationPropertyConfiguration.Equals(System.Object)">
      <summary>지정한 개체와 현재 개체가 같은지 여부를 확인합니다.</summary>
      <returns>개체가 같으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="obj">현재 개체와 비교할 개체입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.CascadableNavigationPropertyConfiguration.GetHashCode">
      <summary>특정 형식에 대한 해시 함수 역할을 합니다.</summary>
      <returns>현재 형식에 대한 해시 코드입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.CascadableNavigationPropertyConfiguration.GetType">
      <summary>현재 인스턴스의 <see cref="T:System.Type" />을 가져옵니다.</summary>
      <returns>현재 인스턴스의 정확한 런타임 형식입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.CascadableNavigationPropertyConfiguration.ToString">
      <summary>현재 개체를 나타내는 문자열을 반환합니다.</summary>
      <returns>현재 개체를 나타내는 문자열입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.CascadableNavigationPropertyConfiguration.WillCascadeOnDelete">
      <summary>관계에 대해 하위 삭제가 가능하도록 구성합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.CascadableNavigationPropertyConfiguration.WillCascadeOnDelete(System.Boolean)">
      <summary>관계에 대해 하위 삭제가 가능한지 여부를 구성합니다.</summary>
      <param name="value">하위 삭제가 가능한지 여부를 나타내는 값입니다.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ConfigurationRegistrar">
      <summary>엔터티 및 복합 형식의 파생된 구성 클래스를 <see cref="T:System.Data.Entity.DbModelBuilder" />에 등록할 수 있도록 합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConfigurationRegistrar.Add``1(System.Data.Entity.ModelConfiguration.ComplexTypeConfiguration{``0})">
      <summary>
        <see cref="T:System.Data.Entity.DbModelBuilder" />에 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.Types.ComplexTypeConfiguration" />을 추가합니다.모델의 각 형식에 대해 하나의 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.Types.ComplexTypeConfiguration" />만 추가할 수 있습니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하는 동일한 ConfigurationRegistrar 인스턴스입니다.</returns>
      <param name="complexTypeConfiguration">추가할 복합 형식 구성입니다.</param>
      <typeparam name="TComplexType">구성되는 복합 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConfigurationRegistrar.Add``1(System.Data.Entity.ModelConfiguration.EntityTypeConfiguration{``0})">
      <summary>
        <see cref="T:System.Data.Entity.DbModelBuilder" />에 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.Types.EntityTypeConfiguration" />을 추가합니다.모델의 각 형식에 대해 하나의 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.Types.EntityTypeConfiguration" />만 추가할 수 있습니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하는 동일한 ConfigurationRegistrar 인스턴스입니다.</returns>
      <param name="entityTypeConfiguration">추가할 엔터티 형식 구성입니다.</param>
      <typeparam name="TEntityType">구성되는 엔터티 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConfigurationRegistrar.AddFromAssembly(System.Reflection.Assembly)">
      <summary>지정된 어셈블리에서 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.Types.EntityTypeConfiguration" /> 또는 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.Types.ComplexTypeConfiguration" />에서 상속하는 모든 형식을 검색하고 검색된 각 형식의 인스턴스를 이 등록자에 추가합니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하는 동일한 ConfigurationRegistrar 인스턴스입니다.</returns>
      <param name="assembly">추가할 모델 구성을 포함하는 어셈블리입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConfigurationRegistrar.Equals(System.Object)">
      <summary>지정한 개체와 현재 개체가 같은지 여부를 확인합니다.</summary>
      <returns>지정된 개체가 현재 개체와 동일하면 true이고 그렇지 않으면 false입니다.</returns>
      <param name="obj">현재 개체와 비교할 개체입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConfigurationRegistrar.GetHashCode">
      <summary>특정 형식에 대한 해시 함수 역할을 합니다.</summary>
      <returns>현재 개체에 대한 해시 코드입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConfigurationRegistrar.GetType">
      <summary>현재 인스턴스의 <see cref="T:System.Type" />을 가져옵니다.</summary>
      <returns>현재 인스턴스의 정확한 런타임 형식입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConfigurationRegistrar.ToString">
      <summary>현재 개체를 나타내는 문자열을 반환합니다.</summary>
      <returns>현재 개체를 나타내는 문자열입니다.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionDeleteModificationStoredProcedureConfiguration">
      <summary>데이터베이스의 엔터티를 삭제하는 데 사용할 저장 프로시저를 구성하는 규칙을 만듭니다.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionDeleteModificationStoredProcedureConfiguration.Equals(System.Object)"></member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionDeleteModificationStoredProcedureConfiguration.GetHashCode"></member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionDeleteModificationStoredProcedureConfiguration.GetType"></member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionDeleteModificationStoredProcedureConfiguration.HasName(System.String)">
      <summary>저장 프로시저의 이름을 구성합니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 구성 인스턴스입니다.</returns>
      <param name="procedureName">저장 프로시저 이름입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionDeleteModificationStoredProcedureConfiguration.HasName(System.String,System.String)">
      <summary>저장 프로시저의 이름을 구성합니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 구성 인스턴스입니다.</returns>
      <param name="procedureName">저장 프로시저 이름입니다.</param>
      <param name="schemaName">스키마 이름입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionDeleteModificationStoredProcedureConfiguration.Parameter(System.Reflection.PropertyInfo,System.String)">
      <summary>이 저장 프로시저의 매개 변수를 구성합니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 구성 인스턴스입니다.</returns>
      <param name="propertyInfo">매개 변수를 구성할 속성입니다.</param>
      <param name="parameterName">매개 변수의 이름입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionDeleteModificationStoredProcedureConfiguration.Parameter(System.String,System.String)">
      <summary>이 저장 프로시저의 매개 변수를 구성합니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 구성 인스턴스입니다.</returns>
      <param name="propertyName">매개 변수를 구성할 속성의 이름입니다.</param>
      <param name="parameterName">매개 변수의 이름입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionDeleteModificationStoredProcedureConfiguration.RowsAffectedParameter(System.String)">
      <summary>이 저장 프로시저의 영향을 받는 행을 반환하는 출력 매개 변수를 구성합니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 구성 인스턴스입니다.</returns>
      <param name="parameterName">매개 변수의 이름입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionDeleteModificationStoredProcedureConfiguration.ToString"></member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionInsertModificationStoredProcedureConfiguration">
      <summary>데이터베이스의 엔터티를 삽입하는 데 사용할 저장 프로시저를 구성하는 규칙을 만듭니다.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionInsertModificationStoredProcedureConfiguration.Equals(System.Object)"></member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionInsertModificationStoredProcedureConfiguration.GetHashCode"></member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionInsertModificationStoredProcedureConfiguration.GetType"></member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionInsertModificationStoredProcedureConfiguration.HasName(System.String)">
      <summary>저장 프로시저의 이름을 구성합니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 구성 인스턴스입니다.</returns>
      <param name="procedureName">저장 프로시저 이름입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionInsertModificationStoredProcedureConfiguration.HasName(System.String,System.String)">
      <summary>저장 프로시저의 이름을 구성합니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 구성 인스턴스입니다.</returns>
      <param name="procedureName">저장 프로시저 이름입니다.</param>
      <param name="schemaName">스키마 이름입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionInsertModificationStoredProcedureConfiguration.Parameter(System.Reflection.PropertyInfo,System.String)">
      <summary>이 저장 프로시저의 매개 변수를 구성합니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 구성 인스턴스입니다.</returns>
      <param name="propertyInfo">매개 변수를 구성할 속성입니다.</param>
      <param name="parameterName">매개 변수의 이름입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionInsertModificationStoredProcedureConfiguration.Parameter(System.String,System.String)">
      <summary>이 저장 프로시저의 매개 변수를 구성합니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 구성 인스턴스입니다.</returns>
      <param name="propertyName">매개 변수를 구성할 속성의 이름입니다.</param>
      <param name="parameterName">매개 변수의 이름입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionInsertModificationStoredProcedureConfiguration.Result(System.Reflection.PropertyInfo,System.String)">
      <summary>속성에 매핑할 이 저장 프로시저에 대한 결과의 열을 구성합니다.데이터베이스에서 생성된 열에 사용됩니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 구성 인스턴스입니다.</returns>
      <param name="propertyInfo">결과를 구성할 속성입니다.</param>
      <param name="columnName">결과 열의 이름입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionInsertModificationStoredProcedureConfiguration.Result(System.String,System.String)">
      <summary>속성에 매핑할 이 저장 프로시저에 대한 결과의 열을 구성합니다.데이터베이스에서 생성된 열에 사용됩니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 구성 인스턴스입니다.</returns>
      <param name="propertyName">결과를 구성할 속성의 이름입니다.</param>
      <param name="columnName">결과 열의 이름입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionInsertModificationStoredProcedureConfiguration.ToString"></member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionModificationStoredProcedureConfiguration">
      <summary>데이터베이스의 엔터티를 수정하는 데 사용할 저장 프로시저를 구성하는 규칙을 만듭니다.</summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionModificationStoredProceduresConfiguration">
      <summary>데이터베이스의 엔터티를 수정하는 데 사용할 저장 프로시저를 구성하는 규칙을 만듭니다.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionModificationStoredProceduresConfiguration.Delete(System.Action{System.Data.Entity.ModelConfiguration.Configuration.ConventionDeleteModificationStoredProcedureConfiguration})">
      <summary>엔터티를 삭제하는 데 사용되는 저장 프로시저를 구성합니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 구성 인스턴스입니다.</returns>
      <param name="modificationStoredProcedureConfigurationAction">저장 프로시저에 대한 구성을 수행하는 람다 식입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionModificationStoredProceduresConfiguration.Equals(System.Object)"></member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionModificationStoredProceduresConfiguration.GetHashCode"></member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionModificationStoredProceduresConfiguration.GetType">
      <summary>현재 인스턴스의 <see cref="T:System.Type" />을 가져옵니다.</summary>
      <returns>현재 인스턴스의 정확한 런타임 형식입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionModificationStoredProceduresConfiguration.Insert(System.Action{System.Data.Entity.ModelConfiguration.Configuration.ConventionInsertModificationStoredProcedureConfiguration})">
      <summary>엔터티를 삽입하는 데 사용되는 저장 프로시저를 구성합니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 구성 인스턴스입니다.</returns>
      <param name="modificationStoredProcedureConfigurationAction">저장 프로시저에 대한 구성을 수행하는 람다 식입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionModificationStoredProceduresConfiguration.ToString"></member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionModificationStoredProceduresConfiguration.Update(System.Action{System.Data.Entity.ModelConfiguration.Configuration.ConventionUpdateModificationStoredProcedureConfiguration})">
      <summary>엔터티를 업데이트하는 데 사용되는 저장 프로시저를 구성합니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 구성 인스턴스입니다.</returns>
      <param name="modificationStoredProcedureConfigurationAction">저장 프로시저에 대한 구성을 수행하는 람다 식입니다.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration">
      <summary>엔터티 형식 또는 복합 형식의 기본 속성을 구성하는 데 사용합니다.이 구성 기능은 간단한 규칙을 통해 사용할 수 있습니다.</summary>
    </member>
    <member name="P:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.ClrPropertyInfo">
      <summary>이 속성에 대한 <see cref="T:System.Reflection.PropertyInfo" />를 가져옵니다.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.Equals(System.Object)"></member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.GetHashCode"></member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.GetType">
      <summary>현재 인스턴스의 <see cref="T:System.Type" />을 가져옵니다.</summary>
      <returns>현재 인스턴스의 정확한 런타임 형식입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.HasColumnName(System.String)">
      <summary>속성을 저장하는 데 사용되는 데이터베이스 열의 이름을 구성합니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하는 동일한 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration" /> 인스턴스입니다.</returns>
      <param name="columnName">열 이름입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.HasColumnOrder(System.Int32)">
      <summary>속성을 저장하는 데 사용되는 데이터베이스 열의 순서를 구성합니다.이 메서드는 엔터티 형식에 복합 키가 있는 경우 키 순서를 지정하는 데도 사용됩니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하는 동일한 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration" /> 인스턴스입니다.</returns>
      <param name="columnOrder">이 열이 데이터베이스 테이블에 나타나는 순서입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.HasColumnType(System.String)">
      <summary>속성을 저장하는 데 사용되는 데이터베이스 열의 데이터 형식을 구성합니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하는 동일한 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration" /> 인스턴스입니다.</returns>
      <param name="columnType">데이터베이스 공급자별 데이터 형식의 이름입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption)">
      <summary>데이터베이스에서 속성 값이 생성되는 방식을 구성합니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하는 동일한 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration" /> 인스턴스입니다.</returns>
      <param name="databaseGeneratedOption">데이터베이스에서 속성 값을 생성하는 데 사용되는 패턴입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.HasMaxLength(System.Int32)">
      <summary>속성이 지정된 최대 길이를 갖도록 구성합니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하는 동일한 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration" /> 인스턴스입니다.</returns>
      <param name="maxLength">속성의 최대 길이입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.HasParameterName(System.String)">
      <summary>이 속성에 대해 저장 프로시저에서 사용되는 매개 변수의 이름을 구성합니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하는 동일한 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration" /> 인스턴스입니다.</returns>
      <param name="parameterName">매개 변수의 이름입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.HasPrecision(System.Byte)">
      <summary>
        <see cref="T:System.DateTime" /> 속성의 전체 자릿수를 구성합니다.데이터베이스 공급자가 열의 데이터 타입에 대해 전체 자릿수를 지원하지 않는 경우에는 이 값이 무시됩니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하는 동일한 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration" /> 인스턴스입니다.</returns>
      <param name="value">속성의 전체 자릿수입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.HasPrecision(System.Byte,System.Byte)">
      <summary>
        <see cref="T:System.Decimal" /> 속성의 전체 자릿수 및 소수 자릿수를 구성합니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하는 동일한 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration" /> 인스턴스입니다.</returns>
      <param name="precision">속성의 전체 자릿수입니다.</param>
      <param name="scale">속성의 소수 자릿수입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.IsConcurrencyToken">
      <summary>속성이 낙관적 동시성 토큰으로 사용되도록 구성합니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하는 동일한 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration" /> 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.IsConcurrencyToken(System.Boolean)">
      <summary>속성이 낙관적 동시성 토큰으로 사용될지 여부를 구성합니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하는 동일한 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration" /> 인스턴스입니다.</returns>
      <param name="concurrencyToken">속성이 동시성 토큰인지 여부를 나타내는 값입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.IsFixedLength">
      <summary>속성이 고정 길이가 되도록 구성합니다.속성의 고정 길이를 설정하려면 HasMaxLength를 사용합니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하는 동일한 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration" /> 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.IsKey">
      <summary>엔터티 형식의 기본 키 일부가 되도록 이 속성을 구성합니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하는 동일한 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration" /> 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.IsMaxLength">
      <summary>속성에서 데이터베이스 공급자가 지원하는 최대 길이가 허용되도록 구성합니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하는 동일한 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration" /> 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.IsOptional">
      <summary>속성이 선택적 속성이 되도록 구성합니다.이 속성을 저장하는 데 사용되는 데이터베이스 열은 null을 허용하게 됩니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하는 동일한 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration" /> 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.IsRequired">
      <summary>속성이 필수 속성이 되도록 구성합니다.이 속성을 저장하는 데 사용되는 데이터베이스 열은 null을 허용하지 않게 됩니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하는 동일한 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration" /> 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.IsRowVersion">
      <summary>속성이 데이터베이스의 행 버전이 되도록 구성합니다.실제 데이터 타입은 사용되는 데이터베이스 공급자에 따라 달라집니다.속성이 행 버전이 되도록 설정하면 해당 속성은 낙관적 동시성 토큰이 되도록 자동으로 구성됩니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하는 동일한 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration" /> 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.IsUnicode">
      <summary>속성이 유니코드 문자열 내용을 지원하도록 구성합니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하는 동일한 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration" /> 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.IsUnicode(System.Boolean)">
      <summary>속성이 유니코드 문자열 내용을 지원하는지 여부를 구성합니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하는 동일한 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration" /> 인스턴스입니다.</returns>
      <param name="unicode">속성이 유니코드 문자열 내용을 지원하는지 여부를 나타내는 값입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.IsVariableLength">
      <summary>속성이 가변 길이가 되도록 구성합니다.속성은 기본적으로 가변 길이입니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하는 동일한 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration" /> 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.ToString"></member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionsConfiguration">
      <summary>
        <see cref="T:System.Data.Entity.DbModelBuilder" /> 인스턴스에서 사용되는 규칙을 사용자 지정할 수 있도록 합니다.기본 규칙은 System.Data.Entity.ModelConfiguration.Conventions 네임스페이스에서 찾을 수 있습니다.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionsConfiguration.Add``1">
      <summary>
        <see cref="T:System.Data.Entity.DbModelBuilder" />에 대한 규칙을 사용하도록 설정합니다.</summary>
      <typeparam name="TConvention">사용하도록 설정할 규칙의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionsConfiguration.Add(System.Data.Entity.ModelConfiguration.Conventions.IConvention[])">
      <summary>
        <see cref="T:System.Data.Entity.DbModelBuilder" />에 대해 하나 이상의 규칙을 사용하도록 설정합니다.</summary>
      <param name="conventions">사용하도록 설정할 규칙입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionsConfiguration.AddAfter``1(System.Data.Entity.ModelConfiguration.Conventions.IConvention)">
      <summary>
        <see cref="T:System.Data.Entity.DbModelBuilder" />에 대한 규칙을 사용하도록 설정합니다.이 규칙은 지정된 규칙 다음에 실행됩니다.</summary>
      <param name="newConvention">사용하도록 설정할 규칙입니다.</param>
      <typeparam name="TExistingConvention">사용하도록 설정된 규칙이 실행되기 전에 실행되는 규칙의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionsConfiguration.AddBefore``1(System.Data.Entity.ModelConfiguration.Conventions.IConvention)">
      <summary>
        <see cref="T:System.Data.Entity.DbModelBuilder" />에 대한 구성 규칙을 사용하도록 설정합니다.이 규칙은 지정된 규칙 전에 실행됩니다.</summary>
      <param name="newConvention">사용하도록 설정할 규칙입니다.</param>
      <typeparam name="TExistingConvention">사용하도록 설정된 규칙이 실행된 후에 실행되는 규칙의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionsConfiguration.Equals(System.Object)">
      <summary>지정한 개체와 현재 개체가 같은지 여부를 확인합니다.</summary>
      <returns>개체가 같으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="obj">개체입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionsConfiguration.GetHashCode">
      <summary>특정 형식에 대한 해시 함수 역할을 합니다.</summary>
      <returns>현재 형식에 대한 해시 코드입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionsConfiguration.GetType">
      <summary>현재 인스턴스의 <see cref="T:System.Type" />을 가져옵니다.</summary>
      <returns>현재 인스턴스의 정확한 런타임 형식입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionsConfiguration.Remove``1">
      <summary>
        <see cref="T:System.Data.Entity.DbModelBuilder" />에 대한 규칙을 사용하지 않도록 설정합니다.제거에 사용할 수 있는 기본 규칙은 System.Data.Entity.ModelConfiguration.Conventions 네임스페이스에서 찾을 수 있습니다.</summary>
      <typeparam name="TConvention">사용하지 않을 규칙의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionsConfiguration.Remove(System.Data.Entity.ModelConfiguration.Conventions.IConvention[])">
      <summary>
        <see cref="T:System.Data.Entity.DbModelBuilder" />에 대해 하나 이상의 규칙을 사용하지 않도록 설정합니다.</summary>
      <param name="conventions">사용하지 않도록 설정할 규칙입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionsConfiguration.ToString">
      <summary>현재 개체를 나타내는 문자열을 반환합니다.</summary>
      <returns>현재 개체를 나타내는 문자열입니다.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration">
      <summary>모델의 엔터티 형식에 대해 구성을 수행할 수 있도록 합니다.이 구성 기능은 간단한 규칙을 통해 사용할 수 있습니다.</summary>
    </member>
    <member name="P:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.ClrType">
      <summary>이 엔터티 형식의 <see cref="T:System.Type" />을 가져옵니다.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.Equals(System.Object)"></member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.GetHashCode"></member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.GetType">
      <summary>현재 인스턴스의 <see cref="T:System.Type" />을 가져옵니다.</summary>
      <returns>현재 인스턴스의 정확한 런타임 형식입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.HasEntitySetName(System.String)">
      <summary>이 엔터티 형식에 사용할 엔터티 집합 이름을 구성합니다.엔터티 집합 이름은 각 집합의 기본 형식에 대해서만 구성할 수 있습니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하는 동일한 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration" /> 인스턴스입니다.</returns>
      <param name="entitySetName">엔터티 집합의 이름입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.HasKey(System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo})">
      <summary>이 엔터티 형식의 기본 키 속성을 구성합니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하는 동일한 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration" /> 인스턴스입니다.</returns>
      <param name="keyProperties">기본 키로 사용할 속성입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.HasKey(System.Collections.Generic.IEnumerable{System.String})">
      <summary>이 엔터티 형식의 기본 키 속성을 구성합니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하는 동일한 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration" /> 인스턴스입니다.</returns>
      <param name="propertyNames">기본 키로 사용할 속성의 이름입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.HasKey(System.Reflection.PropertyInfo)">
      <summary>이 엔터티 형식의 기본 키 속성을 구성합니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하는 동일한 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration" /> 인스턴스입니다.</returns>
      <param name="propertyInfo">기본 키로 사용할 속성입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.HasKey(System.String)">
      <summary>이 엔터티 형식의 기본 키 속성을 구성합니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하는 동일한 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration" /> 인스턴스입니다.</returns>
      <param name="propertyName">기본 키로 사용할 속성의 이름입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.Ignore">
      <summary>이 엔터티 형식이 데이터베이스에 매핑되지 않도록 모델에서 이 엔터티 형식을 제외합니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하는 동일한 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration" /> 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.Ignore(System.Reflection.PropertyInfo)">
      <summary>속성이 데이터베이스에 매핑되지 않도록 모델에서 속성을 제외합니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하는 동일한 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration" /> 인스턴스입니다.</returns>
      <param name="propertyInfo">구성할 속성입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.Ignore(System.String)">
      <summary>속성이 데이터베이스에 매핑되지 않도록 모델에서 속성을 제외합니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하는 동일한 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration" /> 인스턴스입니다.</returns>
      <param name="propertyName">구성할 속성의 이름입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.IsComplexType">
      <summary>이 엔터티 형식을 복합 형식으로 변경합니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하는 동일한 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration" /> 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.MapToStoredProcedures">
      <summary>삽입, 업데이트 및 삭제에 저장 프로시저를 사용하도록 이 형식을 구성합니다.프로시저 및 매개 변수 이름에 대한 기본 규칙이 사용됩니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 구성 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.MapToStoredProcedures(System.Action{System.Data.Entity.ModelConfiguration.Configuration.ConventionModificationStoredProceduresConfiguration})">
      <summary>삽입, 업데이트 및 삭제에 저장 프로시저를 사용하도록 이 형식을 구성합니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 구성 인스턴스입니다.</returns>
      <param name="modificationStoredProceduresConfigurationAction">프로시저 및 매개 변수 이름에 대한 기본 규칙을 재정의할 구성입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.Property(System.Reflection.PropertyInfo)">
      <summary>이 형식에 정의된 속성을 구성합니다.</summary>
      <returns>속성을 구성하는 데 사용할 수 있는 구성 개체입니다.</returns>
      <param name="propertyInfo">구성할 속성입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.Property(System.String)">
      <summary>이 형식에 정의된 속성을 구성합니다.</summary>
      <returns>속성을 구성하는 데 사용할 수 있는 구성 개체입니다.</returns>
      <param name="propertyName">구성할 속성의 이름입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.ToString"></member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.ToTable(System.String)">
      <summary>이 엔터티 형식이 매핑되는 대상 테이블 이름을 구성합니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하는 동일한 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration" /> 인스턴스입니다.</returns>
      <param name="tableName">테이블의 이름입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.ToTable(System.String,System.String)">
      <summary>이 엔터티 형식이 매핑되는 대상 테이블 이름을 구성합니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하는 동일한 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration" /> 인스턴스입니다.</returns>
      <param name="tableName">테이블의 이름입니다.</param>
      <param name="schemaName">테이블의 데이터베이스 스키마입니다.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1">
      <summary>모델의 엔터티 형식에 대해 구성을 수행할 수 있도록 합니다.이 구성 기능은 간단한 규칙을 통해 사용할 수 있습니다.</summary>
      <typeparam name="T">엔터티 형식이 상속하는 형식입니다.</typeparam>
    </member>
    <member name="P:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1.ClrType">
      <summary>이 엔터티 형식의 <see cref="T:System.Type" />을 가져옵니다.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1.Equals(System.Object)"></member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1.GetHashCode"></member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1.GetType">
      <summary>현재 인스턴스의 <see cref="T:System.Type" />을 가져옵니다.</summary>
      <returns>현재 인스턴스의 정확한 런타임 형식입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1.HasEntitySetName(System.String)">
      <summary>이 엔터티 형식에 사용할 엔터티 집합 이름을 구성합니다.엔터티 집합 이름은 각 집합의 기본 형식에 대해서만 구성할 수 있습니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하는 동일한 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1" /> 인스턴스입니다.</returns>
      <param name="entitySetName">엔터티 집합의 이름입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1.HasKey``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary>이 엔터티 형식의 기본 키 속성을 구성합니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하는 동일한 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1" /> 인스턴스입니다.</returns>
      <param name="keyExpression">기본 키로 사용할 속성을 나타내는 람다 식입니다.C#: t =&amp;gt; t.Id VB.Net: Function(t) t.Id 기본 키가 여러 개의 속성으로 구성된 경우에는 해당 속성을 포함하는 익명 형식을 지정합니다.C#: t =&amp;gt; new { t.Id1, t.Id2 } VB.Net: Function(t) New With { t.Id1, t.Id2 }</param>
      <typeparam name="TProperty">키 유형입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1.Ignore">
      <summary>이 엔터티 형식이 데이터베이스에 매핑되지 않도록 모델에서 이 엔터티 형식을 제외합니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하는 동일한 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1" /> 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1.Ignore``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary>속성이 데이터베이스에 매핑되지 않도록 모델에서 속성을 제외합니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하는 동일한 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1" /> 인스턴스입니다.</returns>
      <param name="propertyExpression">구성할 속성을 나타내는 람다 식입니다.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <typeparam name="TProperty">무시할 속성의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1.IsComplexType">
      <summary>이 엔터티 형식을 복합 형식으로 변경합니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하는 동일한 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1" /> 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1.MapToStoredProcedures">
      <summary>삽입, 업데이트 및 삭제에 저장 프로시저를 사용하도록 이 형식을 구성합니다.프로시저 및 매개 변수 이름에 대한 기본 규칙이 사용됩니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 구성 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1.MapToStoredProcedures(System.Action{System.Data.Entity.ModelConfiguration.Configuration.ModificationStoredProceduresConfiguration{`0}})">
      <summary>삽입, 업데이트 및 삭제에 저장 프로시저를 사용하도록 이 형식을 구성합니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 구성 인스턴스입니다.</returns>
      <param name="modificationStoredProceduresConfigurationAction">프로시저 및 매개 변수 이름에 대한 기본 규칙을 재정의할 구성입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1.Property``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary>이 형식에 정의된 속성을 구성합니다.</summary>
      <returns>속성을 구성하는 데 사용할 수 있는 구성 개체입니다.</returns>
      <param name="propertyExpression">구성할 속성을 나타내는 람다 식입니다.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <typeparam name="TProperty">구성되는 속성의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1.ToString"></member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1.ToTable(System.String)">
      <summary>이 엔터티 형식이 매핑되는 대상 테이블 이름을 구성합니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하는 동일한 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1" /> 인스턴스입니다.</returns>
      <param name="tableName">테이블의 이름입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1.ToTable(System.String,System.String)">
      <summary>이 엔터티 형식이 매핑되는 대상 테이블 이름을 구성합니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하는 동일한 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1" /> 인스턴스입니다.</returns>
      <param name="tableName">테이블의 이름입니다.</param>
      <param name="schemaName">테이블의 데이터베이스 스키마입니다.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionUpdateModificationStoredProcedureConfiguration">
      <summary>데이터베이스의 엔터티를 업데이트하는 데 사용할 저장 프로시저를 구성하는 규칙을 만듭니다.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionUpdateModificationStoredProcedureConfiguration.Equals(System.Object)"></member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionUpdateModificationStoredProcedureConfiguration.GetHashCode"></member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionUpdateModificationStoredProcedureConfiguration.GetType"></member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionUpdateModificationStoredProcedureConfiguration.HasName(System.String)">
      <summary>저장 프로시저의 이름을 구성합니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 구성 인스턴스입니다.</returns>
      <param name="procedureName">저장 프로시저 이름입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionUpdateModificationStoredProcedureConfiguration.HasName(System.String,System.String)">
      <summary>저장 프로시저의 이름을 구성합니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 구성 인스턴스입니다.</returns>
      <param name="procedureName">저장 프로시저 이름입니다.</param>
      <param name="schemaName">스키마 이름입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionUpdateModificationStoredProcedureConfiguration.Parameter(System.Reflection.PropertyInfo,System.String)">
      <summary>이 저장 프로시저의 매개 변수를 구성합니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 구성 인스턴스입니다.</returns>
      <param name="propertyInfo">매개 변수를 구성할 속성입니다.</param>
      <param name="parameterName">매개 변수의 이름입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionUpdateModificationStoredProcedureConfiguration.Parameter(System.Reflection.PropertyInfo,System.String,System.String)">
      <summary>이 저장 프로시저의 매개 변수를 구성합니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 구성 인스턴스입니다.</returns>
      <param name="propertyInfo">매개 변수를 구성할 속성입니다.</param>
      <param name="currentValueParameterName">현재 값 매개 변수 이름입니다.</param>
      <param name="originalValueParameterName">원래 값 매개 변수 이름입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionUpdateModificationStoredProcedureConfiguration.Parameter(System.String,System.String)">
      <summary>이 저장 프로시저의 매개 변수를 구성합니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 구성 인스턴스입니다.</returns>
      <param name="propertyName">매개 변수를 구성할 속성의 이름입니다.</param>
      <param name="parameterName">매개 변수의 이름입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionUpdateModificationStoredProcedureConfiguration.Parameter(System.String,System.String,System.String)">
      <summary>이 저장 프로시저의 매개 변수를 구성합니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 구성 인스턴스입니다.</returns>
      <param name="propertyName">매개 변수를 구성할 속성의 이름입니다.</param>
      <param name="currentValueParameterName">현재 값 매개 변수 이름입니다.</param>
      <param name="originalValueParameterName">원래 값 매개 변수 이름입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionUpdateModificationStoredProcedureConfiguration.Result(System.Reflection.PropertyInfo,System.String)">
      <summary>속성에 매핑할 이 저장 프로시저에 대한 결과의 열을 구성합니다.데이터베이스에서 생성된 열에 사용됩니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 구성 인스턴스입니다.</returns>
      <param name="propertyInfo">결과를 구성할 속성입니다.</param>
      <param name="columnName">결과 열의 이름입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionUpdateModificationStoredProcedureConfiguration.Result(System.String,System.String)">
      <summary>속성에 매핑할 이 저장 프로시저에 대한 결과의 열을 구성합니다.데이터베이스에서 생성된 열에 사용됩니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 구성 인스턴스입니다.</returns>
      <param name="propertyName">결과를 구성할 속성의 이름입니다.</param>
      <param name="columnName">결과 열의 이름입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionUpdateModificationStoredProcedureConfiguration.RowsAffectedParameter(System.String)">
      <summary>이 저장 프로시저의 영향을 받는 행을 반환하는 출력 매개 변수를 구성합니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 구성 인스턴스입니다.</returns>
      <param name="parameterName">매개 변수의 이름입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionUpdateModificationStoredProcedureConfiguration.ToString"></member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration">
      <summary>엔터티 형식 또는 복합 형식의 <see cref="T:System.DateTime" /> 속성을 구성하는 데 사용합니다.이 구성 기능은 Code First Fluent API를 통해 사용할 수 있습니다. 자세한 내용은 <see cref="T:System.Data.Entity.DbModelBuilder" />를 참조하십시오.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.HasColumnName(System.String)">
      <summary>속성을 저장하는 데 사용되는 데이터베이스 열의 이름을 구성합니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 DateTimePropertyConfiguration 인스턴스입니다.</returns>
      <param name="columnName">열 이름입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.HasColumnOrder(System.Nullable{System.Int32})">
      <summary>속성을 저장하는 데 사용되는 데이터베이스 열의 순서를 구성합니다.이 메서드는 엔터티 형식에 복합 키가 있는 경우 키 순서를 지정하는 데도 사용됩니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 DateTimePropertyConfiguration 인스턴스입니다.</returns>
      <param name="columnOrder">이 열이 데이터베이스 테이블에 나타나는 순서입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.HasColumnType(System.String)">
      <summary>속성을 저장하는 데 사용되는 데이터베이스 열의 데이터 형식을 구성합니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 DateTimePropertyConfiguration 인스턴스입니다.</returns>
      <param name="columnType">데이터베이스 공급자별 데이터 형식의 이름입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.HasDatabaseGeneratedOption(System.Nullable{System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption})">
      <summary>데이터베이스에서 속성 값이 생성되는 방식을 구성합니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 DateTimePropertyConfiguration 인스턴스입니다.</returns>
      <param name="databaseGeneratedOption">데이터베이스에서 속성 값을 생성하는 데 사용되는 패턴입니다.'null'을 설정하면 데이터베이스에서 생성된 패턴 패싯이 속성에서 제거됩니다.또한 'null'을 설정하면 런타임 동작이 'None'을 지정할 때와 동일하게 됩니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.HasPrecision(System.Byte)">
      <summary>속성의 전체 자릿수를 구성합니다.데이터베이스 공급자가 열의 데이터 형식에 대해 전체 자릿수를 지원하지 않는 경우에는 이 값이 무시됩니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 DateTimePropertyConfiguration 인스턴스입니다.</returns>
      <param name="value">속성의 전체 자릿수입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.IsConcurrencyToken">
      <summary>속성이 낙관적 동시성 토큰으로 사용되도록 구성합니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 DateTimePropertyConfiguration 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.IsConcurrencyToken(System.Nullable{System.Boolean})">
      <summary>속성이 낙관적 동시성 토큰으로 사용될지 여부를 구성합니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 DateTimePropertyConfiguration 인스턴스입니다.</returns>
      <param name="concurrencyToken">속성이 동시성 토큰인지 여부를 나타내는 값입니다.'null'을 지정하면 동시성 토큰 패싯이 속성에서 제거됩니다.또한 'null'을 지정하면 런타임 동작이 'false'를 지정할 때와 동일하게 됩니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.IsOptional">
      <summary>속성이 선택적 속성이 되도록 구성합니다.이 속성을 저장하는 데 사용되는 데이터베이스 열은 null을 허용하게 됩니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 DateTimePropertyConfiguration 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.IsRequired">
      <summary>속성이 필수 속성이 되도록 구성합니다.이 속성을 저장하는 데 사용되는 데이터베이스 열은 null을 허용하지 않게 됩니다.<see cref="T:System.DateTime" /> 속성은 기본적으로 필수 속성입니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 DateTimePropertyConfiguration 인스턴스입니다.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration">
      <summary>엔터티 형식 또는 복합 형식의 <see cref="T:System.decimal" /> 속성을 구성하는 데 사용합니다.이 구성 기능은 Code First Fluent API를 통해 사용할 수 있습니다. 자세한 내용은 <see cref="T:System.Data.Entity.DbModelBuilder" />를 참조하십시오.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.HasColumnName(System.String)">
      <summary>속성을 저장하는 데 사용되는 데이터베이스 열의 이름을 구성합니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 DecimalPropertyConfiguration 인스턴스입니다.</returns>
      <param name="columnName">열 이름입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.HasColumnOrder(System.Nullable{System.Int32})">
      <summary>속성을 저장하는 데 사용되는 데이터베이스 열의 순서를 구성합니다.이 메서드는 엔터티 형식에 복합 키가 있는 경우 키 순서를 지정하는 데도 사용됩니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 DecimalPropertyConfiguration 인스턴스입니다.</returns>
      <param name="columnOrder">이 열이 데이터베이스 테이블에 나타나는 순서입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.HasColumnType(System.String)">
      <summary>속성을 저장하는 데 사용되는 데이터베이스 열의 데이터 형식을 구성합니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 DecimalPropertyConfiguration 인스턴스입니다.</returns>
      <param name="columnType">데이터베이스 공급자별 데이터 형식의 이름입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.HasDatabaseGeneratedOption(System.Nullable{System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption})">
      <summary>데이터베이스에서 속성 값이 생성되는 방식을 구성합니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 DecimalPropertyConfiguration 인스턴스입니다.</returns>
      <param name="databaseGeneratedOption">데이터베이스에서 속성 값을 생성하는 데 사용되는 패턴입니다.'null'을 설정하면 데이터베이스에서 생성된 패턴 패싯이 속성에서 제거됩니다.또한 'null'을 설정하면 런타임 동작이 'None'을 지정할 때와 동일하게 됩니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.HasPrecision(System.Byte,System.Byte)">
      <summary>속성의 전체 자릿수 및 소수 자릿수를 구성합니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 DecimalPropertyConfiguration 인스턴스입니다.</returns>
      <param name="precision">속성의 전체 자릿수입니다.</param>
      <param name="scale">속성의 소수 자릿수입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.IsConcurrencyToken">
      <summary>속성이 낙관적 동시성 토큰으로 사용되도록 구성합니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 DecimalPropertyConfiguration 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.IsConcurrencyToken(System.Nullable{System.Boolean})">
      <summary>속성이 낙관적 동시성 토큰으로 사용될지 여부를 구성합니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 DecimalPropertyConfiguration 인스턴스입니다.</returns>
      <param name="concurrencyToken">속성이 동시성 토큰인지 여부를 나타내는 값입니다.'null'을 지정하면 동시성 토큰 패싯이 속성에서 제거됩니다.또한 'null'을 지정하면 런타임 동작이 'false'를 지정할 때와 동일하게 됩니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.IsOptional">
      <summary>속성이 선택적 속성이 되도록 구성합니다.이 속성을 저장하는 데 사용되는 데이터베이스 열은 null을 허용하게 됩니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 DecimalPropertyConfiguration 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.IsRequired">
      <summary>속성이 필수 속성이 되도록 구성합니다.이 속성을 저장하는 데 사용되는 데이터베이스 열은 null을 허용하지 않게 됩니다.<see cref="T:System.decimal" /> 속성은 기본적으로 필수 속성입니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 DecimalPropertyConfiguration 인스턴스입니다.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.DeleteModificationStoredProcedureConfiguration`1">
      <summary>엔터티를 삭제하는 데 사용되는 저장 프로시저에 대한 구성을 수행할 수 있도록 합니다.</summary>
      <typeparam name="TEntityType">저장 프로시저를 사용하여 삭제할 수 있는 엔터티의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DeleteModificationStoredProcedureConfiguration`1.Equals(System.Object)"></member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DeleteModificationStoredProcedureConfiguration`1.GetHashCode"></member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DeleteModificationStoredProcedureConfiguration`1.GetType"></member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DeleteModificationStoredProcedureConfiguration`1.HasName(System.String)">
      <summary>저장 프로시저의 이름을 구성합니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 구성 인스턴스입니다.</returns>
      <param name="procedureName">저장 프로시저 이름입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DeleteModificationStoredProcedureConfiguration`1.HasName(System.String,System.String)">
      <summary>저장 프로시저의 이름을 구성합니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 구성 인스턴스입니다.</returns>
      <param name="procedureName">저장 프로시저 이름입니다.</param>
      <param name="schemaName">스키마 이름입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DeleteModificationStoredProcedureConfiguration`1.Navigation``1(System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.ICollection{`0}}},System.Action{System.Data.Entity.ModelConfiguration.Configuration.AssociationModificationStoredProcedureConfiguration{``0}})">
      <summary>외래 키 속성이 클래스에 포함되지 않는 관계에 대한 매개 변수를 구성합니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 구성 인스턴스입니다.</returns>
      <param name="navigationPropertyExpression">관계의 탐색 속성을 나타내는 람다 식입니다.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="associationModificationStoredProcedureConfigurationAction">구성을 수행하는 람다 식입니다.</param>
      <typeparam name="TPrincipalEntityType">관계의 주 엔터티 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DeleteModificationStoredProcedureConfiguration`1.Navigation``1(System.Linq.Expressions.Expression{System.Func{``0,`0}},System.Action{System.Data.Entity.ModelConfiguration.Configuration.AssociationModificationStoredProcedureConfiguration{``0}})">
      <summary>외래 키 속성이 클래스에 포함되지 않는 관계에 대한 매개 변수를 구성합니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 구성 인스턴스입니다.</returns>
      <param name="navigationPropertyExpression">관계의 탐색 속성을 나타내는 람다 식입니다.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="associationModificationStoredProcedureConfigurationAction">구성을 수행하는 람다 식입니다.</param>
      <typeparam name="TPrincipalEntityType">관계의 주 엔터티 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DeleteModificationStoredProcedureConfiguration`1.Parameter(System.Linq.Expressions.Expression{System.Func{`0,System.Byte[]}},System.String)">
      <summary>이 저장 프로시저의 매개 변수를 구성합니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 구성 인스턴스입니다.</returns>
      <param name="propertyExpression">매개 변수를 구성할 속성을 나타내는 람다 식입니다.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="parameterName">매개 변수의 이름입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DeleteModificationStoredProcedureConfiguration`1.Parameter(System.Linq.Expressions.Expression{System.Func{`0,System.Data.Entity.Spatial.DbGeography}},System.String)">
      <summary>이 저장 프로시저의 매개 변수를 구성합니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 구성 인스턴스입니다.</returns>
      <param name="propertyExpression">매개 변수를 구성할 속성을 나타내는 람다 식입니다.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="parameterName">매개 변수의 이름입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DeleteModificationStoredProcedureConfiguration`1.Parameter(System.Linq.Expressions.Expression{System.Func{`0,System.Data.Entity.Spatial.DbGeometry}},System.String)">
      <summary>이 저장 프로시저의 매개 변수를 구성합니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 구성 인스턴스입니다.</returns>
      <param name="propertyExpression">매개 변수를 구성할 속성을 나타내는 람다 식입니다.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="parameterName">매개 변수의 이름입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DeleteModificationStoredProcedureConfiguration`1.Parameter``1(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{``0}}},System.String)">
      <summary>이 저장 프로시저의 매개 변수를 구성합니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 구성 인스턴스입니다.</returns>
      <param name="propertyExpression">매개 변수를 구성할 속성을 나타내는 람다 식입니다.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="parameterName">매개 변수의 이름입니다.</param>
      <typeparam name="TProperty">구성할 속성의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DeleteModificationStoredProcedureConfiguration`1.Parameter(System.Linq.Expressions.Expression{System.Func{`0,System.String}},System.String)">
      <summary>이 저장 프로시저의 매개 변수를 구성합니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 구성 인스턴스입니다.</returns>
      <param name="propertyExpression">매개 변수를 구성할 속성을 나타내는 람다 식입니다.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="parameterName">매개 변수의 이름입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DeleteModificationStoredProcedureConfiguration`1.Parameter``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String)">
      <summary>이 저장 프로시저의 매개 변수를 구성합니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 구성 인스턴스입니다.</returns>
      <param name="propertyExpression">매개 변수를 구성할 속성을 나타내는 람다 식입니다.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="parameterName">매개 변수의 이름입니다.</param>
      <typeparam name="TProperty">구성할 속성의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DeleteModificationStoredProcedureConfiguration`1.RowsAffectedParameter(System.String)">
      <summary>이 저장 프로시저의 영향을 받는 행을 반환하는 출력 매개 변수를 구성합니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 구성 인스턴스입니다.</returns>
      <param name="parameterName">매개 변수의 이름입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DeleteModificationStoredProcedureConfiguration`1.ToString"></member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.DependentNavigationPropertyConfiguration`1">
      <summary>개체 모델에서 노출되는 외래 키 속성을 지원할 수 있는 관계를 구성합니다.이 구성 기능은 Code First Fluent API를 통해 사용할 수 있습니다. 자세한 내용은 <see cref="T:System.Data.Entity.DbModelBuilder" />를 참조하십시오.</summary>
      <typeparam name="TDependentEntityType">종속 엔터티 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DependentNavigationPropertyConfiguration`1.Equals(System.Object)">
      <summary>지정한 개체와 현재 개체가 같은지 여부를 확인합니다.</summary>
      <returns>지정된 개체가 현재 개체와 동일하면 true이고 그렇지 않으면 false입니다.</returns>
      <param name="obj">현재 개체와 비교할 개체입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DependentNavigationPropertyConfiguration`1.GetHashCode">
      <summary>특정 형식에 대한 해시 함수 역할을 합니다.</summary>
      <returns>현재 개체에 대한 해시 코드입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DependentNavigationPropertyConfiguration`1.GetType">
      <summary>현재 인스턴스의 형식을 가져옵니다.</summary>
      <returns>현재 인스턴스의 정확한 런타임 형식입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DependentNavigationPropertyConfiguration`1.HasForeignKey``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary>개체 모델에서 노출되는 외래 키 속성을 사용하도록 관계를 구성합니다.개체 모델에서 외래 키 속성이 노출되지 않는 경우에는 Map 메서드를 사용합니다.</summary>
      <returns>관계를 보다 세부적으로 구성하는 데 사용할 수 있는 구성 개체입니다.</returns>
      <param name="foreignKeyExpression">외래 키로 사용할 속성을 나타내는 람다 식입니다.외래 키가 여러 개의 속성으로 구성된 경우에는 해당 속성을 포함하는 익명 형식을 지정합니다.여러 개의 외래 키 속성을 사용할 경우 주 엔터티 형식에 대해 기본 키 속성이 구성된 순서와 동일한 순서로 속성을 지정해야 합니다.</param>
      <typeparam name="TKey">키 유형입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DependentNavigationPropertyConfiguration`1.ToString">
      <summary>현재 개체를 나타내는 문자열을 반환합니다.</summary>
      <returns>현재 개체를 나타내는 문자열입니다.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1">
      <summary>엔터티 형식 또는 엔터티 형식의 일부 속성에 대한 테이블 및 열 매핑을 구성합니다.이 구성 기능은 Code First Fluent API를 통해 사용할 수 있습니다. 자세한 내용은 <see cref="T:System.Data.Entity.DbModelBuilder" />를 참조하십시오.</summary>
      <typeparam name="TEntityType">매핑할 엔터티 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.Equals(System.Object)">
      <summary>지정한 개체와 현재 개체가 같은지 여부를 확인합니다.</summary>
      <returns>지정된 개체가 현재 개체와 동일하면 true이고 그렇지 않으면 false입니다.</returns>
      <param name="obj">현재 개체와 비교할 개체입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.GetHashCode">
      <summary>특정 형식에 대한 해시 함수 역할을 합니다.</summary>
      <returns>현재 개체에 대한 해시 코드입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.GetType">
      <summary>현재 인스턴스의 <see cref="T:System.Type" />을 가져옵니다.</summary>
      <returns>현재 인스턴스의 정확한 런타임 형식입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.MapInheritedProperties">
      <summary>기본 형식에서 상속된 모든 속성을 다시 매핑합니다.별도의 테이블에 매핑할 파생 형식을 구성할 때 모든 속성을 다시 매핑하면 상속되지 않은 속성만이 아니라 모든 속성이 테이블에 포함됩니다.이를 TPC(구체적 형식당 테이블) 매핑이라고 합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.Properties``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary>이 매핑 조각에 포함될 속성을 구성합니다.이 메서드를 호출하지 않으면 아직 매핑 조각에 포함되지 않은 모든 속성이 구성됩니다.</summary>
      <param name="propertiesExpression">매핑할 속성을 포함하는 익명 형식에 대한 람다 식입니다.C#: t =&amp;gt; new { t.Id, t.Property1, t.Property2 } VB.Net: Function(t) New With { p.Id, t.Property1, t.Property2 }</param>
      <typeparam name="TObject">매핑할 속성을 포함하는 익명 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Byte[]}})">
      <summary>이 매핑 조각에 포함될 <see cref="T:System.byte[]" /> 속성을 구성합니다.</summary>
      <returns>속성을 구성하는 데 사용할 수 있는 구성 개체입니다.</returns>
      <param name="propertyExpression">구성할 속성을 나타내는 람다 식입니다.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Data.Entity.Spatial.DbGeography}})">
      <summary>이 매핑 조각에 포함될 <see cref="T:DbGeography" /> 속성을 구성합니다.</summary>
      <returns>속성을 구성하는 데 사용할 수 있는 구성 개체입니다.</returns>
      <param name="propertyExpression">구성할 속성을 나타내는 람다 식입니다.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Data.Entity.Spatial.DbGeometry}})">
      <summary>이 매핑 조각에 포함될 <see cref="T:DbGeometry" /> 속성을 구성합니다.</summary>
      <returns>속성을 구성하는 데 사용할 수 있는 구성 개체입니다.</returns>
      <param name="propertyExpression">구성할 속성을 나타내는 람다 식입니다.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.DateTime}})">
      <summary>이 매핑 조각에 포함될 <see cref="T:System.DateTime" /> 속성을 구성합니다.</summary>
      <returns>속성을 구성하는 데 사용할 수 있는 구성 개체입니다.</returns>
      <param name="propertyExpression">구성할 속성을 나타내는 람다 식입니다.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.DateTimeOffset}})">
      <summary>이 매핑 조각에 포함될 <see cref="T:System.DateTimeOffset" /> 속성을 구성합니다.</summary>
      <returns>속성을 구성하는 데 사용할 수 있는 구성 개체입니다.</returns>
      <param name="propertyExpression">구성할 속성을 나타내는 람다 식입니다.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})">
      <summary>이 매핑 조각에 포함될 <see cref="T:System.decimal" /> 속성을 구성합니다.</summary>
      <returns>속성을 구성하는 데 사용할 수 있는 구성 개체입니다.</returns>
      <param name="propertyExpression">구성할 속성을 나타내는 람다 식입니다.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.DateTime}}})">
      <summary>이 매핑 조각에 포함될 <see cref="T:System.DateTime?" /> 속성을 구성합니다.</summary>
      <returns>속성을 구성하는 데 사용할 수 있는 구성 개체입니다.</returns>
      <param name="propertyExpression">구성할 속성을 나타내는 람다 식입니다.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.DateTimeOffset}}})">
      <summary>이 매핑 조각에 포함될 <see cref="T:System.DateTimeOffset?" /> 속성을 구성합니다.</summary>
      <returns>속성을 구성하는 데 사용할 수 있는 구성 개체입니다.</returns>
      <param name="propertyExpression">구성할 속성을 나타내는 람다 식입니다.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})">
      <summary>이 매핑 조각에 포함될 <see cref="T:System.decimal?" /> 속성을 구성합니다.</summary>
      <returns>속성을 구성하는 데 사용할 수 있는 구성 개체입니다.</returns>
      <param name="propertyExpression">구성할 속성을 나타내는 람다 식입니다.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.TimeSpan}}})">
      <summary>이 매핑 조각에 포함될 <see cref="T:System.TimeSpan?" /> 속성을 구성합니다.</summary>
      <returns>속성을 구성하는 데 사용할 수 있는 구성 개체입니다.</returns>
      <param name="propertyExpression">구성할 속성을 나타내는 람다 식입니다.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.Property``1(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{``0}}})">
      <summary>이 매핑 조각에 포함될 <see cref="T:System.struct?" /> 속성을 구성합니다.</summary>
      <returns>속성을 구성하는 데 사용할 수 있는 구성 개체입니다.</returns>
      <param name="propertyExpression">구성할 속성을 나타내는 람다 식입니다.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <typeparam name="T">구성되는 속성의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.String}})">
      <summary>이 매핑 조각에 포함될 <see cref="T:System.string" /> 속성을 구성합니다.</summary>
      <returns>속성을 구성하는 데 사용할 수 있는 구성 개체입니다.</returns>
      <param name="propertyExpression">구성할 속성을 나타내는 람다 식입니다.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.TimeSpan}})">
      <summary>이 매핑 조각에 포함될 <see cref="T:System.TimeSpan" /> 속성을 구성합니다.</summary>
      <returns>속성을 구성하는 데 사용할 수 있는 구성 개체입니다.</returns>
      <param name="propertyExpression">구성할 속성을 나타내는 람다 식입니다.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.Property``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary>이 매핑 조각에 포함될 <see cref="T:System.struct" /> 속성을 구성합니다.</summary>
      <returns>속성을 구성하는 데 사용할 수 있는 구성 개체입니다.</returns>
      <param name="propertyExpression">구성할 속성을 나타내는 람다 식입니다.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <typeparam name="T">구성되는 속성의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.Requires``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary>상속 계층 구조의 형식을 구분하는 데 사용되는 판별자 조건을 구성합니다.</summary>
      <returns>판별자 조건을 보다 세부적으로 구성하기 위한 구성 개체입니다.</returns>
      <param name="property">형식을 구분하는 데 사용되는 속성을 나타내는 람다 식입니다.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <typeparam name="TProperty">형식을 구분하는 데 사용되는 속성의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.Requires(System.String)">
      <summary>상속 계층 구조의 형식을 구분하는 데 사용되는 판별자 열을 구성합니다.</summary>
      <returns>판별자 열 및 값을 보다 세부적으로 구성하기 위한 구성 개체입니다.</returns>
      <param name="discriminator">판별자 열의 이름입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.ToString">
      <summary>현재 개체를 나타내는 문자열을 반환합니다.</summary>
      <returns>현재 개체를 나타내는 문자열입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.ToTable(System.String)">
      <summary>매핑할 대상 테이블 이름을 구성합니다.</summary>
      <param name="tableName">테이블의 이름입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.ToTable(System.String,System.String)">
      <summary>매핑할 대상 테이블 이름 및 스키마를 구성합니다.</summary>
      <param name="tableName">테이블의 이름입니다.</param>
      <param name="schemaName">테이블의 스키마입니다.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration">
      <summary>개체 모델에서 외래 키 속성을 노출하지 않는 관계의 테이블 및 열 매핑을 구성합니다.이 구성 기능은 Code First Fluent API를 통해 사용할 수 있습니다. 자세한 내용은 <see cref="T:System.Data.Entity.DbModelBuilder" />를 참조하십시오.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration.Equals(System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration)">
      <summary>지정한 개체와 현재 개체가 같은지 여부를 확인합니다.</summary>
      <returns>개체가 같으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="other">현재 개체와 비교할 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration" />입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration.Equals(System.Object)">
      <summary>지정한 개체와 현재 개체가 같은지 여부를 확인합니다.</summary>
      <returns>개체가 같으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="obj">현재 개체와 비교할 개체입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration.GetHashCode">
      <summary>특정 형식에 대한 해시 함수 역할을 합니다.</summary>
      <returns>현재 형식에 대한 해시 코드입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration.GetType">
      <summary>현재 인스턴스의 형식을 가져옵니다.</summary>
      <returns>현재 인스턴스의 정확한 런타임 형식입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration.MapKey(System.String[])">
      <summary>외래 키의 열 이름을 구성합니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 ForeignKeyAssociationMappingConfiguration 인스턴스입니다.</returns>
      <param name="keyColumnNames">외래 키 열 이름입니다.여러 개의 외래 키 속성을 사용할 경우 대상 엔터티 형식에 대해 기본 키 속성이 구성된 순서와 동일한 순서로 속성을 지정해야 합니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration.ToString">
      <summary>현재 개체를 나타내는 문자열을 반환합니다.</summary>
      <returns>현재 개체를 나타내는 문자열입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration.ToTable(System.String)">
      <summary>외래 키 열이 있는 테이블 이름을 구성합니다.지정된 테이블은 해당 엔터티 형식에 대해 이미 매핑되어 있어야 합니다.외래 키가 고유한 테이블에 있도록 하려면 <see cref="T:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration" />의 Map 메서드로 엔터티 분할을 수행하여 기본 키 속성만 있는 테이블을 만듭니다.그런 다음 이 메서드를 통해 테이블에 외래 키를 추가할 수 있습니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 ForeignKeyAssociationMappingConfiguration 인스턴스입니다.</returns>
      <param name="tableName">테이블의 이름입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration.ToTable(System.String,System.String)">
      <summary>외래 키 열이 있는 테이블 이름 및 스키마를 구성합니다.지정된 테이블은 해당 엔터티 형식에 대해 이미 매핑되어 있어야 합니다.외래 키가 고유한 테이블에 있도록 하려면 <see cref="T:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration" />의 Map 메서드로 엔터티 분할을 수행하여 기본 키 속성만 있는 테이블을 만듭니다.그런 다음 이 메서드를 통해 테이블에 외래 키를 추가할 수 있습니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 ForeignKeyAssociationMappingConfiguration 인스턴스입니다.</returns>
      <param name="tableName">테이블의 이름입니다.</param>
      <param name="schemaName">테이블의 스키마입니다.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyNavigationPropertyConfiguration">
      <summary>개체 모델에서 노출되지 않는 외래 키 속성만 지원할 수 있는 관계를 구성합니다.이 구성 기능은 Code First Fluent API를 통해 사용할 수 있습니다. 자세한 내용은 <see cref="T:System.Data.Entity.DbModelBuilder" />를 참조하십시오.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyNavigationPropertyConfiguration.Equals(System.Object)">
      <summary>지정한 개체와 현재 개체가 같은지 여부를 확인합니다.</summary>
      <returns>개체가 같으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="obj">현재 개체와 비교할 개체입니다. </param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyNavigationPropertyConfiguration.GetHashCode">
      <summary>특정 형식에 대한 해시 함수 역할을 합니다.</summary>
      <returns>현재 형식에 대한 해시 코드입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyNavigationPropertyConfiguration.GetType">
      <summary>현재 인스턴스의 형식을 가져옵니다.</summary>
      <returns>현재 인스턴스의 정확한 런타임 형식입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyNavigationPropertyConfiguration.Map(System.Action{System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration})">
      <summary>개체 모델에서 노출되지 않는 외래 키 속성을 사용하도록 관계를 구성합니다.구성 동작을 지정하여 열 및 테이블을 사용자 지정할 수 있습니다.빈 구성 동작을 지정하면 열 이름이 규칙에 의해 생성됩니다.개체 모델에서 외래 키 속성이 노출되는 경우에는 HasForeignKey 메서드를 사용합니다.일부 관계의 경우 개체 모델에서 외래 키 속성이 노출되지 않습니다.</summary>
      <returns>관계를 보다 세부적으로 구성하는 데 사용할 수 있는 구성 개체입니다.</returns>
      <param name="configurationAction">외래 키 열 및 테이블을 구성하는 동작입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyNavigationPropertyConfiguration.ToString">
      <summary>현재 개체를 나타내는 문자열을 반환합니다.</summary>
      <returns>현재 개체를 나타내는 문자열입니다.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.InsertModificationStoredProcedureConfiguration`1">
      <summary>엔터티를 삽입하는 데 사용되는 저장 프로시저에 대한 구성을 수행할 수 있도록 합니다.</summary>
      <typeparam name="TEntityType">저장 프로시저를 사용하여 삽입할 수 있는 엔터티의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.InsertModificationStoredProcedureConfiguration`1.Equals(System.Object)"></member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.InsertModificationStoredProcedureConfiguration`1.GetHashCode"></member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.InsertModificationStoredProcedureConfiguration`1.GetType"></member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.InsertModificationStoredProcedureConfiguration`1.HasName(System.String)">
      <summary>저장 프로시저의 이름을 구성합니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 구성 인스턴스입니다.</returns>
      <param name="procedureName">저장 프로시저 이름입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.InsertModificationStoredProcedureConfiguration`1.HasName(System.String,System.String)">
      <summary>저장 프로시저의 이름을 구성합니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 구성 인스턴스입니다.</returns>
      <param name="procedureName">저장 프로시저 이름입니다.</param>
      <param name="schemaName">스키마 이름입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.InsertModificationStoredProcedureConfiguration`1.Navigation``1(System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.ICollection{`0}}},System.Action{System.Data.Entity.ModelConfiguration.Configuration.AssociationModificationStoredProcedureConfiguration{``0}})">
      <summary>외래 키 속성이 클래스에 포함되지 않는 관계에 대한 매개 변수를 구성합니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 구성 인스턴스입니다.</returns>
      <param name="navigationPropertyExpression">관계의 탐색 속성을 나타내는 람다 식입니다.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="associationModificationStoredProcedureConfigurationAction">구성을 수행하는 람다 식입니다.</param>
      <typeparam name="TPrincipalEntityType">관계의 주 엔터티 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.InsertModificationStoredProcedureConfiguration`1.Navigation``1(System.Linq.Expressions.Expression{System.Func{``0,`0}},System.Action{System.Data.Entity.ModelConfiguration.Configuration.AssociationModificationStoredProcedureConfiguration{``0}})">
      <summary>외래 키 속성이 클래스에 포함되지 않는 관계에 대한 매개 변수를 구성합니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 구성 인스턴스입니다.</returns>
      <param name="navigationPropertyExpression">관계의 탐색 속성을 나타내는 람다 식입니다.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="associationModificationStoredProcedureConfigurationAction">구성을 수행하는 람다 식입니다.</param>
      <typeparam name="TPrincipalEntityType">관계의 주 엔터티 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.InsertModificationStoredProcedureConfiguration`1.Parameter(System.Linq.Expressions.Expression{System.Func{`0,System.Byte[]}},System.String)">
      <summary>이 저장 프로시저의 매개 변수를 구성합니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 구성 인스턴스입니다.</returns>
      <param name="propertyExpression">매개 변수를 구성할 속성을 나타내는 람다 식입니다.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="parameterName">매개 변수의 이름입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.InsertModificationStoredProcedureConfiguration`1.Parameter(System.Linq.Expressions.Expression{System.Func{`0,System.Data.Entity.Spatial.DbGeography}},System.String)">
      <summary>이 저장 프로시저의 매개 변수를 구성합니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 구성 인스턴스입니다.</returns>
      <param name="propertyExpression">매개 변수를 구성할 속성을 나타내는 람다 식입니다.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="parameterName">매개 변수의 이름입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.InsertModificationStoredProcedureConfiguration`1.Parameter(System.Linq.Expressions.Expression{System.Func{`0,System.Data.Entity.Spatial.DbGeometry}},System.String)">
      <summary>이 저장 프로시저의 매개 변수를 구성합니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 구성 인스턴스입니다.</returns>
      <param name="propertyExpression">매개 변수를 구성할 속성을 나타내는 람다 식입니다.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="parameterName">매개 변수의 이름입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.InsertModificationStoredProcedureConfiguration`1.Parameter``1(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{``0}}},System.String)">
      <summary>이 저장 프로시저의 매개 변수를 구성합니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 구성 인스턴스입니다.</returns>
      <param name="propertyExpression">매개 변수를 구성할 속성을 나타내는 람다 식입니다.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="parameterName">매개 변수의 이름입니다.</param>
      <typeparam name="TProperty">구성할 속성의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.InsertModificationStoredProcedureConfiguration`1.Parameter(System.Linq.Expressions.Expression{System.Func{`0,System.String}},System.String)">
      <summary>이 저장 프로시저의 매개 변수를 구성합니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 구성 인스턴스입니다.</returns>
      <param name="propertyExpression">매개 변수를 구성할 속성을 나타내는 람다 식입니다.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="parameterName">매개 변수의 이름입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.InsertModificationStoredProcedureConfiguration`1.Parameter``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String)">
      <summary>이 저장 프로시저의 매개 변수를 구성합니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 구성 인스턴스입니다.</returns>
      <param name="propertyExpression">매개 변수를 구성할 속성을 나타내는 람다 식입니다.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="parameterName">매개 변수의 이름입니다.</param>
      <typeparam name="TProperty">구성할 속성의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.InsertModificationStoredProcedureConfiguration`1.Result(System.Linq.Expressions.Expression{System.Func{`0,System.Byte[]}},System.String)">
      <summary>속성에 매핑할 이 저장 프로시저에 대한 결과의 열을 구성합니다.데이터베이스에서 생성된 열에 사용됩니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 구성 인스턴스입니다.</returns>
      <param name="propertyExpression">결과를 구성할 속성을 나타내는 람다 식입니다.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="columnName">결과 열의 이름입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.InsertModificationStoredProcedureConfiguration`1.Result(System.Linq.Expressions.Expression{System.Func{`0,System.Data.Entity.Spatial.DbGeography}},System.String)">
      <summary>속성에 매핑할 이 저장 프로시저에 대한 결과의 열을 구성합니다.데이터베이스에서 생성된 열에 사용됩니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 구성 인스턴스입니다.</returns>
      <param name="propertyExpression">결과를 구성할 속성을 나타내는 람다 식입니다.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="columnName">결과 열의 이름입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.InsertModificationStoredProcedureConfiguration`1.Result(System.Linq.Expressions.Expression{System.Func{`0,System.Data.Entity.Spatial.DbGeometry}},System.String)">
      <summary>속성에 매핑할 이 저장 프로시저에 대한 결과의 열을 구성합니다.데이터베이스에서 생성된 열에 사용됩니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 구성 인스턴스입니다.</returns>
      <param name="propertyExpression">결과를 구성할 속성을 나타내는 람다 식입니다.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="columnName">결과 열의 이름입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.InsertModificationStoredProcedureConfiguration`1.Result``1(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{``0}}},System.String)">
      <summary>속성에 매핑할 이 저장 프로시저에 대한 결과의 열을 구성합니다.데이터베이스에서 생성된 열에 사용됩니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 구성 인스턴스입니다.</returns>
      <param name="propertyExpression">결과를 구성할 속성을 나타내는 람다 식입니다.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="columnName">결과 열의 이름입니다.</param>
      <typeparam name="TProperty">구성할 속성의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.InsertModificationStoredProcedureConfiguration`1.Result(System.Linq.Expressions.Expression{System.Func{`0,System.String}},System.String)">
      <summary>속성에 매핑할 이 저장 프로시저에 대한 결과의 열을 구성합니다.데이터베이스에서 생성된 열에 사용됩니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 구성 인스턴스입니다.</returns>
      <param name="propertyExpression">결과를 구성할 속성을 나타내는 람다 식입니다.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="columnName">결과 열의 이름입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.InsertModificationStoredProcedureConfiguration`1.Result``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String)">
      <summary>속성에 매핑할 이 저장 프로시저에 대한 결과의 열을 구성합니다.데이터베이스에서 생성된 열에 사용됩니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 구성 인스턴스입니다.</returns>
      <param name="propertyExpression">결과를 구성할 속성을 나타내는 람다 식입니다.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="columnName">결과 열의 이름입니다.</param>
      <typeparam name="TProperty">구성할 속성의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.InsertModificationStoredProcedureConfiguration`1.ToString"></member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration">
      <summary>엔터티 형식 또는 복합 형식에 대한 길이 패싯을 포함하는 열을 구성하는 데 사용합니다.이 구성 기능은 Code First Fluent API에 의해 노출됩니다. 자세한 내용은 <see cref="T:System.Data.Entity.DbModelBuilder" />를 참조하십시오.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration.Equals(System.Object)">
      <summary>지정한 개체와 현재 개체가 같은지 여부를 확인합니다.</summary>
      <returns>개체가 같으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="obj">개체입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration.GetHashCode">
      <summary>특정 형식에 대한 해시 함수 역할을 합니다.</summary>
      <returns>현재 형식에 대한 해시 코드입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration.GetType">
      <summary>현재 인스턴스의 형식을 가져옵니다.</summary>
      <returns>현재 인스턴스의 정확한 런타임 형식입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration.HasMaxLength(System.Nullable{System.Int32})">
      <summary>열이 지정된 최대 길이를 갖도록 구성합니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration" /> 인스턴스입니다.</returns>
      <param name="value">열의 최대 길이입니다.값을 null로 설정하면 모든 최대 길이 제한이 열에서 제거되고 데이터베이스 열에 기본 길이가 사용됩니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration.IsFixedLength">
      <summary>열이 고정 길이가 되도록 구성합니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration" /> 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration.IsMaxLength">
      <summary>열에서 데이터베이스 공급자가 지원하는 최대 길이가 허용되도록 구성합니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration" /> 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration.IsVariableLength">
      <summary>열이 가변 길이가 되도록 구성합니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration" /> 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration.ToString">
      <summary>현재 개체를 나타내는 문자열을 반환합니다.</summary>
      <returns>현재 개체를 나타내는 문자열입니다.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.LengthPropertyConfiguration">
      <summary>엔터티 형식 또는 복합 형식에 대한 길이 패싯을 포함하는 속성을 구성하는 데 사용합니다.이 구성 기능은 Code First Fluent API를 통해 사용할 수 있습니다. 자세한 내용은 <see cref="T:System.Data.Entity.DbModelBuilder" />를 참조하십시오.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthPropertyConfiguration.HasMaxLength(System.Nullable{System.Int32})">
      <summary>속성이 지정된 최대 길이를 갖도록 구성합니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 LengthPropertyConfiguration 인스턴스입니다.</returns>
      <param name="value">속성의 최대 길이입니다.'null'로 설정하면 모든 최대 길이 제한이 속성에서 제거되고 데이터베이스 열에 기본 길이가 사용됩니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthPropertyConfiguration.IsFixedLength">
      <summary>속성이 고정 길이가 되도록 구성합니다.속성의 고정 길이를 설정하려면 HasMaxLength를 사용합니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 LengthPropertyConfiguration 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthPropertyConfiguration.IsMaxLength">
      <summary>속성에서 데이터베이스 공급자가 지원하는 최대 길이가 허용되도록 구성합니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 LengthPropertyConfiguration 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthPropertyConfiguration.IsVariableLength">
      <summary>속성이 가변 길이가 되도록 구성합니다.속성은 기본적으로 가변 길이입니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 LengthPropertyConfiguration 인스턴스입니다.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ManyNavigationPropertyConfiguration`2">
      <summary>엔터티 형식에서 시작되는 다 관계를 구성합니다.</summary>
      <typeparam name="TEntityType">관계가 시작되는 엔터티 형식입니다.</typeparam>
      <typeparam name="TTargetEntityType">관계의 대상 엔터티 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyNavigationPropertyConfiguration`2.Equals(System.Object)">
      <summary>지정한 개체와 현재 개체가 같은지 여부를 확인합니다.</summary>
      <returns>개체가 같으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="obj">현재 개체와 비교할 개체입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyNavigationPropertyConfiguration`2.GetHashCode">
      <summary>특정 형식에 대한 해시 함수 역할을 합니다.</summary>
      <returns>현재 형식에 대한 해시 코드입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyNavigationPropertyConfiguration`2.GetType">
      <summary>현재 인스턴스의 <see cref="T:System.Type" />을 가져옵니다.</summary>
      <returns>현재 인스턴스의 정확한 런타임 형식입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyNavigationPropertyConfiguration`2.ToString">
      <summary>현재 개체를 나타내는 문자열을 반환합니다.</summary>
      <returns>현재 개체를 나타내는 문자열입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyNavigationPropertyConfiguration`2.WithMany">
      <summary>관계의 다른 쪽에 탐색 속성을 사용하지 않고 관계가 다 대 다 관계가 되도록 구성합니다.</summary>
      <returns>관계를 보다 세부적으로 구성하는 데 사용할 수 있는 구성 개체입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyNavigationPropertyConfiguration`2.WithMany(System.Linq.Expressions.Expression{System.Func{`1,System.Collections.Generic.ICollection{`0}}})">
      <summary>관계의 다른 쪽에 탐색 속성을 사용하여 관계가 다 대 다 관계가 되도록 구성합니다.</summary>
      <returns>관계를 보다 세부적으로 구성하는 데 사용할 수 있는 구성 개체입니다.</returns>
      <param name="navigationPropertyExpression">관계의 다른 쪽 End에 대한 탐색 속성을 나타내는 람다 식입니다.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyNavigationPropertyConfiguration`2.WithOptional">
      <summary>관계의 다른 쪽에 탐색 속성을 사용하지 않고 관계가 다 대 선택적 관계가 되도록 구성합니다.</summary>
      <returns>관계를 보다 세부적으로 구성하는 데 사용할 수 있는 구성 개체입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyNavigationPropertyConfiguration`2.WithOptional(System.Linq.Expressions.Expression{System.Func{`1,`0}})">
      <summary>관계의 다른 쪽에 탐색 속성을 사용하여 관계가 다 대 선택적 관계가 되도록 구성합니다.</summary>
      <returns>관계를 보다 세부적으로 구성하는 데 사용할 수 있는 구성 개체입니다.</returns>
      <param name="navigationPropertyExpression">관계의 다른 쪽 End에 대한 탐색 속성을 나타내는 람다 식입니다.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyNavigationPropertyConfiguration`2.WithRequired">
      <summary>관계의 다른 쪽에 탐색 속성을 사용하지 않고 관계가 다 대 필수 관계가 되도록 구성합니다.</summary>
      <returns>관계를 보다 세부적으로 구성하는 데 사용할 수 있는 구성 개체입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyNavigationPropertyConfiguration`2.WithRequired(System.Linq.Expressions.Expression{System.Func{`1,`0}})">
      <summary>관계의 다른 쪽에 탐색 속성을 사용하여 관계가 다 대 필수 관계가 되도록 구성합니다.</summary>
      <returns>관계를 보다 세부적으로 구성하는 데 사용할 수 있는 구성 개체입니다.</returns>
      <param name="navigationPropertyExpression">관계의 다른 쪽 End에 대한 탐색 속성을 나타내는 람다 식입니다.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration">
      <summary>다 대 다 관계의 테이블 및 열 매핑을 구성합니다.이 구성 기능은 Code First Fluent API를 통해 사용할 수 있습니다. 자세한 내용은 <see cref="T:System.Data.Entity.DbModelBuilder" />를 참조하십시오.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration.Equals(System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration)">
      <summary>지정한 개체와 현재 개체가 같은지 여부를 확인합니다.</summary>
      <returns>지정된 개체가 현재 개체와 동일하면 true이고 그렇지 않으면 false입니다.</returns>
      <param name="other">현재 개체와 비교할 개체입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration.Equals(System.Object)">
      <summary>지정한 개체와 현재 개체가 같은지 여부를 확인합니다.</summary>
      <returns>지정된 개체가 현재 개체와 동일하면 true이고 그렇지 않으면 false입니다.</returns>
      <param name="obj">현재 개체와 비교할 개체입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration.GetHashCode">
      <summary>특정 형식에 대한 해시 함수 역할을 합니다.</summary>
      <returns>현재 개체에 대한 해시 코드입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration.GetType">
      <summary>현재 인스턴스의 형식을 가져옵니다.</summary>
      <returns>현재 인스턴스의 정확한 런타임 형식입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration.MapLeftKey(System.String[])">
      <summary>왼쪽 외래 키의 열 이름을 구성합니다.왼쪽 외래 키는 HasMany 호출에서 지정된 탐색 속성의 부모 엔터티를 가리킵니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하는 동일한 ManyToManyAssociationMappingConfiguration 인스턴스입니다.</returns>
      <param name="keyColumnNames">외래 키 열 이름입니다.여러 개의 외래 키 속성을 사용할 경우 대상 엔터티 형식에 대해 기본 키 속성이 구성된 순서와 동일한 순서로 속성을 지정해야 합니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration.MapRightKey(System.String[])">
      <summary>오른쪽 외래 키의 열 이름을 구성합니다.오른쪽 외래 키는 WithMany 호출에서 지정된 탐색 속성의 부모 엔터티를 가리킵니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하는 동일한 ManyToManyAssociationMappingConfiguration 인스턴스입니다.</returns>
      <param name="keyColumnNames">외래 키 열 이름입니다.여러 개의 외래 키 속성을 사용할 경우 대상 엔터티 형식에 대해 기본 키 속성이 구성된 순서와 동일한 순서로 속성을 지정해야 합니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration.ToString">
      <summary>현재 개체를 나타내는 문자열을 반환합니다.</summary>
      <returns>현재 개체를 나타내는 문자열입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration.ToTable(System.String)">
      <summary>관계에 대한 조인 테이블 이름을 구성합니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하는 동일한 ManyToManyAssociationMappingConfiguration 인스턴스입니다.</returns>
      <param name="tableName">테이블의 이름입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration.ToTable(System.String,System.String)">
      <summary>관계에 대한 조인 테이블 이름 및 스키마를 구성합니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하는 동일한 ManyToManyAssociationMappingConfiguration 인스턴스입니다.</returns>
      <param name="tableName">테이블의 이름입니다.</param>
      <param name="schemaName">테이블의 스키마입니다.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProcedureConfiguration`2">
      <summary>다 대 다 관계를 수정하는 데 사용되는 저장 프로시저에 대한 구성을 수행할 수 있도록 합니다.</summary>
      <typeparam name="TEntityType">관계가 구성될 엔터티의 형식입니다.</typeparam>
      <typeparam name="TTargetEntityType">관계의 다른 쪽 End가 대상으로 하는 엔터티의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProcedureConfiguration`2.Equals(System.Object)"></member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProcedureConfiguration`2.GetHashCode"></member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProcedureConfiguration`2.GetType"></member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProcedureConfiguration`2.HasName(System.String)">
      <summary>저장 프로시저의 이름을 설정합니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 구성 인스턴스입니다.</returns>
      <param name="procedureName">프로시저의 이름입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProcedureConfiguration`2.HasName(System.String,System.String)">
      <summary>저장 프로시저의 이름을 설정합니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 구성 인스턴스입니다.</returns>
      <param name="procedureName">프로시저의 이름입니다.</param>
      <param name="schemaName">스키마의 이름입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProcedureConfiguration`2.LeftKeyParameter(System.Linq.Expressions.Expression{System.Func{`0,System.Byte[]}},System.String)">
      <summary>왼쪽 키 값에 대한 매개 변수를 구성합니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 구성 인스턴스입니다.</returns>
      <param name="propertyExpression">구성할 속성을 나타내는 람다 식입니다.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="parameterName">매개 변수의 이름입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProcedureConfiguration`2.LeftKeyParameter``1(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{``0}}},System.String)">
      <summary>왼쪽 키 값에 대한 매개 변수를 구성합니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 구성 인스턴스입니다.</returns>
      <param name="propertyExpression">구성할 속성을 나타내는 람다 식입니다.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="parameterName">매개 변수의 이름입니다.</param>
      <typeparam name="TProperty">구성할 속성의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProcedureConfiguration`2.LeftKeyParameter(System.Linq.Expressions.Expression{System.Func{`0,System.String}},System.String)">
      <summary>왼쪽 키 값에 대한 매개 변수를 구성합니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 구성 인스턴스입니다.</returns>
      <param name="propertyExpression">구성할 속성을 나타내는 람다 식입니다.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="parameterName">매개 변수의 이름입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProcedureConfiguration`2.LeftKeyParameter``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String)">
      <summary>왼쪽 키 값에 대한 매개 변수를 구성합니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 구성 인스턴스입니다.</returns>
      <param name="propertyExpression">구성할 속성을 나타내는 람다 식입니다.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="parameterName">매개 변수의 이름입니다.</param>
      <typeparam name="TProperty">구성할 속성의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProcedureConfiguration`2.RightKeyParameter(System.Linq.Expressions.Expression{System.Func{`1,System.Byte[]}},System.String)">
      <summary>오른쪽 키 값에 대한 매개 변수를 구성합니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 구성 인스턴스입니다.</returns>
      <param name="propertyExpression">구성할 속성을 나타내는 람다 식입니다.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="parameterName">매개 변수의 이름입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProcedureConfiguration`2.RightKeyParameter``1(System.Linq.Expressions.Expression{System.Func{`1,System.Nullable{``0}}},System.String)">
      <summary>오른쪽 키 값에 대한 매개 변수를 구성합니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 구성 인스턴스입니다.</returns>
      <param name="propertyExpression">구성할 속성을 나타내는 람다 식입니다.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="parameterName">매개 변수의 이름입니다.</param>
      <typeparam name="TProperty">구성할 속성의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProcedureConfiguration`2.RightKeyParameter(System.Linq.Expressions.Expression{System.Func{`1,System.String}},System.String)">
      <summary>오른쪽 키 값에 대한 매개 변수를 구성합니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 구성 인스턴스입니다.</returns>
      <param name="propertyExpression">구성할 속성을 나타내는 람다 식입니다.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="parameterName">매개 변수의 이름입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProcedureConfiguration`2.RightKeyParameter``1(System.Linq.Expressions.Expression{System.Func{`1,``0}},System.String)">
      <summary>오른쪽 키 값에 대한 매개 변수를 구성합니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 구성 인스턴스입니다.</returns>
      <param name="propertyExpression">구성할 속성을 나타내는 람다 식입니다.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="parameterName">매개 변수의 이름입니다.</param>
      <typeparam name="TProperty">구성할 속성의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProcedureConfiguration`2.ToString"></member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProceduresConfiguration`2">
      <summary>다 대 다 관계를 수정하는 데 사용되는 저장 프로시저에 대한 구성을 수행할 수 있도록 합니다.</summary>
      <typeparam name="TEntityType">관계가 구성될 엔터티의 형식입니다.</typeparam>
      <typeparam name="TTargetEntityType">관계의 다른 쪽 End가 대상으로 하는 엔터티의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProceduresConfiguration`2.Delete(System.Action{System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProcedureConfiguration{`0,`1}})">
      <summary>관계를 삭제하는 데 사용되는 저장 프로시저를 구성합니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 구성 인스턴스입니다.</returns>
      <param name="modificationStoredProcedureConfigurationAction">저장 프로시저에 대한 구성을 수행하는 람다 식입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProceduresConfiguration`2.Equals(System.Object)"></member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProceduresConfiguration`2.GetHashCode"></member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProceduresConfiguration`2.GetType">
      <summary>현재 인스턴스의 <see cref="T:System.Type" />을 가져옵니다.</summary>
      <returns>현재 인스턴스의 정확한 런타임 형식입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProceduresConfiguration`2.Insert(System.Action{System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProcedureConfiguration{`0,`1}})">
      <summary>관계를 삽입하는 데 사용되는 저장 프로시저를 구성합니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 구성 인스턴스입니다.</returns>
      <param name="modificationStoredProcedureConfigurationAction">저장 프로시저에 대한 구성을 수행하는 람다 식입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProceduresConfiguration`2.ToString"></member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyNavigationPropertyConfiguration`2">
      <summary>다 대 다 관계를 구성합니다.이 구성 기능은 Code First Fluent API를 통해 사용할 수 있습니다. 자세한 내용은 <see cref="T:System.Data.Entity.DbModelBuilder" />를 참조하십시오.</summary>
      <typeparam name="TEntityType"></typeparam>
      <typeparam name="TTargetEntityType"></typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyNavigationPropertyConfiguration`2.Equals(System.Object)">
      <summary>지정한 개체와 현재 개체가 같은지 여부를 확인합니다.</summary>
      <returns>개체가 같으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="obj">현재 개체와 비교할 개체입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyNavigationPropertyConfiguration`2.GetHashCode">
      <summary>특정 형식에 대한 해시 함수 역할을 합니다.</summary>
      <returns>현재 형식에 대한 해시 코드입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyNavigationPropertyConfiguration`2.GetType">
      <summary>현재 인스턴스의 <see cref="T:System.Type" />을 가져옵니다.</summary>
      <returns>현재 인스턴스의 정확한 런타임 형식입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyNavigationPropertyConfiguration`2.Map(System.Action{System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration})">
      <summary>관계를 저장하는 데 사용되는 외래 키 열 및 테이블을 구성합니다.</summary>
      <param name="configurationAction">외래 키 열 및 테이블을 구성하는 동작입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyNavigationPropertyConfiguration`2.MapToStoredProcedures">
      <summary>이 관계를 수정하는 데 사용할 저장 프로시저를 구성합니다.프로시저 및 매개 변수 이름에 대한 기본 규칙이 사용됩니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyNavigationPropertyConfiguration`2" /> 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyNavigationPropertyConfiguration`2.MapToStoredProcedures(System.Action{System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProceduresConfiguration{`0,`1}})">
      <summary>이 관계를 수정하는 데 사용할 저장 프로시저를 구성합니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyNavigationPropertyConfiguration`2" /> 인스턴스입니다.</returns>
      <param name="modificationStoredProcedureMappingConfigurationAction">프로시저 및 매개 변수 이름에 대한 기본 규칙을 재정의할 구성입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyNavigationPropertyConfiguration`2.ToString">
      <summary>현재 개체를 나타내는 문자열을 반환합니다.</summary>
      <returns>현재 개체를 나타내는 문자열입니다.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ModificationStoredProcedureConfigurationBase">
      <summary>데이터베이스의 엔터티를 수정하는 데 사용할 저장 프로시저의 구성을 수행합니다.</summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ModificationStoredProceduresConfiguration`1">
      <summary>엔터티를 수정하는 데 사용되는 저장 프로시저에 대한 구성을 수행할 수 있도록 합니다.</summary>
      <typeparam name="TEntityType">저장 프로시저를 사용하여 수정할 수 있는 엔터티의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ModificationStoredProceduresConfiguration`1.Delete(System.Action{System.Data.Entity.ModelConfiguration.Configuration.DeleteModificationStoredProcedureConfiguration{`0}})">
      <summary>엔터티를 삭제하는 데 사용되는 저장 프로시저를 구성합니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 구성 인스턴스입니다.</returns>
      <param name="modificationStoredProcedureConfigurationAction">저장 프로시저에 대한 구성을 수행하는 람다 식입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ModificationStoredProceduresConfiguration`1.Equals(System.Object)"></member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ModificationStoredProceduresConfiguration`1.GetHashCode"></member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ModificationStoredProceduresConfiguration`1.GetType">
      <summary>현재 인스턴스의 <see cref="T:System.Type" />을 가져옵니다.</summary>
      <returns>현재 인스턴스의 정확한 런타임 형식입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ModificationStoredProceduresConfiguration`1.Insert(System.Action{System.Data.Entity.ModelConfiguration.Configuration.InsertModificationStoredProcedureConfiguration{`0}})">
      <summary>엔터티를 삽입하는 데 사용되는 저장 프로시저를 구성합니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 구성 인스턴스입니다.</returns>
      <param name="modificationStoredProcedureConfigurationAction">저장 프로시저에 대한 구성을 수행하는 람다 식입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ModificationStoredProceduresConfiguration`1.ToString"></member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ModificationStoredProceduresConfiguration`1.Update(System.Action{System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration{`0}})">
      <summary>엔터티를 업데이트하는 데 사용되는 저장 프로시저를 구성합니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 구성 인스턴스입니다.</returns>
      <param name="modificationStoredProcedureConfigurationAction">저장 프로시저에 대한 구성을 수행하는 람다 식입니다.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.NotNullConditionConfiguration">
      <summary>속성에 할당된 값을 기준으로 상속 계층 구조의 형식을 구분하는 데 사용되는 조건을 구성합니다.이 구성 기능은 Code First Fluent API를 통해 사용할 수 있습니다. 자세한 내용은 <see cref="T:System.Data.Entity.DbModelBuilder" />를 참조하십시오.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.NotNullConditionConfiguration.Equals(System.Object)">
      <summary>지정한 개체와 현재 개체가 같은지 여부를 확인합니다.</summary>
      <returns>지정된 개체가 현재 개체와 동일하면 true이고 그렇지 않으면 false입니다.</returns>
      <param name="obj">현재 개체와 비교할 개체입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.NotNullConditionConfiguration.GetHashCode">
      <summary>특정 형식에 대한 해시 함수 역할을 합니다.</summary>
      <returns>현재 개체에 대한 해시 코드입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.NotNullConditionConfiguration.GetType">
      <summary>현재 인스턴스의 <see cref="T:System.Type" />을 가져옵니다.</summary>
      <returns>현재 인스턴스의 정확한 런타임 형식입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.NotNullConditionConfiguration.HasValue">
      <summary>속성에 반드시 값이 필요하도록 조건을 구성합니다.이 속성이 저장된 열에 할당된 값이 없는 행은 이 엔터티 형식의 기본 형식인 것으로 간주됩니다.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.NotNullConditionConfiguration.ToString">
      <summary>현재 개체를 나타내는 문자열을 반환합니다.</summary>
      <returns>현재 개체를 나타내는 문자열입니다.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2">
      <summary>엔터티 형식에서 시작되는 선택적 관계를 구성합니다.</summary>
      <typeparam name="TEntityType">관계가 시작되는 엔터티 형식입니다.</typeparam>
      <typeparam name="TTargetEntityType">관계의 대상 엔터티 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.Equals(System.Object)">
      <summary>지정한 개체와 현재 개체가 같은지 여부를 확인합니다.</summary>
      <returns>개체가 같으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="obj">개체입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.GetHashCode">
      <summary>특정 형식에 대한 해시 함수 역할을 합니다.</summary>
      <returns>현재 형식에 대한 해시 코드입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.GetType">
      <summary>현재 인스턴스의 <see cref="T:System.Type" />을 가져옵니다.</summary>
      <returns>현재 인스턴스의 정확한 런타임 형식입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.ToString">
      <summary>현재 개체를 나타내는 문자열을 반환합니다.</summary>
      <returns>현재 개체를 나타내는 문자열입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.WithMany">
      <summary>관계의 다른 쪽에 탐색 속성을 사용하지 않고 관계가 선택적 대 다 관계가 되도록 구성합니다.</summary>
      <returns>관계를 보다 세부적으로 구성하는 데 사용할 수 있는 구성 개체입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.WithMany(System.Linq.Expressions.Expression{System.Func{`1,System.Collections.Generic.ICollection{`0}}})">
      <summary>관계의 다른 쪽에 탐색 속성을 사용하여 관계가 선택적 대 다 관계가 되도록 구성합니다.</summary>
      <returns>관계를 보다 세부적으로 구성하는 데 사용할 수 있는 구성 개체입니다.</returns>
      <param name="navigationPropertyExpression">관계의 다른 쪽 End에 대한 탐색 속성을 나타내는 람다 식입니다.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.WithOptionalDependent">
      <summary>관계의 다른 쪽에 탐색 속성을 사용하지 않고 관계가 선택적 대 선택적 관계가 되도록 구성합니다.구성하는 엔터티 형식은 종속 엔터티가 되고 주 엔터티에 대한 외래 키를 포함하게 됩니다.관계의 대상 엔터티 형식은 관계에서 주 엔터티가 됩니다.</summary>
      <returns>관계를 보다 세부적으로 구성하는 데 사용할 수 있는 구성 개체입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.WithOptionalDependent(System.Linq.Expressions.Expression{System.Func{`1,`0}})">
      <summary>관계의 다른 쪽에 탐색 속성을 사용하여 관계가 선택적 대 선택적 관계가 되도록 구성합니다.구성하는 엔터티 형식은 종속 엔터티가 되고 주 엔터티에 대한 외래 키를 포함하게 됩니다.관계의 대상 엔터티 형식은 관계에서 주 엔터티가 됩니다.</summary>
      <returns>관계를 보다 세부적으로 구성하는 데 사용할 수 있는 구성 개체입니다.</returns>
      <param name="navigationPropertyExpression">관계의 다른 쪽 End에 대한 탐색 속성을 나타내는 람다 식입니다.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.WithOptionalPrincipal">
      <summary>관계의 다른 쪽에 탐색 속성을 사용하지 않고 관계가 선택적 대 선택적 관계가 되도록 구성합니다.구성하는 엔터티 형식은 관계에서 주 엔터티가 됩니다.관계의 대상 엔터티 형식은 종속 엔터티가 되고 주 엔터티에 대한 외래 키를 포함하게 됩니다.</summary>
      <returns>관계를 보다 세부적으로 구성하는 데 사용할 수 있는 구성 개체입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.WithOptionalPrincipal(System.Linq.Expressions.Expression{System.Func{`1,`0}})">
      <summary>관계의 다른 쪽에 탐색 속성을 사용하여 관계가 선택적 대 선택적 관계가 되도록 구성합니다.구성하는 엔터티 형식은 관계에서 주 엔터티가 됩니다.관계의 대상 엔터티 형식은 종속 엔터티가 되고 주 엔터티에 대한 외래 키를 포함하게 됩니다.</summary>
      <returns>관계를 보다 세부적으로 구성하는 데 사용할 수 있는 구성 개체입니다.</returns>
      <param name="navigationPropertyExpression">관계의 다른 쪽 End에 대한 탐색 속성을 나타내는 람다 식입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.WithRequired">
      <summary>관계의 다른 쪽에 탐색 속성을 사용하지 않고 관계가 선택적 대 필수 관계가 되도록 구성합니다.</summary>
      <returns>관계를 보다 세부적으로 구성하는 데 사용할 수 있는 구성 개체입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.WithRequired(System.Linq.Expressions.Expression{System.Func{`1,`0}})">
      <summary>관계의 다른 쪽에 탐색 속성을 사용하여 관계가 선택적 대 필수 관계가 되도록 구성합니다.</summary>
      <returns>관계를 보다 세부적으로 구성하는 데 사용할 수 있는 구성 개체입니다.</returns>
      <param name="navigationPropertyExpression">관계의 다른 쪽 End에 대한 탐색 속성을 나타내는 람다 식입니다.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration">
      <summary>엔터티 형식에서 기본 열을 구성합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration.Equals(System.Object)">
      <summary>지정한 개체와 현재 개체가 같은지 여부를 확인합니다.</summary>
      <returns>개체가 같으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="obj">현재 개체와 비교할 개체입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration.GetHashCode">
      <summary>특정 형식에 대한 해시 함수 역할을 합니다.</summary>
      <returns>현재 형식에 대한 해시 코드입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration.GetType">
      <summary>현재 인스턴스의 <see cref="T:System.Type" />을 가져옵니다.</summary>
      <returns>현재 인스턴스의 정확한 런타임 형식입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration.HasColumnOrder(System.Nullable{System.Int32})">
      <summary>속성을 저장하는 데 사용되는 기본 열의 순서를 구성합니다.이 메서드는 엔터티 형식에 복합 키가 있는 경우 키 순서를 지정하는 데도 사용됩니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration" /> 인스턴스입니다.</returns>
      <param name="columnOrder">이 열이 데이터베이스 테이블에 나타나는 순서입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration.HasColumnType(System.String)">
      <summary>속성을 저장하는 데 사용되는 기본 열의 데이터 형식을 구성합니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration" /> 인스턴스입니다.</returns>
      <param name="columnType">데이터베이스 공급자별 데이터 형식의 이름입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration.IsOptional">
      <summary>기본 열이 선택적 열이 되도록 구성합니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration" /> 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration.IsRequired">
      <summary>기본 열이 필수 열이 되도록 구성합니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration" /> 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration.ToString">
      <summary>현재 개체를 나타내는 문자열을 반환합니다.</summary>
      <returns>현재 개체를 나타내는 문자열입니다.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration">
      <summary>엔터티 형식 또는 복합 형식의 기본 속성을 구성하는 데 사용합니다.이 구성 기능은 Code First Fluent API를 통해 사용할 수 있습니다. 자세한 내용은 <see cref="T:System.Data.Entity.DbModelBuilder" />를 참조하십시오.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.Equals(System.Object)"></member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.GetHashCode"></member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.GetType">
      <summary>현재 인스턴스의 <see cref="T:System.Type" />을 가져옵니다.</summary>
      <returns>현재 인스턴스의 정확한 런타임 형식입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.HasColumnName(System.String)">
      <summary>속성을 저장하는 데 사용되는 데이터베이스 열의 이름을 구성합니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하는 동일한 PrimitivePropertyConfiguration 인스턴스입니다.</returns>
      <param name="columnName">열 이름입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.HasColumnOrder(System.Nullable{System.Int32})">
      <summary>속성을 저장하는 데 사용되는 데이터베이스 열의 순서를 구성합니다.이 메서드는 엔터티 형식에 복합 키가 있는 경우 키 순서를 지정하는 데도 사용됩니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하는 동일한 PrimitivePropertyConfiguration 인스턴스입니다.</returns>
      <param name="columnOrder">이 열이 데이터베이스 테이블에 나타나는 순서입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.HasColumnType(System.String)">
      <summary>속성을 저장하는 데 사용되는 데이터베이스 열의 데이터 형식을 구성합니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하는 동일한 PrimitivePropertyConfiguration 인스턴스입니다.</returns>
      <param name="columnType">데이터베이스 공급자별 데이터 형식의 이름입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.HasDatabaseGeneratedOption(System.Nullable{System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption})">
      <summary>데이터베이스에서 속성 값이 생성되는 방식을 구성합니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하는 동일한 PrimitivePropertyConfiguration 인스턴스입니다.</returns>
      <param name="databaseGeneratedOption">데이터베이스에서 속성 값을 생성하는 데 사용되는 패턴입니다.'null'을 설정하면 기본 옵션이 사용되며, 속성의 형식, 모델에서의 의미 체계(예:기본 키가 다르게 취급됨) 및 사용되는 규칙의 집합에 따라 'None', 'Identity' 또는 'Computed'일 수 있습니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.HasParameterName(System.String)">
      <summary>이 속성에 대해 저장 프로시저에서 사용되는 매개 변수의 이름을 구성합니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하는 동일한 PrimitivePropertyConfiguration 인스턴스입니다.</returns>
      <param name="parameterName">매개 변수의 이름입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.IsConcurrencyToken">
      <summary>속성이 낙관적 동시성 토큰으로 사용되도록 구성합니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하는 동일한 PrimitivePropertyConfiguration 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.IsConcurrencyToken(System.Nullable{System.Boolean})">
      <summary>속성이 낙관적 동시성 토큰으로 사용될지 여부를 구성합니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하는 동일한 PrimitivePropertyConfiguration 인스턴스입니다.</returns>
      <param name="concurrencyToken">속성이 동시성 토큰인지 여부를 나타내는 값입니다.'null'을 지정하면 동시성 토큰 패싯이 속성에서 제거됩니다.또한 'null'을 지정하면 런타임 동작이 'false'를 지정할 때와 동일하게 됩니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.IsOptional">
      <summary>속성이 선택적 속성이 되도록 구성합니다.이 속성을 저장하는 데 사용되는 데이터베이스 열은 null을 허용하게 됩니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하는 동일한 PrimitivePropertyConfiguration 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.IsRequired">
      <summary>속성이 필수 속성이 되도록 구성합니다.이 속성을 저장하는 데 사용되는 데이터베이스 열은 null을 허용하지 않게 됩니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하는 동일한 PrimitivePropertyConfiguration 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.ToString"></member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.PropertyConventionConfiguration">
      <summary>모델의 속성을 기반으로 간단한 규칙에 대해 구성이 수행될 수 있도록 합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PropertyConventionConfiguration.Configure(System.Action{System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration})">
      <summary>이 규칙이 적용되는 속성의 구성을 허용합니다.</summary>
      <param name="propertyConfigurationAction">
        <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration" />에 대한 구성을 수행하는 동작입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PropertyConventionConfiguration.Equals(System.Object)">
      <summary>지정한 개체와 현재 개체가 같은지 여부를 확인합니다.</summary>
      <returns>지정된 개체가 현재 개체와 동일하면 true이고 그렇지 않으면 false입니다.</returns>
      <param name="obj">현재 개체와 비교할 개체입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PropertyConventionConfiguration.GetHashCode">
      <summary>이 인스턴스의 해시 코드를 반환합니다.</summary>
      <returns>이 인스턴스의 해시 코드입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PropertyConventionConfiguration.GetType">
      <summary>현재 인스턴스의 <see cref="T:System.Type" />을 가져옵니다.</summary>
      <returns>현재 인스턴스의 정확한 런타임 형식입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PropertyConventionConfiguration.Having``1(System.Func{System.Reflection.PropertyInfo,``0})">
      <summary>이후에 구성 중에 사용하기 위해 값을 캡처하는 동안 조건자를 기반으로 이 규칙이 적용되는 속성을 필터링합니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하는 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.PropertyConventionWithHavingConfiguration`1" /> 인스턴스입니다.</returns>
      <param name="capturingPredicate">각 속성의 값을 캡처하는 함수입니다.이 값이 null이면 속성이 필터링됩니다.</param>
      <typeparam name="T">캡처된 값의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PropertyConventionConfiguration.ToString">
      <summary>현재 개체를 나타내는 문자열을 반환합니다.</summary>
      <returns>현재 개체입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PropertyConventionConfiguration.Where(System.Func{System.Reflection.PropertyInfo,System.Boolean})">
      <summary>조건자를 기반으로 이 규칙이 적용되는 속성을 필터링합니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하는 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.PropertyConventionConfiguration" /> 인스턴스입니다.</returns>
      <param name="predicate">조건에 대해 각 속성을 테스트하는 함수입니다.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.PropertyConventionWithHavingConfiguration`1">
      <summary>모델에 있는 엔터티 형식의 속성이나 캡처된 값을 기반으로 간단한 규칙에 대해 구성이 수행될 수 있도록 합니다.</summary>
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PropertyConventionWithHavingConfiguration`1.Configure(System.Action{System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration,`0})">
      <summary>이 규칙이 적용되는 속성의 구성을 허용합니다.</summary>
      <param name="propertyConfigurationAction">캡처된 값을 사용하여 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration" />에 대한 구성을 수행하는 동작입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PropertyConventionWithHavingConfiguration`1.Equals(System.Object)">
      <summary>지정한 개체와 현재 개체가 같은지 여부를 확인합니다.</summary>
      <returns>지정된 개체가 현재 개체와 동일하면 true이고 그렇지 않으면 false입니다.</returns>
      <param name="obj">현재 개체와 비교할 개체입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PropertyConventionWithHavingConfiguration`1.GetHashCode">
      <summary>특정 형식에 대한 해시 함수 역할을 합니다.</summary>
      <returns>현재 형식에 대한 해시 코드입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PropertyConventionWithHavingConfiguration`1.GetType">
      <summary>현재 인스턴스의 <see cref="T:System.Type" />을 가져옵니다.</summary>
      <returns>현재 인스턴스의 정확한 런타임 형식입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PropertyConventionWithHavingConfiguration`1.ToString">
      <summary>현재 개체를 나타내는 문자열을 반환합니다.</summary>
      <returns>현재 개체를 나타내는 문자열입니다.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.PropertyMappingConfiguration">
      <summary>매핑 조각에서 속성을 구성하는 데 사용됩니다.이 구성 기능은 Code First Fluent API를 통해 사용할 수 있습니다. 자세한 내용은 <see cref="T:System.Data.Entity.DbModelBuilder" />를 참조하십시오.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PropertyMappingConfiguration.HasColumnName(System.String)">
      <summary>매핑 조각에서 속성을 저장하는 데 사용되는 데이터베이스 열의 이름을 구성합니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 PropertyMappingConfiguration 인스턴스입니다.</returns>
      <param name="columnName">열 이름입니다.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2">
      <summary>엔터티 형식에서 시작되는 필수 관계를 구성합니다.</summary>
      <typeparam name="TEntityType">관계가 시작되는 엔터티 형식입니다.</typeparam>
      <typeparam name="TTargetEntityType">관계의 대상 엔터티 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.Equals(System.Object)">
      <summary>지정된 개체가 현재 개체와 같은지 여부를 지정합니다.</summary>
      <returns>지정된 개체가 현재 개체와 같으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="obj">비교할 개체입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.GetHashCode">
      <summary>현재 개체에 연결된 해시 코드를 가져옵니다.</summary>
      <returns>현재 개체에 연결된 해시 코드입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.GetType">
      <summary>현재 인스턴스의 <see cref="T:System.Type" />을 가져옵니다.</summary>
      <returns>현재 인스턴스의 정확한 런타임 형식입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.ToString">
      <summary>현재 개체의 문자열 표현을 반환합니다.</summary>
      <returns>현재 개체의 문자열 표현입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.WithMany">
      <summary>관계의 다른 쪽에 탐색 속성을 사용하지 않고 관계가 필수 대 다 관계가 되도록 구성합니다.</summary>
      <returns>관계를 보다 세부적으로 구성하는 데 사용할 수 있는 구성 개체입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.WithMany(System.Linq.Expressions.Expression{System.Func{`1,System.Collections.Generic.ICollection{`0}}})">
      <summary>관계의 다른 쪽에 탐색 속성을 사용하여 관계가 필수 대 다 관계가 되도록 구성합니다.</summary>
      <returns>관계를 보다 세부적으로 구성하는 데 사용할 수 있는 구성 개체입니다.</returns>
      <param name="navigationPropertyExpression">관계의 다른 쪽 End에 대한 탐색 속성을 나타내는 람다 식입니다.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.WithOptional">
      <summary>관계의 다른 쪽에 탐색 속성을 사용하지 않고 관계가 필수 대 선택적 관계가 되도록 구성합니다.</summary>
      <returns>관계를 보다 세부적으로 구성하는 데 사용할 수 있는 구성 개체입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.WithOptional(System.Linq.Expressions.Expression{System.Func{`1,`0}})">
      <summary>관계의 다른 쪽에 탐색 속성을 사용하여 관계가 필수 대 선택적 관계가 되도록 구성합니다.</summary>
      <returns>관계를 보다 세부적으로 구성하는 데 사용할 수 있는 구성 개체입니다.</returns>
      <param name="navigationPropertyExpression">관계의 다른 쪽 End에 대한 탐색 속성을 나타내는 람다 식입니다.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.WithRequiredDependent">
      <summary>관계의 다른 쪽에 탐색 속성을 사용하지 않고 관계가 필수 대 필수 관계가 되도록 구성합니다.구성하는 엔터티 형식은 종속 엔터티가 되고 주 엔터티에 대한 외래 키를 포함하게 됩니다.관계의 대상 엔터티 형식은 관계에서 주 엔터티가 됩니다.</summary>
      <returns>관계를 보다 세부적으로 구성하는 데 사용할 수 있는 구성 개체입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.WithRequiredDependent(System.Linq.Expressions.Expression{System.Func{`1,`0}})">
      <summary>관계의 다른 쪽에 탐색 속성을 사용하여 관계가 필수 대 필수 관계가 되도록 구성합니다.구성하는 엔터티 형식은 종속 엔터티가 되고 주 엔터티에 대한 외래 키를 포함하게 됩니다.관계의 대상 엔터티 형식은 관계에서 주 엔터티가 됩니다.</summary>
      <returns>관계를 보다 세부적으로 구성하는 데 사용할 수 있는 구성 개체입니다.</returns>
      <param name="navigationPropertyExpression">관계의 다른 쪽 End에 대한 탐색 속성을 나타내는 람다 식입니다.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.WithRequiredPrincipal">
      <summary>관계의 다른 쪽에 탐색 속성을 사용하지 않고 관계가 필수 대 필수 관계가 되도록 구성합니다.구성하는 엔터티 형식은 관계에서 주 엔터티가 됩니다.관계의 대상 엔터티 형식은 종속 엔터티가 되고 주 엔터티에 대한 외래 키를 포함하게 됩니다.</summary>
      <returns>관계를 보다 세부적으로 구성하는 데 사용할 수 있는 구성 개체입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.WithRequiredPrincipal(System.Linq.Expressions.Expression{System.Func{`1,`0}})">
      <summary>관계의 다른 쪽에 탐색 속성을 사용하여 관계가 필수 대 필수 관계가 되도록 구성합니다.구성하는 엔터티 형식은 관계에서 주 엔터티가 됩니다.관계의 대상 엔터티 형식은 종속 엔터티가 되고 주 엔터티에 대한 외래 키를 포함하게 됩니다.</summary>
      <returns>관계를 보다 세부적으로 구성하는 데 사용할 수 있는 구성 개체입니다.</returns>
      <param name="navigationPropertyExpression">관계의 다른 쪽 End에 대한 탐색 속성을 나타내는 람다 식입니다.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration">
      <summary>문자열 값을 저장하는 데 사용되는 데이터베이스 열을 구성합니다.이 구성 기능은 Code First Fluent API를 통해 사용할 수 있습니다. 자세한 내용은 <see cref="T:System.Data.Entity.DbModelBuilder" />를 참조하십시오.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.Equals(System.Object)">
      <summary>지정한 개체와 현재 개체가 같은지 여부를 확인합니다.</summary>
      <returns>개체가 같으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="obj">개체입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.GetHashCode">
      <summary>특정 형식에 대한 해시 함수 역할을 합니다.</summary>
      <returns>현재 형식에 대한 해시 코드입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.GetType">
      <summary>현재 인스턴스의 형식을 가져옵니다.</summary>
      <returns>현재 인스턴스의 정확한 런타임 형식입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.HasColumnOrder(System.Nullable{System.Int32})">
      <summary>데이터베이스 열의 순서를 구성합니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 StringColumnConfiguration 인스턴스입니다.</returns>
      <param name="columnOrder">이 열이 데이터베이스 테이블에 나타나는 순서입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.HasColumnType(System.String)">
      <summary>데이터베이스 열의 데이터 타입을 구성합니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 StringColumnConfiguration 인스턴스입니다.</returns>
      <param name="columnType">데이터베이스 공급자별 데이터 타입의 이름입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.HasMaxLength(System.Nullable{System.Int32})">
      <summary>속성이 지정된 최대 길이를 갖도록 구성합니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 StringColumnConfiguration 인스턴스입니다.</returns>
      <param name="value">속성의 최대 길이입니다.'null'로 설정하면 열에 기본 길이가 사용됩니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.IsFixedLength">
      <summary>열이 고정 길이가 되도록 구성합니다.속성의 고정 길이를 설정하려면 HasMaxLength를 사용합니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 StringColumnConfiguration 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.IsMaxLength">
      <summary>열에서 데이터베이스 공급자가 지원하는 최대 길이가 허용되도록 구성합니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 StringColumnConfiguration 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.IsOptional">
      <summary>열이 선택적 열이 되도록 구성합니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 StringColumnConfiguration 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.IsRequired">
      <summary>열이 필수 열이 되도록 구성합니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 StringColumnConfiguration 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.IsUnicode">
      <summary>열이 유니코드 문자열 내용을 지원하도록 구성합니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 StringColumnConfiguration 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.IsUnicode(System.Nullable{System.Boolean})">
      <summary>열이 유니코드 문자열 내용을 지원하는지 여부를 구성합니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 StringColumnConfiguration 인스턴스입니다.</returns>
      <param name="unicode">열이 유니코드 문자열 내용을 지원하는지 여부를 나타내는 값입니다.'null'을 지정하면 유니코드 패싯이 열에서 제거됩니다.또한 'null'을 지정하면 런타임 동작이 'false'를 지정할 때와 동일하게 됩니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.IsVariableLength">
      <summary>열이 가변 길이가 되도록 구성합니다.열은 기본적으로 가변 길이입니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 StringColumnConfiguration 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.ToString">
      <summary>현재 개체를 나타내는 문자열을 반환합니다.</summary>
      <returns>현재 개체를 나타내는 문자열입니다.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration">
      <summary>엔터티 형식 또는 복합 형식의 <see cref="T:System.string" /> 속성을 구성하는 데 사용합니다.이 구성 기능은 Code First Fluent API를 통해 사용할 수 있습니다. 자세한 내용은 <see cref="T:System.Data.Entity.DbModelBuilder" />를 참조하십시오.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.HasColumnName(System.String)">
      <summary>속성을 저장하는 데 사용되는 데이터베이스 열의 이름을 구성합니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하는 동일한 StringPropertyConfiguration 인스턴스입니다.</returns>
      <param name="columnName">열 이름입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.HasColumnOrder(System.Nullable{System.Int32})">
      <summary>속성을 저장하는 데 사용되는 데이터베이스 열의 순서를 구성합니다.이 메서드는 엔터티 형식에 복합 키가 있는 경우 키 순서를 지정하는 데도 사용됩니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하는 동일한 StringPropertyConfiguration 인스턴스입니다.</returns>
      <param name="columnOrder">이 열이 데이터베이스 테이블에 나타나는 순서입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.HasColumnType(System.String)">
      <summary>속성을 저장하는 데 사용되는 데이터베이스 열의 데이터 형식을 구성합니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하는 동일한 StringPropertyConfiguration 인스턴스입니다.</returns>
      <param name="columnType">데이터베이스 공급자별 데이터 형식의 이름입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.HasDatabaseGeneratedOption(System.Nullable{System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption})">
      <summary>데이터베이스에서 속성 값이 생성되는 방식을 구성합니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하는 동일한 StringPropertyConfiguration 인스턴스입니다.</returns>
      <param name="databaseGeneratedOption">데이터베이스에서 속성 값을 생성하는 데 사용되는 패턴입니다.'null'을 설정하면 데이터베이스에서 생성된 패턴 패싯이 속성에서 제거됩니다.또한 'null'을 설정하면 런타임 동작이 'None'을 지정할 때와 동일하게 됩니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.HasMaxLength(System.Nullable{System.Int32})">
      <summary>속성이 지정된 최대 길이를 갖도록 구성합니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하는 동일한 StringPropertyConfiguration 인스턴스입니다.</returns>
      <param name="value">속성의 최대 길이입니다.'null'로 설정하면 모든 최대 길이 제한이 속성에서 제거되고 데이터베이스 열에 기본 길이가 사용됩니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.IsConcurrencyToken">
      <summary>속성이 낙관적 동시성 토큰으로 사용되도록 구성합니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하는 동일한 StringPropertyConfiguration 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.IsConcurrencyToken(System.Nullable{System.Boolean})">
      <summary>속성이 낙관적 동시성 토큰으로 사용될지 여부를 구성합니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하는 동일한 StringPropertyConfiguration 인스턴스입니다.</returns>
      <param name="concurrencyToken">속성이 동시성 토큰인지 여부를 나타내는 값입니다.'null'을 지정하면 동시성 토큰 패싯이 속성에서 제거됩니다.또한 'null'을 지정하면 런타임 동작이 'false'를 지정할 때와 동일하게 됩니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.IsFixedLength">
      <summary>속성이 고정 길이가 되도록 구성합니다.속성의 고정 길이를 설정하려면 HasMaxLength를 사용합니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하는 동일한 StringPropertyConfiguration 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.IsMaxLength">
      <summary>속성에서 데이터베이스 공급자가 지원하는 최대 길이가 허용되도록 구성합니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하는 동일한 StringPropertyConfiguration 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.IsOptional">
      <summary>속성이 선택적 속성이 되도록 구성합니다.이 속성을 저장하는 데 사용되는 데이터베이스 열은 null을 허용하게 됩니다.<see cref="T:System.string" /> 속성은 기본적으로 선택적 속성입니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하는 동일한 StringPropertyConfiguration 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.IsRequired">
      <summary>속성이 필수 속성이 되도록 구성합니다.이 속성을 저장하는 데 사용되는 데이터베이스 열은 null을 허용하지 않게 됩니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하는 동일한 StringPropertyConfiguration 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.IsUnicode">
      <summary>속성이 유니코드 문자열 내용을 지원하도록 구성합니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하는 동일한 StringPropertyConfiguration 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.IsUnicode(System.Nullable{System.Boolean})">
      <summary>속성이 유니코드 문자열 내용을 지원하는지 여부를 구성합니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하는 동일한 StringPropertyConfiguration 인스턴스입니다.</returns>
      <param name="unicode">속성이 유니코드 문자열 내용을 지원하는지 여부를 나타내는 값입니다.'null'을 지정하면 유니코드 패싯이 속성에서 제거됩니다.또한 'null'을 지정하면 런타임 동작이 'false'를 지정할 때와 동일하게 됩니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.IsVariableLength">
      <summary>속성이 가변 길이가 되도록 구성합니다.<see cref="T:System.string" /> 속성은 기본적으로 가변 길이입니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하는 동일한 StringPropertyConfiguration 인스턴스입니다.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1">
      <summary>모델의 형식에 대해 구성을 수행할 수 있도록 합니다.</summary>
      <typeparam name="TStructuralType">구성할 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Equals(System.Object)">
      <summary>지정한 개체와 현재 개체가 같은지 여부를 확인합니다.</summary>
      <returns>지정된 개체가 현재 개체와 동일하면 true이고 그렇지 않으면 false입니다.</returns>
      <param name="obj">현재 개체와 비교할 개체입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.GetHashCode">
      <summary>특정 형식에 대한 해시 함수 역할을 합니다.</summary>
      <returns>현재 개체에 대한 해시 코드입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.GetType">
      <summary>현재 인스턴스의 <see cref="T:System.Type" />을 가져옵니다.</summary>
      <returns>현재 인스턴스의 정확한 런타임 형식입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Byte[]}})">
      <summary>이 형식에 정의된 <see cref="T:System.byte[]" /> 속성을 구성합니다.</summary>
      <returns>속성을 구성하는 데 사용할 수 있는 구성 개체입니다.</returns>
      <param name="propertyExpression">구성할 속성을 나타내는 람다 식입니다.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Data.Entity.Spatial.DbGeography}})">
      <summary>이 형식에 정의된 <see cref="T:DbGeography" /> 속성을 구성합니다.</summary>
      <returns>속성을 구성하는 데 사용할 수 있는 구성 개체입니다.</returns>
      <param name="propertyExpression">구성할 속성을 나타내는 람다 식입니다.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Data.Entity.Spatial.DbGeometry}})">
      <summary>이 형식에 정의된 <see cref="T:DbGeometry" /> 속성을 구성합니다.</summary>
      <returns>속성을 구성하는 데 사용할 수 있는 구성 개체입니다.</returns>
      <param name="propertyExpression">구성할 속성을 나타내는 람다 식입니다.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.DateTime}})">
      <summary>이 형식에 정의된 <see cref="T:System.DateTime" /> 속성을 구성합니다.</summary>
      <returns>속성을 구성하는 데 사용할 수 있는 구성 개체입니다.</returns>
      <param name="propertyExpression">구성할 속성을 나타내는 람다 식입니다.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.DateTimeOffset}})">
      <summary>이 형식에 정의된 <see cref="T:System.DateTimeOffset" /> 속성을 구성합니다.</summary>
      <returns>속성을 구성하는 데 사용할 수 있는 구성 개체입니다.</returns>
      <param name="propertyExpression">구성할 속성을 나타내는 람다 식입니다.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})">
      <summary>이 형식에 정의된 <see cref="T:System.decimal" /> 속성을 구성합니다.</summary>
      <returns>속성을 구성하는 데 사용할 수 있는 구성 개체입니다.</returns>
      <param name="propertyExpression">구성할 속성을 나타내는 람다 식입니다.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.DateTime}}})">
      <summary>이 형식에 정의된 <see cref="T:System.DateTime?" /> 속성을 구성합니다.</summary>
      <returns>속성을 구성하는 데 사용할 수 있는 구성 개체입니다.</returns>
      <param name="propertyExpression">구성할 속성을 나타내는 람다 식입니다.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.DateTimeOffset}}})">
      <summary>이 형식에 정의된 <see cref="T:System.DateTimeOffset?" /> 속성을 구성합니다.</summary>
      <returns>속성을 구성하는 데 사용할 수 있는 구성 개체입니다.</returns>
      <param name="propertyExpression">구성할 속성을 나타내는 람다 식입니다.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})">
      <summary>이 형식에 정의된 <see cref="T:System.decimal?" /> 속성을 구성합니다.</summary>
      <returns>속성을 구성하는 데 사용할 수 있는 구성 개체입니다.</returns>
      <param name="propertyExpression">구성할 속성을 나타내는 람다 식입니다.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.TimeSpan}}})">
      <summary>이 형식에 정의된 <see cref="T:System.TimeSpan?" /> 속성을 구성합니다.</summary>
      <returns>속성을 구성하는 데 사용할 수 있는 구성 개체입니다.</returns>
      <param name="propertyExpression">구성할 속성을 나타내는 람다 식입니다.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property``1(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{``0}}})">
      <summary>이 형식에 정의된 <see cref="T:System.struct?" /> 속성을 구성합니다.</summary>
      <returns>속성을 구성하는 데 사용할 수 있는 구성 개체입니다.</returns>
      <param name="propertyExpression">구성할 속성을 나타내는 람다 식입니다.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <typeparam name="T">구성되는 속성의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.String}})">
      <summary>이 형식에 정의된 <see cref="T:System.string" /> 속성을 구성합니다.</summary>
      <returns>속성을 구성하는 데 사용할 수 있는 구성 개체입니다.</returns>
      <param name="propertyExpression">구성할 속성을 나타내는 람다 식입니다.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.TimeSpan}})">
      <summary>이 형식에 정의된 <see cref="T:System.TimeSpan" /> 속성을 구성합니다.</summary>
      <returns>속성을 구성하는 데 사용할 수 있는 구성 개체입니다.</returns>
      <param name="propertyExpression">구성할 속성을 나타내는 람다 식입니다.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary>이 형식에 정의된 <see cref="T:System.struct" /> 속성을 구성합니다.</summary>
      <returns>속성을 구성하는 데 사용할 수 있는 구성 개체입니다.</returns>
      <param name="propertyExpression">구성할 속성을 나타내는 람다 식입니다.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <typeparam name="T">구성되는 속성의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.ToString">
      <summary>현재 개체를 나타내는 문자열을 반환합니다.</summary>
      <returns>현재 개체를 나타내는 문자열입니다.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionConfiguration">
      <summary>모델의 엔터티 형식을 기반으로 간단한 규칙에 대해 구성이 수행될 수 있도록 합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionConfiguration.Configure(System.Action{System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration})">
      <summary>이 규칙이 적용되는 엔터티 형식의 구성을 허용합니다.</summary>
      <param name="entityConfigurationAction">
        <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration" />에 대한 구성을 수행하는 작업입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionConfiguration.Equals(System.Object)"></member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionConfiguration.GetHashCode"></member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionConfiguration.GetType">
      <summary>현재 인스턴스의 <see cref="T:System.Type" />을 가져옵니다.</summary>
      <returns>현재 인스턴스의 정확한 런타임 형식입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionConfiguration.Having``1(System.Func{System.Type,``0})">
      <summary>이후에 구성 중에 사용하기 위해 값을 캡처하는 동안 조건자를 기반으로 이 규칙이 적용되는 엔터티 형식을 필터링합니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하는 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionWithHavingConfiguration`1" /> 인스턴스입니다.</returns>
      <param name="capturingPredicate">각 엔터티 형식의 값을 캡처하는 함수입니다.이 값이 null이면 엔터티 형식이 필터링됩니다.</param>
      <typeparam name="T">캡처된 값의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionConfiguration.ToString"></member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionConfiguration.Where(System.Func{System.Type,System.Boolean})">
      <summary>조건자를 기반으로 이 규칙이 적용되는 엔터티 형식을 필터링합니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하는 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionConfiguration" /> 인스턴스입니다.</returns>
      <param name="predicate">조건에 대해 각 엔터티 형식을 테스트하는 함수입니다.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionConfiguration`1">
      <summary>지정된 공용 형식에서 상속하는 모델의 엔터티 형식을 기반으로 간단한 규칙에 대해 구성이 수행될 수 있도록 합니다.</summary>
      <typeparam name="T">이 규칙이 적용되는 엔터티 형식의 공용 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionConfiguration`1.Configure(System.Action{System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration{`0}})">
      <summary>이 규칙이 적용되는 엔터티 형식의 구성을 허용합니다.</summary>
      <param name="entityConfigurationAction">
        <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1" />에 대한 구성을 수행하는 작업입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionConfiguration`1.Equals(System.Object)"></member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionConfiguration`1.GetHashCode"></member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionConfiguration`1.GetType">
      <summary>현재 인스턴스의 <see cref="T:System.Type" />을 가져옵니다.</summary>
      <returns>현재 인스턴스의 정확한 런타임 형식입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionConfiguration`1.Having``1(System.Func{System.Type,``0})">
      <summary>이후에 구성 중에 사용하기 위해 값을 캡처하는 동안 조건자를 기반으로 이 규칙이 적용되는 엔터티 형식을 필터링합니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하는 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionWithHavingConfiguration`2" /> 인스턴스입니다.</returns>
      <param name="capturingPredicate">각 엔터티 형식의 값을 캡처하는 함수입니다.이 값이 null이면 엔터티 형식이 필터링됩니다.</param>
      <typeparam name="TValue">캡처된 값의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionConfiguration`1.ToString"></member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionConfiguration`1.Where(System.Func{System.Type,System.Boolean})">
      <summary>조건자를 기반으로 이 규칙이 적용되는 엔터티 형식을 필터링합니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하는 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionConfiguration`1" /> 인스턴스입니다.</returns>
      <param name="predicate">조건에 대해 각 엔터티 형식을 테스트하는 함수입니다.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionWithHavingConfiguration`1">
      <summary>모델의 엔터티 형식이나 캡처된 값을 기반으로 간단한 규칙에 대해 구성이 수행될 수 있도록 합니다.</summary>
      <typeparam name="T">캡처된 값의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionWithHavingConfiguration`1.Configure(System.Action{System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration,`0})">
      <summary>이 규칙이 적용되는 엔터티 형식의 구성을 허용합니다.</summary>
      <param name="entityConfigurationAction">캡처된 값을 사용하여 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration" />에 대한 구성을 수행하는 작업입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionWithHavingConfiguration`1.Equals(System.Object)"></member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionWithHavingConfiguration`1.GetHashCode"></member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionWithHavingConfiguration`1.GetType">
      <summary>현재 인스턴스의 <see cref="T:System.Type" />을 가져옵니다.</summary>
      <returns>현재 인스턴스의 정확한 런타임 형식입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionWithHavingConfiguration`1.ToString"></member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionWithHavingConfiguration`2">
      <summary>지정된 공용 형식에서 상속하는 모델의 엔터티 형식과 캡처된 값을 기반으로 간단한 규칙에 대해 구성이 수행될 수 있도록 합니다.</summary>
      <typeparam name="T">이 규칙이 적용되는 엔터티 형식의 공용 형식입니다.</typeparam>
      <typeparam name="TValue">캡처된 값의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionWithHavingConfiguration`2.Configure(System.Action{System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration{`0},`1})">
      <summary>이 규칙이 적용되는 엔터티 형식의 구성을 허용합니다.</summary>
      <param name="entityConfigurationAction">캡처된 값을 사용하여 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1" />에 대한 구성을 수행하는 작업입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionWithHavingConfiguration`2.Equals(System.Object)"></member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionWithHavingConfiguration`2.GetHashCode"></member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionWithHavingConfiguration`2.GetType">
      <summary>현재 인스턴스의 <see cref="T:System.Type" />을 가져옵니다.</summary>
      <returns>현재 인스턴스의 정확한 런타임 형식입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionWithHavingConfiguration`2.ToString"></member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1">
      <summary>엔터티를 업데이트하는 데 사용되는 저장 프로시저에 대한 구성을 수행할 수 있도록 합니다.</summary>
      <typeparam name="TEntityType">저장 프로시저를 사용하여 업데이트할 수 있는 엔터티의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.Equals(System.Object)"></member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.GetHashCode"></member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.GetType"></member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.HasName(System.String)">
      <summary>저장 프로시저의 이름을 구성합니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 구성 인스턴스입니다.</returns>
      <param name="procedureName">저장 프로시저 이름입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.HasName(System.String,System.String)">
      <summary>저장 프로시저의 이름을 구성합니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 구성 인스턴스입니다.</returns>
      <param name="procedureName">저장 프로시저 이름입니다.</param>
      <param name="schemaName">스키마 이름입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.Navigation``1(System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.ICollection{`0}}},System.Action{System.Data.Entity.ModelConfiguration.Configuration.AssociationModificationStoredProcedureConfiguration{``0}})">
      <summary>외래 키 속성이 클래스에 포함되지 않는 관계에 대한 매개 변수를 구성합니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 구성 인스턴스입니다.</returns>
      <param name="navigationPropertyExpression">관계의 탐색 속성을 나타내는 람다 식입니다.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="associationModificationStoredProcedureConfigurationAction">구성을 수행하는 람다 식입니다.</param>
      <typeparam name="TPrincipalEntityType">관계의 주 엔터티 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.Navigation``1(System.Linq.Expressions.Expression{System.Func{``0,`0}},System.Action{System.Data.Entity.ModelConfiguration.Configuration.AssociationModificationStoredProcedureConfiguration{``0}})">
      <summary>외래 키 속성이 클래스에 포함되지 않는 관계에 대한 매개 변수를 구성합니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 구성 인스턴스입니다.</returns>
      <param name="navigationPropertyExpression">관계의 탐색 속성을 나타내는 람다 식입니다.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="associationModificationStoredProcedureConfigurationAction">구성을 수행하는 람다 식입니다.</param>
      <typeparam name="TPrincipalEntityType">관계의 주 엔터티 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.Parameter(System.Linq.Expressions.Expression{System.Func{`0,System.Byte[]}},System.String)">
      <summary>이 저장 프로시저의 매개 변수를 구성합니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 구성 인스턴스입니다.</returns>
      <param name="propertyExpression">매개 변수를 구성할 속성을 나타내는 람다 식입니다.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="parameterName">매개 변수의 이름입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.Parameter(System.Linq.Expressions.Expression{System.Func{`0,System.Byte[]}},System.String,System.String)">
      <summary>이 저장 프로시저의 매개 변수를 구성합니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 구성 인스턴스입니다.</returns>
      <param name="propertyExpression">매개 변수를 구성할 속성을 나타내는 람다 식입니다.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="currentValueParameterName">현재 값 매개 변수 이름입니다.</param>
      <param name="originalValueParameterName">원래 값 매개 변수 이름입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.Parameter(System.Linq.Expressions.Expression{System.Func{`0,System.Data.Entity.Spatial.DbGeography}},System.String)">
      <summary>이 저장 프로시저의 매개 변수를 구성합니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 구성 인스턴스입니다.</returns>
      <param name="propertyExpression">매개 변수를 구성할 속성을 나타내는 람다 식입니다.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="parameterName">매개 변수의 이름입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.Parameter(System.Linq.Expressions.Expression{System.Func{`0,System.Data.Entity.Spatial.DbGeography}},System.String,System.String)">
      <summary>이 저장 프로시저의 매개 변수를 구성합니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 구성 인스턴스입니다.</returns>
      <param name="propertyExpression">매개 변수를 구성할 속성을 나타내는 람다 식입니다.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="currentValueParameterName">현재 값 매개 변수 이름입니다.</param>
      <param name="originalValueParameterName">원래 값 매개 변수 이름입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.Parameter(System.Linq.Expressions.Expression{System.Func{`0,System.Data.Entity.Spatial.DbGeometry}},System.String)">
      <summary>이 저장 프로시저의 매개 변수를 구성합니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 구성 인스턴스입니다.</returns>
      <param name="propertyExpression">매개 변수를 구성할 속성을 나타내는 람다 식입니다.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="parameterName">매개 변수의 이름입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.Parameter(System.Linq.Expressions.Expression{System.Func{`0,System.Data.Entity.Spatial.DbGeometry}},System.String,System.String)">
      <summary>이 저장 프로시저의 매개 변수를 구성합니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 구성 인스턴스입니다.</returns>
      <param name="propertyExpression">매개 변수를 구성할 속성을 나타내는 람다 식입니다.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="currentValueParameterName">현재 값 매개 변수 이름입니다.</param>
      <param name="originalValueParameterName">원래 값 매개 변수 이름입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.Parameter``1(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{``0}}},System.String)">
      <summary>이 저장 프로시저의 매개 변수를 구성합니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 구성 인스턴스입니다.</returns>
      <param name="propertyExpression">매개 변수를 구성할 속성을 나타내는 람다 식입니다.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="parameterName">매개 변수의 이름입니다.</param>
      <typeparam name="TProperty">구성할 속성의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.Parameter``1(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{``0}}},System.String,System.String)">
      <summary>이 저장 프로시저의 매개 변수를 구성합니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 구성 인스턴스입니다.</returns>
      <param name="propertyExpression">매개 변수를 구성할 속성을 나타내는 람다 식입니다.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="currentValueParameterName">현재 값 매개 변수 이름입니다.</param>
      <param name="originalValueParameterName">원래 값 매개 변수 이름입니다.</param>
      <typeparam name="TProperty">구성할 속성의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.Parameter(System.Linq.Expressions.Expression{System.Func{`0,System.String}},System.String)">
      <summary>이 저장 프로시저의 매개 변수를 구성합니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 구성 인스턴스입니다.</returns>
      <param name="propertyExpression">매개 변수를 구성할 속성을 나타내는 람다 식입니다.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="parameterName">매개 변수의 이름입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.Parameter(System.Linq.Expressions.Expression{System.Func{`0,System.String}},System.String,System.String)">
      <summary>이 저장 프로시저의 매개 변수를 구성합니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 구성 인스턴스입니다.</returns>
      <param name="propertyExpression">매개 변수를 구성할 속성을 나타내는 람다 식입니다.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="currentValueParameterName">현재 값 매개 변수 이름입니다.</param>
      <param name="originalValueParameterName">원래 값 매개 변수 이름입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.Parameter``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String)">
      <summary>이 저장 프로시저의 매개 변수를 구성합니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 구성 인스턴스입니다.</returns>
      <param name="propertyExpression">매개 변수를 구성할 속성을 나타내는 람다 식입니다.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="parameterName">매개 변수의 이름입니다.</param>
      <typeparam name="TProperty">구성할 속성의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.Parameter``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String,System.String)">
      <summary>이 저장 프로시저의 매개 변수를 구성합니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 구성 인스턴스입니다.</returns>
      <param name="propertyExpression">매개 변수를 구성할 속성을 나타내는 람다 식입니다.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="currentValueParameterName">현재 값 매개 변수 이름입니다.</param>
      <param name="originalValueParameterName">원래 값 매개 변수 이름입니다.</param>
      <typeparam name="TProperty">구성할 속성의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.Result(System.Linq.Expressions.Expression{System.Func{`0,System.Byte[]}},System.String)">
      <summary>속성에 매핑할 이 저장 프로시저에 대한 결과의 열을 구성합니다.데이터베이스에서 생성된 열에 사용됩니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 구성 인스턴스입니다.</returns>
      <param name="propertyExpression">결과를 구성할 속성을 나타내는 람다 식입니다.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="columnName">결과 열의 이름입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.Result(System.Linq.Expressions.Expression{System.Func{`0,System.Data.Entity.Spatial.DbGeography}},System.String)">
      <summary>속성에 매핑할 이 저장 프로시저에 대한 결과의 열을 구성합니다.데이터베이스에서 생성된 열에 사용됩니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 구성 인스턴스입니다.</returns>
      <param name="propertyExpression">결과를 구성할 속성을 나타내는 람다 식입니다.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="columnName">결과 열의 이름입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.Result(System.Linq.Expressions.Expression{System.Func{`0,System.Data.Entity.Spatial.DbGeometry}},System.String)">
      <summary>속성에 매핑할 이 저장 프로시저에 대한 결과의 열을 구성합니다.데이터베이스에서 생성된 열에 사용됩니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 구성 인스턴스입니다.</returns>
      <param name="propertyExpression">결과를 구성할 속성을 나타내는 람다 식입니다.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="columnName">결과 열의 이름입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.Result``1(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{``0}}},System.String)">
      <summary>속성에 매핑할 이 저장 프로시저에 대한 결과의 열을 구성합니다.데이터베이스에서 생성된 열에 사용됩니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 구성 인스턴스입니다.</returns>
      <param name="propertyExpression">결과를 구성할 속성을 나타내는 람다 식입니다.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="columnName">결과 열의 이름입니다.</param>
      <typeparam name="TProperty">구성할 속성의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.Result(System.Linq.Expressions.Expression{System.Func{`0,System.String}},System.String)">
      <summary>속성에 매핑할 이 저장 프로시저에 대한 결과의 열을 구성합니다.데이터베이스에서 생성된 열에 사용됩니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 구성 인스턴스입니다.</returns>
      <param name="propertyExpression">결과를 구성할 속성을 나타내는 람다 식입니다.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="columnName">결과 열의 이름입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.Result``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String)">
      <summary>속성에 매핑할 이 저장 프로시저에 대한 결과의 열을 구성합니다.데이터베이스에서 생성된 열에 사용됩니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 구성 인스턴스입니다.</returns>
      <param name="propertyExpression">결과를 구성할 속성을 나타내는 람다 식입니다.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="columnName">결과 열의 이름입니다.</param>
      <typeparam name="TProperty">구성할 속성의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.RowsAffectedParameter(System.String)">
      <summary>이 저장 프로시저의 영향을 받는 행을 반환하는 출력 매개 변수를 구성합니다.</summary>
      <returns>여러 호출을 연결할 수 있도록 하기 위한 동일한 구성 인스턴스입니다.</returns>
      <param name="parameterName">매개 변수의 이름입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.ToString"></member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ValueConditionConfiguration">
      <summary>상속 계층 구조의 형식을 구분하는 데 사용되는 판별자 열을 구성합니다.이 구성 기능은 Code First Fluent API를 통해 사용할 수 있습니다. 자세한 내용은 <see cref="T:System.Data.Entity.DbModelBuilder" />를 참조하십시오.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ValueConditionConfiguration.Equals(System.Object)">
      <summary>지정한 개체와 현재 개체가 같은지 여부를 확인합니다.</summary>
      <returns>개체가 같으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="obj">개체입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ValueConditionConfiguration.GetHashCode">
      <summary>특정 형식에 대한 해시 함수 역할을 합니다.</summary>
      <returns>현재 형식에 대한 해시 코드입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ValueConditionConfiguration.GetType">
      <summary>현재 인스턴스의 <see cref="T:System.Type" />을 가져옵니다.</summary>
      <returns>현재 인스턴스의 정확한 런타임 형식입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ValueConditionConfiguration.HasValue``1(System.Nullable{``0})">
      <summary>상속 계층 구조의 다른 형식에서 구성되는 엔터티 형식을 식별하는 데 사용되는 판별자 값을 구성합니다.</summary>
      <returns>판별자 값을 저장하는 데 사용되는 열을 구성하기 위한 구성 개체입니다.</returns>
      <param name="value">엔터티 형식을 식별하는 데 사용할 값입니다.</param>
      <typeparam name="T">판별자 값의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ValueConditionConfiguration.HasValue(System.String)">
      <summary>상속 계층 구조의 다른 형식에서 구성되는 엔터티 형식을 식별하는 데 사용되는 판별자 값을 구성합니다.</summary>
      <returns>판별자 값을 저장하는 데 사용되는 열을 구성하기 위한 구성 개체입니다.</returns>
      <param name="value">엔터티 형식을 식별하는 데 사용할 값입니다.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ValueConditionConfiguration.HasValue``1(``0)">
      <summary>상속 계층 구조의 다른 형식에서 구성되는 엔터티 형식을 식별하는 데 사용되는 판별자 값을 구성합니다.</summary>
      <returns>판별자 값을 저장하는 데 사용되는 열을 구성하기 위한 구성 개체입니다.</returns>
      <param name="value">엔터티 형식을 식별하는 데 사용할 값입니다.</param>
      <typeparam name="T">판별자 값의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ValueConditionConfiguration.ToString">
      <summary>현재 개체를 나타내는 문자열을 반환합니다.</summary>
      <returns>현재 개체를 나타내는 문자열입니다.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.AssociationInverseDiscoveryConvention">
      <summary>관련 형식 사이에 한 쌍의 탐색 속성만 있는 경우 서로 반대되는 탐색 속성을 검색하기 위한 규칙입니다.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.AssociationInverseDiscoveryConvention.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.AssociationInverseDiscoveryConvention" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.AssociationInverseDiscoveryConvention.Apply(System.Data.Entity.Core.Metadata.Edm.EdmModel,System.Data.Entity.Infrastructure.DbModel)"></member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.ColumnAttributeConvention">
      <summary>모델의 속성에 있는 <see cref="T:System.ComponentModel.DataAnnotations.Schema.ColumnAttribute" /> 인스턴스를 처리하기 위한 규칙입니다.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ColumnAttributeConvention.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.ColumnAttributeConvention" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ColumnAttributeConvention.Apply(System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration,System.ComponentModel.DataAnnotations.Schema.ColumnAttribute)"></member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.ColumnOrderingConvention">
      <summary>
        <see cref="T:System.ComponentModel.DataAnnotations.ColumnAttribute" /> 또는 <see cref="T:System.Data.Entity.DbModelBuilder" /> API를 통해 지정된 열 순서를 적용하기 위한 규칙입니다.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ColumnOrderingConvention.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.ColumnOrderingConvention" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ColumnOrderingConvention.Apply(System.Data.Entity.Core.Metadata.Edm.EntityType,System.Data.Entity.Infrastructure.DbModel)"></member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ColumnOrderingConvention.ValidateColumns(System.Data.Entity.Core.Metadata.Edm.EntityType,System.String)">
      <summary>열에 제공된 순서 구성의 유효성을 검사합니다.이 기본 구현은 작동하지 않습니다.</summary>
      <param name="table">열이 속하는 테이블의 이름입니다.</param>
      <param name="tableName">테이블의 정의입니다.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.ColumnOrderingConventionStrict">
      <summary>
        <see cref="T:System.ComponentModel.DataAnnotations.ColumnAttribute" /> 또는 <see cref="T:System.Data.Entity.DbModelBuilder" /> API를 통해 지정된 열 순서를 적용하기 위한 규칙입니다.이 규칙은 중복 구성된 열 순서가 감지되는 경우 예외를 throw합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ColumnOrderingConventionStrict.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.ColumnOrderingConventionStrict" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ColumnOrderingConventionStrict.ValidateColumns(System.Data.Entity.Core.Metadata.Edm.EntityType,System.String)">
      <summary>두 열에 동일한 서수가 제공되지 않도록 하기 위해 열에 제공되는 순서 구성의 유효성을 검사합니다.</summary>
      <param name="table">열이 속하는 테이블의 이름입니다.</param>
      <param name="tableName">테이블의 정의입니다.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.ComplexTypeAttributeConvention">
      <summary>모델의 형식에 있는 <see cref="T:System.ComponentModel.DataAnnotations.Schema.ComplexTypeAttribute" /> 인스턴스를 처리하기 위한 규칙입니다.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ComplexTypeAttributeConvention.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.ComplexTypeAttributeConvention" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ComplexTypeAttributeConvention.Apply(System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration,System.ComponentModel.DataAnnotations.Schema.ComplexTypeAttribute)"></member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.ComplexTypeDiscoveryConvention">
      <summary>기본 키, 매핑된 기본 형식 및 탐색 속성이 없는 형식을 복합 형식으로 구성하기 위한 규칙입니다.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ComplexTypeDiscoveryConvention.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.ComplexTypeDiscoveryConvention" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ComplexTypeDiscoveryConvention.Apply(System.Data.Entity.Core.Metadata.Edm.EdmModel,System.Data.Entity.Infrastructure.DbModel)"></member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.ConcurrencyCheckAttributeConvention">
      <summary>모델의 속성에 있는 <see cref="T:System.ComponentModel.DataAnnotations.ConcurrencyCheckAttribute" /> 인스턴스를 처리하기 위한 규칙입니다.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ConcurrencyCheckAttributeConvention.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.ConcurrencyCheckAttributeConvention" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ConcurrencyCheckAttributeConvention.Apply(System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration,System.ComponentModel.DataAnnotations.ConcurrencyCheckAttribute)"></member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.Convention">
      <summary>구성을 재정의하지 않는 규칙입니다.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.Convention.#ctor">
      <summary>파생 클래스는 기본 생성자를 사용하여 모델 구성을 변경하는 규칙 집합을 적용할 수 있습니다.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.Convention.Properties">
      <summary>모델의 모든 속성에 적용되는 간단한 규칙의 구성을 시작합니다.</summary>
      <returns>규칙에 대한 구성 개체입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.Convention.Properties``1">
      <summary>모델에 있는 지정된 형식의 모든 기본 속성에 적용되는 간단한 규칙의 구성을 시작합니다.</summary>
      <returns>규칙에 대한 구성 개체입니다.</returns>
      <typeparam name="T">규칙이 적용될 속성의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.Convention.Types``1">
      <summary>지정된 형식에서 파생되거나 지정된 형식을 구현하는 모델의 모든 매핑된 형식에 적용되는 간단한 규칙의 구성을 시작합니다.</summary>
      <returns>규칙에 대한 구성 개체입니다.</returns>
      <typeparam name="T">이 규칙이 적용될 엔터티의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.Convention.Types">
      <summary>모델의 모든 매핑된 형식에 적용되는 간단한 규칙의 구성을 시작합니다.</summary>
      <returns>규칙에 대한 구성 개체입니다.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.DatabaseGeneratedAttributeConvention">
      <summary>모델의 속성에 있는 <see cref="T:System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedAttribute" /> 인스턴스를 처리하기 위한 규칙입니다.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.DatabaseGeneratedAttributeConvention.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.DatabaseGeneratedAttributeConvention" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.DatabaseGeneratedAttributeConvention.Apply(System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration,System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedAttribute)"></member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.DecimalPropertyConvention">
      <summary>10진수 속성의 전체 자릿수와 소수 자릿수를 각각 18과 2로 설정하기 위한 규칙입니다.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.DecimalPropertyConvention.#ctor">
      <summary>기본 전체 자릿수 및 소수 자릿수를 사용하여 <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.DecimalPropertyConvention" />의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.DecimalPropertyConvention.#ctor(System.Byte,System.Byte)">
      <summary>지정된 전체 자릿수 및 소수 자릿수를 사용하여 <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.DecimalPropertyConvention" />의 새 인스턴스를 초기화합니다.</summary>
      <param name="precision">전체 자릿수</param>
      <param name="scale">소수 자릿수</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.DecimalPropertyConvention.Apply(System.Data.Entity.Core.Metadata.Edm.EdmProperty,System.Data.Entity.Infrastructure.DbModel)"></member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.DeclaredPropertyOrderingConvention">
      <summary>기본 키 속성이 첫 번째로 나타나도록 위치를 이동하기 위한 규칙입니다.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.DeclaredPropertyOrderingConvention.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.DeclaredPropertyOrderingConvention" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.DeclaredPropertyOrderingConvention.Apply(System.Data.Entity.Core.Metadata.Edm.EntityType,System.Data.Entity.Infrastructure.DbModel)"></member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyAssociationMultiplicityConvention">
      <summary>외래 키 속성의 CLR null 허용 여부를 기준으로 선택적 관계와 필수 관계를 구분하기 위한 규칙입니다.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyAssociationMultiplicityConvention.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyAssociationMultiplicityConvention" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyAssociationMultiplicityConvention.Apply(System.Data.Entity.Core.Metadata.Edm.AssociationType,System.Data.Entity.Infrastructure.DbModel)"></member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyDiscoveryConvention">
      <summary>외래 키 속성을 검색하는 규칙에 대한 기본 클래스입니다.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyDiscoveryConvention.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyDiscoveryConvention" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyDiscoveryConvention.Apply(System.Data.Entity.Core.Metadata.Edm.AssociationType,System.Data.Entity.Infrastructure.DbModel)"></member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyDiscoveryConvention.MatchDependentKeyProperty(System.Data.Entity.Core.Metadata.Edm.AssociationType,System.Data.Entity.Core.Metadata.Edm.AssociationEndMember,System.Data.Entity.Core.Metadata.Edm.EdmProperty,System.Data.Entity.Core.Metadata.Edm.EntityType,System.Data.Entity.Core.Metadata.Edm.EdmProperty)">
      <summary>재정의되면 <paramref name="dependentProperty" />가 외래 키의 일부여야 하는 경우 true를 반환합니다.</summary>
      <returns>dependentProperty가 외래 키의 일부여야 하면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="associationType">구성될 연결 형식입니다.</param>
      <param name="dependentAssociationEnd">종속 끝입니다.</param>
      <param name="dependentProperty">종속 끝의 후보 속성입니다.</param>
      <param name="principalEntityType">주 끝 엔터티 형식입니다.</param>
      <param name="principalKeyProperty">외래 키의 후보 대상인 주 끝의 키 속성입니다.</param>
    </member>
    <member name="P:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyDiscoveryConvention.SupportsMultipleAssociations">
      <summary>규칙이 서로 간에 여러 연결이 정의되어 있는 엔터티 형식의 쌍을 지원하는 경우 true를 반환합니다.</summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyNavigationPropertyAttributeConvention">
      <summary>모델의 탐색 속성에 있는 <see cref="T:System.ComponentModel.DataAnnotations.Schema.ForeignKeyAttribute" /> 인스턴스를 처리하기 위한 규칙입니다.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyNavigationPropertyAttributeConvention.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyNavigationPropertyAttributeConvention" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyNavigationPropertyAttributeConvention.Apply(System.Data.Entity.Core.Metadata.Edm.NavigationProperty,System.Data.Entity.Infrastructure.DbModel)"></member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyPrimitivePropertyAttributeConvention">
      <summary>모델의 외래 키 속성에 있는 <see cref="T:System.ComponentModel.DataAnnotations.Schema.ForeignKeyAttribute" /> 인스턴스를 처리하기 위한 규칙입니다.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyPrimitivePropertyAttributeConvention.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyPrimitivePropertyAttributeConvention" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyPrimitivePropertyAttributeConvention.Apply(System.Reflection.PropertyInfo,System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration,System.ComponentModel.DataAnnotations.Schema.ForeignKeyAttribute)"></member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.IConceptualModelConvention`1">
      <summary>모델을 만든 후 모델의 개념 섹션에 적용되는 규칙입니다.</summary>
      <typeparam name="T">이 규칙이 적용되는 메타데이터 항목의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.IConceptualModelConvention`1.Apply(`0,System.Data.Entity.Infrastructure.DbModel)">
      <summary>모델의 항목에 이 규칙을 적용합니다.</summary>
      <param name="item">규칙을 적용할 항목입니다.</param>
      <param name="model">모델입니다.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.IConvention">
      <summary>
        <see cref="T:System.Data.Entity.DbModelBuilder" /> 인스턴스에서 추가하거나 제거할 수 있는 규칙을 식별합니다.</summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.IdKeyDiscoveryConvention">
      <summary>기본 키 속성을 검색하기 위한 규칙입니다.인식되는 명명 패턴은 우선 순위별로 다음과 같습니다. 1. 'Id' 2.[type name]Id 기본 키 검색 시 대/소문자는 구분되지 않습니다.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.IdKeyDiscoveryConvention.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.IdKeyDiscoveryConvention" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.IdKeyDiscoveryConvention.MatchKeyProperty(System.Data.Entity.Core.Metadata.Edm.EntityType,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.EdmProperty})">
      <summary>
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmProperty" /> 클래스를 일치시키기 위한 규칙입니다.</summary>
      <returns>일치시킬 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmProperty" /> 클래스입니다.</returns>
      <param name="entityType">엔터티 형식입니다.</param>
      <param name="primitiveProperties">기본 속성의 컬렉션입니다.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.InversePropertyAttributeConvention">
      <summary>모델의 속성에 있는 <see cref="T:System.ComponentModel.DataAnnotations.Schema.InversePropertyAttribute" /> 인스턴스를 처리하기 위한 규칙입니다.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.InversePropertyAttributeConvention.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.InversePropertyAttributeConvention" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.InversePropertyAttributeConvention.Apply(System.Reflection.PropertyInfo,System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration,System.ComponentModel.DataAnnotations.Schema.InversePropertyAttribute)"></member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.IStoreModelConvention`1">
      <summary>모델을 만든 후 모델의 데이터베이스 섹션에 적용되는 규칙입니다.</summary>
      <typeparam name="T">이 규칙이 적용되는 메타데이터 항목의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.IStoreModelConvention`1.Apply(`0,System.Data.Entity.Infrastructure.DbModel)">
      <summary>모델의 항목에 이 규칙을 적용합니다.</summary>
      <param name="item">규칙을 적용할 항목입니다.</param>
      <param name="model">모델입니다.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.KeyAttributeConvention">
      <summary>모델의 속성에 있는 <see cref="T:System.ComponentModel.DataAnnotations.KeyAttribute" /> 인스턴스를 처리하기 위한 규칙입니다.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.KeyAttributeConvention.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.KeyAttributeConvention" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.KeyDiscoveryConvention">
      <summary>기본 키 속성을 검색하는 규칙에 대한 기본 클래스입니다.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.KeyDiscoveryConvention.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.KeyDiscoveryConvention" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.KeyDiscoveryConvention.Apply(System.Data.Entity.Core.Metadata.Edm.EntityType,System.Data.Entity.Infrastructure.DbModel)"></member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.KeyDiscoveryConvention.MatchKeyProperty(System.Data.Entity.Core.Metadata.Edm.EntityType,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.EdmProperty})">
      <summary>재정의되면 기본 키의 일부가 될 속성의 하위 집합을 반환합니다.</summary>
      <returns>기본 키의 일부여야 하는 속성입니다.</returns>
      <param name="entityType">엔터티 형식입니다.</param>
      <param name="primitiveProperties">엔터티의 기본 형식입니다.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.ManyToManyCascadeDeleteConvention">
      <summary>다 대 다 관계에 관련된 두 테이블 모두에서 조인 테이블에 하위 삭제를 추가하기 위한 규칙입니다.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ManyToManyCascadeDeleteConvention.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.ManyToManyCascadeDeleteConvention" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.MappingInheritedPropertiesSupportConvention">
      <summary>상속 속성을 매핑할 때 잘못된/지원되지 않는 매핑이 만들어지지 않도록 확인하기 위한 규칙입니다.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.MappingInheritedPropertiesSupportConvention.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.MappingInheritedPropertiesSupportConvention" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.MaxLengthAttributeConvention">
      <summary>모델의 속성에 있는 <see cref="T:System.ComponentModel.DataAnnotations.MaxLengthAttribute" /> 인스턴스를 처리하기 위한 규칙입니다.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.MaxLengthAttributeConvention.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.MaxLengthAttributeConvention" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.MaxLengthAttributeConvention.Apply(System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration,System.ComponentModel.DataAnnotations.MaxLengthAttribute)"></member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.NavigationPropertyNameForeignKeyDiscoveryConvention">
      <summary>종속 탐색 속성 이름과 주 형식 기본 키 속성 이름의 조합이 이름으로 사용된 외래 키 속성을 검색하기 위한 규칙입니다.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.NavigationPropertyNameForeignKeyDiscoveryConvention.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.NavigationPropertyNameForeignKeyDiscoveryConvention" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.NavigationPropertyNameForeignKeyDiscoveryConvention.MatchDependentKeyProperty(System.Data.Entity.Core.Metadata.Edm.AssociationType,System.Data.Entity.Core.Metadata.Edm.AssociationEndMember,System.Data.Entity.Core.Metadata.Edm.EdmProperty,System.Data.Entity.Core.Metadata.Edm.EntityType,System.Data.Entity.Core.Metadata.Edm.EdmProperty)">
      <summary>종속 엔터티 모델의 키와 일치합니다.</summary>
      <returns>
        <see cref="T:System.Boolean" />을 반환합니다.</returns>
      <param name="associationType">연결 형식 메타데이터 개체입니다.</param>
      <param name="dependentAssociationEnd">종속 연결의 끝입니다.</param>
      <param name="dependentProperty">종속 속성입니다.</param>
      <param name="principalEntityType">주 엔터티 형식입니다.</param>
      <param name="principalKeyProperty">주 키 속성입니다.</param>
    </member>
    <member name="P:System.Data.Entity.ModelConfiguration.Conventions.NavigationPropertyNameForeignKeyDiscoveryConvention.SupportsMultipleAssociations">
      <summary>규칙이 여러 연결을 지원하는지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
      <returns>규칙이 여러 연결을 지원하면 true이고, 그렇지 않으면 false입니다.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.NotMappedPropertyAttributeConvention">
      <summary>모델의 속성에 있는 <see cref="T:System.ComponentModel.DataAnnotations.Schema.NotMappedAttribute" /> 인스턴스를 처리하기 위한 규칙입니다.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.NotMappedPropertyAttributeConvention.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.NotMappedPropertyAttributeConvention" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.NotMappedPropertyAttributeConvention.Apply(System.Reflection.PropertyInfo,System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration,System.ComponentModel.DataAnnotations.Schema.NotMappedAttribute)"></member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.NotMappedTypeAttributeConvention">
      <summary>모델의 형식에 있는 <see cref="T:System.ComponentModel.DataAnnotations.Schema.NotMappedAttribute" /> 인스턴스를 처리하기 위한 규칙입니다.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.NotMappedTypeAttributeConvention.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.NotMappedTypeAttributeConvention" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.NotMappedTypeAttributeConvention.Apply(System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration,System.ComponentModel.DataAnnotations.Schema.NotMappedAttribute)"></member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.OneToManyCascadeDeleteConvention">
      <summary>필수 관계에 하위 삭제를 사용하도록 설정하기 위한 규칙입니다.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.OneToManyCascadeDeleteConvention.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.OneToManyCascadeDeleteConvention" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.OneToManyCascadeDeleteConvention.Apply(System.Data.Entity.Core.Metadata.Edm.AssociationType,System.Data.Entity.Infrastructure.DbModel)"></member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.OneToOneConstraintIntroductionConvention">
      <summary>일 대 일 관계에서 종속 엔터티 형식의 기본 키를 외래 키로 구성하기 위한 규칙입니다.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.OneToOneConstraintIntroductionConvention.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.OneToOneConstraintIntroductionConvention" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.OneToOneConstraintIntroductionConvention.Apply(System.Data.Entity.Core.Metadata.Edm.AssociationType,System.Data.Entity.Infrastructure.DbModel)"></member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.PluralizingEntitySetNameConvention">
      <summary>엔터티 집합 이름을 엔터티 형식 이름의 복수화된 버전으로 설정하기 위한 규칙입니다.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.PluralizingEntitySetNameConvention.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.PluralizingEntitySetNameConvention" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.PluralizingEntitySetNameConvention.Apply(System.Data.Entity.Core.Metadata.Edm.EntitySet,System.Data.Entity.Infrastructure.DbModel)"></member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.PluralizingTableNameConvention">
      <summary>테이블 이름을 엔터티 형식 이름의 복수화된 버전으로 설정하기 위한 규칙입니다.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.PluralizingTableNameConvention.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.PluralizingTableNameConvention" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.PluralizingTableNameConvention.Apply(System.Data.Entity.Core.Metadata.Edm.EntityType,System.Data.Entity.Infrastructure.DbModel)"></member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.PrimaryKeyNameForeignKeyDiscoveryConvention">
      <summary>이름이 주 형식 기본 키 속성 이름과 일치하는 외래 키 속성을 검색하기 위한 규칙입니다.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.PrimaryKeyNameForeignKeyDiscoveryConvention.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.PrimaryKeyNameForeignKeyDiscoveryConvention" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.PrimaryKeyNameForeignKeyDiscoveryConvention.MatchDependentKeyProperty(System.Data.Entity.Core.Metadata.Edm.AssociationType,System.Data.Entity.Core.Metadata.Edm.AssociationEndMember,System.Data.Entity.Core.Metadata.Edm.EdmProperty,System.Data.Entity.Core.Metadata.Edm.EntityType,System.Data.Entity.Core.Metadata.Edm.EdmProperty)">
      <summary>규칙에 연결된 종속 키 속성을 일치시킵니다.</summary>
      <returns>일치하는 종속 키 속성입니다.</returns>
      <param name="associationType">연결 형식입니다.</param>
      <param name="dependentAssociationEnd">종속 연결 끝입니다.</param>
      <param name="dependentProperty">종속 속성입니다.</param>
      <param name="principalEntityType">주 엔터티 형식입니다.</param>
      <param name="principalKeyProperty">주 키 속성입니다.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.PrimitivePropertyAttributeConfigurationConvention`1">
      <summary>모델의 기본 속성에 있는 CLR 특성을 처리하는 규칙에 대한 기본 클래스입니다.</summary>
      <typeparam name="TAttribute">검색할 특성의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.PrimitivePropertyAttributeConfigurationConvention`1.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.PrimitivePropertyAttributeConfigurationConvention`1" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.PrimitivePropertyAttributeConfigurationConvention`1.Apply(System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration,`0)">
      <summary>TAttribute 형식의 특성이 적용된 속성에 이 규칙을 적용합니다.</summary>
      <param name="configuration">특성이 있는 속성에 대한 구성입니다.</param>
      <param name="attribute">특성입니다.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.PropertyAttributeConfigurationConvention`1">
      <summary>모델에서 형식의 속성에 있는 CLR 특성을 처리하는 규칙에 대한 기본 클래스입니다.</summary>
      <typeparam name="TAttribute">검색할 특성의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.PropertyAttributeConfigurationConvention`1.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.PropertyAttributeConfigurationConvention`1" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.PropertyAttributeConfigurationConvention`1.Apply(System.Reflection.PropertyInfo,System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration,`0)">
      <summary>TAttribute 형식의 특성이 적용된 속성에 이 규칙을 적용합니다.</summary>
      <param name="memberInfo">특성이 있는 속성에 대한 멤버 정보입니다.</param>
      <param name="configuration">속성이 포함된 클래스에 대한 구성입니다.</param>
      <param name="attribute">특성입니다.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.PropertyMaxLengthConvention">
      <summary>길이 패싯을 지원하는 형식의 속성에 대한 최대 길이를 설정하기 위한 규칙입니다.기본값은 128입니다.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.PropertyMaxLengthConvention.#ctor">
      <summary>기본 길이를 사용하여 <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.PropertyMaxLengthConvention" />의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.PropertyMaxLengthConvention.#ctor(System.Int32)">
      <summary>지정된 길이를 사용하여 <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.PropertyMaxLengthConvention" />의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.PropertyMaxLengthConvention.Apply(System.Data.Entity.Core.Metadata.Edm.AssociationType,System.Data.Entity.Infrastructure.DbModel)"></member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.PropertyMaxLengthConvention.Apply(System.Data.Entity.Core.Metadata.Edm.ComplexType,System.Data.Entity.Infrastructure.DbModel)"></member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.PropertyMaxLengthConvention.Apply(System.Data.Entity.Core.Metadata.Edm.EntityType,System.Data.Entity.Infrastructure.DbModel)"></member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.RequiredNavigationPropertyAttributeConvention">
      <summary>모델의 탐색 속성에 있는 <see cref="T:System.ComponentModel.DataAnnotations.RequiredAttribute" /> 인스턴스를 처리하기 위한 규칙입니다.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.RequiredNavigationPropertyAttributeConvention.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.RequiredNavigationPropertyAttributeConvention" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.RequiredPrimitivePropertyAttributeConvention">
      <summary>모델의 기본 속성에 있는 <see cref="T:System.ComponentModel.DataAnnotations.RequiredAttribute" /> 인스턴스를 처리하기 위한 규칙입니다.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.RequiredPrimitivePropertyAttributeConvention.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.RequiredPrimitivePropertyAttributeConvention" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.RequiredPrimitivePropertyAttributeConvention.Apply(System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration,System.ComponentModel.DataAnnotations.RequiredAttribute)"></member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.SqlCePropertyMaxLengthConvention">
      <summary>SqlCe가 공급자인 경우 해당 형식이 길이 패싯을 지원하는 속성에 대해 기본 최대 길이 4000을 설정하기 위한 규칙입니다.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.SqlCePropertyMaxLengthConvention.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.SqlCePropertyMaxLengthConvention" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.SqlCePropertyMaxLengthConvention.Apply(System.Data.Entity.Core.Metadata.Edm.ComplexType,System.Data.Entity.Infrastructure.DbModel)"></member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.SqlCePropertyMaxLengthConvention.Apply(System.Data.Entity.Core.Metadata.Edm.EntityType,System.Data.Entity.Infrastructure.DbModel)"></member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.StoreGeneratedIdentityKeyConvention">
      <summary>정수 기본 키가 ID가 되도록 구성하기 위한 규칙입니다.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.StoreGeneratedIdentityKeyConvention.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.StoreGeneratedIdentityKeyConvention" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.StoreGeneratedIdentityKeyConvention.Apply(System.Data.Entity.Core.Metadata.Edm.EntityType,System.Data.Entity.Infrastructure.DbModel)"></member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.StringLengthAttributeConvention">
      <summary>모델의 속성에 있는 <see cref="T:System.ComponentModel.DataAnnotations.StringLengthAttribute" /> 인스턴스를 처리하기 위한 규칙입니다.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.StringLengthAttributeConvention.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.StringLengthAttributeConvention" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.StringLengthAttributeConvention.Apply(System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration,System.ComponentModel.DataAnnotations.StringLengthAttribute)"></member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.TableAttributeConvention">
      <summary>모델의 형식에 있는 <see cref="T:System.ComponentModel.DataAnnotations.Schema.TableAttribute" /> 인스턴스를 처리하기 위한 규칙입니다.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.TableAttributeConvention.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.TableAttributeConvention" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.TableAttributeConvention.Apply(System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration,System.ComponentModel.DataAnnotations.Schema.TableAttribute)"></member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.TimestampAttributeConvention">
      <summary>모델의 속성에 있는 <see cref="T:System.ComponentModel.DataAnnotations.TimestampAttribute" /> 인스턴스를 처리하기 위한 규칙입니다.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.TimestampAttributeConvention.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.TimestampAttributeConvention" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.TimestampAttributeConvention.Apply(System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration,System.ComponentModel.DataAnnotations.TimestampAttribute)"></member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.TypeAttributeConfigurationConvention`1">
      <summary>모델에 있는 CLR 특성을 처리하는 규칙에 대한 기본 클래스입니다.</summary>
      <typeparam name="TAttribute">검색할 특성의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.TypeAttributeConfigurationConvention`1.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.TypeAttributeConfigurationConvention`1" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.TypeAttributeConfigurationConvention`1.Apply(System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration,`0)">
      <summary>TAttribute 형식의 특성이 적용된 클래스에 이 규칙을 적용합니다.</summary>
      <param name="configuration">속성이 포함된 클래스에 대한 구성입니다.</param>
      <param name="attribute">특성입니다.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.TypeNameForeignKeyDiscoveryConvention">
      <summary>주 형식 이름과 주 형식 기본 키 속성 이름의 조합이 이름으로 사용된 외래 키 속성을 검색하기 위한 규칙입니다.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.TypeNameForeignKeyDiscoveryConvention.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.TypeNameForeignKeyDiscoveryConvention" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.TypeNameForeignKeyDiscoveryConvention.MatchDependentKeyProperty(System.Data.Entity.Core.Metadata.Edm.AssociationType,System.Data.Entity.Core.Metadata.Edm.AssociationEndMember,System.Data.Entity.Core.Metadata.Edm.EdmProperty,System.Data.Entity.Core.Metadata.Edm.EntityType,System.Data.Entity.Core.Metadata.Edm.EdmProperty)">
      <summary>종속 키의 속성이 현재 키와 일치하는지 여부를 확인합니다.</summary>
      <returns>종속 키의 속성이 현재 키와 일치하면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="associationType">연결 형식입니다.</param>
      <param name="dependentAssociationEnd">끝의 종속 연결입니다.</param>
      <param name="dependentProperty">종속 속성입니다.</param>
      <param name="principalEntityType">주 엔터티 형식입니다.</param>
      <param name="principalKeyProperty">주 키 속성입니다.</param>
    </member>
    <member name="T:System.Data.Entity.Spatial.DbGeography">
      <summary>측지(둥근 지구) 좌표계의 데이터를 나타냅니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeography.Area">
      <summary>이 DbGeography 값의 영역을 나타내는 null 허용 double 값을 가져옵니다. 표면을 나타내지 않는 경우 이 값은 null일 수 있습니다.</summary>
      <returns>이 DbGeography 값의 영역을 나타내는 null 허용 double 값입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.AsBinary">
      <summary>이 DbGeography 값의 잘 알려진 이진 표현을 생성합니다.</summary>
      <returns>이 DbGeography 값의 잘 알려진 이진 표현입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.AsGml">
      <summary>이 DbGeography 값의 GML(Geography Markup Language) 표현을 생성합니다.</summary>
      <returns>이 DbGeography 값의 GML 표현을 포함하는 문자열입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.AsText">
      <summary>이 DbGeography 값의 잘 알려진 텍스트 표현을 생성합니다.점의 경도 및 위도만 포함합니다.</summary>
      <returns>이 DbGeography 값의 잘 알려진 텍스트 표현을 포함하는 문자열입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.Buffer(System.Nullable{System.Double})">
      <summary>모든 점의 합집합을 나타내는 지리 개체를 반환합니다. 지리 인스턴스에서 이러한 점의 거리는 지정한 값보다 작거나 같아야 합니다.</summary>
      <returns>모든 점의 합집합을 나타내는 지리 개체입니다.</returns>
      <param name="distance">거리입니다.</param>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeography.CoordinateSystemId">
      <summary>좌표계에 연결된 식별자를 가져옵니다.</summary>
      <returns>좌표계에 연결된 식별자입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeography.DefaultCoordinateSystemId">
      <summary>지리 값(WGS 84)에 대한 기본 SRID(좌표계 ID)를 가져옵니다.</summary>
      <returns>지리 값(WGS 84)에 대한 기본 SRID(좌표계 ID)입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.Difference(System.Data.Entity.Spatial.DbGeography)">
      <summary>이 DbGeography 값과 다른 DbGeography 값의 차이를 계산합니다.</summary>
      <returns>이 지리 값과 other의 차이를 나타내는 새 DbGeography 값입니다.</returns>
      <param name="other">이 값의 차이를 계산해야 하는 지리 값입니다.</param>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeography.Dimension">
      <summary>지정된 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 값의 크기를 가져오거나, 값이 컬렉션인 경우에는 가장 큰 요소 크기를 가져옵니다.</summary>
      <returns>지정된 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 값의 크기입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.Disjoint(System.Data.Entity.Spatial.DbGeography)">
      <summary>이 DbGeography가 지정된 DbGeography 인수와 공간적으로 분리되어 있는지 여부를 확인합니다.</summary>
      <returns>other가 이 지리 값과 분리되어 있으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="other">분리되어 있는지 확인하기 위해 이 지리 값과 비교해야 하는 지리 값입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.Distance(System.Data.Entity.Spatial.DbGeography)">
      <summary>이 DbGeography 값 및 다른 DbGeography 값에서 가장 가까운 점 사이의 거리를 계산합니다.</summary>
      <returns>이 지리 값 및 other에서 가장 가까운 두 점 사이의 거리를 지정하는 double 값입니다.</returns>
      <param name="other">이 값에서 거리를 계산해야 하는 지리 값입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.ElementAt(System.Int32)">
      <summary>지리 컬렉션을 나타내는 경우 지정된 위치에서 이 DbGeography 값의 요소를 반환합니다.&amp;amp;lt;param name="index"&amp;amp;gt;요소를 가져와야 하는 이 지리 값 내의 위치입니다.&amp;amp;lt;/param&amp;amp;gt;&amp;amp;lt;returns&amp;amp;gt;이 지리 값이 다른 지리 값의 컬렉션을 나타내면 지정된 위치에 있는 이 지리 값의 요소이고, 그렇지 않으면 null입니다.&amp;amp;lt;/returns&amp;amp;gt;</summary>
      <returns>특정 위치에 있는 이 DbGeography 값의 요소입니다.</returns>
      <param name="index">인덱스입니다.</param>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeography.ElementCount">
      <summary>이 DbGeography 값이 지리 컬렉션을 나타내는 경우 해당 값의 요소 수를 가져옵니다.&amp;amp;lt;returns&amp;amp;gt;이 지리 값이 다른 지리 값의 컬렉션을 나타내면 이 지리 값의 요소 수이고, 그렇지 않으면 null입니다.&amp;amp;lt;/returns&amp;amp;gt;</summary>
      <returns>이 DbGeography 값의 요소 수입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeography.Elevation">
      <summary>이 DbGeography 값이 점을 나타내는 경우 이 DbGeography 값의 고도(Z 좌표)를 가져옵니다.&amp;amp;lt;returns&amp;amp;gt;이 지리 값이 점을 나타내면 이 지리 값의 고도(Z 좌표) 값이고, 그렇지 않으면 null입니다.&amp;amp;lt;/returns&amp;amp;gt;</summary>
      <returns>이 DbGeography 값의 고도(Z 좌표)입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeography.EndPoint">
      <summary>이 DbGeography 값이 곡선을 나타내지 않는 경우 null일 수 있는, 이 값의 시작점을 나타내는 DbGeography 값을 가져옵니다.</summary>
      <returns>이 값의 시작점을 나타내는 DbGeography 값입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.FromBinary(System.Byte[])">
      <summary>지정된 잘 알려진 이진 값을 기반으로 새 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 값을 만듭니다.</summary>
      <returns>기본 지리 SRID(좌표계 식별자)(<see cref="P:System.Data.Entity.Spatial.DbGeography.DefaultCoordinateSystemId" />)를 사용하여 잘 알려진 이진 값으로 정의된 새 DbGeography 값입니다.</returns>
      <param name="wellKnownBinary">지리 값의 잘 알려진 이진 표현을 포함하는 바이트 배열입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.FromBinary(System.Byte[],System.Int32)">
      <summary>지정된 잘 알려진 이진 값과 SRID(좌표계 식별자)를 기반으로 새 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 값을 만듭니다.</summary>
      <returns>지정된 좌표계 식별자를 사용하여 잘 알려진 이진 값으로 정의된 새 DbGeography 값입니다.</returns>
      <param name="wellKnownBinary">지리 값의 잘 알려진 이진 표현을 포함하는 바이트 배열입니다.</param>
      <param name="coordinateSystemId">새 DbGeography 값을 사용해야 하는 좌표계의 식별자입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.FromGml(System.String)">
      <summary>지정된 GML(Geography Markup Language) 값을 기반으로 새 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 값을 만듭니다.</summary>
      <returns>기본 지리 SRID(좌표계 식별자)(<see cref="P:System.Data.Entity.Spatial.DbGeography.DefaultCoordinateSystemId" />)를 사용하여 GML 값으로 정의된 새 DbGeography 값입니다.</returns>
      <param name="geographyMarkup">지리 값의 GML(Geography Markup Language) 표현을 포함하는 문자열입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.FromGml(System.String,System.Int32)">
      <summary>지정된 GML(Geography Markup Language) 값과 SRID(좌표계 식별자)를 기반으로 새 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 값을 만듭니다.</summary>
      <returns>지정된 좌표계 식별자를 사용하여 GML 값으로 정의된 새 DbGeography 값입니다.</returns>
      <param name="geographyMarkup">지리 값의 GML(Geography Markup Language) 표현을 포함하는 문자열입니다.</param>
      <param name="coordinateSystemId">새 DbGeography 값을 사용해야 하는 좌표계의 식별자입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.FromText(System.String)">
      <summary>지정된 잘 알려진 텍스트 값을 기반으로 새 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 값을 만듭니다.</summary>
      <returns>기본 지리 SRID(좌표계 식별자)(<see cref="P:System.Data.Entity.Spatial.DbGeography.DefaultCoordinateSystemId" />)를 사용하여 잘 알려진 텍스트 값으로 정의된 새 DbGeography 값입니다.</returns>
      <param name="wellKnownText">지리 값의 잘 알려진 텍스트 표현을 포함하는 문자열입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.FromText(System.String,System.Int32)">
      <summary>지정된 잘 알려진 텍스트 값과 SRID(좌표계 식별자)를 기반으로 새 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 값을 만듭니다.</summary>
      <returns>지정된 좌표계 식별자를 사용하여 잘 알려진 텍스트 값으로 정의된 새 DbGeography 값입니다.</returns>
      <param name="wellKnownText">지리 값의 잘 알려진 텍스트 표현을 포함하는 문자열입니다.</param>
      <param name="coordinateSystemId">새 DbGeography 값을 사용해야 하는 좌표계의 식별자입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.GeographyCollectionFromBinary(System.Byte[],System.Int32)">
      <summary>지정된 잘 알려진 이진 값과 SRID(좌표계 식별자)를 기반으로 새 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 컬렉션 값을 만듭니다.</summary>
      <returns>지정된 좌표계 식별자를 사용하여 잘 알려진 이진 값으로 정의된 새 DbGeography 값입니다.</returns>
      <param name="geographyCollectionWellKnownBinary">지리 값의 잘 알려진 이진 표현을 포함하는 바이트 배열입니다.</param>
      <param name="coordinateSystemId">새 DbGeography 값을 사용해야 하는 좌표계의 식별자입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.GeographyCollectionFromText(System.String,System.Int32)">
      <summary>지정된 잘 알려진 텍스트 값과 SRID(좌표계 식별자)를 기반으로 새 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 컬렉션 값을 만듭니다.</summary>
      <returns>지정된 좌표계 식별자를 사용하여 잘 알려진 텍스트 값으로 정의된 새 DbGeography 값입니다.</returns>
      <param name="geographyCollectionWellKnownText">지리 값의 잘 알려진 텍스트 표현을 포함하는 문자열입니다.</param>
      <param name="coordinateSystemId">새 DbGeography 값을 사용해야 하는 좌표계의 식별자입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.Intersection(System.Data.Entity.Spatial.DbGeography)">
      <summary>이 DbGeography 값과 다른 DbGeography 값의 교집합을 계산합니다.</summary>
      <returns>이 지리 값과 other의 교집합을 나타내는 새 DbGeography 값입니다.</returns>
      <param name="other">이 값의 교집합을 계산해야 하는 지리 값입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.Intersects(System.Data.Entity.Spatial.DbGeography)">
      <summary>이 DbGeography 값이 지정된 DbGeography 인수와 공간적으로 교차하는지 여부를 확인합니다.</summary>
      <returns>other가 이 지리 값과 교차하면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="other">교차하는지 확인하기 위해 이 지리 값과 비교해야 하는 지리 값입니다.</param>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeography.IsClosed">
      <summary>이 DbGeography 값이 곡선을 나타내지 않는 경우 null일 수 있는, 이 DbGeography 값이 닫혀 있는지 여부를 나타내는 null 허용 부울 값을 가져옵니다.</summary>
      <returns>이 DbGeography 값이 닫혀 있으면 true이고, 그렇지 않으면 false입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeography.IsEmpty">
      <summary>이 DbGeography 값이 비어 있는지 여부를 나타내는 null 허용 부울 값을 가져옵니다.</summary>
      <returns>이 DbGeography 값이 비어 있으면 true이고, 그렇지 않으면 false입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeography.Latitude">
      <summary>이 DbGeography 값이 점을 나타내는 경우 이 DbGeography 값의 위도 좌표를 가져옵니다.&amp;amp;lt;returns&amp;amp;gt;이 지리 값이 점을 나타내면 이 지리 값의 위도 좌표 값이고, 그렇지 않으면 null입니다.&amp;amp;lt;/returns&amp;amp;gt;</summary>
      <returns>이 DbGeography 값의 위도 좌표입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeography.Length">
      <summary>이 DbGeography 값이 곡선을 나타내지 않는 경우 null일 수 있는, 이 DbGeography 값의 길이를 나타내는 null 허용 double 값을 가져옵니다.</summary>
      <returns>이 DbGeography 값의 길이를 나타내는 null 허용 double 값입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.LineFromBinary(System.Byte[],System.Int32)">
      <summary>지정된 잘 알려진 이진 값과 SRID(좌표계 식별자)를 기반으로 새 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 선 값을 만듭니다.</summary>
      <returns>지정된 좌표계 식별자를 사용하여 잘 알려진 이진 값으로 정의된 새 DbGeography 값입니다.</returns>
      <param name="lineWellKnownBinary">지리 값의 잘 알려진 이진 표현을 포함하는 바이트 배열입니다.</param>
      <param name="coordinateSystemId">새 DbGeography 값을 사용해야 하는 좌표계의 식별자입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.LineFromText(System.String,System.Int32)">
      <summary>지정된 잘 알려진 텍스트 값과 SRID(좌표계 식별자)를 기반으로 새 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 선 값을 만듭니다.</summary>
      <returns>지정된 좌표계 식별자를 사용하여 잘 알려진 텍스트 값으로 정의된 새 DbGeography 값입니다.</returns>
      <param name="lineWellKnownText">지리 값의 잘 알려진 텍스트 표현을 포함하는 문자열입니다.</param>
      <param name="coordinateSystemId">새 DbGeography 값을 사용해야 하는 좌표계의 식별자입니다.</param>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeography.Longitude">
      <summary>이 DbGeography 값이 점을 나타내는 경우 이 DbGeography 값의 경도 좌표를 가져옵니다.&amp;amp;lt;returns&amp;amp;gt;이 지리 값이 점을 나타내면 이 지리 값의 경도 좌표 값이고, 그렇지 않으면 null입니다.&amp;amp;lt;/returns&amp;amp;gt;</summary>
      <returns>이 DbGeography 값의 경도 좌표입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeography.Measure">
      <summary>이 DbGeography 값이 점을 나타내는 경우 이 DbGeography 값의 M(측정값) 좌표를 가져옵니다.&amp;amp;lt;returns&amp;amp;gt;이 지리 값이 점을 나타내면 이 지리 값의 M(측정값) 좌표 값이고, 그렇지 않으면 null입니다.&amp;amp;lt;/returns&amp;amp;gt;</summary>
      <returns>이 DbGeography 값의 M(측정값) 좌표입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.MultiLineFromBinary(System.Byte[],System.Int32)">
      <summary>이진 값에서 다중 선 값을 반환합니다.</summary>
      <returns>이진 값의 다중 선 값입니다.</returns>
      <param name="multiLineWellKnownBinary">잘 알려진 이진 값입니다.</param>
      <param name="coordinateSystemId">좌표계 식별자입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.MultiLineFromText(System.String,System.Int32)">
      <summary>잘 알려진 텍스트 값에서 다중 선 값을 반환합니다.</summary>
      <returns>잘 알려진 텍스트 값의 다중 선 값입니다.</returns>
      <param name="multiLineWellKnownText">잘 알려진 텍스트입니다.</param>
      <param name="coordinateSystemId">좌표계 식별자입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.MultiPointFromBinary(System.Byte[],System.Int32)">
      <summary>잘 알려진 이진 값에서 다중 점 값을 반환합니다.</summary>
      <returns>잘 알려진 이진 값의 다중 점 값입니다.</returns>
      <param name="multiPointWellKnownBinary">잘 알려진 이진 값입니다.</param>
      <param name="coordinateSystemId">좌표계 식별자입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.MultiPointFromText(System.String,System.Int32)">
      <summary>잘 알려진 텍스트 값에서 다중 점 값을 반환합니다.</summary>
      <returns>잘 알려진 텍스트 값의 다중 점 값입니다.</returns>
      <param name="multiPointWellKnownText">잘 알려진 텍스트 값입니다.</param>
      <param name="coordinateSystemId">좌표계 식별자입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.MultiPolygonFromBinary(System.Byte[],System.Int32)">
      <summary>잘 알려진 이진 값에서 다중 다각형 값을 반환합니다.</summary>
      <returns>잘 알려진 이진 값의 다중 다각형 값입니다.</returns>
      <param name="multiPolygonWellKnownBinary">다중 다각형의 잘 알려진 이진 값입니다.</param>
      <param name="coordinateSystemId">좌표계 식별자입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.MultiPolygonFromText(System.String,System.Int32)">
      <summary>잘 알려진 텍스트 값에서 다중 다각형 값을 반환합니다.</summary>
      <returns>잘 알려진 텍스트 값의 다중 다각형 값입니다.</returns>
      <param name="multiPolygonWellKnownText">다중 다각형의 잘 알려진 텍스트 값입니다.</param>
      <param name="coordinateSystemId">좌표계 식별자입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.PointAt(System.Int32)">
      <summary>이 DbGeography 값이 선 문자열 또는 선형 링을 나타내는 경우 특정 위치에서 해당 값의 요소를 반환합니다.&amp;amp;lt;param name="index"&amp;amp;gt;요소를 가져와야 하는 이 지리 값 내의 위치입니다.&amp;amp;lt;/param&amp;amp;gt;&amp;amp;lt;returns&amp;amp;gt;이 지리 값이 선 문자열 또는 선형 링을 나타내면 지정된 위치에 있는 이 지리 값의 요소이고, 그렇지 않으면 null입니다.&amp;amp;lt;/returns&amp;amp;gt;</summary>
      <returns>특정 위치에 있는 이 DbGeography 값의 요소입니다.</returns>
      <param name="index">인덱스입니다.</param>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeography.PointCount">
      <summary>이 DbGeography 값이 선 문자열 또는 선형 링을 나타내는 경우 해당 값의 점 수를 가져옵니다.&amp;amp;lt;returns&amp;amp;gt;이 지리 값이 선 문자열 또는 선형 링을 나타내면 이 지리 값의 요소 수이고, 그렇지 않으면 null입니다.&amp;amp;lt;/returns&amp;amp;gt;</summary>
      <returns>이 DbGeography 값의 점 수입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.PointFromBinary(System.Byte[],System.Int32)">
      <summary>지정된 잘 알려진 이진 값과 SRID(좌표계 식별자)를 기반으로 새 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 점 값을 만듭니다.</summary>
      <returns>지정된 좌표계 식별자를 사용하여 잘 알려진 이진 값으로 정의된 새 DbGeography 값입니다.</returns>
      <param name="pointWellKnownBinary">지리 값의 잘 알려진 이진 표현을 포함하는 바이트 배열입니다.</param>
      <param name="coordinateSystemId">새 DbGeography 값을 사용해야 하는 좌표계의 식별자입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.PointFromText(System.String,System.Int32)">
      <summary>지정된 잘 알려진 텍스트 값과 SRID(좌표계 식별자)를 기반으로 새 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 점 값을 만듭니다.</summary>
      <returns>지정된 좌표계 식별자를 사용하여 잘 알려진 텍스트 값으로 정의된 새 DbGeography 값입니다.</returns>
      <param name="pointWellKnownText">지리 값의 잘 알려진 텍스트 표현을 포함하는 문자열입니다.</param>
      <param name="coordinateSystemId">새 DbGeography 값을 사용해야 하는 좌표계의 식별자입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.PolygonFromBinary(System.Byte[],System.Int32)">
      <summary>지정된 잘 알려진 이진 값과 SRID(좌표계 식별자)를 기반으로 새 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 다각형 값을 만듭니다.</summary>
      <returns>지정된 좌표계 식별자를 사용하여 잘 알려진 이진 값으로 정의된 새 DbGeography 값입니다.</returns>
      <param name="polygonWellKnownBinary">지리 값의 잘 알려진 이진 표현을 포함하는 바이트 배열입니다.</param>
      <param name="coordinateSystemId">새 DbGeography 값을 사용해야 하는 좌표계의 식별자입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.PolygonFromText(System.String,System.Int32)">
      <summary>지정된 잘 알려진 텍스트 값과 SRID(좌표계 식별자)를 기반으로 새 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 다각형 값을 만듭니다.</summary>
      <returns>지정된 좌표계 식별자를 사용하여 잘 알려진 텍스트 값으로 정의된 새 DbGeography 값입니다.</returns>
      <param name="polygonWellKnownText">지리 값의 잘 알려진 텍스트 표현을 포함하는 문자열입니다.</param>
      <param name="coordinateSystemId">새 DbGeography 값을 사용해야 하는 좌표계의 식별자입니다.</param>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeography.Provider">
      <summary>이 공간 형식에 대한 작업에 사용될 공간 공급자를 가져옵니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeography.ProviderValue">
      <summary>이 DbGeography 값을 생성한 기본 공급자와 관련된 이 DbGeography 값의 표현을 가져옵니다.</summary>
      <returns>이 DbGeography 값의 표현입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.SpatialEquals(System.Data.Entity.Spatial.DbGeography)">
      <summary>이 DbGeography가 지정된 DbGeography 인수와 공간적으로 같은지 여부를 확인합니다.</summary>
      <returns>other가 이 지리 값과 공간적으로 동일하면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="other">같은지 확인하기 위해 이 지리 값과 비교해야 하는 지리 값입니다.</param>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeography.SpatialTypeName">
      <summary>DBGeography의 공간 형식 이름을 가져옵니다.</summary>
      <returns>DBGeography의 공간 형식 이름입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeography.StartPoint">
      <summary>이 DbGeography 값이 곡선을 나타내지 않는 경우 null일 수 있는, 이 값의 시작점을 나타내는 DbGeography 값을 가져옵니다.</summary>
      <returns>이 값의 시작점을 나타내는 DbGeography 값입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.SymmetricDifference(System.Data.Entity.Spatial.DbGeography)">
      <summary>이 DbGeography 값과 다른 DbGeography 값 사이의 대칭차를 계산합니다.</summary>
      <returns>이 지리 값과 other 사이의 대칭차를 나타내는 새 DbGeography 값입니다.</returns>
      <param name="other">이 값의 대칭차를 계산해야 하는 지리 값입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.ToString">
      <summary>지리 값의 문자열 표현을 반환합니다.</summary>
      <returns>지리 값의 문자열 표현입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.Union(System.Data.Entity.Spatial.DbGeography)">
      <summary>이 DbGeography 값과 다른 DbGeography 값의 합집합을 계산합니다.</summary>
      <returns>이 지리 값과 other의 합집합을 나타내는 새 DbGeography 값입니다.</returns>
      <param name="other">이 값의 합집합을 계산해야 하는 지리 값입니다.</param>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeography.WellKnownValue">
      <summary>이 DbGeography 값의 serialize 가능한 잘 알려진 데이터 계약 표현을 가져오거나 설정합니다.</summary>
      <returns>이 DbGeography 값의 serialize 가능한 잘 알려진 데이터 계약 표현입니다.</returns>
    </member>
    <member name="T:System.Data.Entity.Spatial.DbGeographyWellKnownValue">
      <summary>
        <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 값의 serialize 가능한 데이터 계약 표현입니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeographyWellKnownValue.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.Spatial.DbGeographyWellKnownValue" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeographyWellKnownValue.CoordinateSystemId">
      <summary>이 값의 좌표계 식별자(SRID)를 가져오거나 설정합니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeographyWellKnownValue.WellKnownBinary">
      <summary>이 값의 잘 알려진 이진 표현을 가져오거나 설정합니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeographyWellKnownValue.WellKnownText">
      <summary>이 값의 잘 알려진 텍스트 표현을 가져오거나 설정합니다.</summary>
    </member>
    <member name="T:System.Data.Entity.Spatial.DbGeometry">
      <summary>기하 도형을 나타냅니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.Area">
      <summary>이 DbGeometry 값의 영역을 나타내는 null 허용 double 값을 가져옵니다. 표면을 나타내지 않는 경우 이 값은 null일 수 있습니다.</summary>
      <returns>이 DbGeometry 값의 영역을 나타내는 null 허용 double 값입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.AsBinary">
      <summary>이 DbGeometry 값의 잘 알려진 이진 표현을 생성합니다.</summary>
      <returns>이 DbGeometry 값의 잘 알려진 이진 표현입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.AsGml">
      <summary>이 DbGeometry 값의 GML(Geography Markup Language) 표현을 생성합니다.</summary>
      <returns>이 DbGeometry 값의 GML 표현을 포함하는 문자열입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.AsText">
      <summary>이 DbGeometry 값의 잘 알려진 텍스트 표현을 생성합니다.점의 X 및 Y 좌표만 포함합니다.</summary>
      <returns>이 DbGeometry 값의 잘 알려진 텍스트 표현을 포함하는 문자열입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.Boundary">
      <summary>DbGeometry 개체의 경계를 가져옵니다.</summary>
      <returns>DbGeometry 개체의 경계입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.Buffer(System.Nullable{System.Double})">
      <summary>모든 점의 합집합을 나타내는 기하 도형 개체를 반환합니다. 기하 도형 인스턴스에서 이러한 점의 거리는 지정한 값보다 작거나 같아야 합니다.</summary>
      <returns>모든 점의 합집합을 나타내는 기하 도형 개체입니다.</returns>
      <param name="distance">거리입니다.</param>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.Centroid">
      <summary>이 DbGeometry 값의 중심을 나타내는 DbGeometry 값을 가져옵니다. 표면을 나타내지 않는 경우 이 값은 null일 수 있습니다.</summary>
      <returns>이 DbGeometry 값의 중앙을 나타내는 DbGeometry 값입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.Contains(System.Data.Entity.Spatial.DbGeometry)">
      <summary>이 DbGeometry 값이 지정된 DbGeometry 인수를 공간적으로 포함하는지 여부를 확인합니다.</summary>
      <returns>이 기하 도형 값에 other가 포함되어 있으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="other">포함되어 있는지 확인하기 위해 이 기하 도형 값과 비교해야 하는 기하 도형 값입니다.</param>
      <exception cref="T:System.ArgumentNullException">other</exception>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.ConvexHull">
      <summary>이 DbGeometry 값의 볼록 다각형을 다른 DbGeometry 값으로 가져옵니다.</summary>
      <returns>다른 DbGeometry 값으로 가져온 이 DbGeometry 값의 볼록 다각형입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.CoordinateSystemId">
      <summary>DbGeometry 개체의 좌표계 식별자를 가져옵니다.</summary>
      <returns>DbGeometry 개체의 좌표계 식별자입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.Crosses(System.Data.Entity.Spatial.DbGeometry)">
      <summary>이 DbGeometry 값이 지정된 DbGeometry 인수를 공간적으로 가로지르는지 여부를 확인합니다.</summary>
      <returns>other가 이 기하 도형 값을 가로지르면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="other">이 기하 도형 값과 비교해야 하는 기하 도형 값입니다.</param>
      <exception cref="T:System.ArgumentNullException">other</exception>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.DefaultCoordinateSystemId">
      <summary>기하 도형 값의 기본 SRID(좌표계 ID)를 가져옵니다.</summary>
      <returns>기하 도형 값의 기본 SRID(좌표계 ID)입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.Difference(System.Data.Entity.Spatial.DbGeometry)">
      <summary>이 DbGeometry 값과 다른 DbGeometry 값 사이의 차이를 계산합니다.</summary>
      <returns>이 기하 도형 값과 other의 차이를 나타내는 새 DbGeometry 값입니다.</returns>
      <param name="other">이 값의 차이를 계산해야 하는 기하 도형 값입니다.</param>
      <exception cref="T:System.ArgumentNullException">other</exception>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.Dimension">
      <summary>지정된 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 값의 크기를 가져오거나 값이 컬렉션인 경우 가장 큰 요소의 크기를 가져옵니다.</summary>
      <returns>지정된 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 값의 크기입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.Disjoint(System.Data.Entity.Spatial.DbGeometry)">
      <summary>이 DbGeometry가 지정된 DbGeometry 인수와 공간적으로 분리되어 있는지 여부를 확인합니다.</summary>
      <returns>other가 이 기하 도형 값과 분리되어 있으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="other">분리되어 있는지 확인하기 위해 이 기하 도형 값과 비교해야 하는 기하 도형 값입니다.</param>
      <exception cref="T:System.ArgumentNullException">other</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.Distance(System.Data.Entity.Spatial.DbGeometry)">
      <summary>이 DbGeometry 값 및 다른 DbGeometry 값에서 가장 가까운 점 사이의 거리를 계산합니다.</summary>
      <returns>이 기하 도형 값 및 other에서 가장 가까운 두 점 사이의 거리를 지정하는 double 값입니다.</returns>
      <param name="other">이 값에서의 거리를 계산해야 하는 기하 도형 값입니다.</param>
      <exception cref="T:System.ArgumentNullException">other</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.ElementAt(System.Int32)">
      <summary>이 DbGeometry 값이 기하 도형 컬렉션을 나타내는 경우 특정 위치에서 이 DbGeometry 값의 요소를 반환합니다.&amp;amp;lt;param name="index"&amp;amp;gt;요소를 가져와야 하는 이 기하 도형 값 내의 위치입니다.&amp;amp;lt;/param&amp;amp;gt;&amp;amp;lt;returns&amp;amp;gt;이 기하 도형 값이 다른 기하 도형 값의 컬렉션을 나타내면 지정된 위치에 있는 이 기하 도형 값의 요소이고, 그렇지 않으면 null입니다.&amp;amp;lt;/returns&amp;amp;gt;</summary>
      <returns>특정 위치에 있는 이 DbGeometry 값의 요소입니다.</returns>
      <param name="index">인덱스입니다.</param>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.ElementCount">
      <summary>이 DbGeometry 값이 기하 도형 컬렉션을 나타내는 경우 이 DbGeometry 값의 요소 수를 가져옵니다.&amp;amp;lt;returns&amp;amp;gt;이 기하 도형 값이 다른 기하 도형 값의 컬렉션을 나타내면 이 기하 도형 값의 요소 수이고, 그렇지 않으면 null입니다.&amp;amp;lt;/returns&amp;amp;gt;</summary>
      <returns>이 DbGeometry 값의 요소 수입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.Elevation">
      <summary>이 DbGeometry 값이 점을 나타내는 경우 이 DbGeometry 값의 고도(Z 좌표)를 가져옵니다.&amp;amp;lt;returns&amp;amp;gt;이 기하 도형 값이 점을 나타내면 이 기하 도형 값의 고도(Z 좌표)이고, 그렇지 않으면 null입니다.&amp;amp;lt;/returns&amp;amp;gt;</summary>
      <returns>이 DbGeometry 값의 고도(Z 좌표)입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.EndPoint">
      <summary>이 DbGeometry 값이 곡선을 나타내지 않는 경우 null일 수 있는, 이 값의 시작점을 나타내는 DbGeometry 값을 가져옵니다.</summary>
      <returns>이 값의 시작점을 나타내는 DbGeometry 값입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.Envelope">
      <summary>이 DbGeometry 값의 포락선(최소 경계 상자)을 기하 도형 값으로 가져옵니다.</summary>
      <returns>이 DbGeometry 값의 포락선(최소 경계 상자)입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.ExteriorRing">
      <summary>이 값이 다각형을 나타내지 않는 경우 null일 수 있는, 이 DbGeometry 값의 외부 링을 나타내는 DbGeometry 값을 가져옵니다.</summary>
      <returns>이 DbGeometry 값의 외부 링을 나타내는 DbGeometry 값입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.FromBinary(System.Byte[])">
      <summary>지정된 잘 알려진 이진 값을 기반으로 새 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 값을 만듭니다.</summary>
      <returns>기본 기하 도형 좌표계 식별자(<see cref="P:System.Data.Entity.Spatial.DbGeometry.DefaultCoordinateSystemId" />)를 사용하여 잘 알려진 이진 값으로 정의된 새 DbGeometry 값입니다.</returns>
      <param name="wellKnownBinary">기하 도형 값의 잘 알려진 이진 표현을 포함하는 바이트 배열입니다.</param>
      <exception cref="T:System.ArgumentNullException">wellKnownBinary</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.FromBinary(System.Byte[],System.Int32)">
      <summary>지정된 잘 알려진 이진 값과 SRID(좌표계 식별자)를 기반으로 새 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 값을 만듭니다.</summary>
      <returns>지정된 좌표계 식별자를 사용하여 잘 알려진 이진 값으로 정의된 새 DbGeometry 값입니다.</returns>
      <param name="wellKnownBinary">기하 도형 값의 잘 알려진 이진 표현을 포함하는 바이트 배열입니다.</param>
      <param name="coordinateSystemId">새 DbGeometry 값을 사용해야 하는 좌표계의 식별자입니다.</param>
      <exception cref="T:System.ArgumentNullException">wellKnownBinary</exception>
      <exception cref="T:System.ArgumentException">coordinateSystemId</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.FromGml(System.String)">
      <summary>지정된 GML(Geography Markup Language) 값을 기반으로 새 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 값을 만듭니다.</summary>
      <returns>기본 기하 도형 SRID(좌표계 식별자)(<see cref="P:System.Data.Entity.Spatial.DbGeometry.DefaultCoordinateSystemId" />)를 사용하여 GML 값으로 정의된 새 DbGeometry 값입니다.</returns>
      <param name="geometryMarkup">기하 도형 값의 GML(Geography Markup Language) 표현을 포함하는 문자열입니다.</param>
      <exception cref="T:System.ArgumentNullException">geometryMarkup</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.FromGml(System.String,System.Int32)">
      <summary>지정된 GML(Geography Markup Language) 값과 SRID(좌표계 식별자)를 기반으로 새 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 값을 만듭니다.</summary>
      <returns>지정된 좌표계 식별자를 사용하여 GML 값으로 정의된 새 DbGeometry 값입니다.</returns>
      <param name="geometryMarkup">기하 도형 값의 GML(Geography Markup Language) 표현을 포함하는 문자열입니다.</param>
      <param name="coordinateSystemId">새 DbGeometry 값을 사용해야 하는 좌표계의 식별자입니다.</param>
      <exception cref="T:System.ArgumentNullException">geometryMarkup</exception>
      <exception cref="T:System.ArgumentException">coordinateSystemId</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.FromText(System.String)">
      <summary>지정된 잘 알려진 텍스트 값을 기반으로 새 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 값을 만듭니다.</summary>
      <returns>기본 기하 도형 SRID(좌표계 식별자)(<see cref="P:System.Data.Entity.Spatial.DbGeometry.DefaultCoordinateSystemId" />)를 사용하여 잘 알려진 텍스트 값으로 정의된 새 DbGeometry 값입니다.</returns>
      <param name="wellKnownText">기하 도형 값의 잘 알려진 텍스트 표현을 포함하는 문자열입니다.</param>
      <exception cref="T:System.ArgumentNullException">wellKnownText</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.FromText(System.String,System.Int32)">
      <summary>지정된 잘 알려진 텍스트 값과 SRID(좌표계 식별자)를 기반으로 새 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 값을 만듭니다.</summary>
      <returns>지정된 좌표계 식별자를 사용하여 잘 알려진 텍스트 값으로 정의된 새 DbGeometry 값입니다.</returns>
      <param name="wellKnownText">기하 도형 값의 잘 알려진 텍스트 표현을 포함하는 문자열입니다.</param>
      <param name="coordinateSystemId">새 DbGeometry 값을 사용해야 하는 좌표계의 식별자입니다.</param>
      <exception cref="T:System.ArgumentNullException">wellKnownText</exception>
      <exception cref="T:System.ArgumentException">coordinateSystemId</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.GeometryCollectionFromBinary(System.Byte[],System.Int32)">
      <summary>지정된 잘 알려진 이진 값과 SRID(좌표계 식별자)를 기반으로 새 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 컬렉션 값을 만듭니다.</summary>
      <returns>지정된 좌표계 식별자를 사용하여 잘 알려진 이진 값으로 정의된 새 DbGeometry 값입니다.</returns>
      <param name="geometryCollectionWellKnownBinary">기하 도형 값의 잘 알려진 이진 표현을 포함하는 바이트 배열입니다.</param>
      <param name="coordinateSystemId">새 DbGeometry 값을 사용해야 하는 좌표계의 식별자입니다.</param>
      <exception cref="T:System.ArgumentNullException">geometryCollectionWellKnownBinary</exception>
      <exception cref="T:System.ArgumentException">coordinateSystemId</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.GeometryCollectionFromText(System.String,System.Int32)">
      <summary>지정된 잘 알려진 텍스트 값과 SRID(좌표계 식별자)를 기반으로 새 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 컬렉션 값을 만듭니다.</summary>
      <returns>지정된 좌표계 식별자를 사용하여 잘 알려진 텍스트 값으로 정의된 새 DbGeometry 값입니다.</returns>
      <param name="geometryCollectionWellKnownText">기하 도형 값의 잘 알려진 텍스트 표현을 포함하는 문자열입니다.</param>
      <param name="coordinateSystemId">새 DbGeometry 값을 사용해야 하는 좌표계의 식별자입니다.</param>
      <exception cref="T:System.ArgumentNullException">geometryCollectionWellKnownText</exception>
      <exception cref="T:System.ArgumentException">coordinateSystemId</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.InteriorRingAt(System.Int32)">
      <summary>이 DbGeometry 값이 다각형을 나타내는 경우 지정된 위치에 있는 이 DbGeometry 값의 내부 링을 반환합니다.&amp;amp;lt;param name="index"&amp;amp;gt;내부 링을 가져와야 하는 이 기하 도형 값 내의 위치입니다.&amp;amp;lt;/param&amp;amp;gt;&amp;amp;lt;returns&amp;amp;gt;이 기하 도형 값이 다각형을 나타내면 지정된 위치에 있는 이 기하 도형 값의 내부 링이고, 그렇지 않으면 null입니다.&amp;amp;lt;/returns&amp;amp;gt;</summary>
      <returns>특정 위치에 있는 이 DbGeometry 값의 내부 링입니다.</returns>
      <param name="index">인덱스입니다.</param>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.InteriorRingCount">
      <summary>이 DbGeometry 값이 다각형을 나타내는 경우 이 DbGeometry 값의 내부 링 수를 가져옵니다.&amp;amp;lt;returns&amp;amp;gt;이 기하 도형 값이 다각형을 나타내면 이 기하 도형 값의 요소 수이고, 그렇지 않으면 null입니다.&amp;amp;lt;/returns&amp;amp;gt;</summary>
      <returns>이 DbGeometry 값의 내부 링 수입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.Intersection(System.Data.Entity.Spatial.DbGeometry)">
      <summary>이 DbGeometry 값과 다른 DbGeometry 값의 교집합을 계산합니다.</summary>
      <returns>이 기하 도형 값과 other의 교집합을 나타내는 새 DbGeometry 값입니다.</returns>
      <param name="other">이 값의 교집합을 계산해야 하는 기하 도형 값입니다.</param>
      <exception cref="T:System.ArgumentNullException">other</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.Intersects(System.Data.Entity.Spatial.DbGeometry)">
      <summary>이 DbGeometry 값이 지정된 DbGeometry 인수와 공간적으로 교차하는지 여부를 확인합니다.</summary>
      <returns>other가 이 기하 도형 값과 교차하면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="other">교차하는지 확인하기 위해 이 기하 도형 값과 비교해야 하는 기하 도형 값입니다.</param>
      <exception cref="T:System.ArgumentNullException">other</exception>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.IsClosed">
      <summary>이 값이 곡선을 나타내지 않는 경우 null일 수 있는, 이 DbGeometry 값이 닫혀 있는지 여부를 나타내는 null 허용 부울 값을 가져옵니다.</summary>
      <returns>이 DbGeometry 값이 닫혀 있으면 true이고, 그렇지 않으면 false입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.IsEmpty">
      <summary>이 값이 곡선을 나타내지 않는 경우 null일 수 있는, 이 DbGeometry 값이 비어 있는지 여부를 나타내는 null 허용 부울 값을 가져옵니다.</summary>
      <returns>이 DbGeometry 값이 비어 있으면 true이고, 그렇지 않으면 false입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.IsRing">
      <summary>이 값이 곡선을 나타내지 않는 경우 null일 수 있는, 이 DbGeometry 값이 링인지 여부를 나타내는 null 허용 부울 값을 가져옵니다.</summary>
      <returns>이 DbGeometry 값이 링이면 true이고, 그렇지 않으면 false입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.IsSimple">
      <summary>이 DbGeometry 값이 단순한지 여부를 나타내는 null 허용 부울 값을 가져옵니다.</summary>
      <returns>이 DbGeometry 값이 단순하면 true이고, 그렇지 않으면 false입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.IsValid">
      <summary>이 DbGeometry 값이 유효한지 여부를 나타내는 null 허용 부울 값을 가져옵니다.</summary>
      <returns>이 DbGeometry 값이 유효하면 true이고, 그렇지 않으면 false입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.Length">
      <summary>이 값이 곡선을 나타내지 않는 경우 null일 수 있는, 이 DbGeometry 값의 길이를 나타내는 null 허용 double 값을 가져옵니다.</summary>
      <returns>이 DbGeometry 값의 길이입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.LineFromBinary(System.Byte[],System.Int32)">
      <summary>지정된 잘 알려진 이진 값과 SRID(좌표계 식별자)를 기반으로 새 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 선 값을 만듭니다.</summary>
      <returns>지정된 좌표계 식별자를 사용하여 잘 알려진 이진 값으로 정의된 새 DbGeometry 값입니다.</returns>
      <param name="lineWellKnownBinary">기하 도형 값의 잘 알려진 이진 표현을 포함하는 바이트 배열입니다.</param>
      <param name="coordinateSystemId">새 DbGeometry 값을 사용해야 하는 좌표계의 식별자입니다.</param>
      <exception cref="T:System.ArgumentNullException">lineWellKnownBinary</exception>
      <exception cref="T:System.ArgumentException">coordinateSystemId</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.LineFromText(System.String,System.Int32)">
      <summary>지정된 잘 알려진 텍스트 값과 SRID(좌표계 식별자)를 기반으로 새 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 선 값을 만듭니다.</summary>
      <returns>지정된 좌표계 식별자를 사용하여 잘 알려진 텍스트 값으로 정의된 새 DbGeometry 값입니다.</returns>
      <param name="lineWellKnownText">기하 도형 값의 잘 알려진 텍스트 표현을 포함하는 문자열입니다.</param>
      <param name="coordinateSystemId">새 DbGeometry 값을 사용해야 하는 좌표계의 식별자입니다.</param>
      <exception cref="T:System.ArgumentNullException">lineWellKnownText</exception>
      <exception cref="T:System.ArgumentException">coordinateSystemId</exception>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.Measure">
      <summary>이 DbGeometry 값이 점을 나타내는 경우 이 DbGeometry 값의 측정값(M 좌표)을 가져옵니다.&amp;amp;lt;returns&amp;amp;gt;이 기하 도형 값이 점을 나타내면 이 기하 도형 값의 측정값(M 좌표)이고, 그렇지 않으면 null입니다.&amp;amp;lt;/returns&amp;amp;gt;</summary>
      <returns>이 DbGeometry 값의 측정값(M 좌표)입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.MultiLineFromBinary(System.Byte[],System.Int32)">
      <summary>이진 값에서 다중 선 값을 반환합니다.</summary>
      <returns>이진 값의 다중 선 값입니다.</returns>
      <param name="multiLineWellKnownBinary">잘 알려진 이진 값입니다.</param>
      <param name="coordinateSystemId">좌표계 식별자입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.MultiLineFromText(System.String,System.Int32)">
      <summary>잘 알려진 텍스트 값에서 다중 선 값을 반환합니다.</summary>
      <returns>잘 알려진 텍스트 값의 다중 선 값입니다.</returns>
      <param name="multiLineWellKnownText">잘 알려진 텍스트입니다.</param>
      <param name="coordinateSystemId">좌표계 식별자입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.MultiPointFromBinary(System.Byte[],System.Int32)">
      <summary>잘 알려진 이진 값에서 다중 점 값을 반환합니다.</summary>
      <returns>잘 알려진 이진 값의 다중 점 값입니다.</returns>
      <param name="multiPointWellKnownBinary">잘 알려진 이진 값입니다.</param>
      <param name="coordinateSystemId">좌표계 식별자입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.MultiPointFromText(System.String,System.Int32)">
      <summary>잘 알려진 텍스트 값에서 다중 점 값을 반환합니다.</summary>
      <returns>잘 알려진 텍스트 값의 다중 점 값입니다.</returns>
      <param name="multiPointWellKnownText">잘 알려진 텍스트 값입니다.</param>
      <param name="coordinateSystemId">좌표계 식별자입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.MultiPolygonFromBinary(System.Byte[],System.Int32)">
      <summary>잘 알려진 이진 값에서 다중 다각형 값을 반환합니다.</summary>
      <returns>잘 알려진 텍스트 값의 다중 점 값입니다.</returns>
      <param name="multiPolygonWellKnownBinary">다중 다각형의 잘 알려진 텍스트 값입니다.</param>
      <param name="coordinateSystemId">좌표계 식별자입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.MultiPolygonFromText(System.String,System.Int32)">
      <summary>잘 알려진 이진 값에서 다중 다각형 값을 반환합니다.</summary>
      <returns>잘 알려진 이진 값의 다중 다각형 값입니다.</returns>
      <param name="multiPolygonWellKnownText">다중 다각형의 잘 알려진 텍스트 값입니다.</param>
      <param name="coordinateSystemId">좌표계 식별자입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.Overlaps(System.Data.Entity.Spatial.DbGeometry)">
      <summary>이 DbGeometry 값이 지정된 DbGeometry 인수와 공간적으로 겹치는지 여부를 확인합니다.</summary>
      <returns>이 기하 도형 값이 other와 겹치면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="other">겹치는지 확인하기 위해 이 기하 도형 값과 비교해야 하는 기하 도형 값입니다.</param>
      <exception cref="T:System.ArgumentNullException">other</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.PointAt(System.Int32)">
      <summary>이 DbGeometry 값이 선 문자열 또는 선형 링을 나타내는 경우 특정 위치에서 해당 값의 요소를 반환합니다.&amp;amp;lt;param name="index"&amp;amp;gt;요소를 가져와야 하는 이 기하 도형 값 내의 위치입니다.&amp;amp;lt;/param&amp;amp;gt;&amp;amp;lt;returns&amp;amp;gt;이 기하 도형 값이 선 문자열 또는 선형 링을 나타내면 지정된 위치에 있는 이 기하 도형 값의 요소이고, 그렇지 않으면 null입니다.&amp;amp;lt;/returns&amp;amp;gt;</summary>
      <returns>특정 위치에 있는 이 DbGeometry 값의 요소입니다.</returns>
      <param name="index">인덱스입니다.</param>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.PointCount">
      <summary>이 DbGeometry 값이 선 문자열 또는 선형 링을 나타내는 경우 해당 값의 점 수를 가져옵니다.&amp;amp;lt;returns&amp;amp;gt;이 기하 도형 값이 선 문자열 또는 선형 링을 나타내면 이 기하 도형 값의 요소 수이고, 그렇지 않으면 null입니다.&amp;amp;lt;/returns&amp;amp;gt;</summary>
      <returns>이 DbGeometry 값의 점 수입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.PointFromBinary(System.Byte[],System.Int32)">
      <summary>지정된 잘 알려진 이진 값과 SRID(좌표계 식별자)를 기반으로 새 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 점 값을 만듭니다.</summary>
      <returns>지정된 좌표계 식별자를 사용하여 잘 알려진 이진 값으로 정의된 새 DbGeometry 값입니다.</returns>
      <param name="pointWellKnownBinary">기하 도형 값의 잘 알려진 이진 표현을 포함하는 바이트 배열입니다.</param>
      <param name="coordinateSystemId">새 DbGeometry 값을 사용해야 하는 좌표계의 식별자입니다.</param>
      <exception cref="T:System.ArgumentNullException">pointWellKnownBinary</exception>
      <exception cref="T:System.ArgumentException">coordinateSystemId</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.PointFromText(System.String,System.Int32)">
      <summary>지정된 잘 알려진 텍스트 값과 SRID(좌표계 식별자)를 기반으로 새 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 점 값을 만듭니다.</summary>
      <returns>지정된 좌표계 식별자를 사용하여 잘 알려진 텍스트 값으로 정의된 새 DbGeometry 값입니다.</returns>
      <param name="pointWellKnownText">기하 도형 값의 잘 알려진 텍스트 표현을 포함하는 문자열입니다.</param>
      <param name="coordinateSystemId">새 DbGeometry 값을 사용해야 하는 좌표계의 식별자입니다.</param>
      <exception cref="T:System.ArgumentNullException">pointWellKnownText</exception>
      <exception cref="T:System.ArgumentException">coordinateSystemId</exception>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.PointOnSurface">
      <summary>이 DbGeometry 값의 표면에 있는 점을 가져옵니다. 표면을 나타내지 않는 경우 이 값은 null일 수 있습니다.</summary>
      <returns>이 DbGeometry 값의 표면에 있는 점입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.PolygonFromBinary(System.Byte[],System.Int32)">
      <summary>지정된 잘 알려진 이진 값과 SRID(좌표계 식별자)를 기반으로 새 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 다각형 값을 만듭니다.</summary>
      <returns>지정된 좌표계 식별자를 사용하여 잘 알려진 이진 값으로 정의된 새 DbGeometry 값입니다.</returns>
      <param name="polygonWellKnownBinary">기하 도형 값의 잘 알려진 이진 표현을 포함하는 바이트 배열입니다.</param>
      <param name="coordinateSystemId">새 DbGeometry 값을 사용해야 하는 좌표계의 식별자입니다.</param>
      <exception cref="T:System.ArgumentNullException">polygonWellKnownBinary</exception>
      <exception cref="T:System.ArgumentException">coordinateSystemId</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.PolygonFromText(System.String,System.Int32)">
      <summary>지정된 잘 알려진 텍스트 값과 SRID(좌표계 식별자)를 기반으로 새 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 다각형 값을 만듭니다.</summary>
      <returns>지정된 좌표계 식별자를 사용하여 잘 알려진 텍스트 값으로 정의된 새 DbGeometry 값입니다.</returns>
      <param name="polygonWellKnownText">기하 도형 값의 잘 알려진 텍스트 표현을 포함하는 문자열입니다.</param>
      <param name="coordinateSystemId">새 DbGeometry 값을 사용해야 하는 좌표계의 식별자입니다.</param>
      <exception cref="T:System.ArgumentNullException">polygonWellKnownText</exception>
      <exception cref="T:System.ArgumentException">coordinateSystemId</exception>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.Provider">
      <summary>이 공간 형식에 대한 작업에 사용될 공간 공급자를 가져옵니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.ProviderValue">
      <summary>이 DbGeometry 값을 생성한 기본 공급자와 관련된 이 DbGeometry 값의 표현을 가져옵니다.</summary>
      <returns>이 DbGeometry 값의 표현입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.Relate(System.Data.Entity.Spatial.DbGeometry,System.String)">
      <summary>이 DbGeometry 값이 주어진 DE-9IM(Dimensionally Extended Nine-Intersection Model) 교차 패턴에 따라 지정된 DbGeometry 인수와 공간적으로 관련되어 있는지 여부를 확인합니다.</summary>
      <returns>지정된 교차 패턴 매트릭스에 따라 이 기하 도형 값이 other와 관련이 있으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="other">관계가 있는지 확인하기 위해 이 기하 도형 값과 비교해야 하는 기하 도형 값입니다.</param>
      <param name="matrix">관계를 정의하는 DE 9IM 교차 패턴의 텍스트 표현을 포함하는 문자열입니다.</param>
      <exception cref="T:System.ArgumentNullException">othermatrix</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.SpatialEquals(System.Data.Entity.Spatial.DbGeometry)">
      <summary>이 DbGeometry가 지정된 DbGeometry 인수와 공간적으로 같은지 여부를 확인합니다.</summary>
      <returns>other가 이 기하 도형 값과 공간적으로 동일하면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="other">같은지 확인하기 위해 이 기하 도형 값과 비교해야 하는 기하 도형 값입니다.</param>
      <exception cref="T:System.ArgumentNullException">other</exception>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.SpatialTypeName">
      <summary>이 DbGeometry 값의 공간 형식 이름 표현을 가져옵니다.</summary>
      <returns>이 DbGeometry 값의 공간 형식 이름 표현입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.StartPoint">
      <summary>이 DbGeometry 값이 곡선을 나타내지 않는 경우 null일 수 있는, 이 값의 시작점을 나타내는 DbGeometry 값을 가져옵니다.</summary>
      <returns>이 값의 시작점을 나타내는 DbGeometry 값입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.SymmetricDifference(System.Data.Entity.Spatial.DbGeometry)">
      <summary>이 DbGeometry 값과 다른 DbGeometry 값 사이의 대칭차를 계산합니다.</summary>
      <returns>이 기하 도형 값과 other의 대칭차를 나타내는 새 DbGeometry 값입니다.</returns>
      <param name="other">이 값의 대칭차를 계산해야 하는 기하 도형 값입니다.</param>
      <exception cref="T:System.ArgumentNullException">other</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.ToString">
      <summary>기하 도형 값의 문자열 표현을 반환합니다.</summary>
      <returns>기하 도형 값의 문자열 표현입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.Touches(System.Data.Entity.Spatial.DbGeometry)">
      <summary>이 DbGeometry 값이 지정된 DbGeometry 인수와 공간적으로 접하는지 여부를 확인합니다.</summary>
      <returns>other가 이 기하 도형 값에 닿으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="other">이 기하 도형 값과 비교해야 하는 기하 도형 값입니다.</param>
      <exception cref="T:System.ArgumentNullException">other</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.Union(System.Data.Entity.Spatial.DbGeometry)">
      <summary>이 DbGeometry 값과 다른 DbGeometry 값의 합집합을 계산합니다.</summary>
      <returns>이 기하 도형 값과 other의 합집합을 나타내는 새 DbGeometry 값입니다.</returns>
      <param name="other">이 값의 합집합을 계산해야 하는 기하 도형 값입니다.</param>
      <exception cref="T:System.ArgumentNullException">other</exception>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.WellKnownValue">
      <summary>이 DbGeometry 값의 serialize 가능한 잘 알려진 데이터 계약 표현을 가져오거나 설정합니다.</summary>
      <returns>이 DbGeometry 값의 serialize 가능한 잘 알려진 데이터 계약 표현입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.Within(System.Data.Entity.Spatial.DbGeometry)">
      <summary>이 DbGeometry 값이 공간적으로 지정된 DbGeometry 인수 안에 있는지 여부를 확인합니다.</summary>
      <returns>이 기하 도형 값이 other 내에 있으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="other">포함되어 있는지 확인하기 위해 이 기하 도형 값과 비교해야 하는 기하 도형 값입니다.</param>
      <exception cref="T:System.ArgumentNullException">other</exception>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.XCoordinate">
      <summary>이 DbGeometry가 점을 나타내는 경우 해당 값의 X 좌표를 가져옵니다.&amp;amp;lt;returns&amp;amp;gt;이 기하 도형 값이 점을 나타내면 이 기하 도형 값의 X 좌표 값이고, 그렇지 않으면 null입니다.&amp;amp;lt;/returns&amp;amp;gt;</summary>
      <returns>이 DbGeometry 값의 X 좌표입니다.</returns>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.YCoordinate">
      <summary>이 DbGeometry 값이 점을 나타내는 경우 해당 값의 Y 좌표를 가져옵니다.&amp;amp;lt;returns&amp;amp;gt;이 기하 도형 값이 점을 나타내면 이 기하 도형 값의 Y 좌표 값이고, 그렇지 않으면 null입니다.&amp;amp;lt;/returns&amp;amp;gt;</summary>
      <returns>이 DbGeometry 값의 Y 좌표입니다.</returns>
    </member>
    <member name="T:System.Data.Entity.Spatial.DbGeometryWellKnownValue">
      <summary>
        <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 값의 serialize 가능한 데이터 계약 표현입니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometryWellKnownValue.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.Spatial.DbGeometryWellKnownValue" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometryWellKnownValue.CoordinateSystemId">
      <summary>이 값의 좌표계 식별자(SRID)를 가져오거나 설정합니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometryWellKnownValue.WellKnownBinary">
      <summary>이 값의 잘 알려진 이진 표현을 가져오거나 설정합니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometryWellKnownValue.WellKnownText">
      <summary>이 값의 잘 알려진 텍스트 표현을 가져오거나 설정합니다.</summary>
    </member>
    <member name="T:System.Data.Entity.Spatial.DbSpatialDataReader">
      <summary>지리 공간적(기하 도형/지리) 형식 지원을 위한 공급자와 독립적인 서비스 API입니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialDataReader.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.Spatial.DbSpatialDataReader" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialDataReader.GetGeography(System.Int32)">
      <summary>파생 형식에서 구현되는 경우 지정한 열 서수에 있는 열에서 <see cref="T:System.Data.Entity.Spatial.DbGeography" />의 인스턴스를 읽습니다.</summary>
      <returns>지정된 열 값에 있는 DbGeography의 인스턴스입니다.</returns>
      <param name="ordinal">지리 값을 포함하는 열의 서수입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialDataReader.GetGeographyAsync(System.Int32,System.Threading.CancellationToken)">
      <summary>지정된 열 서수에 있는 열에서 <see cref="T:System.Data.Entity.Spatial.DbGeography" />의 인스턴스를 비동기적으로 읽습니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.작업 결과에는 지정된 열 값에 있는 <see cref="T:System.Data.Entity.Spatial.DbGeography" />의 인스턴스가 포함됩니다.</returns>
      <param name="ordinal">지리 값을 포함하는 열의 서수입니다.</param>
      <param name="cancellationToken">작업이 완료되기를 기다리는 동안 관찰할 <see cref="T:System.Threading.CancellationToken" />입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialDataReader.GetGeometry(System.Int32)">
      <summary>파생 형식에서 구현되는 경우 지정한 열 서수에 있는 열에서 <see cref="T:System.Data.Entity.Spatial.DbGeometry" />의 인스턴스를 읽습니다.</summary>
      <returns>지정된 열 값에 있는 DbGeometry의 인스턴스입니다.</returns>
      <param name="ordinal">공급자별 기하 도형 데이터를 포함하는 데이터 레코드 열의 서수입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialDataReader.GetGeometryAsync(System.Int32,System.Threading.CancellationToken)">
      <summary>지정된 열 서수에 있는 열에서 <see cref="T:System.Data.Entity.Spatial.DbGeometry" />의 인스턴스를 비동기적으로 읽습니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.작업 결과에는 지정된 열 값에 있는 <see cref="T:System.Data.Entity.Spatial.DbGeometry" />의 인스턴스가 포함됩니다.</returns>
      <param name="ordinal">공급자별 기하 도형 데이터를 포함하는 데이터 레코드 열의 서수입니다.</param>
      <param name="cancellationToken">작업이 완료되기를 기다리는 동안 관찰할 <see cref="T:System.Threading.CancellationToken" />입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialDataReader.IsGeographyColumn(System.Int32)">
      <summary>지정된 열 서수에 있는 열의 형식이 지리 형식인지 여부를 반환합니다.</summary>
      <returns>지정된 열 서수에 있는 열의 형식이 지리 형식이면 true이고, 그렇지 않으면 false입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialDataReader.IsGeometryColumn(System.Int32)">
      <summary>지정된 열 서수에 있는 열의 형식이 기하 도형 형식인지 여부를 반환합니다.</summary>
      <returns>지정된 열 서수에 있는 열의 형식이 기하 도형 형식이면 true이고, 그렇지 않으면 false입니다.</returns>
    </member>
    <member name="T:System.Data.Entity.Spatial.DbSpatialServices">
      <summary>지리 공간적(기하 도형/지리) 형식 지원을 위한 공급자와 독립적인 서비스 API입니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.Spatial.DbSpatialServices" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.AsBinary(System.Data.Entity.Spatial.DbGeography)">
      <summary>지정된 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 값의 잘 알려진 이진 표현을 가져옵니다.</summary>
      <returns>지정된 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 값의 잘 알려진 이진 표현입니다.</returns>
      <param name="geographyValue">잘 알려진 이진 표현을 생성해야 하는 지리 값입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" />가 null인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" />가 이 공간 서비스 구현과 호환되지 않는 경우</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.AsBinary(System.Data.Entity.Spatial.DbGeometry)">
      <summary>지정된 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 값의 잘 알려진 이진 표현을 가져옵니다.</summary>
      <returns>지정된 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 값의 잘 알려진 이진 표현입니다.</returns>
      <param name="geometryValue">잘 알려진 이진 표현을 생성해야 하는 기하 도형 값입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" />가 null인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" />가 이 공간 서비스 구현과 호환되지 않는 경우</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.AsGml(System.Data.Entity.Spatial.DbGeography)">
      <summary>이 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 값의 GML(Geography Markup Language) 표현을 생성합니다.</summary>
      <returns>이 DbGeography 값의 GML 표현을 포함하는 문자열입니다.</returns>
      <param name="geographyValue">GML을 생성해야 하는 지리 값입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" />가 null인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" />가 이 공간 서비스 구현과 호환되지 않는 경우</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.AsGml(System.Data.Entity.Spatial.DbGeometry)">
      <summary>이 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 값의 GML(Geography Markup Language) 표현을 생성합니다.</summary>
      <returns>이 DbGeometry 값의 GML 표현을 포함하는 문자열입니다.</returns>
      <param name="geometryValue">GML을 생성해야 하는 기하 도형 값입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" />가 null인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" />가 이 공간 서비스 구현과 호환되지 않는 경우</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.AsText(System.Data.Entity.Spatial.DbGeography)">
      <summary>지정된 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 값의 잘 알려진 텍스트 표현을 가져옵니다.이 값에는 점의 경도와 위도만 포함되어야 합니다.</summary>
      <returns>geographyValue의 잘 알려진 텍스트 표현을 포함하는 문자열입니다.</returns>
      <param name="geographyValue">잘 알려진 텍스트를 생성해야 하는 지리 값입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" />가 null인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" />가 이 공간 서비스 구현과 호환되지 않는 경우</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.AsText(System.Data.Entity.Spatial.DbGeometry)">
      <summary>점의 X 및 Y 좌표만 포함하여 주어진 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 값의 잘 알려진 텍스트 표현을 가져옵니다.</summary>
      <returns>geometryValue의 잘 알려진 텍스트 표현을 포함하는 문자열입니다.</returns>
      <param name="geometryValue">잘 알려진 텍스트를 생성해야 하는 기하 도형 값입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" />가 null인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" />가 이 공간 서비스 구현과 호환되지 않는 경우</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.AsTextIncludingElevationAndMeasure(System.Data.Entity.Spatial.DbGeography)">
      <summary>고도와 측정값이 있는 <see cref="T:System.Data.Entity.Spatial.DbSpatialServices" />의 텍스트 표현을 반환합니다.</summary>
      <returns>
        <see cref="T:System.Data.Entity.Spatial.DbSpatialServices" />의 텍스트 표현입니다.</returns>
      <param name="geographyValue">지리 값입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" />가 null인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" />가 이 공간 서비스 구현과 호환되지 않는 경우</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.AsTextIncludingElevationAndMeasure(System.Data.Entity.Spatial.DbGeometry)">
      <summary>고도와 측정값이 있는 <see cref="T:System.Data.Entity.Spatial.DbSpatialServices" />의 텍스트 표현을 반환합니다.</summary>
      <returns>고도와 측정값이 있는 <see cref="T:System.Data.Entity.Spatial.DbSpatialServices" />의 텍스트 표현입니다.</returns>
      <param name="geometryValue">기하 도형 값입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" />가 null인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" />가 이 공간 서비스 구현과 호환되지 않는 경우</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.Buffer(System.Data.Entity.Spatial.DbGeography,System.Double)">
      <summary>지정된 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 값에서 distance보다 작거나 같은 거리 안에 있는 모든 점을 나타내는 지리 값을 만듭니다.</summary>
      <returns>geographyValue에서 distance보다 작거나 같은 거리 안에 있는 모든 점을 나타내는 새 DbGeography 값입니다.</returns>
      <param name="geographyValue">지리 값입니다.</param>
      <param name="distance">geographyValue에서 버퍼까지의 거리를 지정하는 double 값입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" />가 null인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" />가 이 공간 서비스 구현과 호환되지 않는 경우</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.Buffer(System.Data.Entity.Spatial.DbGeometry,System.Double)">
      <summary>지정된 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 값에서 distance보다 작거나 같은 거리 안에 있는 모든 점을 나타내는 기하 도형 값을 만듭니다.</summary>
      <returns>geometryValue에서 distance보다 작거나 같은 거리 안에 있는 모든 점을 나타내는 새 DbGeometry 값입니다.</returns>
      <param name="geometryValue">기하 도형 값입니다.</param>
      <param name="distance">geometryValue에서 버퍼까지의 거리를 지정하는 double 값입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" />가 null인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" />가 이 공간 서비스 구현과 호환되지 않는 경우</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.Contains(System.Data.Entity.Spatial.DbGeometry,System.Data.Entity.Spatial.DbGeometry)">
      <summary>하나의 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 값이 다른 값을 공간적으로 포함하는지 여부를 확인합니다.</summary>
      <returns>geometryValue에 otherGeometry가 포함되어 있으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="geometryValue">첫 번째 기하 도형 값입니다.</param>
      <param name="otherGeometry">두 번째 기하 도형 값입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> 또는 <paramref name="otherGeometry" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> 또는 <paramref name="otherGeometry" />가 이 공간 서비스 구현과 호환되지 않는 경우</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.CreateGeography(System.Data.Entity.Spatial.DbSpatialServices,System.Object)">
      <summary>이 메서드는 지정된 공급자 값의 유효성을 검사하여 이 값을 <see cref="M:System.Data.Entity.Spatial.DbSpatialServices.GeographyFromProviderValue(System.Object)" />의 파생된 구현에 사용할 수 있는지 확인한 후 해당 파생된 구현에 사용해야 합니다.</summary>
      <returns>지정된 providerValue를 포함하고 지정된 spatialServices를 공간 구현으로 사용하는 새 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 인스턴스입니다.</returns>
      <param name="spatialServices">반환된 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 값이 공간 기능의 구현에 따라 달라지는 공간 서비스 인스턴스입니다.</param>
      <param name="providerValue">공급자 값입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.CreateGeometry(System.Data.Entity.Spatial.DbSpatialServices,System.Object)">
      <summary>이 메서드는 지정된 공급자 값의 유효성을 검사하여 이 값을 <see cref="M:System.Data.Entity.Spatial.DbSpatialServices.GeometryFromProviderValue(System.Object)" />의 파생된 구현에 사용할 수 있는지 확인한 후 해당 파생된 구현에 사용해야 합니다.</summary>
      <returns>지정된 providerValue를 포함하고 지정된 spatialServices를 공간 구현으로 사용하는 새 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 인스턴스입니다.</returns>
      <param name="spatialServices">반환된 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 값이 공간 기능의 구현에 따라 달라지는 공간 서비스 인스턴스입니다.</param>
      <param name="providerValue">공급자 값입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.CreateProviderValue(System.Data.Entity.Spatial.DbGeographyWellKnownValue)">
      <summary>지정된 잘 알려진 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 표현을 기반으로 이 공간 서비스 구현과 호환되는 공급자별 값을 만듭니다.</summary>
      <returns>이 공간 서비스 구현과 호환되는 방식으로 wellKnownValue에 포함된 정보를 인코딩하는 공급자별 값입니다.</returns>
      <param name="wellKnownValue">지리 값의 잘 알려진 표현을 포함하는 <see cref="T:System.Data.Entity.Spatial.DbGeographyWellKnownValue" />의 인스턴스입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.CreateProviderValue(System.Data.Entity.Spatial.DbGeometryWellKnownValue)">
      <summary>지정된 잘 알려진 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 표현을 기반으로 이 공간 서비스 구현과 호환되는 공급자별 값을 만듭니다.</summary>
      <returns>이 공간 서비스 구현과 호환되는 방식으로 wellKnownValue에 포함된 정보를 인코딩하는 공급자별 값입니다.</returns>
      <param name="wellKnownValue">기하 도형 값의 잘 알려진 표현을 포함하는 <see cref="T:System.Data.Entity.Spatial.DbGeometryWellKnownValue" />의 인스턴스입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.CreateWellKnownValue(System.Data.Entity.Spatial.DbGeography)">
      <summary>잘 알려진 표준 공간 형식 중 하나 또는 둘 다를 사용하여 지정된 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 값을 나타내는 <see cref="T:System.Data.Entity.Spatial.DbGeographyWellKnownValue" />의 인스턴스를 만듭니다.</summary>
      <returns>새 <see cref="T:System.Data.Entity.Spatial.DbGeographyWellKnownValue" />로 나타낸 geographyValue의 잘 알려진 표현입니다.</returns>
      <param name="geographyValue">지리 값입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" />가 null인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" />가 이 공간 서비스 구현과 호환되지 않는 경우</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.CreateWellKnownValue(System.Data.Entity.Spatial.DbGeometry)">
      <summary>잘 알려진 표준 공간 형식 중 하나 또는 둘 다를 사용하여 지정된 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 값을 나타내는 <see cref="T:System.Data.Entity.Spatial.DbGeometryWellKnownValue" />의 인스턴스를 만듭니다.</summary>
      <returns>새 <see cref="T:System.Data.Entity.Spatial.DbGeometryWellKnownValue" />로 나타낸 geometryValue의 잘 알려진 표현입니다.</returns>
      <param name="geometryValue">기하 도형 값입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" />가 null인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" />가 이 공간 서비스 구현과 호환되지 않는 경우</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.Crosses(System.Data.Entity.Spatial.DbGeometry,System.Data.Entity.Spatial.DbGeometry)">
      <summary>주어진 두 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 값이 공간적으로 가로지르는지 여부를 확인합니다.</summary>
      <returns>geometryValue가 otherGeometry를 가로지르면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="geometryValue">첫 번째 기하 도형 값입니다.</param>
      <param name="otherGeometry">두 번째 기하 도형 값입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> 또는 <paramref name="otherGeometry" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> 또는 <paramref name="otherGeometry" />가 이 공간 서비스 구현과 호환되지 않는 경우</exception>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbSpatialServices.Default">
      <summary>
        <see cref="T:System.Data.Entity.Spatial.DbSpatialServices" />의 기본 서비스를 가져옵니다.</summary>
      <returns>기본 서비스입니다.</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.Difference(System.Data.Entity.Spatial.DbGeography,System.Data.Entity.Spatial.DbGeography)">
      <summary>두 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 값의 차이를 계산합니다.</summary>
      <returns>geographyValue 및 otherGeography의 차이를 나타내는 새 DbGeography 값입니다.</returns>
      <param name="geographyValue">첫 번째 지리 값입니다.</param>
      <param name="otherGeography">두 번째 지리 값입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" /> 또는 <paramref name="otherGeography" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" /> 또는 <paramref name="otherGeography" />가 이 공간 서비스 구현과 호환되지 않는 경우</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.Difference(System.Data.Entity.Spatial.DbGeometry,System.Data.Entity.Spatial.DbGeometry)">
      <summary>두 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 값의 차이를 계산합니다.</summary>
      <returns>geometryValue 및 otherGeometry의 차이를 나타내는 새 DbGeometry 값입니다.</returns>
      <param name="geometryValue">첫 번째 기하 도형 값입니다.</param>
      <param name="otherGeometry">두 번째 기하 도형 값입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> 또는 <paramref name="otherGeometry" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> 또는 <paramref name="otherGeometry" />가 이 공간 서비스 구현과 호환되지 않는 경우</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.Disjoint(System.Data.Entity.Spatial.DbGeography,System.Data.Entity.Spatial.DbGeography)">
      <summary>주어진 두 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 값이 공간적으로 분리되어 있는지 여부를 확인합니다.</summary>
      <returns>geographyValue가 otherGeography와 연결되어 있지 않으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="geographyValue">분리되어 있는지 비교할 첫 번째 지리 값입니다.</param>
      <param name="otherGeography">분리되어 있는지 비교할 두 번째 지리 값입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" /> 또는 <paramref name="otherGeography" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" /> 또는 <paramref name="otherGeography" />가 이 공간 서비스 구현과 호환되지 않는 경우</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.Disjoint(System.Data.Entity.Spatial.DbGeometry,System.Data.Entity.Spatial.DbGeometry)">
      <summary>주어진 두 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 값이 공간적으로 분리되어 있는지 여부를 확인합니다.</summary>
      <returns>geometryValue가 otherGeometry와 연결되어 있지 않으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="geometryValue">분리되어 있는지 비교할 첫 번째 기하 도형 값입니다.</param>
      <param name="otherGeometry">분리되어 있는지 비교할 두 번째 기하 도형 값입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> 또는 <paramref name="otherGeometry" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> 또는 <paramref name="otherGeometry" />가 이 공간 서비스 구현과 호환되지 않는 경우</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.Distance(System.Data.Entity.Spatial.DbGeography,System.Data.Entity.Spatial.DbGeography)">
      <summary>두 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 값에서 가장 가까운 점 사이의 거리를 계산합니다.</summary>
      <returns>geographyValue 및 otherGeography에서 가장 가까운 두 점 사이의 거리를 지정하는 double 값입니다.</returns>
      <param name="geographyValue">첫 번째 지리 값입니다.</param>
      <param name="otherGeography">두 번째 지리 값입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" /> 또는 <paramref name="otherGeography" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" /> 또는 <paramref name="otherGeography" />가 이 공간 서비스 구현과 호환되지 않는 경우</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.Distance(System.Data.Entity.Spatial.DbGeometry,System.Data.Entity.Spatial.DbGeometry)">
      <summary>두 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 값에서 가장 가까운 점 사이의 거리를 계산합니다.</summary>
      <returns>geometryValue 및 otherGeometry에서 가장 가까운 두 점 사이의 거리를 지정하는 double 값입니다.</returns>
      <param name="geometryValue">첫 번째 기하 도형 값입니다.</param>
      <param name="otherGeometry">두 번째 기하 도형 값입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> 또는 <paramref name="otherGeometry" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> 또는 <paramref name="otherGeometry" />가 이 공간 서비스 구현과 호환되지 않는 경우</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.ElementAt(System.Data.Entity.Spatial.DbGeography,System.Int32)">
      <summary>지리 컬렉션을 나타내는 경우 지정된 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 값의 요소를 반환합니다.</summary>
      <returns>geographyValue가 다른 지리 값의 컬렉션을 나타내면 index 위치에 있는 geographyValue의 요소이고, 그렇지 않으면 null입니다.</returns>
      <param name="geographyValue">지리 컬렉션을 나타낼 필요가 없는 지리 값입니다.</param>
      <param name="index">요소를 가져와야 하는 지리 값 내의 위치입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" />가 null인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" />가 이 공간 서비스 구현과 호환되지 않는 경우</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.ElementAt(System.Data.Entity.Spatial.DbGeometry,System.Int32)">
      <summary>기하 도형 컬렉션을 나타내는 경우 지정된 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 값의 요소를 반환합니다.</summary>
      <returns>geometryValue가 다른 기하 도형 값의 컬렉션을 나타내면 index 위치에 있는 geometryValue의 요소이고, 그렇지 않으면 null입니다.</returns>
      <param name="geometryValue">기하 도형 컬렉션을 나타낼 필요가 없는 기하 도형 값입니다.</param>
      <param name="index">요소를 가져와야 하는 기하 도형 값 내의 위치입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" />가 null인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" />가 이 공간 서비스 구현과 호환되지 않는 경우</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeographyCollectionFromBinary(System.Byte[],System.Int32)">
      <summary>지정된 잘 알려진 이진 값과 SRID(좌표계 식별자)를 기반으로 새 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 컬렉션 값을 만듭니다.</summary>
      <returns>지정된 SRID(좌표계 식별자)(<see cref="P:System.Data.Entity.Spatial.DbGeography.DefaultCoordinateSystemId" />)를 사용하여 잘 알려진 이진 값으로 정의된 새 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 값입니다.</returns>
      <param name="geographyCollectionWellKnownBinary">지리 값의 잘 알려진 이진 표현을 포함하는 바이트 배열입니다.</param>
      <param name="coordinateSystemId">새 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 값이 사용해야 하는 좌표계의 식별자입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeographyCollectionFromText(System.String,System.Int32)">
      <summary>지정된 잘 알려진 텍스트 값과 SRID(좌표계 식별자)를 기반으로 새 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 컬렉션 값을 만듭니다.</summary>
      <returns>지정된 SRID(좌표계 식별자)(<see cref="P:System.Data.Entity.Spatial.DbGeography.DefaultCoordinateSystemId" />)를 사용하여 잘 알려진 텍스트 값으로 정의된 새 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 값입니다.</returns>
      <param name="geographyCollectionWellKnownText">지리 값의 잘 알려진 텍스트 표현을 포함하는 문자열입니다.</param>
      <param name="coordinateSystemId">새 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 값이 사용해야 하는 좌표계의 식별자입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeographyFromBinary(System.Byte[])">
      <summary>지정된 잘 알려진 이진 값을 기반으로 새 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 값을 만듭니다.</summary>
      <returns>기본 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> SRID(좌표계 식별자)(<see cref="P:System.Data.Entity.Spatial.DbGeography.DefaultCoordinateSystemId" />)를 사용하여 잘 알려진 이진 값으로 정의된 새 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 값입니다.</returns>
      <param name="wellKnownBinary">지리 값의 잘 알려진 이진 표현을 포함하는 바이트 배열입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeographyFromBinary(System.Byte[],System.Int32)">
      <summary>지정된 잘 알려진 이진 값과 SRID(좌표계 식별자)를 기반으로 새 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 값을 만듭니다.</summary>
      <returns>지정된 SRID(좌표계 식별자)(<see cref="P:System.Data.Entity.Spatial.DbGeography.DefaultCoordinateSystemId" />)를 사용하여 잘 알려진 이진 값으로 정의된 새 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 값입니다.</returns>
      <param name="wellKnownBinary">지리 값의 잘 알려진 이진 표현을 포함하는 바이트 배열입니다.</param>
      <param name="coordinateSystemId">새 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 값이 사용해야 하는 좌표계의 식별자입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeographyFromGml(System.String)">
      <summary>지정된 GML(Geography Markup Language) 값을 기반으로 새 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 값을 만듭니다.</summary>
      <returns>기본 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> SRID(좌표계 식별자)(<see cref="P:System.Data.Entity.Spatial.DbGeography.DefaultCoordinateSystemId" />)를 사용하여 GML 값으로 정의된 새 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 값입니다.</returns>
      <param name="geographyMarkup">지리 값의 GML(Geometry Markup Language) 표현을 포함하는 문자열입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeographyFromGml(System.String,System.Int32)">
      <summary>지정된 GML(Geography Markup Language) 값과 SRID(좌표계 식별자)를 기반으로 새 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 값을 만듭니다.</summary>
      <returns>지정된 SRID(좌표계 식별자)를 사용하여 GML 값으로 정의된 새 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 값입니다.</returns>
      <param name="geographyMarkup">지리 값의 GML(Geometry Markup Language) 표현을 포함하는 문자열입니다.</param>
      <param name="coordinateSystemId">새 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 값이 사용해야 하는 좌표계의 식별자입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeographyFromProviderValue(System.Object)">
      <summary>이 공간 서비스 구현과 호환되는 공급자별 값을 기반으로 새 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 값을 만듭니다.</summary>
      <returns>이 공간 서비스 구현과 지정된 공급자 값이 지원하는 새 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 값입니다.</returns>
      <param name="providerValue">이 공간 서비스 구현이 지리 값으로 해석할 수 있는 공급자별 값입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="providerValue" />가 null인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="providerValue" />가 이 공간 서비스 구현과 호환되지 않는 경우</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeographyFromText(System.String)">
      <summary>지정된 잘 알려진 텍스트 값을 기반으로 새 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 값을 만듭니다.</summary>
      <returns>기본 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> SRID(좌표계 식별자)(<see cref="P:System.Data.Entity.Spatial.DbGeography.DefaultCoordinateSystemId" />)를 사용하여 잘 알려진 텍스트 값으로 정의된 새 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 값입니다.</returns>
      <param name="wellKnownText">지리 값의 잘 알려진 텍스트 표현을 포함하는 문자열입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeographyFromText(System.String,System.Int32)">
      <summary>지정된 잘 알려진 텍스트 값과 SRID(좌표계 식별자)를 기반으로 새 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 값을 만듭니다.</summary>
      <returns>지정된 SRID(좌표계 식별자)(<see cref="P:System.Data.Entity.Spatial.DbGeography.DefaultCoordinateSystemId" />)를 사용하여 잘 알려진 텍스트 값으로 정의된 새 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 값입니다.</returns>
      <param name="wellKnownText">지리 값의 잘 알려진 텍스트 표현을 포함하는 문자열입니다.</param>
      <param name="coordinateSystemId">새 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 값이 사용해야 하는 좌표계의 식별자입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeographyLineFromBinary(System.Byte[],System.Int32)">
      <summary>지정된 잘 알려진 이진 값과 SRID(좌표계 식별자)를 기반으로 새 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 선 값을 만듭니다.</summary>
      <returns>지정된 SRID(좌표계 식별자)(<see cref="P:System.Data.Entity.Spatial.DbGeography.DefaultCoordinateSystemId" />)를 사용하여 잘 알려진 이진 값으로 정의된 새 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 값입니다.</returns>
      <param name="lineWellKnownBinary">지리 값의 잘 알려진 이진 표현을 포함하는 바이트 배열입니다.</param>
      <param name="coordinateSystemId">새 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 값이 사용해야 하는 좌표계의 식별자입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeographyLineFromText(System.String,System.Int32)">
      <summary>지정된 잘 알려진 텍스트 값과 SRID(좌표계 식별자)를 기반으로 새 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 선 값을 만듭니다.</summary>
      <returns>지정된 SRID(좌표계 식별자)(<see cref="P:System.Data.Entity.Spatial.DbGeography.DefaultCoordinateSystemId" />)를 사용하여 잘 알려진 텍스트 값으로 정의된 새 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 값입니다.</returns>
      <param name="lineWellKnownText">지리 값의 잘 알려진 텍스트 표현을 포함하는 문자열입니다.</param>
      <param name="coordinateSystemId">새 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 값이 사용해야 하는 좌표계의 식별자입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeographyMultiLineFromBinary(System.Byte[],System.Int32)">
      <summary>지정된 잘 알려진 이진 값과 좌표계 식별자를 기반으로 새 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 다중 선 값을 만듭니다.</summary>
      <returns>새로운 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 다중 선 값입니다.</returns>
      <param name="multiLineWellKnownBinary">잘 알려진 이진 값입니다.</param>
      <param name="coordinateSystemId">좌표계 식별자입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeographyMultiLineFromText(System.String,System.Int32)">
      <summary>지정된 잘 알려진 텍스트 값과 좌표계 식별자를 기반으로 새 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 다중 선 값을 만듭니다.</summary>
      <returns>새로운 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 다중 선 값입니다.</returns>
      <param name="multiLineWellKnownText">잘 알려진 텍스트 값입니다.</param>
      <param name="coordinateSystemId">좌표계 식별자입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeographyMultiPointFromBinary(System.Byte[],System.Int32)">
      <summary>지정된 잘 알려진 이진 값과 좌표계 식별자를 기반으로 새 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 다중 점 값을 만듭니다.</summary>
      <returns>새로운 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 다중 점 값입니다.</returns>
      <param name="multiPointWellKnownBinary">잘 알려진 이진 값입니다.</param>
      <param name="coordinateSystemId">좌표계 식별자입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeographyMultiPointFromText(System.String,System.Int32)">
      <summary>지정된 잘 알려진 텍스트 값과 좌표계 식별자를 기반으로 새 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 다중 점 값을 만듭니다.</summary>
      <returns>새로운 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 다중 점 값입니다.</returns>
      <param name="multiPointWellKnownText">잘 알려진 텍스트 값입니다.</param>
      <param name="coordinateSystemId">좌표계 식별자입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeographyMultiPolygonFromBinary(System.Byte[],System.Int32)">
      <summary>지정된 잘 알려진 이진 값과 좌표계 식별자를 기반으로 새 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 다중 다각형 값을 만듭니다.</summary>
      <returns>새로운 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 다중 다각형 값입니다.</returns>
      <param name="multiPolygonWellKnownBinary">잘 알려진 이진 값입니다.</param>
      <param name="coordinateSystemId">좌표계 식별자입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeographyMultiPolygonFromText(System.String,System.Int32)">
      <summary>지정된 잘 알려진 텍스트 값과 좌표계 식별자를 기반으로 새 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 다중 다각형 값을 만듭니다.</summary>
      <returns>새로운 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 다중 다각형 값입니다.</returns>
      <param name="multiPolygonWellKnownText">잘 알려진 텍스트 값입니다.</param>
      <param name="coordinateSystemId">좌표계 식별자입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeographyPointFromBinary(System.Byte[],System.Int32)">
      <summary>지정된 잘 알려진 이진 값과 SRID(좌표계 식별자)를 기반으로 새 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 점 값을 만듭니다.</summary>
      <returns>지정된 SRID(좌표계 식별자)(<see cref="P:System.Data.Entity.Spatial.DbGeography.DefaultCoordinateSystemId" />)를 사용하여 잘 알려진 이진 값으로 정의된 새 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 값입니다.</returns>
      <param name="pointWellKnownBinary">지리 값의 잘 알려진 이진 표현을 포함하는 바이트 배열입니다.</param>
      <param name="coordinateSystemId">새 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 값이 사용해야 하는 좌표계의 식별자입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeographyPointFromText(System.String,System.Int32)">
      <summary>지정된 잘 알려진 텍스트 값과 SRID(좌표계 식별자)를 기반으로 새 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 점 값을 만듭니다.</summary>
      <returns>지정된 SRID(좌표계 식별자)(<see cref="P:System.Data.Entity.Spatial.DbGeography.DefaultCoordinateSystemId" />)를 사용하여 잘 알려진 텍스트 값으로 정의된 새 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 값입니다.</returns>
      <param name="pointWellKnownText">지리 값의 잘 알려진 텍스트 표현을 포함하는 문자열입니다.</param>
      <param name="coordinateSystemId">새 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 값이 사용해야 하는 좌표계의 식별자입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeographyPolygonFromBinary(System.Byte[],System.Int32)">
      <summary>지정된 잘 알려진 이진 값과 SRID(좌표계 식별자)를 기반으로 새 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 다각형 값을 만듭니다.</summary>
      <returns>지정된 SRID(좌표계 식별자)(<see cref="P:System.Data.Entity.Spatial.DbGeography.DefaultCoordinateSystemId" />)를 사용하여 잘 알려진 이진 값으로 정의된 새 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 값입니다.</returns>
      <param name="polygonWellKnownBinary">지리 값의 잘 알려진 이진 표현을 포함하는 바이트 배열입니다.</param>
      <param name="coordinateSystemId">새 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 값이 사용해야 하는 좌표계의 식별자입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeographyPolygonFromText(System.String,System.Int32)">
      <summary>지정된 잘 알려진 텍스트 값과 SRID(좌표계 식별자)를 기반으로 새 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 다각형 값을 만듭니다.</summary>
      <returns>지정된 SRID(좌표계 식별자)(<see cref="P:System.Data.Entity.Spatial.DbGeography.DefaultCoordinateSystemId" />)를 사용하여 잘 알려진 텍스트 값으로 정의된 새 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 값입니다.</returns>
      <param name="polygonWellKnownText">지리 값의 잘 알려진 텍스트 표현을 포함하는 문자열입니다.</param>
      <param name="coordinateSystemId">새 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 값이 사용해야 하는 좌표계의 식별자입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeometryCollectionFromBinary(System.Byte[],System.Int32)">
      <summary>지정된 잘 알려진 이진 값과 SRID(좌표계 식별자)를 기반으로 새 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 컬렉션 값을 만듭니다.</summary>
      <returns>지정된 SRID(좌표계 식별자)(<see cref="P:System.Data.Entity.Spatial.DbGeometry.DefaultCoordinateSystemId" />)를 사용하여 잘 알려진 이진 값으로 정의된 새 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 값입니다.</returns>
      <param name="geometryCollectionWellKnownBinary">기하 도형 값의 잘 알려진 이진 표현을 포함하는 바이트 배열입니다.</param>
      <param name="coordinateSystemId">새 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 값이 사용해야 하는 좌표계의 식별자입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeometryCollectionFromText(System.String,System.Int32)">
      <summary>지정된 잘 알려진 텍스트 값과 SRID(좌표계 식별자)를 기반으로 새 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 컬렉션 값을 만듭니다.</summary>
      <returns>지정된 SRID(좌표계 식별자)(<see cref="P:System.Data.Entity.Spatial.DbGeometry.DefaultCoordinateSystemId" />)를 사용하여 잘 알려진 텍스트 값으로 정의된 새 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 값입니다.</returns>
      <param name="geometryCollectionWellKnownText">기하 도형 값의 잘 알려진 텍스트 표현을 포함하는 문자열입니다.</param>
      <param name="coordinateSystemId">새 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 값이 사용해야 하는 좌표계의 식별자입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeometryFromBinary(System.Byte[])">
      <summary>지정된 잘 알려진 이진 값을 기반으로 새 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 값을 만듭니다.</summary>
      <returns>기본 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> SRID(좌표계 식별자)(<see cref="P:System.Data.Entity.Spatial.DbGeometry.DefaultCoordinateSystemId" />)를 사용하여 잘 알려진 이진 값으로 정의된 새 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 값입니다.</returns>
      <param name="wellKnownBinary">기하 도형 값의 잘 알려진 이진 표현을 포함하는 바이트 배열입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeometryFromBinary(System.Byte[],System.Int32)">
      <summary>지정된 잘 알려진 이진 값과 SRID(좌표계 식별자)를 기반으로 새 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 값을 만듭니다.</summary>
      <returns>지정된 SRID(좌표계 식별자)(<see cref="P:System.Data.Entity.Spatial.DbGeometry.DefaultCoordinateSystemId" />)를 사용하여 잘 알려진 이진 값으로 정의된 새 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 값입니다.</returns>
      <param name="wellKnownBinary">기하 도형 값의 잘 알려진 이진 표현을 포함하는 바이트 배열입니다.</param>
      <param name="coordinateSystemId">새 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 값이 사용해야 하는 좌표계의 식별자입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeometryFromGml(System.String)">
      <summary>지정된 GML(Geography Markup Language) 값을 기반으로 새 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 값을 만듭니다.</summary>
      <returns>기본 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> SRID(좌표계 식별자)(<see cref="P:System.Data.Entity.Spatial.DbGeometry.DefaultCoordinateSystemId" />)를 사용하여 GML 값으로 정의된 새 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 값입니다.</returns>
      <param name="geometryMarkup">기하 도형 값의 GML(Geography Markup Language) 표현을 포함하는 문자열입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeometryFromGml(System.String,System.Int32)">
      <summary>지정된 GML(Geography Markup Language) 값과 SRID(좌표계 식별자)를 기반으로 새 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 값을 만듭니다.</summary>
      <returns>지정된 SRID(좌표계 식별자)를 사용하여 GML 값으로 정의된 새 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 값입니다.</returns>
      <param name="geometryMarkup">기하 도형 값의 GML(Geography Markup Language) 표현을 포함하는 문자열입니다.</param>
      <param name="coordinateSystemId">새 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 값이 사용해야 하는 좌표계의 식별자입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeometryFromProviderValue(System.Object)">
      <summary>이 공간 서비스 구현과 호환되는 공급자별 값을 기반으로 새 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 값을 만듭니다.</summary>
      <returns>이 공간 서비스 구현과 지정된 공급자 값이 지원하는 새 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 값입니다.</returns>
      <param name="providerValue">이 공간 서비스 구현이 기하 도형 값으로 해석할 수 있는 공급자별 값입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="providerValue" />가 null인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="providerValue" />가 이 공간 서비스 구현과 호환되지 않는 경우</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeometryFromText(System.String)">
      <summary>지정된 잘 알려진 텍스트 값을 기반으로 새 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 값을 만듭니다.</summary>
      <returns>기본 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> SRID(좌표계 식별자)(<see cref="P:System.Data.Entity.Spatial.DbGeometry.DefaultCoordinateSystemId" />)를 사용하여 잘 알려진 텍스트 값으로 정의된 새 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 값입니다.</returns>
      <param name="wellKnownText">기하 도형 값의 잘 알려진 텍스트 표현을 포함하는 문자열입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeometryFromText(System.String,System.Int32)">
      <summary>지정된 잘 알려진 텍스트 값과 SRID(좌표계 식별자)를 기반으로 새 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 값을 만듭니다.</summary>
      <returns>지정된 SRID(좌표계 식별자)(<see cref="P:System.Data.Entity.Spatial.DbGeometry.DefaultCoordinateSystemId" />)를 사용하여 잘 알려진 텍스트 값으로 정의된 새 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 값입니다.</returns>
      <param name="wellKnownText">기하 도형 값의 잘 알려진 텍스트 표현을 포함하는 문자열입니다.</param>
      <param name="coordinateSystemId">새 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 값이 사용해야 하는 좌표계의 식별자입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeometryLineFromBinary(System.Byte[],System.Int32)">
      <summary>지정된 잘 알려진 이진 값과 SRID(좌표계 식별자)를 기반으로 새 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 선 값을 만듭니다.</summary>
      <returns>지정된 SRID(좌표계 식별자)(<see cref="P:System.Data.Entity.Spatial.DbGeometry.DefaultCoordinateSystemId" />)를 사용하여 잘 알려진 이진 값으로 정의된 새 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 값입니다.</returns>
      <param name="lineWellKnownBinary">기하 도형 값의 잘 알려진 이진 표현을 포함하는 바이트 배열입니다.</param>
      <param name="coordinateSystemId">새 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 값이 사용해야 하는 좌표계의 식별자입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeometryLineFromText(System.String,System.Int32)">
      <summary>지정된 잘 알려진 텍스트 값과 SRID(좌표계 식별자)를 기반으로 새 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 선 값을 만듭니다.</summary>
      <returns>지정된 SRID(좌표계 식별자)(<see cref="P:System.Data.Entity.Spatial.DbGeometry.DefaultCoordinateSystemId" />)를 사용하여 잘 알려진 텍스트 값으로 정의된 새 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 값입니다.</returns>
      <param name="lineWellKnownText">기하 도형 값의 잘 알려진 텍스트 표현을 포함하는 문자열입니다.</param>
      <param name="coordinateSystemId">새 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 값이 사용해야 하는 좌표계의 식별자입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeometryMultiLineFromBinary(System.Byte[],System.Int32)">
      <summary>지정된 잘 알려진 이진 값과 좌표계 식별자를 기반으로 새 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 다중 선 값을 만듭니다.</summary>
      <returns>새로운 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 다중 선 값입니다.</returns>
      <param name="multiLineWellKnownBinary">잘 알려진 이진 값입니다.</param>
      <param name="coordinateSystemId">좌표계 식별자입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeometryMultiLineFromText(System.String,System.Int32)">
      <summary>지정된 잘 알려진 텍스트 값과 좌표계 식별자를 기반으로 새 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 다중 선 값을 만듭니다.</summary>
      <returns>새로운 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 다중 선 값입니다.</returns>
      <param name="multiLineWellKnownText">잘 알려진 텍스트 값입니다.</param>
      <param name="coordinateSystemId">좌표계 식별자입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeometryMultiPointFromBinary(System.Byte[],System.Int32)">
      <summary>지정된 잘 알려진 이진 값과 좌표계 식별자를 기반으로 새 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 다중 점 값을 만듭니다.</summary>
      <returns>새로운 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 다중 점 값입니다.</returns>
      <param name="multiPointWellKnownBinary">잘 알려진 이진 값입니다.</param>
      <param name="coordinateSystemId">좌표계 식별자입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeometryMultiPointFromText(System.String,System.Int32)">
      <summary>지정된 잘 알려진 텍스트 값과 좌표계 식별자를 기반으로 새 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 다중 점 값을 만듭니다.</summary>
      <returns>새로운 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 다중 점 값입니다.</returns>
      <param name="multiPointWellKnownText">잘 알려진 텍스트 값입니다.</param>
      <param name="coordinateSystemId">좌표계 식별자입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeometryMultiPolygonFromBinary(System.Byte[],System.Int32)">
      <summary>지정된 잘 알려진 이진 값과 좌표계 식별자를 기반으로 새 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 다중 다각형 값을 만듭니다.</summary>
      <returns>새로운 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 다중 다각형 값입니다.</returns>
      <param name="multiPolygonWellKnownBinary">잘 알려진 이진 값입니다.</param>
      <param name="coordinateSystemId">좌표계 식별자입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeometryMultiPolygonFromText(System.String,System.Int32)">
      <summary>지정된 잘 알려진 텍스트 값과 좌표계 식별자를 기반으로 새 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 다중 다각형 값을 만듭니다.</summary>
      <returns>새로운 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 다중 다각형 값입니다.</returns>
      <param name="multiPolygonKnownText">잘 알려진 텍스트 값입니다.</param>
      <param name="coordinateSystemId">좌표계 식별자입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeometryPointFromBinary(System.Byte[],System.Int32)">
      <summary>지정된 잘 알려진 이진 값과 SRID(좌표계 식별자)를 기반으로 새 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 점 값을 만듭니다.</summary>
      <returns>지정된 SRID(좌표계 식별자)(<see cref="P:System.Data.Entity.Spatial.DbGeometry.DefaultCoordinateSystemId" />)를 사용하여 잘 알려진 이진 값으로 정의된 새 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 값입니다.</returns>
      <param name="pointWellKnownBinary">기하 도형 값의 잘 알려진 이진 표현을 포함하는 바이트 배열입니다.</param>
      <param name="coordinateSystemId">새 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 값이 사용해야 하는 좌표계의 식별자입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeometryPointFromText(System.String,System.Int32)">
      <summary>지정된 잘 알려진 텍스트 값과 SRID(좌표계 식별자)를 기반으로 새 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 점 값을 만듭니다.</summary>
      <returns>지정된 SRID(좌표계 식별자)(<see cref="P:System.Data.Entity.Spatial.DbGeometry.DefaultCoordinateSystemId" />)를 사용하여 잘 알려진 텍스트 값으로 정의된 새 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 값입니다.</returns>
      <param name="pointWellKnownText">기하 도형 값의 잘 알려진 텍스트 표현을 포함하는 문자열입니다.</param>
      <param name="coordinateSystemId">새 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 값이 사용해야 하는 좌표계의 식별자입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeometryPolygonFromBinary(System.Byte[],System.Int32)">
      <summary>지정된 잘 알려진 이진 값과 SRID(좌표계 식별자)를 기반으로 새 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 다각형 값을 만듭니다.</summary>
      <returns>지정된 SRID(좌표계 식별자)(<see cref="P:System.Data.Entity.Spatial.DbGeometry.DefaultCoordinateSystemId" />)를 사용하여 잘 알려진 이진 값으로 정의된 새 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 값입니다.</returns>
      <param name="polygonWellKnownBinary">기하 도형 값의 잘 알려진 이진 표현을 포함하는 바이트 배열입니다.</param>
      <param name="coordinateSystemId">새 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 값이 사용해야 하는 좌표계의 식별자입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeometryPolygonFromText(System.String,System.Int32)">
      <summary>지정된 잘 알려진 텍스트 값과 SRID(좌표계 식별자)를 기반으로 새 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 다각형 값을 만듭니다.</summary>
      <returns>지정된 SRID(좌표계 식별자)(<see cref="P:System.Data.Entity.Spatial.DbGeometry.DefaultCoordinateSystemId" />)를 사용하여 잘 알려진 텍스트 값으로 정의된 새 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 값입니다.</returns>
      <param name="polygonWellKnownText">기하 도형 값의 잘 알려진 텍스트 표현을 포함하는 문자열입니다.</param>
      <param name="coordinateSystemId">새 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 값이 사용해야 하는 좌표계의 식별자입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetArea(System.Data.Entity.Spatial.DbGeography)">
      <summary>지정된 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 값의 영역을 나타내는 null 허용 부울 값을 반환합니다. 이 값이 표면을 나타내지 않는 경우 null일 수 있습니다.</summary>
      <returns>지정된 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 값의 영역을 나타내는 null 허용 double 값입니다.</returns>
      <param name="geographyValue">표면을 나타낼 필요가 없는 지리 값입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" />가 null인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" />가 이 공간 서비스 구현과 호환되지 않는 경우</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetArea(System.Data.Entity.Spatial.DbGeometry)">
      <summary>지정된 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 값의 영역을 나타내는 null 허용 부울 값을 반환합니다. 이 값이 표면을 나타내지 않는 경우 null일 수 있습니다.</summary>
      <returns>지정된 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 값의 영역을 나타내는 null 허용 double 값입니다.</returns>
      <param name="geometryValue">표면을 나타낼 필요가 없는 기하 도형 값입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" />가 null인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" />가 이 공간 서비스 구현과 호환되지 않는 경우</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetBoundary(System.Data.Entity.Spatial.DbGeometry)">
      <summary>지정된 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 값의 경계를 나타내는 null 허용 double 값을 반환합니다.</summary>
      <returns>지정된 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 값의 경계입니다.</returns>
      <param name="geometryValue">기하 도형 값입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" />가 null인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" />가 이 공간 서비스 구현과 호환되지 않는 경우</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetCentroid(System.Data.Entity.Spatial.DbGeometry)">
      <summary>지정된 DbGeography 값의 중심을 나타내는 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 값을 반환합니다. 이 값이 표면을 나타내지 않는 경우 null일 수 있습니다.</summary>
      <returns>geometryValue가 표면을 나타내면 geometryValue의 중앙이고, 그렇지 않으면 null입니다.</returns>
      <param name="geometryValue">표면을 나타낼 필요가 없는 기하 도형 값입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" />가 null인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" />가 이 공간 서비스 구현과 호환되지 않는 경우</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetConvexHull(System.Data.Entity.Spatial.DbGeometry)">
      <summary>지정된 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 값의 볼록 다각형을 나타내는 null 허용 double 값을 반환합니다.</summary>
      <returns>지정된 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 값의 볼록 다각형입니다.</returns>
      <param name="geometryValue">기하 도형 값입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" />가 null인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" />가 이 공간 서비스 구현과 호환되지 않는 경우</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetCoordinateSystemId(System.Data.Entity.Spatial.DbGeography)">
      <summary>지정된 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 값의 좌표계 식별자를 반환합니다.</summary>
      <returns>지정된 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 값의 좌표계 식별자입니다.</returns>
      <param name="geographyValue">지리 값입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" />가 null인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" />가 이 공간 서비스 구현과 호환되지 않는 경우</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetCoordinateSystemId(System.Data.Entity.Spatial.DbGeometry)">
      <summary>지정된 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 값의 좌표계 식별자를 반환합니다.</summary>
      <returns>지정된 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 값의 좌표계 식별자입니다.</returns>
      <param name="geometryValue">기하 도형 값입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" />가 null인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" />가 이 공간 서비스 구현과 호환되지 않는 경우</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetDimension(System.Data.Entity.Spatial.DbGeography)">
      <summary>지정된 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 값의 크기를 가져오거나, 값이 컬렉션인 경우에는 가장 큰 요소 크기를 가져옵니다.</summary>
      <returns>geographyValue의 크기이거나, <see cref="T:System.Data.Entity.Spatial.DbGeography" />가 컬렉션인 경우 가장 큰 요소 크기입니다.</returns>
      <param name="geographyValue">크기 값을 검색해야 하는 지리 값입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" />가 null인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" />가 이 공간 서비스 구현과 호환되지 않는 경우</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetDimension(System.Data.Entity.Spatial.DbGeometry)">
      <summary>지정된 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 값의 크기를 가져오거나, 값이 컬렉션인 경우에는 가장 큰 요소 크기를 가져옵니다.</summary>
      <returns>geometryValue의 크기이거나, <see cref="T:System.Data.Entity.Spatial.DbGeometry" />가 컬렉션인 경우 가장 큰 요소 크기입니다.</returns>
      <param name="geometryValue">크기 값을 검색해야 하는 기하 도형 값입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetElementCount(System.Data.Entity.Spatial.DbGeography)">
      <summary>지정된 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 값이 지리 컬렉션을 나타내는 경우 해당 값의 요소 수를 반환합니다.</summary>
      <returns>geographyValue가 다른 지리 값의 컬렉션을 나타내면 geographyValue의 요소 수이고, 그렇지 않으면 null입니다.</returns>
      <param name="geographyValue">지리 컬렉션을 나타낼 필요가 없는 지리 값입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" />가 null인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" />가 이 공간 서비스 구현과 호환되지 않는 경우</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetElementCount(System.Data.Entity.Spatial.DbGeometry)">
      <summary>지정된 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 값이 기하 도형 컬렉션을 나타내는 경우 해당 값의 요소 수를 반환합니다.</summary>
      <returns>geometryValue가 다른 기하 도형 값의 컬렉션을 나타내면 geometryValue의 요소 수이고, 그렇지 않으면 null입니다.</returns>
      <param name="geometryValue">기하 도형 컬렉션을 나타낼 필요가 없는 기하 도형 값입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" />가 null인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" />가 이 공간 서비스 구현과 호환되지 않는 경우</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetElevation(System.Data.Entity.Spatial.DbGeography)">
      <summary>지정된 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 값이 점을 나타내는 경우 해당 값의 고도(Z 좌표)를 반환합니다.</summary>
      <returns>geographyValue가 점을 나타내면 geographyValue의 고도(Z 좌표)이고, 그렇지 않으면 null입니다.</returns>
      <param name="geographyValue">점을 나타낼 필요가 없는 지리 값입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" />가 null인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" />가 이 공간 서비스 구현과 호환되지 않는 경우</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetElevation(System.Data.Entity.Spatial.DbGeometry)">
      <summary>지정된 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 값이 점을 나타내는 경우 해당 값의 고도(Z)를 반환합니다.</summary>
      <returns>geometryValue가 점을 나타내는 경우 geometryValue의 고도(Z)이고, 그렇지 않으면 null입니다.</returns>
      <param name="geometryValue">점을 나타낼 필요가 없는 기하 도형 값입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" />가 null인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" />가 이 공간 서비스 구현과 호환되지 않는 경우</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetEndPoint(System.Data.Entity.Spatial.DbGeography)">
      <summary>지정된 DbGeography 값의 끝점을 나타내는 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 값을 반환합니다. 이 값이 곡선을 나타내지 않는 경우 null일 수 있습니다.</summary>
      <returns>geographyValue가 곡선을 나타내면 geographyValue의 끝점이고, 그렇지 않으면 null입니다.</returns>
      <param name="geographyValue">곡선을 나타낼 필요가 없는 지리 값입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" />가 null인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" />가 이 공간 서비스 구현과 호환되지 않는 경우</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetEndPoint(System.Data.Entity.Spatial.DbGeometry)">
      <summary>지정된 DbGeometry 값의 끝점을 나타내는 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 값을 반환합니다. 이 값이 곡선을 나타내지 않는 경우 null일 수 있습니다.</summary>
      <returns>geometryValue가 곡선을 나타내면 geometryValue의 끝점이고, 그렇지 않으면 null입니다.</returns>
      <param name="geometryValue">곡선을 나타낼 필요가 없는 기하 도형 값입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" />가 null인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" />가 이 공간 서비스 구현과 호환되지 않는 경우</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetEnvelope(System.Data.Entity.Spatial.DbGeometry)">
      <summary>지정된 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 값의 포락선(최소 경계 상자)을 기하 도형 값으로 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 값으로 나타낸 geometryValue의 포락선입니다.</returns>
      <param name="geometryValue">포락선 값을 검색해야 하는 기하 도형 값입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" />가 null인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" />가 이 공간 서비스 구현과 호환되지 않는 경우</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetExteriorRing(System.Data.Entity.Spatial.DbGeometry)">
      <summary>지정된 DbGeometry 값의 외부 링을 나타내는 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 값을 반환합니다. 이 값이 다각형을 나타내지 않는 경우 null일 수 있습니다.</summary>
      <returns>geometryValue가 다각형을 나타내면 geometryValue에서 바깥쪽 링을 나타내는 DbGeometry 값이고, 그렇지 않으면 null입니다.</returns>
      <param name="geometryValue">다각형을 나타낼 필요가 없는 기하 도형 값입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" />가 null인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" />가 이 공간 서비스 구현과 호환되지 않는 경우</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetInteriorRingCount(System.Data.Entity.Spatial.DbGeometry)">
      <summary>지정된 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 값이 다각형을 나타내는 경우 해당 값의 내부 링 수를 반환합니다.</summary>
      <returns>geometryValue가 다각형을 나타내면 geometryValue의 요소 수이고, 그렇지 않으면 null입니다.</returns>
      <param name="geometryValue">다각형을 나타낼 필요가 없는 기하 도형 값입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" />가 null인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" />가 이 공간 서비스 구현과 호환되지 않는 경우</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetIsClosed(System.Data.Entity.Spatial.DbGeography)">
      <summary>지정된 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 값이 닫혀 있는지 여부를 나타내는 null 허용 부울 값을 반환합니다. 이 값이 곡선을 나타내지 않는 경우 null일 수 있습니다.</summary>
      <returns>지정된 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 값이 닫혀 있으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="geographyValue">곡선을 나타낼 필요가 없는 지리 값입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" />가 null인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" />가 이 공간 서비스 구현과 호환되지 않는 경우</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetIsClosed(System.Data.Entity.Spatial.DbGeometry)">
      <summary>지정된 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 값이 닫혀 있는지 여부를 나타내는 null 허용 부울 값을 반환합니다. 이 값이 곡선을 나타내지 않는 경우 null일 수 있습니다.</summary>
      <returns>지정된 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 값이 닫혀 있으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="geometryValue">곡선을 나타낼 필요가 없는 기하 도형 값입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" />가 null인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" />가 이 공간 서비스 구현과 호환되지 않는 경우</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetIsEmpty(System.Data.Entity.Spatial.DbGeography)">
      <summary>지정된 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 값이 비어 있는지 여부를 나타내는 null 허용 부울 값을 반환합니다.</summary>
      <returns>지정된 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 값이 비어 있으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="geographyValue">지리 값입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" />가 null인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" />가 이 공간 서비스 구현과 호환되지 않는 경우</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetIsEmpty(System.Data.Entity.Spatial.DbGeometry)">
      <summary>지정된 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 값이 비어 있는지 여부를 나타내는 null 허용 부울 값을 반환합니다.</summary>
      <returns>지정된 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 값이 비어 있으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="geometryValue">기하 도형 값입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" />가 null인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" />가 이 공간 서비스 구현과 호환되지 않는 경우</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetIsRing(System.Data.Entity.Spatial.DbGeometry)">
      <summary>지정된 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 값이 링인지 여부를 나타내는 null 허용 부울 값을 반환합니다. 이 값이 곡선을 나타내지 않는 경우 null일 수 있습니다.</summary>
      <returns>지정된 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 값이 링이면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="geometryValue">곡선을 나타낼 필요가 없는 기하 도형 값입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" />가 null인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" />가 이 공간 서비스 구현과 호환되지 않는 경우</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetIsSimple(System.Data.Entity.Spatial.DbGeometry)">
      <summary>지정된 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 값이 단순한지 여부를 나타내는 null 허용 부울 값을 반환합니다.</summary>
      <returns>지정된 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 값이 단순하면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="geometryValue">기하 도형 값입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" />가 null인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" />가 이 공간 서비스 구현과 호환되지 않는 경우</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetIsValid(System.Data.Entity.Spatial.DbGeometry)">
      <summary>지정된 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 값이 올바른지 여부를 나타내는 null 허용 부울 값을 반환합니다.</summary>
      <returns>지정된 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 값이 올바르면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="geometryValue">기하 도형 값입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" />가 null인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" />가 이 공간 서비스 구현과 호환되지 않는 경우</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetLatitude(System.Data.Entity.Spatial.DbGeography)">
      <summary>지정된 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 값이 점을 나타내는 경우 해당 값의 위도 좌표를 반환합니다.</summary>
      <returns>지정된 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 값의 위도 좌표입니다.</returns>
      <param name="geographyValue">점을 나타낼 필요가 없는 지리 값입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" />가 null인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" />가 이 공간 서비스 구현과 호환되지 않는 경우</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetLength(System.Data.Entity.Spatial.DbGeography)">
      <summary>지정된 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 값의 길이를 나타내는 null 허용 double 값을 반환합니다. 이 값이 곡선을 나타내지 않는 경우 null일 수 있습니다.</summary>
      <returns>지정된 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 값의 길이입니다.</returns>
      <param name="geographyValue">곡선을 나타낼 필요가 없는 지리 값입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" />가 null인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" />가 이 공간 서비스 구현과 호환되지 않는 경우</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetLength(System.Data.Entity.Spatial.DbGeometry)">
      <summary>지정된 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 값의 길이를 나타내는 null 허용 double 값을 반환합니다. 이 값이 곡선을 나타내지 않는 경우 null일 수 있습니다.</summary>
      <returns>지정된 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 값의 길이입니다.</returns>
      <param name="geometryValue">곡선을 나타낼 필요가 없는 기하 도형 값입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" />가 null인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" />가 이 공간 서비스 구현과 호환되지 않는 경우</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetLongitude(System.Data.Entity.Spatial.DbGeography)">
      <summary>지정된 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 값이 점을 나타내는 경우 해당 값의 경도 좌표를 반환합니다.</summary>
      <returns>지정된 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 값의 경도 좌표입니다.</returns>
      <param name="geographyValue">점을 나타낼 필요가 없는 지리 값입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" />가 null인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" />가 이 공간 서비스 구현과 호환되지 않는 경우</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetMeasure(System.Data.Entity.Spatial.DbGeography)">
      <summary>지정된 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 값이 점을 나타내는 경우 해당 값의 M(측정값) 좌표를 반환합니다.</summary>
      <returns>지정된 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 값의 M(측정값) 좌표계입니다.</returns>
      <param name="geographyValue">점을 나타낼 필요가 없는 지리 값입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" />가 null인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" />가 이 공간 서비스 구현과 호환되지 않는 경우</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetMeasure(System.Data.Entity.Spatial.DbGeometry)">
      <summary>지정된 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 값이 점을 나타내는 경우 해당 값의 M(측정값) 좌표를 반환합니다.</summary>
      <returns>지정된 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 값의 M(측정값) 좌표계입니다.</returns>
      <param name="geometryValue">점을 나타낼 필요가 없는 기하 도형 값입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" />가 null인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" />가 이 공간 서비스 구현과 호환되지 않는 경우</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetPointCount(System.Data.Entity.Spatial.DbGeography)">
      <summary>지정된 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 값이 선 문자열 또는 선형 링을 나타내는 경우 해당 값의 점 수를 반환합니다.</summary>
      <returns>지정된 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 값의 점 수입니다.</returns>
      <param name="geographyValue">선 문자열 또는 선형 링을 나타낼 필요가 없는 지리 값입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" />가 null인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" />가 이 공간 서비스 구현과 호환되지 않는 경우</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetPointCount(System.Data.Entity.Spatial.DbGeometry)">
      <summary>지정된 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 값이 선 문자열 또는 선형 링을 나타내는 경우 해당 값의 점 수를 반환합니다.</summary>
      <returns>지정된 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 값의 점 수입니다.</returns>
      <param name="geometryValue">선 문자열 또는 선형 링을 나타낼 필요가 없는 기하 도형 값입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" />가 null인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" />가 이 공간 서비스 구현과 호환되지 않는 경우</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetPointOnSurface(System.Data.Entity.Spatial.DbGeometry)">
      <summary>지정된 DbGeography 값의 표면에서 점을 나타내는 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 값을 반환합니다. 이 값이 표면을 나타내지 않는 경우 null일 수 있습니다.</summary>
      <returns>지정된 DbGeometry 값의 표면에 있는 점을 나타내는 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 값입니다.</returns>
      <param name="geometryValue">표면을 나타낼 필요가 없는 기하 도형 값입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" />가 null인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" />가 이 공간 서비스 구현과 호환되지 않는 경우</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetSpatialTypeName(System.Data.Entity.Spatial.DbGeography)">
      <summary>지정된 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 값의 공간 형식 이름을 나타내는 값을 반환합니다.</summary>
      <returns>지정된 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 값의 공간 형식 이름입니다.</returns>
      <param name="geographyValue">지리 값입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" />가 null인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" />가 이 공간 서비스 구현과 호환되지 않는 경우</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetSpatialTypeName(System.Data.Entity.Spatial.DbGeometry)">
      <summary>지정된 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 값의 공간 형식 이름을 나타내는 값을 반환합니다.</summary>
      <returns>지정된 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 값의 공간 형식 이름입니다.</returns>
      <param name="geometryValue">기하 도형 값입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" />가 null인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" />가 이 공간 서비스 구현과 호환되지 않는 경우</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetStartPoint(System.Data.Entity.Spatial.DbGeography)">
      <summary>지정된 DbGeography 값의 시작점을 나타내는 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 값을 반환합니다. 이 값이 곡선을 나타내지 않는 경우 null일 수 있습니다.</summary>
      <returns>지정된 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 값의 시작점입니다.</returns>
      <param name="geographyValue">곡선을 나타낼 필요가 없는 지리 값입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" />가 null인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" />가 이 공간 서비스 구현과 호환되지 않는 경우</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetStartPoint(System.Data.Entity.Spatial.DbGeometry)">
      <summary>지정된 DbGeometry 값의 시작점을 나타내는 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 값을 반환합니다. 이 값이 곡선을 나타내지 않는 경우 null일 수 있습니다.</summary>
      <returns>지정된 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 값의 시작점입니다.</returns>
      <param name="geometryValue">곡선을 나타낼 필요가 없는 기하 도형 값입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" />가 null인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" />가 이 공간 서비스 구현과 호환되지 않는 경우</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetXCoordinate(System.Data.Entity.Spatial.DbGeometry)">
      <summary>지정된 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 값이 점을 나타내는 경우 해당 값의 X 좌표를 반환합니다.</summary>
      <returns>지정된 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 값의 X 좌표입니다.</returns>
      <param name="geometryValue">점을 나타낼 필요가 없는 기하 도형 값입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" />가 null인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" />가 이 공간 서비스 구현과 호환되지 않는 경우</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetYCoordinate(System.Data.Entity.Spatial.DbGeometry)">
      <summary>지정된 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 값이 점을 나타내는 경우 해당 값의 Y 좌표를 반환합니다.</summary>
      <returns>지정된 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 값의 Y 좌표입니다.</returns>
      <param name="geometryValue">점을 나타낼 필요가 없는 기하 도형 값입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" />가 null인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" />가 이 공간 서비스 구현과 호환되지 않는 경우</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.InteriorRingAt(System.Data.Entity.Spatial.DbGeometry,System.Int32)">
      <summary>지정된 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 값이 다각형을 나타내는 경우 해당 값에서 내부 링을 반환합니다.</summary>
      <returns>geometryValue가 다각형을 나타내면 index 위치에 있는 geometryValue의 내부 링이고, 그렇지 않으면 null입니다.</returns>
      <param name="geometryValue">다각형을 나타낼 필요가 없는 기하 도형 값입니다.</param>
      <param name="index">요소를 가져와야 하는 기하 도형 값 내의 위치입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" />가 null인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" />가 이 공간 서비스 구현과 호환되지 않는 경우</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.Intersection(System.Data.Entity.Spatial.DbGeography,System.Data.Entity.Spatial.DbGeography)">
      <summary>두 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 값의 교집합을 계산합니다.</summary>
      <returns>geographyValue 및 otherGeography의 교집합을 나타내는 새 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 값입니다.</returns>
      <param name="geographyValue">첫 번째 지리 값입니다.</param>
      <param name="otherGeography">두 번째 지리 값입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" /> 또는 <paramref name="otherGeography" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" /> 또는 <paramref name="otherGeography" />가 이 공간 서비스 구현과 호환되지 않는 경우</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.Intersection(System.Data.Entity.Spatial.DbGeometry,System.Data.Entity.Spatial.DbGeometry)">
      <summary>두 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 값의 교집합을 계산합니다.</summary>
      <returns>geometryValue 및 otherGeometry의 교집합을 나타내는 새 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 값입니다.</returns>
      <param name="geometryValue">첫 번째 기하 도형 값입니다.</param>
      <param name="otherGeometry">두 번째 기하 도형 값입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> 또는 <paramref name="otherGeometry" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> 또는 <paramref name="otherGeometry" />가 이 공간 서비스 구현과 호환되지 않는 경우</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.Intersects(System.Data.Entity.Spatial.DbGeography,System.Data.Entity.Spatial.DbGeography)">
      <summary>주어진 두 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 값이 공간적으로 교차하는지 여부를 확인합니다.</summary>
      <returns>geographyValue가 otherGeography와 교차하면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="geographyValue">교차하는지 비교할 첫 번째 지리 값입니다.</param>
      <param name="otherGeography">교차하는지 비교할 두 번째 지리 값입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" /> 또는 <paramref name="otherGeography" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" /> 또는 <paramref name="otherGeography" />가 이 공간 서비스 구현과 호환되지 않는 경우</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.Intersects(System.Data.Entity.Spatial.DbGeometry,System.Data.Entity.Spatial.DbGeometry)">
      <summary>주어진 두 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 값이 공간적으로 교차하는지 여부를 확인합니다.</summary>
      <returns>geometryValue가 otherGeometry와 교차하면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="geometryValue">교차하는지 비교할 첫 번째 기하 도형 값입니다.</param>
      <param name="otherGeometry">교차하는지 비교할 두 번째 기하 도형 값입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> 또는 <paramref name="otherGeometry" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> 또는 <paramref name="otherGeometry" />가 이 공간 서비스 구현과 호환되지 않는 경우</exception>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbSpatialServices.NativeTypesAvailable">
      <summary>공간 공급자가 제대로 작동하는 데 필요한 네이티브 형식이나 다른 리소스를 사용할 수 없는 경우 공간 공급자에서 빠른 오류가 발생할 수 있도록 이 속성을 재정의합니다.기본값은 true이며, 공급자에서 빠른 오류가 발생하지 않고 필요한 형식/리소스가 있음을 가정하고 EF가 계속됨을 의미합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.Overlaps(System.Data.Entity.Spatial.DbGeometry,System.Data.Entity.Spatial.DbGeometry)">
      <summary>주어진 두 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 값이 공간적으로 겹치는지 여부를 확인합니다.</summary>
      <returns>geometryValue가 otherGeometry와 겹치면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="geometryValue">첫 번째 기하 도형 값입니다.</param>
      <param name="otherGeometry">두 번째 기하 도형 값입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> 또는 <paramref name="otherGeometry" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> 또는 <paramref name="otherGeometry" />가 이 공간 서비스 구현과 호환되지 않는 경우</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.PointAt(System.Data.Entity.Spatial.DbGeography,System.Int32)">
      <summary>지정된 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 값이 선 문자열 또는 선형 링을 나타내는 경우 해당 값의 점 요소를 반환합니다.</summary>
      <returns>geographyValue가 선 문자열 또는 선형 링을 나타내면 index 위치에 있는 geographyValue의 점이고, 그렇지 않으면 null입니다.</returns>
      <param name="geographyValue">선 문자열 또는 선형 링을 나타낼 필요가 없는 지리 값입니다.</param>
      <param name="index">요소를 가져와야 하는 지리 값 내의 위치입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" />가 null인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" />가 이 공간 서비스 구현과 호환되지 않는 경우</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.PointAt(System.Data.Entity.Spatial.DbGeometry,System.Int32)">
      <summary>지정된 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 값이 선 문자열 또는 선형 링을 나타내는 경우 해당 값의 점 요소를 반환합니다.</summary>
      <returns>geometryValue가 선 문자열 또는 선형 링을 나타내면 index 위치에 있는 geometryValue의 점이고, 그렇지 않으면 null입니다.</returns>
      <param name="geometryValue">선 문자열 또는 선형 링을 나타낼 필요가 없는 기하 도형 값입니다.</param>
      <param name="index">요소를 가져와야 하는 기하 도형 값 내의 위치입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" />가 null인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" />가 이 공간 서비스 구현과 호환되지 않는 경우</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.Relate(System.Data.Entity.Spatial.DbGeometry,System.Data.Entity.Spatial.DbGeometry,System.String)">
      <summary>지정된 두 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 값이 주어진 DE-9IM(Dimensionally Extended Nine-Intersection Model) 교차 패턴에 따라 공간적으로 관련되어 있는지 여부를 확인합니다.</summary>
      <returns>지정된 교차 패턴 매트릭스에 따라 이 geometryValue 값이 otherGeometry와 관련이 있으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="geometryValue">첫 번째 기하 도형 값입니다.</param>
      <param name="otherGeometry">관계가 있는지 첫 번째 기하 도형 값과 비교해야 하는 기하 도형 값입니다.</param>
      <param name="matrix">관계를 정의하는 DE 9IM 교차 패턴의 텍스트 표현을 포함하는 문자열입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" />, <paramref name="otherGeometry" /> 또는 <paramref name="matrix" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> 또는 <paramref name="otherGeometry" />가 이 공간 서비스 구현과 호환되지 않는 경우</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.SpatialEquals(System.Data.Entity.Spatial.DbGeography,System.Data.Entity.Spatial.DbGeography)">
      <summary>주어진 두 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 값이 공간적으로 같은지 여부를 확인합니다.</summary>
      <returns>geographyValue가 otherGeography와 공간적으로 동일하면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="geographyValue">같은지 비교할 첫 번째 지리 값입니다.</param>
      <param name="otherGeography">같은지 비교할 두 번째 지리 값입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" /> 또는 <paramref name="otherGeography" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" /> 또는 <paramref name="otherGeography" />가 이 공간 서비스 구현과 호환되지 않는 경우</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.SpatialEquals(System.Data.Entity.Spatial.DbGeometry,System.Data.Entity.Spatial.DbGeometry)">
      <summary>주어진 두 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 값이 공간적으로 같은지 여부를 확인합니다.</summary>
      <returns>geometryValue가 otherGeometry와 공간적으로 동일하면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="geometryValue">같은지 비교할 첫 번째 기하 도형 값입니다.</param>
      <param name="otherGeometry">같은지 비교할 두 번째 기하 도형 값입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> 또는 <paramref name="otherGeometry" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> 또는 <paramref name="otherGeometry" />가 이 공간 서비스 구현과 호환되지 않는 경우</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.SymmetricDifference(System.Data.Entity.Spatial.DbGeography,System.Data.Entity.Spatial.DbGeography)">
      <summary>두 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 값의 대칭차를 계산합니다.</summary>
      <returns>geographyValue 및 otherGeography의 대칭차를 나타내는 새 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 값입니다.</returns>
      <param name="geographyValue">첫 번째 지리 값입니다.</param>
      <param name="otherGeography">두 번째 지리 값입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" /> 또는 <paramref name="otherGeography" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" /> 또는 <paramref name="otherGeography" />가 이 공간 서비스 구현과 호환되지 않는 경우</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.SymmetricDifference(System.Data.Entity.Spatial.DbGeometry,System.Data.Entity.Spatial.DbGeometry)">
      <summary>두 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 값 간의 대칭차를 계산합니다.</summary>
      <returns>geometryValue 및 otherGeometry의 대칭차를 나타내는 새 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 값입니다.</returns>
      <param name="geometryValue">첫 번째 기하 도형 값입니다.</param>
      <param name="otherGeometry">두 번째 기하 도형 값입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> 또는 <paramref name="otherGeometry" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> 또는 <paramref name="otherGeometry" />가 이 공간 서비스 구현과 호환되지 않는 경우</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.Touches(System.Data.Entity.Spatial.DbGeometry,System.Data.Entity.Spatial.DbGeometry)">
      <summary>주어진 두 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 값이 공간적으로 접하는지 여부를 확인합니다.</summary>
      <returns>geometryValue가 otherGeometry에 닿으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="geometryValue">첫 번째 기하 도형 값입니다.</param>
      <param name="otherGeometry">두 번째 기하 도형 값입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> 또는 <paramref name="otherGeometry" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> 또는 <paramref name="otherGeometry" />가 이 공간 서비스 구현과 호환되지 않는 경우</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.Union(System.Data.Entity.Spatial.DbGeography,System.Data.Entity.Spatial.DbGeography)">
      <summary>두 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 값의 합집합을 계산합니다.</summary>
      <returns>geographyValue 및 otherGeography의 합집합을 나타내는 새 <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 값입니다.</returns>
      <param name="geographyValue">첫 번째 지리 값입니다.</param>
      <param name="otherGeography">두 번째 지리 값입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" /> 또는 <paramref name="otherGeography" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" /> 또는 <paramref name="otherGeography" />가 이 공간 서비스 구현과 호환되지 않는 경우</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.Union(System.Data.Entity.Spatial.DbGeometry,System.Data.Entity.Spatial.DbGeometry)">
      <summary>두 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 값의 합집합을 계산합니다.</summary>
      <returns>geometryValue 및 otherGeometry의 합집합을 나타내는 새 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 값입니다.</returns>
      <param name="geometryValue">첫 번째 기하 도형 값입니다.</param>
      <param name="otherGeometry">두 번째 기하 도형 값입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> 또는 <paramref name="otherGeometry" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> 또는 <paramref name="otherGeometry" />가 이 공간 서비스 구현과 호환되지 않는 경우</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.Within(System.Data.Entity.Spatial.DbGeometry,System.Data.Entity.Spatial.DbGeometry)">
      <summary>하나의 <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 값이 공간적으로 다른 값 안에 있는지 여부를 확인합니다.</summary>
      <returns>geometryValue가 otherGeometry 안에 있으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="geometryValue">첫 번째 기하 도형 값입니다.</param>
      <param name="otherGeometry">두 번째 기하 도형 값입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> 또는 <paramref name="otherGeometry" />가 null입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> 또는 <paramref name="otherGeometry" />가 이 공간 서비스 구현과 호환되지 않는 경우</exception>
    </member>
    <member name="T:System.Data.Entity.Validation.DbEntityValidationException">
      <summary>엔터티 유효성 검사가 실패할 때 <see cref="M:System.Data.Entity.DbContext.SaveChanges" />에서 throw되는 예외입니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Validation.DbEntityValidationException.#ctor">
      <summary>DbEntityValidationException의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Validation.DbEntityValidationException.#ctor(System.String)">
      <summary>DbEntityValidationException의 새 인스턴스를 초기화합니다.</summary>
      <param name="message">예외 메시지입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Validation.DbEntityValidationException.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Data.Entity.Validation.DbEntityValidationResult})">
      <summary>DbEntityValidationException의 새 인스턴스를 초기화합니다.</summary>
      <param name="message">예외 메시지입니다.</param>
      <param name="entityValidationResults">유효성 검사 결과입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Validation.DbEntityValidationException.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Data.Entity.Validation.DbEntityValidationResult},System.Exception)">
      <summary>DbEntityValidationException의 새 인스턴스를 초기화합니다.</summary>
      <param name="message">예외 메시지입니다.</param>
      <param name="entityValidationResults">유효성 검사 결과입니다.</param>
      <param name="innerException">내부 예외입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Validation.DbEntityValidationException.#ctor(System.String,System.Exception)">
      <summary>DbEntityValidationException의 새 인스턴스를 초기화합니다.</summary>
      <param name="message">예외 메시지입니다.</param>
      <param name="innerException">내부 예외입니다.</param>
    </member>
    <member name="P:System.Data.Entity.Validation.DbEntityValidationException.EntityValidationErrors">
      <summary>유효성 검사 결과입니다.</summary>
    </member>
    <member name="T:System.Data.Entity.Validation.DbEntityValidationResult">
      <summary>단일 엔터티의 유효성 검사 결과를 나타냅니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Validation.DbEntityValidationResult.#ctor(System.Data.Entity.Infrastructure.DbEntityEntry,System.Collections.Generic.IEnumerable{System.Data.Entity.Validation.DbValidationError})">
      <summary>
        <see cref="T:System.Data.Entity.Validation.DbEntityValidationResult" /> 클래스의 인스턴스를 만듭니다.</summary>
      <param name="entry">결과가 적용되는 엔터티 항목입니다.null일 수 없습니다.</param>
      <param name="validationErrors">
        <see cref="T:System.Data.Entity.Validation.DbValidationError" /> 인스턴스의 목록입니다.null일 수 없습니다.엔터티가 유효함을 의미하는 경우 비어 있을 수 있습니다.</param>
    </member>
    <member name="P:System.Data.Entity.Validation.DbEntityValidationResult.Entry">
      <summary>결과가 적용되는 <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" /> 인스턴스를 가져옵니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Validation.DbEntityValidationResult.IsValid">
      <summary>엔터티가 유효한지 여부를 나타내는 표시기를 가져옵니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Validation.DbEntityValidationResult.ValidationErrors">
      <summary>유효성 검사 오류를 가져옵니다.null일 수 없습니다.</summary>
    </member>
    <member name="T:System.Data.Entity.Validation.DbUnexpectedValidationException">
      <summary>유효성 검사 코드에서 예외가 throw될 때 <see cref="M:System.Data.Entity.DbContext.GetValidationErrors" />에서 throw되는 예외입니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Validation.DbUnexpectedValidationException.#ctor">
      <summary>DbUnexpectedValidationException의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Validation.DbUnexpectedValidationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>지정된 serialization 정보와 컨텍스트를 사용하여 DbUnexpectedValidationException의 새 인스턴스를 초기화합니다.</summary>
      <param name="info">serialization 정보입니다.</param>
      <param name="context">스트리밍 컨텍스트입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Validation.DbUnexpectedValidationException.#ctor(System.String)">
      <summary>DbUnexpectedValidationException의 새 인스턴스를 초기화합니다.</summary>
      <param name="message">예외 메시지입니다.</param>
    </member>
    <member name="M:System.Data.Entity.Validation.DbUnexpectedValidationException.#ctor(System.String,System.Exception)">
      <summary>DbUnexpectedValidationException의 새 인스턴스를 초기화합니다.</summary>
      <param name="message">예외 메시지입니다.</param>
      <param name="innerException">내부 예외입니다.</param>
    </member>
    <member name="T:System.Data.Entity.Validation.DbValidationError">
      <summary>유효성 검사 오류입니다.엔터티 또는 속성 수준의 유효성 검사 오류일 수 있습니다.</summary>
    </member>
    <member name="M:System.Data.Entity.Validation.DbValidationError.#ctor(System.String,System.String)">
      <summary>
        <see cref="T:System.Data.Entity.Validation.DbValidationError" />의 인스턴스를 만듭니다.</summary>
      <param name="propertyName">유효하지 않은 속성의 이름입니다.null일 수 있습니다.</param>
      <param name="errorMessage">유효성 검사 오류 메시지입니다.null일 수 있습니다.</param>
    </member>
    <member name="P:System.Data.Entity.Validation.DbValidationError.ErrorMessage">
      <summary>유효성 검사 오류 메시지를 가져옵니다.</summary>
    </member>
    <member name="P:System.Data.Entity.Validation.DbValidationError.PropertyName">
      <summary>유효하지 않은 속성의 이름을 가져옵니다.</summary>
    </member>
  </members>
</doc>